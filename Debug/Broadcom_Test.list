
Broadcom_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018778  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000043a4  08018948  08018948  00028948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ccec  0801ccec  0002ccec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ccf4  0801ccf4  0002ccf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ccf8  0801ccf8  0002ccf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  20000000  0801ccfc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000728  200000b8  0801cdb4  000300b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007e0  0801cdb4  000307e0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000147f4  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002fa0  00000000  00000000  000448dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010e0  00000000  00000000  00047880  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f48  00000000  00000000  00048960  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007fcc  00000000  00000000  000498a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000555b  00000000  00000000  00051874  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000f2  00000000  00000000  00056dcf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e40  00000000  00000000  00056ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018930 	.word	0x08018930

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	08018930 	.word	0x08018930

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <BOARD_ClockInit>:
#include "board/clock_config.h"
#include "driver/cop.h"
extern void SystemClock_Config(void);
/* Initialize the board with clocks. */
void BOARD_ClockInit(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
SystemClock_Config();
 80005c4:	f000 fdf8 	bl	80011b8 <SystemClock_Config>
return STATUS_OK;
 80005c8:	bf00      	nop
}
 80005ca:	bd80      	pop	{r7, pc}

080005cc <COP_Disable>:
/* No watchdog installed */
void COP_Disable(void) {}
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <IRQ_UNLOCK>:
* Can only be executed in Privileged modes.
*
* @return -
*****************************************************************************/
void IRQ_UNLOCK(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
assert(g_irq_lock_ct > 0);
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <IRQ_UNLOCK+0x34>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	dc05      	bgt.n	80005f4 <IRQ_UNLOCK+0x18>
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <IRQ_UNLOCK+0x38>)
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <IRQ_UNLOCK+0x3c>)
 80005ec:	210f      	movs	r1, #15
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <IRQ_UNLOCK+0x40>)
 80005f0:	f017 f81a 	bl	8017628 <__assert_func>
if (--g_irq_lock_ct <= 0)
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <IRQ_UNLOCK+0x34>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	4a05      	ldr	r2, [pc, #20]	; (8000610 <IRQ_UNLOCK+0x34>)
 80005fc:	6013      	str	r3, [r2, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	dc03      	bgt.n	800060a <IRQ_UNLOCK+0x2e>
{
g_irq_lock_ct = 0;
 8000602:	4b03      	ldr	r3, [pc, #12]	; (8000610 <IRQ_UNLOCK+0x34>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000608:	b662      	cpsie	i
__enable_irq();
}
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200000d4 	.word	0x200000d4
 8000614:	08018948 	.word	0x08018948
 8000618:	08018b10 	.word	0x08018b10
 800061c:	0801895c 	.word	0x0801895c

08000620 <IRQ_LOCK>:
* Can only be executed in Privileged modes.
*
* @return -
*****************************************************************************/
void IRQ_LOCK(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
__disable_irq();
g_irq_lock_ct++;
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <IRQ_LOCK+0x1c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <IRQ_LOCK+0x1c>)
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	200000d4 	.word	0x200000d4

08000640 <GPIO_Init>:
* @brief Initializes the GPIO driver and does pin muxing.
* @details Does actually nothing, as all GPIO pins are initialized in
* S2PI_Init().
* @return -
*****************************************************************************/
void GPIO_Init(void) {}
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <S2PI_Init>:
* @param baudRate_Bps The default SPI baud rate in bauds-per-second.
*
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
*****************************************************************************/
status_t S2PI_Init(s2pi_slave_t defaultSlave, uint32_t baudRate_Bps)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
	MX_GPIO_Init();
 8000658:	f000 fd5a 	bl	8001110 <MX_GPIO_Init>
	MX_DMA_Init();
 800065c:	f000 fd20 	bl	80010a0 <MX_DMA_Init>
	MX_SPI2_Init();
 8000660:	f000 fe18 	bl	8001294 <MX_SPI2_Init>
	if (defaultSlave != S2PI_S1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d002      	beq.n	8000670 <S2PI_Init+0x22>
	return ERROR_S2PI_INVALID_SLAVE;
 800066a:	f06f 0336 	mvn.w	r3, #54	; 0x36
 800066e:	e003      	b.n	8000678 <S2PI_Init+0x2a>
	return S2PI_SetBaudRate(baudRate_Bps);
 8000670:	6838      	ldr	r0, [r7, #0]
 8000672:	f000 f811 	bl	8000698 <S2PI_SetBaudRate>
 8000676:	4603      	mov	r3, r0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <S2PI_GetStatus>:
* - #STATUS_IDLE: No SPI transfer or GPIO access is ongoing.
* - #STATUS_BUSY: An SPI transfer is in progress.
* - #STATUS_S2PI_GPIO_MODE: The module is in GPIO mode.
*****************************************************************************/
status_t S2PI_GetStatus(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	return s2pi_.Status;
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <S2PI_GetStatus+0x14>)
 8000686:	681b      	ldr	r3, [r3, #0]
}
 8000688:	4618      	mov	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000

08000698 <S2PI_SetBaudRate>:
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
* - #STATUS_OK on success
* - #ERROR_S2PI_INVALID_BAUD_RATE on invalid baud rate value.
*****************************************************************************/
status_t S2PI_SetBaudRate(uint32_t baudRate_Bps)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	uint32_t prescaler = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
	/* Determine the maximum possible value not greater than baudRate_Bps */
	for (; prescaler < 8; ++prescaler)
 80006a4:	e00a      	b.n	80006bc <S2PI_SetBaudRate+0x24>
	if (SystemCoreClock >> (prescaler + 1) <= baudRate_Bps)
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <S2PI_SetBaudRate+0x54>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3301      	adds	r3, #1
 80006ae:	40da      	lsrs	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d906      	bls.n	80006c4 <S2PI_SetBaudRate+0x2c>
	for (; prescaler < 8; ++prescaler)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b07      	cmp	r3, #7
 80006c0:	d9f1      	bls.n	80006a6 <S2PI_SetBaudRate+0xe>
 80006c2:	e000      	b.n	80006c6 <S2PI_SetBaudRate+0x2e>
	break;
 80006c4:	bf00      	nop
	MODIFY_REG(hspi2.Instance->CR1, SPI_CR1_BR, prescaler << SPI_CR1_BR_Pos);
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <S2PI_SetBaudRate+0x58>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <S2PI_SetBaudRate+0x58>)
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	6812      	ldr	r2, [r2, #0]
 80006d0:	f022 0138 	bic.w	r1, r2, #56	; 0x38
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	00d2      	lsls	r2, r2, #3
 80006d8:	430a      	orrs	r2, r1
 80006da:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000044 	.word	0x20000044
 80006f0:	20000500 	.word	0x20000500

080006f4 <S2PI_SetGPIOMode>:
* @details This is a helper function to switch the modes between SPI and GPIO.
* @param mode The gpio mode: GPIO_MODE_AF_PP for SPI,
* GPIO_MODE_OUTPUT_PP for GPIO.
*****************************************************************************/
static void S2PI_SetGPIOMode(uint32_t mode)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = s2pi_.SpiAlternate;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <S2PI_SetGPIOMode+0x78>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	61fb      	str	r3, [r7, #28]
	/* SPI CLK GPIO pin configuration */
	GPIO_InitStruct.Pin = s2pi_.GPIOs[S2PI_CLK].Pin;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <S2PI_SetGPIOMode+0x78>)
 800070c:	6a1b      	ldr	r3, [r3, #32]
 800070e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = mode;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(s2pi_.GPIOs[S2PI_CLK].Port, &GPIO_InitStruct);
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <S2PI_SetGPIOMode+0x78>)
 8000716:	69db      	ldr	r3, [r3, #28]
 8000718:	f107 020c 	add.w	r2, r7, #12
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f001 ff26 	bl	8002570 <HAL_GPIO_Init>
	/* SPI MOSI GPIO pin configuration */
	GPIO_InitStruct.Pin = s2pi_.GPIOs[S2PI_MOSI].Pin;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <S2PI_SetGPIOMode+0x78>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = mode;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(s2pi_.GPIOs[S2PI_MOSI].Port, &GPIO_InitStruct);
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <S2PI_SetGPIOMode+0x78>)
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	f107 020c 	add.w	r2, r7, #12
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f001 ff19 	bl	8002570 <HAL_GPIO_Init>
	/* SPI MISO GPIO pin configuration */
	GPIO_InitStruct.Pin = s2pi_.GPIOs[S2PI_MISO].Pin;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <S2PI_SetGPIOMode+0x78>)
 8000740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000742:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = (mode == GPIO_MODE_OUTPUT_PP) ? GPIO_MODE_INPUT : mode;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d001      	beq.n	800074e <S2PI_SetGPIOMode+0x5a>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	e000      	b.n	8000750 <S2PI_SetGPIOMode+0x5c>
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(s2pi_.GPIOs[S2PI_MISO].Port, &GPIO_InitStruct);
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <S2PI_SetGPIOMode+0x78>)
 8000754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000756:	f107 020c 	add.w	r2, r7, #12
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f001 ff07 	bl	8002570 <HAL_GPIO_Init>
}
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000

08000770 <S2PI_CaptureGpioControl>:
* release with the #S2PI_ReleaseGpioControl function in order to
* switch back to ordinary SPI functionality.
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
*****************************************************************************/
status_t S2PI_CaptureGpioControl(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	/* Check if something is ongoing. */
	IRQ_LOCK();
 8000776:	f7ff ff53 	bl	8000620 <IRQ_LOCK>
	status_t status = s2pi_.Status;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <S2PI_CaptureGpioControl+0x4c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	607b      	str	r3, [r7, #4]
	if (status != STATUS_IDLE)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <S2PI_CaptureGpioControl+0x1e>
	{
	IRQ_UNLOCK();
 8000786:	f7ff ff29 	bl	80005dc <IRQ_UNLOCK>
	return status;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	e011      	b.n	80007b2 <S2PI_CaptureGpioControl+0x42>
	}
	s2pi_.Status = STATUS_S2PI_GPIO_MODE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <S2PI_CaptureGpioControl+0x4c>)
 8000790:	2233      	movs	r2, #51	; 0x33
 8000792:	601a      	str	r2, [r3, #0]
	IRQ_UNLOCK();
 8000794:	f7ff ff22 	bl	80005dc <IRQ_UNLOCK>
	/* Note: Clock must be HI after capturing */
	HAL_GPIO_WritePin(s2pi_.GPIOs[S2PI_CLK].Port, s2pi_.GPIOs[S2PI_CLK].Pin, GPIO_PIN_SET);
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <S2PI_CaptureGpioControl+0x4c>)
 800079a:	69d8      	ldr	r0, [r3, #28]
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <S2PI_CaptureGpioControl+0x4c>)
 800079e:	6a1b      	ldr	r3, [r3, #32]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	2201      	movs	r2, #1
 80007a4:	4619      	mov	r1, r3
 80007a6:	f002 f86d 	bl	8002884 <HAL_GPIO_WritePin>
	S2PI_SetGPIOMode(GPIO_MODE_OUTPUT_PP);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff ffa2 	bl	80006f4 <S2PI_SetGPIOMode>
	return STATUS_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000000 	.word	0x20000000

080007c0 <S2PI_ReleaseGpioControl>:
* left. Must be called if the pins are captured for GPIO operation via
* the #S2PI_CaptureGpioControl function.
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
*****************************************************************************/
status_t S2PI_ReleaseGpioControl(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	/* Check if something is ongoing. */
	IRQ_LOCK();
 80007c6:	f7ff ff2b 	bl	8000620 <IRQ_LOCK>
	status_t status = s2pi_.Status;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <S2PI_ReleaseGpioControl+0x38>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	607b      	str	r3, [r7, #4]
	if (status != STATUS_S2PI_GPIO_MODE)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b33      	cmp	r3, #51	; 0x33
 80007d4:	d003      	beq.n	80007de <S2PI_ReleaseGpioControl+0x1e>
	{
	IRQ_UNLOCK();
 80007d6:	f7ff ff01 	bl	80005dc <IRQ_UNLOCK>
	return status;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	e008      	b.n	80007f0 <S2PI_ReleaseGpioControl+0x30>
	}
	s2pi_.Status = STATUS_IDLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <S2PI_ReleaseGpioControl+0x38>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
	IRQ_UNLOCK();
 80007e4:	f7ff fefa 	bl	80005dc <IRQ_UNLOCK>
	S2PI_SetGPIOMode(GPIO_MODE_AF_PP);
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff ff83 	bl	80006f4 <S2PI_SetGPIOMode>
	return STATUS_OK;
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000000 	.word	0x20000000

080007fc <S2PI_WriteGpioPin>:
* @param pin The specified S2PI pin.
* @param value The GPIO pin state to write (0 = low, 1 = high).
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
*****************************************************************************/
status_t S2PI_WriteGpioPin(s2pi_slave_t slave, s2pi_pin_t pin, uint32_t value)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	460b      	mov	r3, r1
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	72fb      	strb	r3, [r7, #11]
	/* Check if pin is valid. */
	if (pin > S2PI_IRQ || value > 1)
 800080a:	7afb      	ldrb	r3, [r7, #11]
 800080c:	2b04      	cmp	r3, #4
 800080e:	d802      	bhi.n	8000816 <S2PI_WriteGpioPin+0x1a>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d902      	bls.n	800081c <S2PI_WriteGpioPin+0x20>
	return ERROR_INVALID_ARGUMENT;
 8000816:	f06f 0304 	mvn.w	r3, #4
 800081a:	e01c      	b.n	8000856 <S2PI_WriteGpioPin+0x5a>
	/* Check if in GPIO mode. */
	if(s2pi_.Status != STATUS_S2PI_GPIO_MODE)
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <S2PI_WriteGpioPin+0x64>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b33      	cmp	r3, #51	; 0x33
 8000822:	d002      	beq.n	800082a <S2PI_WriteGpioPin+0x2e>
	return ERROR_S2PI_INVALID_STATE;
 8000824:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8000828:	e015      	b.n	8000856 <S2PI_WriteGpioPin+0x5a>
	HAL_GPIO_WritePin(s2pi_.GPIOs[pin].Port, s2pi_.GPIOs[pin].Pin, value);
 800082a:	7afb      	ldrb	r3, [r7, #11]
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <S2PI_WriteGpioPin+0x64>)
 800082e:	3303      	adds	r3, #3
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	4413      	add	r3, r2
 8000834:	6858      	ldr	r0, [r3, #4]
 8000836:	7afb      	ldrb	r3, [r7, #11]
 8000838:	4a09      	ldr	r2, [pc, #36]	; (8000860 <S2PI_WriteGpioPin+0x64>)
 800083a:	3303      	adds	r3, #3
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4413      	add	r3, r2
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	b29b      	uxth	r3, r3
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	4619      	mov	r1, r3
 800084a:	f002 f81b 	bl	8002884 <HAL_GPIO_WritePin>
	S2PI_GPIO_DELAY();
 800084e:	200a      	movs	r0, #10
 8000850:	f004 fe74 	bl	800553c <Time_DelayUSec>
	return STATUS_OK;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000000 	.word	0x20000000

08000864 <S2PI_ReadGpioPin>:
* @param pin The specified S2PI pin.
* @param value The GPIO pin state to read (0 = low, 1 = high).
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
*****************************************************************************/
status_t S2PI_ReadGpioPin(s2pi_slave_t slave, s2pi_pin_t pin, uint32_t * value)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	460b      	mov	r3, r1
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	72fb      	strb	r3, [r7, #11]
/* Check if pin is valid. */
if (pin > S2PI_IRQ || !value)
 8000872:	7afb      	ldrb	r3, [r7, #11]
 8000874:	2b04      	cmp	r3, #4
 8000876:	d802      	bhi.n	800087e <S2PI_ReadGpioPin+0x1a>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d102      	bne.n	8000884 <S2PI_ReadGpioPin+0x20>
return ERROR_INVALID_ARGUMENT;
 800087e:	f06f 0304 	mvn.w	r3, #4
 8000882:	e01e      	b.n	80008c2 <S2PI_ReadGpioPin+0x5e>
/* Check if in GPIO mode. */
if(s2pi_.Status != STATUS_S2PI_GPIO_MODE)
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <S2PI_ReadGpioPin+0x68>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b33      	cmp	r3, #51	; 0x33
 800088a:	d002      	beq.n	8000892 <S2PI_ReadGpioPin+0x2e>
return ERROR_S2PI_INVALID_STATE;
 800088c:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8000890:	e017      	b.n	80008c2 <S2PI_ReadGpioPin+0x5e>
*value = HAL_GPIO_ReadPin(s2pi_.GPIOs[pin].Port, s2pi_.GPIOs[pin].Pin);
 8000892:	7afb      	ldrb	r3, [r7, #11]
 8000894:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <S2PI_ReadGpioPin+0x68>)
 8000896:	3303      	adds	r3, #3
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	4413      	add	r3, r2
 800089c:	6858      	ldr	r0, [r3, #4]
 800089e:	7afb      	ldrb	r3, [r7, #11]
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <S2PI_ReadGpioPin+0x68>)
 80008a2:	3303      	adds	r3, #3
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	4413      	add	r3, r2
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	4619      	mov	r1, r3
 80008ae:	f001 ffd1 	bl	8002854 <HAL_GPIO_ReadPin>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461a      	mov	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	601a      	str	r2, [r3, #0]
S2PI_GPIO_DELAY();
 80008ba:	200a      	movs	r0, #10
 80008bc:	f004 fe3e 	bl	800553c <Time_DelayUSec>
return STATUS_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000000 	.word	0x20000000

080008d0 <S2PI_CycleCsPin>:
* otherwise the status #STATUS_BUSY is returned.
* @param slave The specified S2PI slave.
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
*****************************************************************************/
status_t S2PI_CycleCsPin(s2pi_slave_t slave)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
/* Check the driver status. */
IRQ_LOCK();
 80008d8:	f7ff fea2 	bl	8000620 <IRQ_LOCK>
status_t status = s2pi_.Status;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <S2PI_CycleCsPin+0x60>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
if ( status != STATUS_IDLE )
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d003      	beq.n	80008f0 <S2PI_CycleCsPin+0x20>
{
IRQ_UNLOCK();
 80008e8:	f7ff fe78 	bl	80005dc <IRQ_UNLOCK>
return status;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	e01a      	b.n	8000926 <S2PI_CycleCsPin+0x56>
}
s2pi_.Status = STATUS_BUSY;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <S2PI_CycleCsPin+0x60>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	601a      	str	r2, [r3, #0]
IRQ_UNLOCK();
 80008f6:	f7ff fe71 	bl	80005dc <IRQ_UNLOCK>
HAL_GPIO_WritePin(s2pi_.GPIOs[S2PI_CS].Port, s2pi_.GPIOs[S2PI_CS].Pin, GPIO_PIN_RESET);
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <S2PI_CycleCsPin+0x60>)
 80008fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <S2PI_CycleCsPin+0x60>)
 8000900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000902:	b29b      	uxth	r3, r3
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	f001 ffbc 	bl	8002884 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(s2pi_.GPIOs[S2PI_CS].Port, s2pi_.GPIOs[S2PI_CS].Pin, GPIO_PIN_SET);
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <S2PI_CycleCsPin+0x60>)
 800090e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <S2PI_CycleCsPin+0x60>)
 8000912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000914:	b29b      	uxth	r3, r3
 8000916:	2201      	movs	r2, #1
 8000918:	4619      	mov	r1, r3
 800091a:	f001 ffb3 	bl	8002884 <HAL_GPIO_WritePin>
s2pi_.Status = STATUS_IDLE;
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <S2PI_CycleCsPin+0x60>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
return STATUS_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000000 	.word	0x20000000

08000934 <S2PI_TransferFrame>:
uint8_t const * txData,
uint8_t * rxData,
size_t frameSize,
s2pi_callback_t callback,
void * callbackData)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
 8000940:	603b      	str	r3, [r7, #0]
/* Verify arguments. */
if (!txData || frameSize == 0 || frameSize >= 0x10000)
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d006      	beq.n	8000956 <S2PI_TransferFrame+0x22>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d003      	beq.n	8000956 <S2PI_TransferFrame+0x22>
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000954:	d302      	bcc.n	800095c <S2PI_TransferFrame+0x28>
return ERROR_INVALID_ARGUMENT;
 8000956:	f06f 0304 	mvn.w	r3, #4
 800095a:	e046      	b.n	80009ea <S2PI_TransferFrame+0xb6>
/* Check the spi slave.*/
if (spi_slave != S2PI_S1)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d002      	beq.n	8000968 <S2PI_TransferFrame+0x34>
return ERROR_S2PI_INVALID_SLAVE;
 8000962:	f06f 0336 	mvn.w	r3, #54	; 0x36
 8000966:	e040      	b.n	80009ea <S2PI_TransferFrame+0xb6>
/* Check the driver status, lock if idle. */
IRQ_LOCK();
 8000968:	f7ff fe5a 	bl	8000620 <IRQ_LOCK>
status_t status = s2pi_.Status;
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <S2PI_TransferFrame+0xc0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	613b      	str	r3, [r7, #16]
if (status != STATUS_IDLE)
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d003      	beq.n	8000980 <S2PI_TransferFrame+0x4c>
{
IRQ_UNLOCK();
 8000978:	f7ff fe30 	bl	80005dc <IRQ_UNLOCK>
return status;
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	e034      	b.n	80009ea <S2PI_TransferFrame+0xb6>
}
s2pi_.Status = STATUS_BUSY;
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <S2PI_TransferFrame+0xc0>)
 8000982:	2202      	movs	r2, #2
 8000984:	601a      	str	r2, [r3, #0]
IRQ_UNLOCK();
 8000986:	f7ff fe29 	bl	80005dc <IRQ_UNLOCK>
/* Set the callback information */
s2pi_.Callback = callback;
 800098a:	4a1a      	ldr	r2, [pc, #104]	; (80009f4 <S2PI_TransferFrame+0xc0>)
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	6093      	str	r3, [r2, #8]
s2pi_.CallbackData = callbackData;
 8000990:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <S2PI_TransferFrame+0xc0>)
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	60d3      	str	r3, [r2, #12]
/* Manually set the chip select (active low) */
HAL_GPIO_WritePin(s2pi_.GPIOs[S2PI_CS].Port, s2pi_.GPIOs[S2PI_CS].Pin, GPIO_PIN_RESET);
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <S2PI_TransferFrame+0xc0>)
 8000998:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <S2PI_TransferFrame+0xc0>)
 800099c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099e:	b29b      	uxth	r3, r3
 80009a0:	2200      	movs	r2, #0
 80009a2:	4619      	mov	r1, r3
 80009a4:	f001 ff6e 	bl	8002884 <HAL_GPIO_WritePin>
HAL_StatusTypeDef hal_error;
/* Lock interrupts to prevent completion interrupt before setup is complete */
IRQ_LOCK();
 80009a8:	f7ff fe3a 	bl	8000620 <IRQ_LOCK>
if (rxData)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d009      	beq.n	80009c6 <S2PI_TransferFrame+0x92>
hal_error = HAL_SPI_TransmitReceive_DMA(&hspi2, (uint8_t *) txData, rxData, (uint16_t)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	480f      	ldr	r0, [pc, #60]	; (80009f8 <S2PI_TransferFrame+0xc4>)
 80009bc:	f002 fcda 	bl	8003374 <HAL_SPI_TransmitReceive_DMA>
 80009c0:	4603      	mov	r3, r0
 80009c2:	75fb      	strb	r3, [r7, #23]
 80009c4:	e008      	b.n	80009d8 <S2PI_TransferFrame+0xa4>
frameSize);
else
hal_error = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *) txData, (uint16_t) frameSize);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	480a      	ldr	r0, [pc, #40]	; (80009f8 <S2PI_TransferFrame+0xc4>)
 80009d0:	f002 fc22 	bl	8003218 <HAL_SPI_Transmit_DMA>
 80009d4:	4603      	mov	r3, r0
 80009d6:	75fb      	strb	r3, [r7, #23]
IRQ_UNLOCK();
 80009d8:	f7ff fe00 	bl	80005dc <IRQ_UNLOCK>
if (hal_error != HAL_OK)
 80009dc:	7dfb      	ldrb	r3, [r7, #23]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <S2PI_TransferFrame+0xb4>
return ERROR_FAIL;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	e000      	b.n	80009ea <S2PI_TransferFrame+0xb6>
return STATUS_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000500 	.word	0x20000500

080009fc <S2PI_CompleteTransfer>:
* for the next transfer, if required.
* @param status The status to be provided to the callback funcition.
* @return Returns the status received from the callback function
****************************************************************************/
static inline status_t S2PI_CompleteTransfer(status_t status)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
s2pi_.Status = STATUS_IDLE;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <S2PI_CompleteTransfer+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
/* Deactivate CS (set high), as we use GPIO pin */
HAL_GPIO_WritePin(s2pi_.GPIOs[S2PI_CS].Port, s2pi_.GPIOs[S2PI_CS].Pin, GPIO_PIN_SET);
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <S2PI_CompleteTransfer+0x4c>)
 8000a0c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <S2PI_CompleteTransfer+0x4c>)
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	2201      	movs	r2, #1
 8000a16:	4619      	mov	r1, r3
 8000a18:	f001 ff34 	bl	8002884 <HAL_GPIO_WritePin>
/* Invoke callback if there is one */
if (s2pi_.Callback != 0)
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <S2PI_CompleteTransfer+0x4c>)
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d00c      	beq.n	8000a3e <S2PI_CompleteTransfer+0x42>
{
s2pi_callback_t callback = s2pi_.Callback;
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <S2PI_CompleteTransfer+0x4c>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	60fb      	str	r3, [r7, #12]
s2pi_.Callback = 0;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <S2PI_CompleteTransfer+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
status = callback(status, s2pi_.CallbackData);
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <S2PI_CompleteTransfer+0x4c>)
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4611      	mov	r1, r2
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	4798      	blx	r3
 8000a3c:	6078      	str	r0, [r7, #4]
}
return status;
 8000a3e:	687b      	ldr	r3, [r7, #4]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000000 	.word	0x20000000

08000a4c <HAL_SPI_TxCpltCallback>:
* @param hspi pointer to a SPI_HandleTypeDef structure that contains
* the configuration information for SPI module.
* @retval None
*/
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
S2PI_CompleteTransfer(STATUS_OK);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff ffd1 	bl	80009fc <S2PI_CompleteTransfer>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <SPI_DMATransmitReceiveCpltDelayed>:
* @param hdma pointer to a DMA_HandleTypeDef structure that contains
* the configuration information for the specified DMA module.
* @retval None
*/
void SPI_DMATransmitReceiveCpltDelayed(DMA_HandleTypeDef *hdma)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a6e:	60fb      	str	r3, [r7, #12]
HAL_SPI_TxCpltCallback(hspi);
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff ffeb 	bl	8000a4c <HAL_SPI_TxCpltCallback>
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <HAL_SPI_TxRxCpltCallback>:
* @param hspi pointer to a SPI_HandleTypeDef structure that contains
* the configuration information for SPI module.
* @retval None
*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
* the TX interrupt which means the SPI transfer is not yet completely finished upon the occurrence
* of the RX interrupt. Thus, the start of a new SPI transfer may fail, since the AFBR-S50 API
* starts it right from the interrupt callback function.
* In order to overcome the feature, the invocation of the API callback is scheduled to whatever IRQ
* comes last: */
if ( hspi->hdmatx->Lock == HAL_UNLOCKED ) /* TX Interrupt already received */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d103      	bne.n	8000a9c <HAL_SPI_TxRxCpltCallback+0x1c>
HAL_SPI_TxCpltCallback(hspi);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ffd9 	bl	8000a4c <HAL_SPI_TxCpltCallback>
else /* There is still the TX DMA Interrupt we have to wait for */
hspi->hdmatx->XferCpltCallback = SPI_DMATransmitReceiveCpltDelayed;
}
 8000a9a:	e003      	b.n	8000aa4 <HAL_SPI_TxRxCpltCallback+0x24>
hspi->hdmatx->XferCpltCallback = SPI_DMATransmitReceiveCpltDelayed;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aa0:	4a02      	ldr	r2, [pc, #8]	; (8000aac <HAL_SPI_TxRxCpltCallback+0x2c>)
 8000aa2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	08000a63 	.word	0x08000a63

08000ab0 <S2PI_Abort>:
* @details When a callback is set for the current ongoing activity, it is
* invoked with the #ERROR_ABORTED error byte.
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
*****************************************************************************/
status_t S2PI_Abort(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
status_t status = s2pi_.Status;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <S2PI_Abort+0x2c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	607b      	str	r3, [r7, #4]
/* Check if something is ongoing. */
if(status == STATUS_IDLE)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <S2PI_Abort+0x16>
{
return STATUS_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e006      	b.n	8000ad4 <S2PI_Abort+0x24>
}
/* Abort SPI transfer. */
if(status == STATUS_BUSY)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d102      	bne.n	8000ad2 <S2PI_Abort+0x22>
{
HAL_SPI_Abort(&hspi2);
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <S2PI_Abort+0x30>)
 8000ace:	f002 fd53 	bl	8003578 <HAL_SPI_Abort>
}
return STATUS_OK;
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000500 	.word	0x20000500

08000ae4 <HAL_SPI_ErrorCallback>:
* @param hspi pointer to a SPI_HandleTypeDef structure that contains
* the configuration information for SPI module.
* @retval None
*/
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
S2PI_CompleteTransfer(ERROR_FAIL);
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f7ff ff84 	bl	80009fc <S2PI_CompleteTransfer>
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <S2PI_SetIrqCallback>:
* - #ERROR_S2PI_INVALID_SLAVE: A wrong slave identifier is provided.
*****************************************************************************/
status_t S2PI_SetIrqCallback(s2pi_slave_t slave,
s2pi_irq_callback_t callback,
void * callbackData)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
s2pi_.IrqCallback = callback;
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <S2PI_SetIrqCallback+0x28>)
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	6113      	str	r3, [r2, #16]
s2pi_.IrqCallbackData = callbackData;
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <S2PI_SetIrqCallback+0x28>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6153      	str	r3, [r2, #20]
return STATUS_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000000 	.word	0x20000000

08000b28 <S2PI_ReadIrqPin>:
* @param slave The specified S2PI slave.
* @return Returns 1U if the IRQ pin is high (IRQ not pending) and 0U if the
* devices pulls the pin to low state (IRQ pending).
*****************************************************************************/
uint32_t S2PI_ReadIrqPin(s2pi_slave_t slave)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
return HAL_GPIO_ReadPin(s2pi_.GPIOs[S2PI_IRQ].Port, s2pi_.GPIOs[S2PI_IRQ].Pin);
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <S2PI_ReadIrqPin+0x24>)
 8000b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <S2PI_ReadIrqPin+0x24>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	f001 fe89 	bl	8002854 <HAL_GPIO_ReadPin>
 8000b42:	4603      	mov	r3, r0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000000 	.word	0x20000000

08000b50 <HAL_GPIO_EXTI_Callback>:
* @brief EXTI line detection callbacks.
* @param GPIO_Pin Specifies the pins connected EXTI line
* @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
if (GPIO_Pin == s2pi_.GPIOs[S2PI_IRQ].Pin && s2pi_.IrqCallback)
 8000b5a:	88fa      	ldrh	r2, [r7, #6]
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x30>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d109      	bne.n	8000b78 <HAL_GPIO_EXTI_Callback+0x28>
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x30>)
 8000b66:	691b      	ldr	r3, [r3, #16]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d005      	beq.n	8000b78 <HAL_GPIO_EXTI_Callback+0x28>
{
s2pi_.IrqCallback(s2pi_.IrqCallbackData);
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x30>)
 8000b6e:	691b      	ldr	r3, [r3, #16]
 8000b70:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x30>)
 8000b72:	6952      	ldr	r2, [r2, #20]
 8000b74:	4610      	mov	r0, r2
 8000b76:	4798      	blx	r3
}
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000

08000b84 <Timer_Init>:
/*!***************************************************************************
* @brief Initializes the timer hardware.
* @return -
*****************************************************************************/
void Timer_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
/* Initialize the timers, see generated main.c */
MX_TIM2_Init();
 8000b88:	f000 fda8 	bl	80016dc <MX_TIM2_Init>
MX_TIM4_Init();
 8000b8c:	f000 fdf4 	bl	8001778 <MX_TIM4_Init>
MX_TIM5_Init();
 8000b90:	f000 fe3e 	bl	8001810 <MX_TIM5_Init>
/* Start the timers relevant for the LTC */
HAL_TIM_Base_Start(&htim2);
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <Timer_Init+0x20>)
 8000b96:	f003 f8dc 	bl	8003d52 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim5);
 8000b9a:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <Timer_Init+0x24>)
 8000b9c:	f003 f8d9 	bl	8003d52 <HAL_TIM_Base_Start>
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000698 	.word	0x20000698
 8000ba8:	20000658 	.word	0x20000658

08000bac <Timer_GetCounterValue>:
* @param lct A pointer to the low counter value bits representing current
* time in microseconds. Range: 0, .., 999999 usec
* @return -
*****************************************************************************/
void Timer_GetCounterValue(uint32_t * hct, uint32_t * lct)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
/* The loop makes sure that there are no glitches
when the counter wraps between htim2 and htm2 reads. */
do {
*lct = __HAL_TIM_GET_COUNTER(&htim2);
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <Timer_GetCounterValue+0x38>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	601a      	str	r2, [r3, #0]
*hct = __HAL_TIM_GET_COUNTER(&htim5);
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <Timer_GetCounterValue+0x3c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	601a      	str	r2, [r3, #0]
}
while (*lct > __HAL_TIM_GET_COUNTER(&htim2));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <Timer_GetCounterValue+0x38>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d8ee      	bhi.n	8000bb6 <Timer_GetCounterValue+0xa>
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	20000698 	.word	0x20000698
 8000be8:	20000658 	.word	0x20000658

08000bec <Timer_Start>:
* @param param An abstract parameter to be passed to the callback. This is
* also the identifier of the given interval.
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
*****************************************************************************/
status_t Timer_Start(uint32_t period, void * param)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
callback_param_ = param;
 8000bf6:	4a26      	ldr	r2, [pc, #152]	; (8000c90 <Timer_Start+0xa4>)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	6013      	str	r3, [r2, #0]
if (period == period_us_)
 8000bfc:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <Timer_Start+0xa8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d101      	bne.n	8000c0a <Timer_Start+0x1e>
return STATUS_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e03d      	b.n	8000c86 <Timer_Start+0x9a>
period_us_ = period;
 8000c0a:	4a22      	ldr	r2, [pc, #136]	; (8000c94 <Timer_Start+0xa8>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6013      	str	r3, [r2, #0]
uint32_t prescaler = SystemCoreClock / 1000000U;
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <Timer_Start+0xac>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <Timer_Start+0xb0>)
 8000c16:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1a:	0c9b      	lsrs	r3, r3, #18
 8000c1c:	60fb      	str	r3, [r7, #12]
while (period > 0xFFFF)
 8000c1e:	e005      	b.n	8000c2c <Timer_Start+0x40>
{
period >>= 1U;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	085b      	lsrs	r3, r3, #1
 8000c24:	607b      	str	r3, [r7, #4]
prescaler <<= 1U;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
while (period > 0xFFFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c32:	d2f5      	bcs.n	8000c20 <Timer_Start+0x34>
}
assert(prescaler <= 0x10000U);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3a:	d905      	bls.n	8000c48 <Timer_Start+0x5c>
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <Timer_Start+0xb4>)
 8000c3e:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <Timer_Start+0xb8>)
 8000c40:	2149      	movs	r1, #73	; 0x49
 8000c42:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <Timer_Start+0xbc>)
 8000c44:	f016 fcf0 	bl	8017628 <__assert_func>
/* Set prescaler and period values */
__HAL_TIM_SET_PRESCALER(&htim4, prescaler - 1);
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <Timer_Start+0xc0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	3a01      	subs	r2, #1
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
__HAL_TIM_SET_AUTORELOAD(&htim4, period - 1);
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <Timer_Start+0xc0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	4a12      	ldr	r2, [pc, #72]	; (8000cac <Timer_Start+0xc0>)
 8000c62:	60d3      	str	r3, [r2, #12]
/* Enable interrupt and timer */
__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <Timer_Start+0xc0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a10      	ldr	r2, [pc, #64]	; (8000cac <Timer_Start+0xc0>)
 8000c6a:	6812      	ldr	r2, [r2, #0]
 8000c6c:	68d2      	ldr	r2, [r2, #12]
 8000c6e:	f042 0201 	orr.w	r2, r2, #1
 8000c72:	60da      	str	r2, [r3, #12]
__HAL_TIM_ENABLE(&htim4);
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <Timer_Start+0xc0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <Timer_Start+0xc0>)
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	6812      	ldr	r2, [r2, #0]
 8000c7e:	f042 0201 	orr.w	r2, r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
return STATUS_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000d8 	.word	0x200000d8
 8000c94:	200000dc 	.word	0x200000dc
 8000c98:	20000044 	.word	0x20000044
 8000c9c:	431bde83 	.word	0x431bde83
 8000ca0:	0801896c 	.word	0x0801896c
 8000ca4:	08018b1c 	.word	0x08018b1c
 8000ca8:	08018984 	.word	0x08018984
 8000cac:	20000618 	.word	0x20000618

08000cb0 <Timer_Stop>:
* @details Stops a callback interval for the specified parameter.
* @param param An abstract parameter that identifies the interval to be stopped.
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
*****************************************************************************/
status_t Timer_Stop(void * param)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
period_us_ = 0;
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <Timer_Stop+0x44>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
callback_param_ = 0;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <Timer_Stop+0x48>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
/* Disable interrupt and timer */
__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_UPDATE);
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <Timer_Stop+0x4c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <Timer_Stop+0x4c>)
 8000cca:	6812      	ldr	r2, [r2, #0]
 8000ccc:	68d2      	ldr	r2, [r2, #12]
 8000cce:	f022 0201 	bic.w	r2, r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
__HAL_TIM_ENABLE(&htim4);
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <Timer_Stop+0x4c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <Timer_Stop+0x4c>)
 8000cda:	6812      	ldr	r2, [r2, #0]
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	f042 0201 	orr.w	r2, r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]
return STATUS_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200000dc 	.word	0x200000dc
 8000cf8:	200000d8 	.word	0x200000d8
 8000cfc:	20000618 	.word	0x20000618

08000d00 <Timer_SetInterval>:
* @param param An abstract parameter to be passed to the callback. This is
* also the identifier of the given interval.
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
*****************************************************************************/
status_t Timer_SetInterval(uint32_t dt_microseconds, void * param)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
return dt_microseconds ? Timer_Start(dt_microseconds, param) : Timer_Stop(param);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d005      	beq.n	8000d1c <Timer_SetInterval+0x1c>
 8000d10:	6839      	ldr	r1, [r7, #0]
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff6a 	bl	8000bec <Timer_Start>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	e003      	b.n	8000d24 <Timer_SetInterval+0x24>
 8000d1c:	6838      	ldr	r0, [r7, #0]
 8000d1e:	f7ff ffc7 	bl	8000cb0 <Timer_Stop>
 8000d22:	4603      	mov	r3, r0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <Timer_SetCallback>:
* Passing a zero-pointer removes and disables the callback.
* @param f The timer callback function.
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
*****************************************************************************/
status_t Timer_SetCallback(timer_cb_t f)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
timer_callback_ = f;
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <Timer_SetCallback+0x1c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
return STATUS_OK;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	200000e0 	.word	0x200000e0

08000d4c <HAL_TIM_PeriodElapsedCallback>:
* @brief Period elapsed callback in non-blocking mode
* @param htim TIM handle
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
/* Trigger callback if the interrupt belongs to TIM4 and there is a callback */
if (htim==&htim4 && timer_callback_)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d109      	bne.n	8000d70 <HAL_TIM_PeriodElapsedCallback+0x24>
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d005      	beq.n	8000d70 <HAL_TIM_PeriodElapsedCallback+0x24>
{
timer_callback_(callback_param_);
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	4798      	blx	r3
}
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000618 	.word	0x20000618
 8000d7c:	200000e0 	.word	0x200000e0
 8000d80:	200000d8 	.word	0x200000d8

08000d84 <UART_Init>:
* (UART or LPSCI) bus and DMA module
* @param -
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
*****************************************************************************/
status_t UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
MX_DMA_Init();
 8000d88:	f000 f98a 	bl	80010a0 <MX_DMA_Init>
MX_USART2_UART_Init();
 8000d8c:	f000 fde2 	bl	8001954 <MX_USART2_UART_Init>
return STATUS_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <UART_SendBuffer>:
* - #STATUS_BUSY on Tx line busy
* - #ERROR_NOT_INITIALIZED
* - #ERROR_INVALID_ARGUMENT
*****************************************************************************/
status_t UART_SendBuffer(uint8_t const * txBuff, size_t txSize, uart_tx_callback_t f, void * state)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
/* Verify arguments. */
if( !txBuff || txSize == 0 )
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d002      	beq.n	8000db2 <UART_SendBuffer+0x1a>
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d102      	bne.n	8000db8 <UART_SendBuffer+0x20>
return ERROR_INVALID_ARGUMENT;
 8000db2:	f06f 0304 	mvn.w	r3, #4
 8000db6:	e017      	b.n	8000de8 <UART_SendBuffer+0x50>
if (isTxBusy_)
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <UART_SendBuffer+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <UART_SendBuffer+0x2e>
return STATUS_BUSY;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	e010      	b.n	8000de8 <UART_SendBuffer+0x50>
/* Set Tx Busy Status. */
isTxBusy_ = true;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <UART_SendBuffer+0x58>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
txCallback_ = f;
 8000dcc:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <UART_SendBuffer+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
txCallbackState_ = state;
 8000dd2:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <UART_SendBuffer+0x60>)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	6013      	str	r3, [r2, #0]
HAL_UART_Transmit_DMA(&huart2, (uint8_t *) txBuff, txSize);
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	68f9      	ldr	r1, [r7, #12]
 8000de0:	4806      	ldr	r0, [pc, #24]	; (8000dfc <UART_SendBuffer+0x64>)
 8000de2:	f003 fca1 	bl	8004728 <HAL_UART_Transmit_DMA>
return STATUS_OK;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200000e4 	.word	0x200000e4
 8000df4:	200004e8 	.word	0x200004e8
 8000df8:	200004ec 	.word	0x200004ec
 8000dfc:	20000798 	.word	0x20000798

08000e00 <HAL_UART_TxCpltCallback>:
* @param huart Pointer to a UART_HandleTypeDef structure that contains
* the configuration information for the specified UART module.
* @retval None
*/
void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart )
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
isTxBusy_ = false;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_UART_TxCpltCallback+0x44>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
status_t status = huart->gState == HAL_UART_STATE_ERROR ? ERROR_FAIL : STATUS_OK;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2be0      	cmp	r3, #224	; 0xe0
 8000e18:	d102      	bne.n	8000e20 <HAL_UART_TxCpltCallback+0x20>
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e000      	b.n	8000e22 <HAL_UART_TxCpltCallback+0x22>
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
if (txCallback_)
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_UART_TxCpltCallback+0x48>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d006      	beq.n	8000e3a <HAL_UART_TxCpltCallback+0x3a>
{
txCallback_(status, txCallbackState_);
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_UART_TxCpltCallback+0x48>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <HAL_UART_TxCpltCallback+0x4c>)
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	4611      	mov	r1, r2
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	4798      	blx	r3
}
}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000e4 	.word	0x200000e4
 8000e48:	200004e8 	.word	0x200004e8
 8000e4c:	200004ec 	.word	0x200004ec

08000e50 <print>:
* @param fmt_s The usual printf parameters.
*
* @return Returns the \link #status_t status\endlink (#STATUS_OK on success).
*****************************************************************************/
status_t print(const char *fmt_s, ...)
{
 8000e50:	b40f      	push	{r0, r1, r2, r3}
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
va_list ap;
va_start(ap, fmt_s);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	603b      	str	r3, [r7, #0]
int len = vsnprintf((char *) buffer_, sizeof(buffer_), fmt_s, ap);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e66:	480c      	ldr	r0, [pc, #48]	; (8000e98 <print+0x48>)
 8000e68:	f017 f820 	bl	8017eac <vsniprintf>
 8000e6c:	6078      	str	r0, [r7, #4]
va_end(ap);
if (len < 0)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da02      	bge.n	8000e7a <print+0x2a>
return ERROR_FAIL;
 8000e74:	f04f 33ff 	mov.w	r3, #4294967295
 8000e78:	e006      	b.n	8000e88 <print+0x38>
UART_SendBuffer(buffer_, len, 0, 0);
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <print+0x48>)
 8000e82:	f7ff ff89 	bl	8000d98 <UART_SendBuffer>
return STATUS_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e92:	b004      	add	sp, #16
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200000e8 	.word	0x200000e8

08000e9c <main>:
 *
 * @details	The main function of the program, called after startup code
 * 			This function should never be exited.
 *****************************************************************************/
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8000ea2:	af02      	add	r7, sp, #8
	/* The API module handle that contains all data definitions that is
	 * required within the API module for the corresponding hardware device.
	 * Every call to an API function requires the passing of a pointer to this
	 * data structure. */
	argus_hnd_t * hnd = Argus_CreateHandle();
 8000ea4:	f004 fd4e 	bl	8005944 <Argus_CreateHandle>
 8000ea8:	f8c7 03ec 	str.w	r0, [r7, #1004]	; 0x3ec
		/* Error Handling ...*/
	}

	/* Initialize the platform hardware including the required peripherals
	 * for the API. */
	hardware_init();
 8000eac:	f000 f8c0 	bl	8001030 <hardware_init>
	 *
	 * The second parameter is stored and passed to all function calls
	 * to the S2PI module. This piece of information can be utilized in
	 * order to determine the addressed SPI slave and enabled the usage
	 * of multiple devices on a single SPI peripheral. */
	status_t status = Argus_Init(hnd, SPI_SLAVE);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	f8d7 03ec 	ldr.w	r0, [r7, #1004]	; 0x3ec
 8000eb6:	f004 fc99 	bl	80057ec <Argus_Init>
 8000eba:	f8c7 03e8 	str.w	r0, [r7, #1000]	; 0x3e8
	{
		/* Error Handling ...*/
	}

	/* Print some information about current API and connected device. */
	uint32_t value = Argus_GetAPIVersion();
 8000ebe:	f004 fde3 	bl	8005a88 <Argus_GetAPIVersion>
 8000ec2:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
	uint8_t a = (value >> 24) & 0xFFU;
 8000ec6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000eca:	0e1b      	lsrs	r3, r3, #24
 8000ecc:	f887 33e3 	strb.w	r3, [r7, #995]	; 0x3e3
	uint8_t b = (value >> 16) & 0xFFU;
 8000ed0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000ed4:	0c1b      	lsrs	r3, r3, #16
 8000ed6:	f887 33e2 	strb.w	r3, [r7, #994]	; 0x3e2
	uint8_t c = value & 0xFFFFU;
 8000eda:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8000ede:	f887 33e1 	strb.w	r3, [r7, #993]	; 0x3e1
	uint32_t id = Argus_GetChipID(hnd);
 8000ee2:	f8d7 03ec 	ldr.w	r0, [r7, #1004]	; 0x3ec
 8000ee6:	f004 fdf7 	bl	8005ad8 <Argus_GetChipID>
 8000eea:	f8c7 03dc 	str.w	r0, [r7, #988]	; 0x3dc
	argus_module_version_t mv = Argus_GetModuleVersion(hnd);
 8000eee:	f8d7 03ec 	ldr.w	r0, [r7, #1004]	; 0x3ec
 8000ef2:	f004 fdcd 	bl	8005a90 <Argus_GetModuleVersion>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db

#if ADVANCED_DEMO
	print("\n##### AFBR-S50 API - Advanced Example ############\n"
#else
	print("\n##### AFBR-S50 API - Simple Example ##############\n"
 8000efc:	f897 13e3 	ldrb.w	r1, [r7, #995]	; 0x3e3
 8000f00:	f897 23e2 	ldrb.w	r2, [r7, #994]	; 0x3e2
 8000f04:	f897 03e1 	ldrb.w	r0, [r7, #993]	; 0x3e1
 8000f08:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d025      	beq.n	8000f5c <main+0xc0>
		  "  Chip ID:     %d\n"
		  "  Module:      %s\n"
		  "##################################################\n",
		  a, b, c, id,
		  mv == AFBR_S50MV85G_V1 ? "AFBR-S50MV85G (v1)" :
		  mv == AFBR_S50MV85G_V2 ? "AFBR-S50MV85G (v2)" :
 8000f10:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d01f      	beq.n	8000f58 <main+0xbc>
		  mv == AFBR_S50MV85G_V3 ? "AFBR-S50MV85G (v3)" :
 8000f18:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8000f1c:	2b07      	cmp	r3, #7
 8000f1e:	d019      	beq.n	8000f54 <main+0xb8>
		  mv == AFBR_S50LV85D_V1 ? "AFBR-S50LV85D (v1)" :
 8000f20:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d013      	beq.n	8000f50 <main+0xb4>
		  mv == AFBR_S50MV68B_V1 ? "AFBR-S50MV68B (v1)" :
 8000f28:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d00d      	beq.n	8000f4c <main+0xb0>
		  mv == AFBR_S50MV85I_V1 ? "AFBR-S50MV85I (v1)" :
 8000f30:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8000f34:	2b05      	cmp	r3, #5
 8000f36:	d007      	beq.n	8000f48 <main+0xac>
		  mv == AFBR_S50SV85K_V1 ? "AFBR-S50SV85K (v1)" :
 8000f38:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8000f3c:	2b06      	cmp	r3, #6
 8000f3e:	d101      	bne.n	8000f44 <main+0xa8>
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <main+0x15c>)
 8000f42:	e00c      	b.n	8000f5e <main+0xc2>
 8000f44:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <main+0x160>)
 8000f46:	e00a      	b.n	8000f5e <main+0xc2>
		  mv == AFBR_S50MV85I_V1 ? "AFBR-S50MV85I (v1)" :
 8000f48:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <main+0x164>)
 8000f4a:	e008      	b.n	8000f5e <main+0xc2>
		  mv == AFBR_S50MV68B_V1 ? "AFBR-S50MV68B (v1)" :
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <main+0x168>)
 8000f4e:	e006      	b.n	8000f5e <main+0xc2>
		  mv == AFBR_S50LV85D_V1 ? "AFBR-S50LV85D (v1)" :
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <main+0x16c>)
 8000f52:	e004      	b.n	8000f5e <main+0xc2>
		  mv == AFBR_S50MV85G_V3 ? "AFBR-S50MV85G (v3)" :
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <main+0x170>)
 8000f56:	e002      	b.n	8000f5e <main+0xc2>
		  mv == AFBR_S50MV85G_V2 ? "AFBR-S50MV85G (v2)" :
 8000f58:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <main+0x174>)
 8000f5a:	e000      	b.n	8000f5e <main+0xc2>
	print("\n##### AFBR-S50 API - Simple Example ##############\n"
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <main+0x178>)
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	4603      	mov	r3, r0
 8000f68:	482b      	ldr	r0, [pc, #172]	; (8001018 <main+0x17c>)
 8000f6a:	f7ff ff71 	bl	8000e50 <print>
		  "unknown");

	/* Adjust some configuration parameters by invoking the dedicated API methods. */
	Argus_SetConfigurationFrameTime( hnd, 100000 ); // 0.1 second = 10 Hz
 8000f6e:	492b      	ldr	r1, [pc, #172]	; (800101c <main+0x180>)
 8000f70:	f8d7 03ec 	ldr.w	r0, [r7, #1004]	; 0x3ec
 8000f74:	f004 fdd4 	bl	8005b20 <Argus_SetConfigurationFrameTime>

#else
	/* The program loop ... */
	for(;;)
	{
		myData = 0;
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <main+0x184>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
		 * Note that due to the laser safety algorithms, the method might refuse
		 * to restart a measurement when the appropriate time has not been elapsed
		 * right now. The function returns with status #STATUS_ARGUS_POWERLIMIT and
		 * the function must be called again later. Use the frame time configuration
		 * in order to adjust the timing between two measurement frames. */
		status = Argus_TriggerMeasurement(hnd, measurement_ready_callback);
 8000f7e:	4929      	ldr	r1, [pc, #164]	; (8001024 <main+0x188>)
 8000f80:	f8d7 03ec 	ldr.w	r0, [r7, #1004]	; 0x3ec
 8000f84:	f004 fd10 	bl	80059a8 <Argus_TriggerMeasurement>
 8000f88:	f8c7 03e8 	str.w	r0, [r7, #1000]	; 0x3e8
		if (status == STATUS_ARGUS_POWERLIMIT)
 8000f8c:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8000f90:	2b69      	cmp	r3, #105	; 0x69
 8000f92:	d101      	bne.n	8000f98 <main+0xfc>
		{
			/* Not ready (due to laser safety) to restart the measurement yet.
			 * Come back later. */
			__asm("nop");
 8000f94:	bf00      	nop
 8000f96:	e7ef      	b.n	8000f78 <main+0xdc>
		}
		else if (status != STATUS_OK)
 8000f98:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1eb      	bne.n	8000f78 <main+0xdc>
		else
		{
			/* Wait until measurement data is ready. */
			do
			{
				status = Argus_GetStatus(hnd);
 8000fa0:	f8d7 03ec 	ldr.w	r0, [r7, #1004]	; 0x3ec
 8000fa4:	f004 fce0 	bl	8005968 <Argus_GetStatus>
 8000fa8:	f8c7 03e8 	str.w	r0, [r7, #1000]	; 0x3e8
				__asm("nop");
 8000fac:	bf00      	nop
			}
			while(status == STATUS_BUSY);
 8000fae:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d0f4      	beq.n	8000fa0 <main+0x104>

			if (status != STATUS_OK)
 8000fb6:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1dc      	bne.n	8000f78 <main+0xdc>
			{
				/* The measurement data structure. */
				argus_results_t res;

				/* Evaluate the raw measurement results. */
				status = Argus_EvaluateData(hnd, &res, (void*)myData);
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <main+0x184>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f8d7 03ec 	ldr.w	r0, [r7, #1004]	; 0x3ec
 8000fca:	f004 fd2b 	bl	8005a24 <Argus_EvaluateData>
 8000fce:	f8c7 03e8 	str.w	r0, [r7, #1000]	; 0x3e8

				if (status != STATUS_OK)
 8000fd2:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1ce      	bne.n	8000f78 <main+0xdc>

				else
				{
					/* Use the recent measurement results
					 * (converting the Q9.22 value to float and print or display it). */
					print("Range: %d mm\n", res.Bin.Range / (Q9_22_ONE / 1000));
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8000fe0:	4a11      	ldr	r2, [pc, #68]	; (8001028 <main+0x18c>)
 8000fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe6:	441a      	add	r2, r3
 8000fe8:	1312      	asrs	r2, r2, #12
 8000fea:	17db      	asrs	r3, r3, #31
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480e      	ldr	r0, [pc, #56]	; (800102c <main+0x190>)
 8000ff2:	f7ff ff2d 	bl	8000e50 <print>
		myData = 0;
 8000ff6:	e7bf      	b.n	8000f78 <main+0xdc>
 8000ff8:	08018994 	.word	0x08018994
 8000ffc:	080189a8 	.word	0x080189a8
 8001000:	080189b0 	.word	0x080189b0
 8001004:	080189c4 	.word	0x080189c4
 8001008:	080189d8 	.word	0x080189d8
 800100c:	080189ec 	.word	0x080189ec
 8001010:	08018a00 	.word	0x08018a00
 8001014:	08018a14 	.word	0x08018a14
 8001018:	08018a28 	.word	0x08018a28
 800101c:	000186a0 	.word	0x000186a0
 8001020:	200004f0 	.word	0x200004f0
 8001024:	08001059 	.word	0x08001059
 8001028:	fa04a397 	.word	0xfa04a397
 800102c:	08018ad0 	.word	0x08018ad0

08001030 <hardware_init>:
	}
#endif
}

static void hardware_init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	/* Initialize the board with clocks. */
	BOARD_ClockInit();
 8001034:	f7ff fac4 	bl	80005c0 <BOARD_ClockInit>

	/* Disable the watchdog timer. */
	COP_Disable();
 8001038:	f7ff fac8 	bl	80005cc <COP_Disable>

	/* Init GPIO ports. */
	GPIO_Init();
 800103c:	f7ff fb00 	bl	8000640 <GPIO_Init>

	/* Initialize timer required by the API. */
	Timer_Init();
 8001040:	f7ff fda0 	bl	8000b84 <Timer_Init>

	/* Initialize UART for print functionality. */
	UART_Init();
 8001044:	f7ff fe9e 	bl	8000d84 <UART_Init>

	/* Initialize the S2PI hardware required by the API. */
	S2PI_Init(SPI_SLAVE, SPI_BAUD_RATE);
 8001048:	4902      	ldr	r1, [pc, #8]	; (8001054 <hardware_init+0x24>)
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff faff 	bl	800064e <S2PI_Init>
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	005b8d80 	.word	0x005b8d80

08001058 <measurement_ready_callback>:

status_t measurement_ready_callback(status_t status, void * data)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	if (status != STATUS_OK)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10d      	bne.n	8001084 <measurement_ready_callback+0x2c>
		/* Inform the main task about new data ready.
		 * Note: do not call the evaluate measurement method
		 * from within this callback since it is invoked in
		 * a interrupt service routine and should return as
		 * soon as possible. */
		assert(myData == 0);
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <measurement_ready_callback+0x38>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <measurement_ready_callback+0x26>
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <measurement_ready_callback+0x3c>)
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <measurement_ready_callback+0x40>)
 8001074:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001078:	4808      	ldr	r0, [pc, #32]	; (800109c <measurement_ready_callback+0x44>)
 800107a:	f016 fad5 	bl	8017628 <__assert_func>

		myData = data;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <measurement_ready_callback+0x38>)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	6013      	str	r3, [r2, #0]
	}
	return status;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200004f0 	.word	0x200004f0
 8001094:	08018ae0 	.word	0x08018ae0
 8001098:	08018b28 	.word	0x08018b28
 800109c:	08018aec 	.word	0x08018aec

080010a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4a18      	ldr	r2, [pc, #96]	; (800110c <MX_DMA_Init+0x6c>)
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_DMA_Init+0x6c>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_DMA_Init+0x6c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2101      	movs	r1, #1
 80010c6:	200e      	movs	r0, #14
 80010c8:	f000 fe1c 	bl	8001d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010cc:	200e      	movs	r0, #14
 80010ce:	f000 fe35 	bl	8001d3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 2, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2102      	movs	r1, #2
 80010d6:	200f      	movs	r0, #15
 80010d8:	f000 fe14 	bl	8001d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80010dc:	200f      	movs	r0, #15
 80010de:	f000 fe2d 	bl	8001d3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2105      	movs	r1, #5
 80010e6:	2010      	movs	r0, #16
 80010e8:	f000 fe0c 	bl	8001d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010ec:	2010      	movs	r0, #16
 80010ee:	f000 fe25 	bl	8001d3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2105      	movs	r1, #5
 80010f6:	2011      	movs	r0, #17
 80010f8:	f000 fe04 	bl	8001d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010fc:	2011      	movs	r0, #17
 80010fe:	f000 fe1d 	bl	8001d3c <HAL_NVIC_EnableIRQ>

}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	4a20      	ldr	r2, [pc, #128]	; (80011ac <MX_GPIO_Init+0x9c>)
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <MX_GPIO_Init+0x9c>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_GPIO_Init+0x9c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4a19      	ldr	r2, [pc, #100]	; (80011ac <MX_GPIO_Init+0x9c>)
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_GPIO_Init+0x9c>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_GPIO_Init+0x9c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MX_GPIO_Init+0x9c>)
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_GPIO_Init+0x9c>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_GPIO_Init+0x9c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_AFBR_IRQ_n_Pin;
 800117a:	2310      	movs	r3, #16
 800117c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_GPIO_Init+0xa0>)
 8001180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001182:	2301      	movs	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI2_AFBR_IRQ_n_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	4619      	mov	r1, r3
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <MX_GPIO_Init+0xa4>)
 800118e:	f001 f9ef 	bl	8002570 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2103      	movs	r1, #3
 8001196:	200a      	movs	r0, #10
 8001198:	f000 fdb4 	bl	8001d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800119c:	200a      	movs	r0, #10
 800119e:	f000 fdcd 	bl	8001d3c <HAL_NVIC_EnableIRQ>

}
 80011a2:	bf00      	nop
 80011a4:	3720      	adds	r7, #32
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	10210000 	.word	0x10210000
 80011b4:	40020400 	.word	0x40020400

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b094      	sub	sp, #80	; 0x50
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2234      	movs	r2, #52	; 0x34
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f016 faaa 	bl	8017720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	4a28      	ldr	r2, [pc, #160]	; (8001284 <SystemClock_Config+0xcc>)
 80011e2:	4b28      	ldr	r3, [pc, #160]	; (8001284 <SystemClock_Config+0xcc>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <SystemClock_Config+0xcc>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f8:	2300      	movs	r3, #0
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	4a22      	ldr	r2, [pc, #136]	; (8001288 <SystemClock_Config+0xd0>)
 80011fe:	4b22      	ldr	r3, [pc, #136]	; (8001288 <SystemClock_Config+0xd0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <SystemClock_Config+0xd0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001214:	2301      	movs	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121e:	2302      	movs	r3, #2
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001226:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001228:	2308      	movs	r3, #8
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800122c:	23c0      	movs	r3, #192	; 0xc0
 800122e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001230:	2302      	movs	r3, #2
 8001232:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001234:	2302      	movs	r3, #2
 8001236:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001238:	2302      	movs	r3, #2
 800123a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4618      	mov	r0, r3
 8001242:	f001 fd43 	bl	8002ccc <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800124c:	f000 f81e 	bl	800128c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2302      	movs	r3, #2
 8001256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	2103      	movs	r1, #3
 800126c:	4618      	mov	r0, r3
 800126e:	f001 fb3b 	bl	80028e8 <HAL_RCC_ClockConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001278:	f000 f808 	bl	800128c <Error_Handler>
  }
}
 800127c:	bf00      	nop
 800127e:	3750      	adds	r7, #80	; 0x50
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	40007000 	.word	0x40007000

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
 8001290:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001292:	e7fe      	b.n	8001292 <Error_Handler+0x6>

08001294 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_SPI2_Init+0x64>)
 800129a:	4a18      	ldr	r2, [pc, #96]	; (80012fc <MX_SPI2_Init+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_SPI2_Init+0x64>)
 80012a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_SPI2_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_SPI2_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_SPI2_Init+0x64>)
 80012b4:	2202      	movs	r2, #2
 80012b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_SPI2_Init+0x64>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_SPI2_Init+0x64>)
 80012c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_SPI2_Init+0x64>)
 80012c8:	2208      	movs	r2, #8
 80012ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MX_SPI2_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_SPI2_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <MX_SPI2_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_SPI2_Init+0x64>)
 80012e0:	220a      	movs	r2, #10
 80012e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_SPI2_Init+0x64>)
 80012e6:	f001 ff33 	bl	8003150 <HAL_SPI_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012f0:	f7ff ffcc 	bl	800128c <Error_Handler>
  }

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000500 	.word	0x20000500
 80012fc:	40003800 	.word	0x40003800

08001300 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a48      	ldr	r2, [pc, #288]	; (8001440 <HAL_SPI_MspInit+0x140>)
 800131e:	4293      	cmp	r3, r2
 8001320:	f040 8089 	bne.w	8001436 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	4a46      	ldr	r2, [pc, #280]	; (8001444 <HAL_SPI_MspInit+0x144>)
 800132a:	4b46      	ldr	r3, [pc, #280]	; (8001444 <HAL_SPI_MspInit+0x144>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001332:	6413      	str	r3, [r2, #64]	; 0x40
 8001334:	4b43      	ldr	r3, [pc, #268]	; (8001444 <HAL_SPI_MspInit+0x144>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	4a3f      	ldr	r2, [pc, #252]	; (8001444 <HAL_SPI_MspInit+0x144>)
 8001346:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <HAL_SPI_MspInit+0x144>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	6313      	str	r3, [r2, #48]	; 0x30
 8001350:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <HAL_SPI_MspInit+0x144>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|SPI2_AFBR_CS_n_Pin|GPIO_PIN_14|GPIO_PIN_15;
 800135c:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800136e:	2305      	movs	r3, #5
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4833      	ldr	r0, [pc, #204]	; (8001448 <HAL_SPI_MspInit+0x148>)
 800137a:	f001 f8f9 	bl	8002570 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <HAL_SPI_MspInit+0x14c>)
 8001380:	4a33      	ldr	r2, [pc, #204]	; (8001450 <HAL_SPI_MspInit+0x150>)
 8001382:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001384:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_SPI_MspInit+0x14c>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_SPI_MspInit+0x14c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001390:	4b2e      	ldr	r3, [pc, #184]	; (800144c <HAL_SPI_MspInit+0x14c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_SPI_MspInit+0x14c>)
 8001398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800139c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800139e:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_SPI_MspInit+0x14c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <HAL_SPI_MspInit+0x14c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <HAL_SPI_MspInit+0x14c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_SPI_MspInit+0x14c>)
 80013b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013b6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_SPI_MspInit+0x14c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80013be:	4823      	ldr	r0, [pc, #140]	; (800144c <HAL_SPI_MspInit+0x14c>)
 80013c0:	f000 fcd6 	bl	8001d70 <HAL_DMA_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80013ca:	f7ff ff5f 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a1e      	ldr	r2, [pc, #120]	; (800144c <HAL_SPI_MspInit+0x14c>)
 80013d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80013d4:	4a1d      	ldr	r2, [pc, #116]	; (800144c <HAL_SPI_MspInit+0x14c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_SPI_MspInit+0x154>)
 80013dc:	4a1e      	ldr	r2, [pc, #120]	; (8001458 <HAL_SPI_MspInit+0x158>)
 80013de:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_SPI_MspInit+0x154>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_SPI_MspInit+0x154>)
 80013e8:	2240      	movs	r2, #64	; 0x40
 80013ea:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_SPI_MspInit+0x154>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_SPI_MspInit+0x154>)
 80013f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_SPI_MspInit+0x154>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_SPI_MspInit+0x154>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <HAL_SPI_MspInit+0x154>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_SPI_MspInit+0x154>)
 800140e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001412:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_SPI_MspInit+0x154>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800141a:	480e      	ldr	r0, [pc, #56]	; (8001454 <HAL_SPI_MspInit+0x154>)
 800141c:	f000 fca8 	bl	8001d70 <HAL_DMA_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8001426:	f7ff ff31 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a09      	ldr	r2, [pc, #36]	; (8001454 <HAL_SPI_MspInit+0x154>)
 800142e:	649a      	str	r2, [r3, #72]	; 0x48
 8001430:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_SPI_MspInit+0x154>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40003800 	.word	0x40003800
 8001444:	40023800 	.word	0x40023800
 8001448:	40020400 	.word	0x40020400
 800144c:	20000558 	.word	0x20000558
 8001450:	40026058 	.word	0x40026058
 8001454:	200005b8 	.word	0x200005b8
 8001458:	40026070 	.word	0x40026070

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler+0x4>

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a8:	f000 fb62 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80014b4:	2010      	movs	r0, #16
 80014b6:	f001 f9ff 	bl	80028b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <DMA1_Stream3_IRQHandler+0x10>)
 80014c6:	f000 fdeb 	bl	80020a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000558 	.word	0x20000558

080014d4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <DMA1_Stream4_IRQHandler+0x10>)
 80014da:	f000 fde1 	bl	80020a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200005b8 	.word	0x200005b8

080014e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <DMA1_Stream5_IRQHandler+0x10>)
 80014ee:	f000 fdd7 	bl	80020a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200006d8 	.word	0x200006d8

080014fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <DMA1_Stream6_IRQHandler+0x10>)
 8001502:	f000 fdcd 	bl	80020a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000738 	.word	0x20000738

08001510 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <TIM4_IRQHandler+0x10>)
 8001516:	f002 fc40 	bl	8003d9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000618 	.word	0x20000618

08001524 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <USART2_IRQHandler+0x10>)
 800152a:	f003 f969 	bl	8004800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000798 	.word	0x20000798

08001538 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	return 1;
 800153c:	2301      	movs	r3, #1
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_kill>:

int _kill(int pid, int sig)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001552:	f016 f887 	bl	8017664 <__errno>
 8001556:	4602      	mov	r2, r0
 8001558:	2316      	movs	r3, #22
 800155a:	6013      	str	r3, [r2, #0]
	return -1;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_exit>:

void _exit (int status)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ffe7 	bl	8001548 <_kill>
	while (1) {}		/* Make sure we hang here */
 800157a:	e7fe      	b.n	800157a <_exit+0x12>

0800157c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e00a      	b.n	80015a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800158e:	68bc      	ldr	r4, [r7, #8]
 8001590:	1c63      	adds	r3, r4, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	f3af 8000 	nop.w
 8001598:	4603      	mov	r3, r0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	dbf0      	blt.n	800158e <_read+0x12>
	}

return len;
 80015ac:	687b      	ldr	r3, [r7, #4]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd90      	pop	{r4, r7, pc}

080015b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	e009      	b.n	80015dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	60ba      	str	r2, [r7, #8]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dbf1      	blt.n	80015c8 <_write+0x12>
	}
	return len;
 80015e4:	687b      	ldr	r3, [r7, #4]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <_sbrk+0x50>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <_sbrk+0x16>
		heap_end = &end;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <_sbrk+0x50>)
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <_sbrk+0x54>)
 8001604:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <_sbrk+0x50>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <_sbrk+0x50>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	466a      	mov	r2, sp
 8001616:	4293      	cmp	r3, r2
 8001618:	d907      	bls.n	800162a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800161a:	f016 f823 	bl	8017664 <__errno>
 800161e:	4602      	mov	r2, r0
 8001620:	230c      	movs	r3, #12
 8001622:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	e006      	b.n	8001638 <_sbrk+0x48>
	}

	heap_end += incr;
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <_sbrk+0x50>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	4a03      	ldr	r2, [pc, #12]	; (8001640 <_sbrk+0x50>)
 8001634:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200004f4 	.word	0x200004f4
 8001644:	200007e0 	.word	0x200007e0

08001648 <_close>:

int _close(int file)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	return -1;
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001670:	605a      	str	r2, [r3, #4]
	return 0;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_isatty>:

int _isatty(int file)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	return 1;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001696:	b480      	push	{r7}
 8001698:	b085      	sub	sp, #20
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
	return 0;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b4:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <SystemInit+0x28>)
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <SystemInit+0x28>)
 80016b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SystemInit+0x28>)
 80016c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ca:	609a      	str	r2, [r3, #8]
#endif
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f0:	463b      	mov	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80016f8:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <MX_TIM2_Init+0x94>)
 80016fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <MX_TIM2_Init+0x94>)
 8001702:	225f      	movs	r2, #95	; 0x5f
 8001704:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MX_TIM2_Init+0x94>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_TIM2_Init+0x94>)
 800170e:	4a19      	ldr	r2, [pc, #100]	; (8001774 <MX_TIM2_Init+0x98>)
 8001710:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_TIM2_Init+0x94>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_TIM2_Init+0x94>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800171e:	4814      	ldr	r0, [pc, #80]	; (8001770 <MX_TIM2_Init+0x94>)
 8001720:	f002 faec 	bl	8003cfc <HAL_TIM_Base_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800172a:	f7ff fdaf 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001732:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	4619      	mov	r1, r3
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <MX_TIM2_Init+0x94>)
 800173c:	f002 fc35 	bl	8003faa <HAL_TIM_ConfigClockSource>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001746:	f7ff fda1 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800174a:	2320      	movs	r3, #32
 800174c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001752:	463b      	mov	r3, r7
 8001754:	4619      	mov	r1, r3
 8001756:	4806      	ldr	r0, [pc, #24]	; (8001770 <MX_TIM2_Init+0x94>)
 8001758:	f002 ff08 	bl	800456c <HAL_TIMEx_MasterConfigSynchronization>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001762:	f7ff fd93 	bl	800128c <Error_Handler>
  }

}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000698 	.word	0x20000698
 8001774:	000f4240 	.word	0x000f4240

08001778 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178c:	463b      	mov	r3, r7
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_TIM4_Init+0x90>)
 8001796:	4a1d      	ldr	r2, [pc, #116]	; (800180c <MX_TIM4_Init+0x94>)
 8001798:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <MX_TIM4_Init+0x90>)
 800179c:	225f      	movs	r2, #95	; 0x5f
 800179e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <MX_TIM4_Init+0x90>)
 80017a2:	2210      	movs	r2, #16
 80017a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <MX_TIM4_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ac:	4b16      	ldr	r3, [pc, #88]	; (8001808 <MX_TIM4_Init+0x90>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <MX_TIM4_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017b8:	4813      	ldr	r0, [pc, #76]	; (8001808 <MX_TIM4_Init+0x90>)
 80017ba:	f002 fa9f 	bl	8003cfc <HAL_TIM_Base_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80017c4:	f7ff fd62 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017ce:	f107 0308 	add.w	r3, r7, #8
 80017d2:	4619      	mov	r1, r3
 80017d4:	480c      	ldr	r0, [pc, #48]	; (8001808 <MX_TIM4_Init+0x90>)
 80017d6:	f002 fbe8 	bl	8003faa <HAL_TIM_ConfigClockSource>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80017e0:	f7ff fd54 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80017e4:	2310      	movs	r3, #16
 80017e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017ec:	463b      	mov	r3, r7
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_TIM4_Init+0x90>)
 80017f2:	f002 febb 	bl	800456c <HAL_TIMEx_MasterConfigSynchronization>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80017fc:	f7ff fd46 	bl	800128c <Error_Handler>
  }

}
 8001800:	bf00      	nop
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000618 	.word	0x20000618
 800180c:	40000800 	.word	0x40000800

08001810 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <MX_TIM5_Init+0x98>)
 8001830:	4a1e      	ldr	r2, [pc, #120]	; (80018ac <MX_TIM5_Init+0x9c>)
 8001832:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <MX_TIM5_Init+0x98>)
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <MX_TIM5_Init+0x98>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <MX_TIM5_Init+0x98>)
 8001842:	f04f 32ff 	mov.w	r2, #4294967295
 8001846:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <MX_TIM5_Init+0x98>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <MX_TIM5_Init+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001854:	4814      	ldr	r0, [pc, #80]	; (80018a8 <MX_TIM5_Init+0x98>)
 8001856:	f002 fa51 	bl	8003cfc <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001860:	f7ff fd14 	bl	800128c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001864:	2307      	movs	r3, #7
 8001866:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	4619      	mov	r1, r3
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <MX_TIM5_Init+0x98>)
 8001874:	f002 fc50 	bl	8004118 <HAL_TIM_SlaveConfigSynchro>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800187e:	f7ff fd05 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	4619      	mov	r1, r3
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <MX_TIM5_Init+0x98>)
 8001890:	f002 fe6c 	bl	800456c <HAL_TIMEx_MasterConfigSynchronization>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800189a:	f7ff fcf7 	bl	800128c <Error_Handler>
  }

}
 800189e:	bf00      	nop
 80018a0:	3720      	adds	r7, #32
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000658 	.word	0x20000658
 80018ac:	40000c00 	.word	0x40000c00

080018b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c0:	d10e      	bne.n	80018e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	4a20      	ldr	r2, [pc, #128]	; (8001948 <HAL_TIM_Base_MspInit+0x98>)
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <HAL_TIM_Base_MspInit+0x98>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_TIM_Base_MspInit+0x98>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80018de:	e02e      	b.n	800193e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM4)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a19      	ldr	r2, [pc, #100]	; (800194c <HAL_TIM_Base_MspInit+0x9c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d116      	bne.n	8001918 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4a16      	ldr	r2, [pc, #88]	; (8001948 <HAL_TIM_Base_MspInit+0x98>)
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_TIM_Base_MspInit+0x98>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_TIM_Base_MspInit+0x98>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2104      	movs	r1, #4
 800190a:	201e      	movs	r0, #30
 800190c:	f000 f9fa 	bl	8001d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001910:	201e      	movs	r0, #30
 8001912:	f000 fa13 	bl	8001d3c <HAL_NVIC_EnableIRQ>
}
 8001916:	e012      	b.n	800193e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <HAL_TIM_Base_MspInit+0xa0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d10d      	bne.n	800193e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_TIM_Base_MspInit+0x98>)
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_TIM_Base_MspInit+0x98>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_TIM_Base_MspInit+0x98>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40000800 	.word	0x40000800
 8001950:	40000c00 	.word	0x40000c00

08001954 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <MX_USART2_UART_Init+0x50>)
 800195c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800197a:	220c      	movs	r2, #12
 800197c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800198c:	f002 fe7e 	bl	800468c <HAL_UART_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001996:	f7ff fc79 	bl	800128c <Error_Handler>
  }

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000798 	.word	0x20000798
 80019a4:	40004400 	.word	0x40004400

080019a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a4b      	ldr	r2, [pc, #300]	; (8001af4 <HAL_UART_MspInit+0x14c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	f040 8090 	bne.w	8001aec <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	4a49      	ldr	r2, [pc, #292]	; (8001af8 <HAL_UART_MspInit+0x150>)
 80019d2:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <HAL_UART_MspInit+0x150>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019da:	6413      	str	r3, [r2, #64]	; 0x40
 80019dc:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <HAL_UART_MspInit+0x150>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	4a42      	ldr	r2, [pc, #264]	; (8001af8 <HAL_UART_MspInit+0x150>)
 80019ee:	4b42      	ldr	r3, [pc, #264]	; (8001af8 <HAL_UART_MspInit+0x150>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6313      	str	r3, [r2, #48]	; 0x30
 80019f8:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <HAL_UART_MspInit+0x150>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a04:	230c      	movs	r3, #12
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a14:	2307      	movs	r3, #7
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4837      	ldr	r0, [pc, #220]	; (8001afc <HAL_UART_MspInit+0x154>)
 8001a20:	f000 fda6 	bl	8002570 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001a24:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_UART_MspInit+0x158>)
 8001a26:	4a37      	ldr	r2, [pc, #220]	; (8001b04 <HAL_UART_MspInit+0x15c>)
 8001a28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001a2a:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_UART_MspInit+0x158>)
 8001a2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a30:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <HAL_UART_MspInit+0x158>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a38:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <HAL_UART_MspInit+0x158>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_UART_MspInit+0x158>)
 8001a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a44:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a46:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <HAL_UART_MspInit+0x158>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4c:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <HAL_UART_MspInit+0x158>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_UART_MspInit+0x158>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a58:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <HAL_UART_MspInit+0x158>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5e:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <HAL_UART_MspInit+0x158>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a64:	4826      	ldr	r0, [pc, #152]	; (8001b00 <HAL_UART_MspInit+0x158>)
 8001a66:	f000 f983 	bl	8001d70 <HAL_DMA_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001a70:	f7ff fc0c 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a22      	ldr	r2, [pc, #136]	; (8001b00 <HAL_UART_MspInit+0x158>)
 8001a78:	635a      	str	r2, [r3, #52]	; 0x34
 8001a7a:	4a21      	ldr	r2, [pc, #132]	; (8001b00 <HAL_UART_MspInit+0x158>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <HAL_UART_MspInit+0x160>)
 8001a82:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <HAL_UART_MspInit+0x164>)
 8001a84:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_UART_MspInit+0x160>)
 8001a88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <HAL_UART_MspInit+0x160>)
 8001a90:	2240      	movs	r2, #64	; 0x40
 8001a92:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <HAL_UART_MspInit+0x160>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_UART_MspInit+0x160>)
 8001a9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_UART_MspInit+0x160>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_UART_MspInit+0x160>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_UART_MspInit+0x160>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_UART_MspInit+0x160>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_UART_MspInit+0x160>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ac0:	4811      	ldr	r0, [pc, #68]	; (8001b08 <HAL_UART_MspInit+0x160>)
 8001ac2:	f000 f955 	bl	8001d70 <HAL_DMA_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001acc:	f7ff fbde 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <HAL_UART_MspInit+0x160>)
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad6:	4a0c      	ldr	r2, [pc, #48]	; (8001b08 <HAL_UART_MspInit+0x160>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2026      	movs	r0, #38	; 0x26
 8001ae2:	f000 f90f 	bl	8001d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ae6:	2026      	movs	r0, #38	; 0x26
 8001ae8:	f000 f928 	bl	8001d3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	; 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40004400 	.word	0x40004400
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	200006d8 	.word	0x200006d8
 8001b04:	40026088 	.word	0x40026088
 8001b08:	20000738 	.word	0x20000738
 8001b0c:	400260a0 	.word	0x400260a0

08001b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_InitTick+0x54>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x58>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f912 	bl	8001d58 <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00e      	b.n	8001b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b0f      	cmp	r3, #15
 8001b42:	d80a      	bhi.n	8001b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b44:	2200      	movs	r2, #0
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f000 f8da 	bl	8001d04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <HAL_InitTick+0x5c>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000044 	.word	0x20000044
 8001b68:	2000004c 	.word	0x2000004c
 8001b6c:	20000048 	.word	0x20000048

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	2000004c 	.word	0x2000004c
 8001b94:	200007d8 	.word	0x200007d8

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	200007d8 	.word	0x200007d8

08001bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	f003 0307 	and.w	r3, r3, #7
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	db0b      	blt.n	8001bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bde:	4909      	ldr	r1, [pc, #36]	; (8001c04 <__NVIC_EnableIRQ+0x38>)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	79fa      	ldrb	r2, [r7, #7]
 8001be8:	f002 021f 	and.w	r2, r2, #31
 8001bec:	2001      	movs	r0, #1
 8001bee:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000e100 	.word	0xe000e100

08001c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	db0a      	blt.n	8001c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1c:	490d      	ldr	r1, [pc, #52]	; (8001c54 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c30:	e00a      	b.n	8001c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c32:	4909      	ldr	r1, [pc, #36]	; (8001c58 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	0112      	lsls	r2, r2, #4
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	440b      	add	r3, r1
 8001c46:	761a      	strb	r2, [r3, #24]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000e100 	.word	0xe000e100
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f1c3 0307 	rsb	r3, r3, #7
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	bf28      	it	cs
 8001c7a:	2304      	movcs	r3, #4
 8001c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3304      	adds	r3, #4
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d902      	bls.n	8001c8c <NVIC_EncodePriority+0x30>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3b03      	subs	r3, #3
 8001c8a:	e000      	b.n	8001c8e <NVIC_EncodePriority+0x32>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	2201      	movs	r2, #1
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	1e5a      	subs	r2, r3, #1
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	1e59      	subs	r1, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd0:	d301      	bcc.n	8001cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00f      	b.n	8001cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <SysTick_Config+0x40>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cde:	210f      	movs	r1, #15
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f7ff ff90 	bl	8001c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <SysTick_Config+0x40>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SysTick_Config+0x40>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	e000e010 	.word	0xe000e010

08001d04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d16:	f7ff ff4b 	bl	8001bb0 <__NVIC_GetPriorityGrouping>
 8001d1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	68b9      	ldr	r1, [r7, #8]
 8001d20:	6978      	ldr	r0, [r7, #20]
 8001d22:	f7ff ff9b 	bl	8001c5c <NVIC_EncodePriority>
 8001d26:	4602      	mov	r2, r0
 8001d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff6a 	bl	8001c08 <__NVIC_SetPriority>
}
 8001d34:	bf00      	nop
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff3e 	bl	8001bcc <__NVIC_EnableIRQ>
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ffad 	bl	8001cc0 <SysTick_Config>
 8001d66:	4603      	mov	r3, r0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	f7ff ff0c 	bl	8001b98 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e099      	b.n	8001ec0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dac:	e00f      	b.n	8001dce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dae:	f7ff fef3 	bl	8001b98 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d908      	bls.n	8001dce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e078      	b.n	8001ec0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e8      	bne.n	8001dae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <HAL_DMA_Init+0x158>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d107      	bne.n	8001e38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	4313      	orrs	r3, r2
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f023 0307 	bic.w	r3, r3, #7
 8001e4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d117      	bne.n	8001e92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00e      	beq.n	8001e92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fb01 	bl	800247c <DMA_CheckFifoParam>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2240      	movs	r2, #64	; 0x40
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e016      	b.n	8001ec0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fab8 	bl	8002410 <DMA_CalcBaseAndBitshift>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	223f      	movs	r2, #63	; 0x3f
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	f010803f 	.word	0xf010803f

08001ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_DMA_Start_IT+0x26>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e040      	b.n	8001f74 <HAL_DMA_Start_IT+0xa8>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d12f      	bne.n	8001f66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 fa4a 	bl	80023b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	223f      	movs	r2, #63	; 0x3f
 8001f26:	409a      	lsls	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	f042 0216 	orr.w	r2, r2, #22
 8001f3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	f042 0208 	orr.w	r2, r2, #8
 8001f52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e005      	b.n	8001f72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f8a:	f7ff fe05 	bl	8001b98 <HAL_GetTick>
 8001f8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d008      	beq.n	8001fae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e052      	b.n	8002054 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	f022 0216 	bic.w	r2, r2, #22
 8001fbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	6952      	ldr	r2, [r2, #20]
 8001fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d103      	bne.n	8001fde <HAL_DMA_Abort+0x62>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	f022 0208 	bic.w	r2, r2, #8
 8001fec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffe:	e013      	b.n	8002028 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002000:	f7ff fdca 	bl	8001b98 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b05      	cmp	r3, #5
 800200c:	d90c      	bls.n	8002028 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2220      	movs	r2, #32
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2203      	movs	r2, #3
 8002020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e015      	b.n	8002054 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1e4      	bne.n	8002000 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	223f      	movs	r2, #63	; 0x3f
 800203c:	409a      	lsls	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d004      	beq.n	800207a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00c      	b.n	8002094 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2205      	movs	r2, #5
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020ac:	4b92      	ldr	r3, [pc, #584]	; (80022f8 <HAL_DMA_IRQHandler+0x258>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a92      	ldr	r2, [pc, #584]	; (80022fc <HAL_DMA_IRQHandler+0x25c>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0a9b      	lsrs	r3, r3, #10
 80020b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ca:	2208      	movs	r2, #8
 80020cc:	409a      	lsls	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d01a      	beq.n	800210c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	f022 0204 	bic.w	r2, r2, #4
 80020f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	2208      	movs	r2, #8
 80020fa:	409a      	lsls	r2, r3
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	2201      	movs	r2, #1
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d012      	beq.n	8002142 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00b      	beq.n	8002142 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212e:	2201      	movs	r2, #1
 8002130:	409a      	lsls	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0202 	orr.w	r2, r3, #2
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	2204      	movs	r2, #4
 8002148:	409a      	lsls	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d012      	beq.n	8002178 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00b      	beq.n	8002178 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002164:	2204      	movs	r2, #4
 8002166:	409a      	lsls	r2, r3
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	f043 0204 	orr.w	r2, r3, #4
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	2210      	movs	r2, #16
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d043      	beq.n	8002210 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d03c      	beq.n	8002210 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	2210      	movs	r2, #16
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d018      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d108      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d024      	beq.n	8002210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	4798      	blx	r3
 80021ce:	e01f      	b.n	8002210 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01b      	beq.n	8002210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
 80021e0:	e016      	b.n	8002210 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	f022 0208 	bic.w	r2, r2, #8
 80021fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	2220      	movs	r2, #32
 8002216:	409a      	lsls	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 808e 	beq.w	800233e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 8086 	beq.w	800233e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	2220      	movs	r2, #32
 8002238:	409a      	lsls	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b05      	cmp	r3, #5
 8002248:	d136      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	f022 0216 	bic.w	r2, r2, #22
 8002258:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	6952      	ldr	r2, [r2, #20]
 8002264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002268:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d103      	bne.n	800227a <HAL_DMA_IRQHandler+0x1da>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002276:	2b00      	cmp	r3, #0
 8002278:	d007      	beq.n	800228a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	f022 0208 	bic.w	r2, r2, #8
 8002288:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	223f      	movs	r2, #63	; 0x3f
 8002290:	409a      	lsls	r2, r3
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d07d      	beq.n	80023aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
        }
        return;
 80022b6:	e078      	b.n	80023aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01c      	beq.n	8002300 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d108      	bne.n	80022e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d030      	beq.n	800233e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	4798      	blx	r3
 80022e4:	e02b      	b.n	800233e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d027      	beq.n	800233e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
 80022f6:	e022      	b.n	800233e <HAL_DMA_IRQHandler+0x29e>
 80022f8:	20000044 	.word	0x20000044
 80022fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	f022 0210 	bic.w	r2, r2, #16
 800231c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	2b00      	cmp	r3, #0
 8002344:	d032      	beq.n	80023ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d022      	beq.n	8002398 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2205      	movs	r2, #5
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	3301      	adds	r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	4293      	cmp	r3, r2
 8002374:	d807      	bhi.n	8002386 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f2      	bne.n	800236a <HAL_DMA_IRQHandler+0x2ca>
 8002384:	e000      	b.n	8002388 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002386:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
 80023a8:	e000      	b.n	80023ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80023aa:	bf00      	nop
    }
  }
}
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop

080023b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b40      	cmp	r3, #64	; 0x40
 80023e0:	d108      	bne.n	80023f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023f2:	e007      	b.n	8002404 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	60da      	str	r2, [r3, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	3b10      	subs	r3, #16
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <DMA_CalcBaseAndBitshift+0x64>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800242a:	4a13      	ldr	r2, [pc, #76]	; (8002478 <DMA_CalcBaseAndBitshift+0x68>)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b03      	cmp	r3, #3
 800243c:	d909      	bls.n	8002452 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	1d1a      	adds	r2, r3, #4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	659a      	str	r2, [r3, #88]	; 0x58
 8002450:	e007      	b.n	8002462 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	aaaaaaab 	.word	0xaaaaaaab
 8002478:	08018b5c 	.word	0x08018b5c

0800247c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d11f      	bne.n	80024d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d855      	bhi.n	8002548 <DMA_CheckFifoParam+0xcc>
 800249c:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <DMA_CheckFifoParam+0x28>)
 800249e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a2:	bf00      	nop
 80024a4:	080024b5 	.word	0x080024b5
 80024a8:	080024c7 	.word	0x080024c7
 80024ac:	080024b5 	.word	0x080024b5
 80024b0:	08002549 	.word	0x08002549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d045      	beq.n	800254c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c4:	e042      	b.n	800254c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ce:	d13f      	bne.n	8002550 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d4:	e03c      	b.n	8002550 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024de:	d121      	bne.n	8002524 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d836      	bhi.n	8002554 <DMA_CheckFifoParam+0xd8>
 80024e6:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <DMA_CheckFifoParam+0x70>)
 80024e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ec:	080024fd 	.word	0x080024fd
 80024f0:	08002503 	.word	0x08002503
 80024f4:	080024fd 	.word	0x080024fd
 80024f8:	08002515 	.word	0x08002515
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002500:	e02f      	b.n	8002562 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d024      	beq.n	8002558 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002512:	e021      	b.n	8002558 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800251c:	d11e      	bne.n	800255c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002522:	e01b      	b.n	800255c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d902      	bls.n	8002530 <DMA_CheckFifoParam+0xb4>
 800252a:	2b03      	cmp	r3, #3
 800252c:	d003      	beq.n	8002536 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800252e:	e018      	b.n	8002562 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      break;
 8002534:	e015      	b.n	8002562 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00e      	beq.n	8002560 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
      break;
 8002546:	e00b      	b.n	8002560 <DMA_CheckFifoParam+0xe4>
      break;
 8002548:	bf00      	nop
 800254a:	e00a      	b.n	8002562 <DMA_CheckFifoParam+0xe6>
      break;
 800254c:	bf00      	nop
 800254e:	e008      	b.n	8002562 <DMA_CheckFifoParam+0xe6>
      break;
 8002550:	bf00      	nop
 8002552:	e006      	b.n	8002562 <DMA_CheckFifoParam+0xe6>
      break;
 8002554:	bf00      	nop
 8002556:	e004      	b.n	8002562 <DMA_CheckFifoParam+0xe6>
      break;
 8002558:	bf00      	nop
 800255a:	e002      	b.n	8002562 <DMA_CheckFifoParam+0xe6>
      break;   
 800255c:	bf00      	nop
 800255e:	e000      	b.n	8002562 <DMA_CheckFifoParam+0xe6>
      break;
 8002560:	bf00      	nop
    }
  } 
  
  return status; 
 8002562:	7bfb      	ldrb	r3, [r7, #15]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	; 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e14d      	b.n	8002828 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800258c:	2201      	movs	r2, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f040 813c 	bne.w	8002822 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d00b      	beq.n	80025ca <HAL_GPIO_Init+0x5a>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d007      	beq.n	80025ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025be:	2b11      	cmp	r3, #17
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b12      	cmp	r3, #18
 80025c8:	d130      	bne.n	800262c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 0201 	and.w	r2, r3, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0xfc>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b12      	cmp	r3, #18
 800266a:	d123      	bne.n	80026b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	69b9      	ldr	r1, [r7, #24]
 80026b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 8096 	beq.w	8002822 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4a50      	ldr	r2, [pc, #320]	; (800283c <HAL_GPIO_Init+0x2cc>)
 80026fc:	4b4f      	ldr	r3, [pc, #316]	; (800283c <HAL_GPIO_Init+0x2cc>)
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b4d      	ldr	r3, [pc, #308]	; (800283c <HAL_GPIO_Init+0x2cc>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002712:	4a4b      	ldr	r2, [pc, #300]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	220f      	movs	r2, #15
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a42      	ldr	r2, [pc, #264]	; (8002844 <HAL_GPIO_Init+0x2d4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00d      	beq.n	800275a <HAL_GPIO_Init+0x1ea>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a41      	ldr	r2, [pc, #260]	; (8002848 <HAL_GPIO_Init+0x2d8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <HAL_GPIO_Init+0x1e6>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a40      	ldr	r2, [pc, #256]	; (800284c <HAL_GPIO_Init+0x2dc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d101      	bne.n	8002752 <HAL_GPIO_Init+0x1e2>
 800274e:	2302      	movs	r3, #2
 8002750:	e004      	b.n	800275c <HAL_GPIO_Init+0x1ec>
 8002752:	2307      	movs	r3, #7
 8002754:	e002      	b.n	800275c <HAL_GPIO_Init+0x1ec>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_GPIO_Init+0x1ec>
 800275a:	2300      	movs	r3, #0
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f002 0203 	and.w	r2, r2, #3
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	4093      	lsls	r3, r2
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800276c:	4934      	ldr	r1, [pc, #208]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	3302      	adds	r3, #2
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277a:	4b35      	ldr	r3, [pc, #212]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800279e:	4a2c      	ldr	r2, [pc, #176]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c8:	4a21      	ldr	r2, [pc, #132]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027f2:	4a17      	ldr	r2, [pc, #92]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800281c:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3301      	adds	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b0f      	cmp	r3, #15
 800282c:	f67f aeae 	bls.w	800258c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002830:	bf00      	nop
 8002832:	3724      	adds	r7, #36	; 0x24
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40023800 	.word	0x40023800
 8002840:	40013800 	.word	0x40013800
 8002844:	40020000 	.word	0x40020000
 8002848:	40020400 	.word	0x40020400
 800284c:	40020800 	.word	0x40020800
 8002850:	40013c00 	.word	0x40013c00

08002854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	887b      	ldrh	r3, [r7, #2]
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
 8002870:	e001      	b.n	8002876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002876:	7bfb      	ldrb	r3, [r7, #15]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
 8002890:	4613      	mov	r3, r2
 8002892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002894:	787b      	ldrb	r3, [r7, #1]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a0:	e003      	b.n	80028aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	041a      	lsls	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	619a      	str	r2, [r3, #24]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ce:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe f93a 	bl	8000b50 <HAL_GPIO_EXTI_Callback>
  }
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40013c00 	.word	0x40013c00

080028e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0cc      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 020f 	and.w	r2, r3, #15
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d20c      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 020f 	and.w	r2, r3, #15
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0b8      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800293c:	4a59      	ldr	r2, [pc, #356]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002954:	4a53      	ldr	r2, [pc, #332]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4950      	ldr	r1, [pc, #320]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d044      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d119      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e07f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e06f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e067      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c6:	4937      	ldr	r1, [pc, #220]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 0203 	bic.w	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d8:	f7ff f8de 	bl	8001b98 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e0:	f7ff f8da 	bl	8001b98 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e04f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 020c 	and.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1eb      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 020f 	and.w	r2, r3, #15
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d90c      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 020f 	and.w	r2, r3, #15
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e032      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3c:	4919      	ldr	r1, [pc, #100]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5a:	4912      	ldr	r1, [pc, #72]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a6e:	f000 f821 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a72:	4601      	mov	r1, r0
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	5cd3      	ldrb	r3, [r2, r3]
 8002a82:	fa21 f303 	lsr.w	r3, r1, r3
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff f83e 	bl	8001b10 <HAL_InitTick>

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023c00 	.word	0x40023c00
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	08018b44 	.word	0x08018b44
 8002aac:	20000044 	.word	0x20000044
 8002ab0:	20000048 	.word	0x20000048

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab8:	b08f      	sub	sp, #60	; 0x3c
 8002aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002acc:	4b62      	ldr	r3, [pc, #392]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d007      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x3a>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 80b2 	bne.w	8002c46 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae2:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ae4:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8002ae6:	e0b1      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae8:	4b5d      	ldr	r3, [pc, #372]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002aea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002aec:	e0ae      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aee:	4b5a      	ldr	r3, [pc, #360]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002af8:	4b57      	ldr	r3, [pc, #348]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d04e      	beq.n	8002ba2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b04:	4b54      	ldr	r3, [pc, #336]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	f04f 0400 	mov.w	r4, #0
 8002b0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	ea01 0103 	and.w	r1, r1, r3
 8002b1a:	ea02 0204 	and.w	r2, r2, r4
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4614      	mov	r4, r2
 8002b22:	0160      	lsls	r0, r4, #5
 8002b24:	6278      	str	r0, [r7, #36]	; 0x24
 8002b26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b28:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002b2c:	6278      	str	r0, [r7, #36]	; 0x24
 8002b2e:	015b      	lsls	r3, r3, #5
 8002b30:	623b      	str	r3, [r7, #32]
 8002b32:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002b36:	1a5b      	subs	r3, r3, r1
 8002b38:	eb64 0402 	sbc.w	r4, r4, r2
 8002b3c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002b40:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002b44:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002b48:	ebb8 0803 	subs.w	r8, r8, r3
 8002b4c:	eb69 0904 	sbc.w	r9, r9, r4
 8002b50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002b68:	eb18 0801 	adds.w	r8, r8, r1
 8002b6c:	eb49 0902 	adc.w	r9, r9, r2
 8002b70:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002b88:	4640      	mov	r0, r8
 8002b8a:	4649      	mov	r1, r9
 8002b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8e:	f04f 0400 	mov.w	r4, #0
 8002b92:	461a      	mov	r2, r3
 8002b94:	4623      	mov	r3, r4
 8002b96:	f7fd fb8b 	bl	80002b0 <__aeabi_uldivmod>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba0:	e043      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	f04f 0400 	mov.w	r4, #0
 8002bac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	ea01 0103 	and.w	r1, r1, r3
 8002bb8:	ea02 0204 	and.w	r2, r2, r4
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4614      	mov	r4, r2
 8002bc0:	0160      	lsls	r0, r4, #5
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	015b      	lsls	r3, r3, #5
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002bd4:	1a5b      	subs	r3, r3, r1
 8002bd6:	eb64 0402 	sbc.w	r4, r4, r2
 8002bda:	01a6      	lsls	r6, r4, #6
 8002bdc:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002be0:	019d      	lsls	r5, r3, #6
 8002be2:	1aed      	subs	r5, r5, r3
 8002be4:	eb66 0604 	sbc.w	r6, r6, r4
 8002be8:	00f3      	lsls	r3, r6, #3
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002bf2:	607b      	str	r3, [r7, #4]
 8002bf4:	00eb      	lsls	r3, r5, #3
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002bfc:	186d      	adds	r5, r5, r1
 8002bfe:	eb46 0602 	adc.w	r6, r6, r2
 8002c02:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002c06:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002c0a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002c0e:	4655      	mov	r5, sl
 8002c10:	465e      	mov	r6, fp
 8002c12:	4628      	mov	r0, r5
 8002c14:	4631      	mov	r1, r6
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	f04f 0400 	mov.w	r4, #0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4623      	mov	r3, r4
 8002c20:	f7fd fb46 	bl	80002b0 <__aeabi_uldivmod>
 8002c24:	4603      	mov	r3, r0
 8002c26:	460c      	mov	r4, r1
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0c1b      	lsrs	r3, r3, #16
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	3301      	adds	r3, #1
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8002c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c44:	e002      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	373c      	adds	r7, #60	; 0x3c
 8002c52:	46bd      	mov	sp, r7
 8002c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	00f42400 	.word	0x00f42400
 8002c60:	007a1200 	.word	0x007a1200

08002c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000044 	.word	0x20000044

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c80:	f7ff fff0 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002c84:	4601      	mov	r1, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	0a9b      	lsrs	r3, r3, #10
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	08018b54 	.word	0x08018b54

08002ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ca8:	f7ff ffdc 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002cac:	4601      	mov	r1, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0b5b      	lsrs	r3, r3, #13
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4a03      	ldr	r2, [pc, #12]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08018b54 	.word	0x08018b54

08002ccc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d075      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ce4:	4ba2      	ldr	r3, [pc, #648]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d00c      	beq.n	8002d0a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf0:	4b9f      	ldr	r3, [pc, #636]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d112      	bne.n	8002d22 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfc:	4b9c      	ldr	r3, [pc, #624]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d08:	d10b      	bne.n	8002d22 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0a:	4b99      	ldr	r3, [pc, #612]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d05b      	beq.n	8002dce <HAL_RCC_OscConfig+0x102>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d157      	bne.n	8002dce <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e20b      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x6e>
 8002d2c:	4a90      	ldr	r2, [pc, #576]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002d2e:	4b90      	ldr	r3, [pc, #576]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	e01d      	b.n	8002d76 <HAL_RCC_OscConfig+0xaa>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x92>
 8002d44:	4a8a      	ldr	r2, [pc, #552]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002d46:	4b8a      	ldr	r3, [pc, #552]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4a87      	ldr	r2, [pc, #540]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002d52:	4b87      	ldr	r3, [pc, #540]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCC_OscConfig+0xaa>
 8002d5e:	4a84      	ldr	r2, [pc, #528]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002d60:	4b83      	ldr	r3, [pc, #524]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4a81      	ldr	r2, [pc, #516]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002d6c:	4b80      	ldr	r3, [pc, #512]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d013      	beq.n	8002da6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7fe ff0b 	bl	8001b98 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d86:	f7fe ff07 	bl	8001b98 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b64      	cmp	r3, #100	; 0x64
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e1d0      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d98:	4b75      	ldr	r3, [pc, #468]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0xba>
 8002da4:	e014      	b.n	8002dd0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fe fef7 	bl	8001b98 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dae:	f7fe fef3 	bl	8001b98 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b64      	cmp	r3, #100	; 0x64
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e1bc      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc0:	4b6b      	ldr	r3, [pc, #428]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCC_OscConfig+0xe2>
 8002dcc:	e000      	b.n	8002dd0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d063      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ddc:	4b64      	ldr	r3, [pc, #400]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de8:	4b61      	ldr	r3, [pc, #388]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d11c      	bne.n	8002e2e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df4:	4b5e      	ldr	r3, [pc, #376]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d116      	bne.n	8002e2e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e00:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_OscConfig+0x14c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e190      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e18:	4955      	ldr	r1, [pc, #340]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002e1a:	4b55      	ldr	r3, [pc, #340]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2c:	e03a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d020      	beq.n	8002e78 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e36:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_RCC_OscConfig+0x2a8>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe feac 	bl	8001b98 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e44:	f7fe fea8 	bl	8001b98 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e171      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	4b46      	ldr	r3, [pc, #280]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	4943      	ldr	r1, [pc, #268]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002e64:	4b42      	ldr	r3, [pc, #264]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
 8002e76:	e015      	b.n	8002ea4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e78:	4b3e      	ldr	r3, [pc, #248]	; (8002f74 <HAL_RCC_OscConfig+0x2a8>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7fe fe8b 	bl	8001b98 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e86:	f7fe fe87 	bl	8001b98 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e150      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e98:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d030      	beq.n	8002f12 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d016      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb8:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fe6b 	bl	8001b98 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec6:	f7fe fe67 	bl	8001b98 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e130      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed8:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1fa>
 8002ee4:	e015      	b.n	8002f12 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee6:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7fe fe54 	bl	8001b98 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef4:	f7fe fe50 	bl	8001b98 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e119      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f06:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 809f 	beq.w	800305e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f20:	2300      	movs	r3, #0
 8002f22:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10f      	bne.n	8002f50 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x2a4>)
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_RCC_OscConfig+0x2b0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d120      	bne.n	8002f9e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5c:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_RCC_OscConfig+0x2b0>)
 8002f5e:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <HAL_RCC_OscConfig+0x2b0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f68:	f7fe fe16 	bl	8001b98 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6e:	e010      	b.n	8002f92 <HAL_RCC_OscConfig+0x2c6>
 8002f70:	40023800 	.word	0x40023800
 8002f74:	42470000 	.word	0x42470000
 8002f78:	42470e80 	.word	0x42470e80
 8002f7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f80:	f7fe fe0a 	bl	8001b98 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e0d3      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b6c      	ldr	r3, [pc, #432]	; (8003144 <HAL_RCC_OscConfig+0x478>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d106      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x2e8>
 8002fa6:	4a68      	ldr	r2, [pc, #416]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8002fa8:	4b67      	ldr	r3, [pc, #412]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb2:	e01c      	b.n	8002fee <HAL_RCC_OscConfig+0x322>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d10c      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x30a>
 8002fbc:	4a62      	ldr	r2, [pc, #392]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8002fbe:	4b62      	ldr	r3, [pc, #392]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	4a5f      	ldr	r2, [pc, #380]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8002fca:	4b5f      	ldr	r3, [pc, #380]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd4:	e00b      	b.n	8002fee <HAL_RCC_OscConfig+0x322>
 8002fd6:	4a5c      	ldr	r2, [pc, #368]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8002fd8:	4b5b      	ldr	r3, [pc, #364]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe2:	4a59      	ldr	r2, [pc, #356]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8002fe4:	4b58      	ldr	r3, [pc, #352]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d015      	beq.n	8003022 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fdcf 	bl	8001b98 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe fdcb 	bl	8001b98 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	; 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e092      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	4b4c      	ldr	r3, [pc, #304]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ee      	beq.n	8002ffe <HAL_RCC_OscConfig+0x332>
 8003020:	e014      	b.n	800304c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe fdb9 	bl	8001b98 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fdb5 	bl	8001b98 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e07c      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003040:	4b41      	ldr	r3, [pc, #260]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ee      	bne.n	800302a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d105      	bne.n	800305e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003052:	4a3d      	ldr	r2, [pc, #244]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8003054:	4b3c      	ldr	r3, [pc, #240]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d068      	beq.n	8003138 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003066:	4b38      	ldr	r3, [pc, #224]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b08      	cmp	r3, #8
 8003070:	d060      	beq.n	8003134 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d145      	bne.n	8003106 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307a:	4b34      	ldr	r3, [pc, #208]	; (800314c <HAL_RCC_OscConfig+0x480>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe fd8a 	bl	8001b98 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe fd86 	bl	8001b98 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e04f      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a6:	4928      	ldr	r1, [pc, #160]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	019b      	lsls	r3, r3, #6
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	085b      	lsrs	r3, r3, #1
 80030c0:	3b01      	subs	r3, #1
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	061b      	lsls	r3, r3, #24
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	071b      	lsls	r3, r3, #28
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d8:	4b1c      	ldr	r3, [pc, #112]	; (800314c <HAL_RCC_OscConfig+0x480>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7fe fd5b 	bl	8001b98 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e6:	f7fe fd57 	bl	8001b98 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e020      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x41a>
 8003104:	e018      	b.n	8003138 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_RCC_OscConfig+0x480>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fe fd44 	bl	8001b98 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe fd40 	bl	8001b98 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e009      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_RCC_OscConfig+0x47c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x448>
 8003132:	e001      	b.n	8003138 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40007000 	.word	0x40007000
 8003148:	40023800 	.word	0x40023800
 800314c:	42470060 	.word	0x42470060

08003150 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e055      	b.n	800320e <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fe f8bf 	bl	8001300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003198:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6851      	ldr	r1, [r2, #4]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6892      	ldr	r2, [r2, #8]
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68d2      	ldr	r2, [r2, #12]
 80031ac:	4311      	orrs	r1, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6912      	ldr	r2, [r2, #16]
 80031b2:	4311      	orrs	r1, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6952      	ldr	r2, [r2, #20]
 80031b8:	4311      	orrs	r1, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6992      	ldr	r2, [r2, #24]
 80031be:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80031c2:	4311      	orrs	r1, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	69d2      	ldr	r2, [r2, #28]
 80031c8:	4311      	orrs	r1, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6a12      	ldr	r2, [r2, #32]
 80031ce:	4311      	orrs	r1, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6992      	ldr	r2, [r2, #24]
 80031e0:	0c12      	lsrs	r2, r2, #16
 80031e2:	f002 0104 	and.w	r1, r2, #4
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	69d2      	ldr	r2, [r2, #28]
 80031f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	4613      	mov	r3, r2
 8003224:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_SPI_Transmit_DMA+0x20>
 8003234:	2302      	movs	r3, #2
 8003236:	e093      	b.n	8003360 <HAL_SPI_Transmit_DMA+0x148>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d002      	beq.n	8003252 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800324c:	2302      	movs	r3, #2
 800324e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003250:	e081      	b.n	8003356 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_SPI_Transmit_DMA+0x46>
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003262:	e078      	b.n	8003356 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2203      	movs	r2, #3
 8003268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	88fa      	ldrh	r2, [r7, #6]
 800327c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	88fa      	ldrh	r2, [r7, #6]
 8003282:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032aa:	d107      	bne.n	80032bc <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c0:	4a29      	ldr	r2, [pc, #164]	; (8003368 <HAL_SPI_Transmit_DMA+0x150>)
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c8:	4a28      	ldr	r2, [pc, #160]	; (800336c <HAL_SPI_Transmit_DMA+0x154>)
 80032ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d0:	4a27      	ldr	r2, [pc, #156]	; (8003370 <HAL_SPI_Transmit_DMA+0x158>)
 80032d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d8:	2200      	movs	r2, #0
 80032da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	4619      	mov	r1, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	330c      	adds	r3, #12
 80032ec:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032f4:	f7fe fdea 	bl	8001ecc <HAL_DMA_Start_IT>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00c      	beq.n	8003318 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	f043 0210 	orr.w	r2, r3, #16
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003316:	e01e      	b.n	8003356 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b40      	cmp	r3, #64	; 0x40
 8003324:	d007      	beq.n	8003336 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	6852      	ldr	r2, [r2, #4]
 8003340:	f042 0220 	orr.w	r2, r2, #32
 8003344:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	6852      	ldr	r2, [r2, #4]
 8003350:	f042 0202 	orr.w	r2, r2, #2
 8003354:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800335e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	08003981 	.word	0x08003981
 800336c:	080037a1 	.word	0x080037a1
 8003370:	080039d5 	.word	0x080039d5

08003374 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003390:	2302      	movs	r3, #2
 8003392:	e0e3      	b.n	800355c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033a2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80033aa:	7dbb      	ldrb	r3, [r7, #22]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d00d      	beq.n	80033cc <HAL_SPI_TransmitReceive_DMA+0x58>
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033b6:	d106      	bne.n	80033c6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80033c0:	7dbb      	ldrb	r3, [r7, #22]
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d002      	beq.n	80033cc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
 80033c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033ca:	e0c2      	b.n	8003552 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_SPI_TransmitReceive_DMA+0x6a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_SPI_TransmitReceive_DMA+0x6a>
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033e2:	e0b6      	b.n	8003552 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d003      	beq.n	80033f8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2205      	movs	r2, #5
 80033f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	887a      	ldrh	r2, [r7, #2]
 800340e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	887a      	ldrh	r2, [r7, #2]
 800341a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b04      	cmp	r3, #4
 8003438:	d108      	bne.n	800344c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343e:	4a49      	ldr	r2, [pc, #292]	; (8003564 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003446:	4a48      	ldr	r2, [pc, #288]	; (8003568 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003448:	63da      	str	r2, [r3, #60]	; 0x3c
 800344a:	e007      	b.n	800345c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	4a46      	ldr	r2, [pc, #280]	; (800356c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003458:	4a45      	ldr	r2, [pc, #276]	; (8003570 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800345a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003460:	4a44      	ldr	r2, [pc, #272]	; (8003574 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003462:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003468:	2200      	movs	r2, #0
 800346a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	4619      	mov	r1, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003482:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003484:	f7fe fd22 	bl	8001ecc <HAL_DMA_Start_IT>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00c      	beq.n	80034a8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	f043 0210 	orr.w	r2, r3, #16
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80034a6:	e054      	b.n	8003552 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	6852      	ldr	r2, [r2, #4]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034bc:	2200      	movs	r2, #0
 80034be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c4:	2200      	movs	r2, #0
 80034c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034cc:	2200      	movs	r2, #0
 80034ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d4:	2200      	movs	r2, #0
 80034d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	4619      	mov	r1, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	330c      	adds	r3, #12
 80034e8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80034f0:	f7fe fcec 	bl	8001ecc <HAL_DMA_Start_IT>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	f043 0210 	orr.w	r2, r3, #16
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003512:	e01e      	b.n	8003552 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d007      	beq.n	8003532 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003530:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	6852      	ldr	r2, [r2, #4]
 800353c:	f042 0220 	orr.w	r2, r2, #32
 8003540:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	6852      	ldr	r2, [r2, #4]
 800354c:	f042 0202 	orr.w	r2, r2, #2
 8003550:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800355a:	7dfb      	ldrb	r3, [r7, #23]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	0800399d 	.word	0x0800399d
 8003568:	08003849 	.word	0x08003849
 800356c:	080039b9 	.word	0x080039b9
 8003570:	080038f1 	.word	0x080038f1
 8003574:	080039d5 	.word	0x080039d5

08003578 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003584:	4b6e      	ldr	r3, [pc, #440]	; (8003740 <HAL_SPI_Abort+0x1c8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a6e      	ldr	r2, [pc, #440]	; (8003744 <HAL_SPI_Abort+0x1cc>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	0a5b      	lsrs	r3, r3, #9
 8003590:	2264      	movs	r2, #100	; 0x64
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	6852      	ldr	r2, [r2, #4]
 80035a6:	f022 0220 	bic.w	r2, r2, #32
 80035aa:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b80      	cmp	r3, #128	; 0x80
 80035b8:	d117      	bne.n	80035ea <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a62      	ldr	r2, [pc, #392]	; (8003748 <HAL_SPI_Abort+0x1d0>)
 80035be:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80035d2:	e008      	b.n	80035e6 <HAL_SPI_Abort+0x6e>
      }
      count--;
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b07      	cmp	r3, #7
 80035e4:	d1ec      	bne.n	80035c0 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d117      	bne.n	8003628 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a54      	ldr	r2, [pc, #336]	; (800374c <HAL_SPI_Abort+0x1d4>)
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003610:	e008      	b.n	8003624 <HAL_SPI_Abort+0xac>
      }
      count--;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	3b01      	subs	r3, #1
 8003616:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b07      	cmp	r3, #7
 8003622:	d1ec      	bne.n	80035fe <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b02      	cmp	r3, #2
 8003634:	d12e      	bne.n	8003694 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363a:	2b00      	cmp	r3, #0
 800363c:	d02a      	beq.n	8003694 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003642:	2200      	movs	r2, #0
 8003644:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe fc96 	bl	8001f7c <HAL_DMA_Abort>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2240      	movs	r2, #64	; 0x40
 800365a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	6852      	ldr	r2, [r2, #4]
 8003666:	f022 0202 	bic.w	r2, r2, #2
 800366a:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 800367e:	e009      	b.n	8003694 <HAL_SPI_Abort+0x11c>
        }
        count--;
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	3b01      	subs	r3, #1
 8003684:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0eb      	beq.n	800366c <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d122      	bne.n	80036e8 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d01e      	beq.n	80036e8 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ae:	2200      	movs	r2, #0
 80036b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fc60 	bl	8001f7c <HAL_DMA_Abort>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2240      	movs	r2, #64	; 0x40
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d6:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	6852      	ldr	r2, [r2, #4]
 80036e2:	f022 0201 	bic.w	r2, r2, #1
 80036e6:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d102      	bne.n	8003702 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	77fb      	strb	r3, [r7, #31]
 8003700:	e002      	b.n	8003708 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 8003734:	7ffb      	ldrb	r3, [r7, #31]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000044 	.word	0x20000044
 8003744:	057619f1 	.word	0x057619f1
 8003748:	08003cc1 	.word	0x08003cc1
 800374c:	08003c39 	.word	0x08003c39

08003750 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037ae:	f7fe f9f3 	bl	8001b98 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c2:	d03b      	beq.n	800383c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	6852      	ldr	r2, [r2, #4]
 80037ce:	f022 0220 	bic.w	r2, r2, #32
 80037d2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	6852      	ldr	r2, [r2, #4]
 80037de:	f022 0202 	bic.w	r2, r2, #2
 80037e2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	2164      	movs	r1, #100	; 0x64
 80037e8:	6978      	ldr	r0, [r7, #20]
 80037ea:	f000 f9e3 	bl	8003bb4 <SPI_EndRxTxTransaction>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	f043 0220 	orr.w	r2, r3, #32
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2200      	movs	r2, #0
 8003822:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003834:	6978      	ldr	r0, [r7, #20]
 8003836:	f7fd f955 	bl	8000ae4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800383a:	e002      	b.n	8003842 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800383c:	6978      	ldr	r0, [r7, #20]
 800383e:	f7fd f905 	bl	8000a4c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003856:	f7fe f99f 	bl	8001b98 <HAL_GetTick>
 800385a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386a:	d03b      	beq.n	80038e4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	6852      	ldr	r2, [r2, #4]
 8003876:	f022 0220 	bic.w	r2, r2, #32
 800387a:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10d      	bne.n	80038a0 <SPI_DMAReceiveCplt+0x58>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800388c:	d108      	bne.n	80038a0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	6852      	ldr	r2, [r2, #4]
 8003898:	f022 0203 	bic.w	r2, r2, #3
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	e007      	b.n	80038b0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	6852      	ldr	r2, [r2, #4]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	2164      	movs	r1, #100	; 0x64
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f917 	bl	8003ae8 <SPI_EndRxTransaction>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f7fd f901 	bl	8000ae4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80038e2:	e002      	b.n	80038ea <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7ff ff33 	bl	8003750 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038fe:	f7fe f94b 	bl	8001b98 <HAL_GetTick>
 8003902:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003912:	d02f      	beq.n	8003974 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	6852      	ldr	r2, [r2, #4]
 800391e:	f022 0220 	bic.w	r2, r2, #32
 8003922:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	2164      	movs	r1, #100	; 0x64
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f943 	bl	8003bb4 <SPI_EndRxTxTransaction>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	f043 0220 	orr.w	r2, r3, #32
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	6852      	ldr	r2, [r2, #4]
 800394a:	f022 0203 	bic.w	r2, r2, #3
 800394e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f7fd f8b9 	bl	8000ae4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003972:	e002      	b.n	800397a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7fd f883 	bl	8000a80 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7ff fee8 	bl	8003764 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff fee4 	bl	8003778 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7ff fee0 	bl	800378c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	6852      	ldr	r2, [r2, #4]
 80039ec:	f022 0203 	bic.w	r2, r2, #3
 80039f0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f6:	f043 0210 	orr.w	r2, r3, #16
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7fd f86c 	bl	8000ae4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a24:	e04c      	b.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d048      	beq.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003a2e:	f7fe f8b3 	bl	8001b98 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	1ad2      	subs	r2, r2, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d202      	bcs.n	8003a44 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d13d      	bne.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	6852      	ldr	r2, [r2, #4]
 8003a4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a5c:	d111      	bne.n	8003a82 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a66:	d004      	beq.n	8003a72 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a70:	d107      	bne.n	8003a82 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8a:	d10f      	bne.n	8003aac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aaa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e00f      	b.n	8003ae0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	401a      	ands	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d1a3      	bne.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afc:	d111      	bne.n	8003b22 <SPI_EndRxTransaction+0x3a>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b06:	d004      	beq.n	8003b12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b10:	d107      	bne.n	8003b22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2a:	d12a      	bne.n	8003b82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b34:	d012      	beq.n	8003b5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2180      	movs	r1, #128	; 0x80
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f7ff ff67 	bl	8003a14 <SPI_WaitFlagStateUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d02d      	beq.n	8003ba8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e026      	b.n	8003baa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2200      	movs	r2, #0
 8003b64:	2101      	movs	r1, #1
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f7ff ff54 	bl	8003a14 <SPI_WaitFlagStateUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01a      	beq.n	8003ba8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	f043 0220 	orr.w	r2, r3, #32
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e013      	b.n	8003baa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f7ff ff41 	bl	8003a14 <SPI_WaitFlagStateUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d007      	beq.n	8003ba8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	f043 0220 	orr.w	r2, r3, #32
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e000      	b.n	8003baa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <SPI_EndRxTxTransaction+0x7c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <SPI_EndRxTxTransaction+0x80>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0d5b      	lsrs	r3, r3, #21
 8003bcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bde:	d112      	bne.n	8003c06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2200      	movs	r2, #0
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7ff ff12 	bl	8003a14 <SPI_WaitFlagStateUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d016      	beq.n	8003c24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	f043 0220 	orr.w	r2, r3, #32
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e00f      	b.n	8003c26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b80      	cmp	r3, #128	; 0x80
 8003c1e:	d0f2      	beq.n	8003c06 <SPI_EndRxTxTransaction+0x52>
 8003c20:	e000      	b.n	8003c24 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c22:	bf00      	nop
  }

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000044 	.word	0x20000044
 8003c34:	165e9f81 	.word	0x165e9f81

08003c38 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003c40:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <SPI_AbortRx_ISR+0x80>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <SPI_AbortRx_ISR+0x84>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0a5b      	lsrs	r3, r3, #9
 8003c4c:	2264      	movs	r2, #100	; 0x64
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c66:	e009      	b.n	8003c7c <SPI_AbortRx_ISR+0x44>
    }
    count--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0eb      	beq.n	8003c54 <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	6852      	ldr	r2, [r2, #4]
 8003c96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c9a:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2207      	movs	r2, #7
 8003ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000044 	.word	0x20000044
 8003cbc:	057619f1 	.word	0x057619f1

08003cc0 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	6852      	ldr	r2, [r2, #4]
 8003cd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd6:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce6:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2207      	movs	r2, #7
 8003cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e01d      	b.n	8003d4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fd fdc4 	bl	80018b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f000 fa56 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b06      	cmp	r3, #6
 8003d72:	d007      	beq.n	8003d84 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	6812      	ldr	r2, [r2, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d122      	bne.n	8003df6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d11b      	bne.n	8003df6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f06f 0202 	mvn.w	r2, #2
 8003dc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f9e7 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003de2:	e005      	b.n	8003df0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f9d9 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f9ea 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d122      	bne.n	8003e4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d11b      	bne.n	8003e4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f06f 0204 	mvn.w	r2, #4
 8003e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f9bd 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003e36:	e005      	b.n	8003e44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f9af 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f9c0 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d122      	bne.n	8003e9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d11b      	bne.n	8003e9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f06f 0208 	mvn.w	r2, #8
 8003e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2204      	movs	r2, #4
 8003e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f993 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003e8a:	e005      	b.n	8003e98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f985 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f996 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d122      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b10      	cmp	r3, #16
 8003eb8:	d11b      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f06f 0210 	mvn.w	r2, #16
 8003ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2208      	movs	r2, #8
 8003ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f969 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003ede:	e005      	b.n	8003eec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f95b 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f96c 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d10e      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d107      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f06f 0201 	mvn.w	r2, #1
 8003f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fc ff17 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f28:	2b80      	cmp	r3, #128	; 0x80
 8003f2a:	d10e      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d107      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fb97 	bl	8004678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f54:	2b40      	cmp	r3, #64	; 0x40
 8003f56:	d10e      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d107      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f931 	bl	80041d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d10e      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d107      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f06f 0220 	mvn.w	r2, #32
 8003f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fb61 	bl	8004664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_TIM_ConfigClockSource+0x18>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e0a6      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x166>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fe0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fe8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b40      	cmp	r3, #64	; 0x40
 8003ff8:	d067      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x120>
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d80b      	bhi.n	8004016 <HAL_TIM_ConfigClockSource+0x6c>
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d073      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x140>
 8004002:	2b10      	cmp	r3, #16
 8004004:	d802      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x62>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d06f      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800400a:	e078      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800400c:	2b20      	cmp	r3, #32
 800400e:	d06c      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x140>
 8004010:	2b30      	cmp	r3, #48	; 0x30
 8004012:	d06a      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004014:	e073      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004016:	2b70      	cmp	r3, #112	; 0x70
 8004018:	d00d      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x8c>
 800401a:	2b70      	cmp	r3, #112	; 0x70
 800401c:	d804      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x7e>
 800401e:	2b50      	cmp	r3, #80	; 0x50
 8004020:	d033      	beq.n	800408a <HAL_TIM_ConfigClockSource+0xe0>
 8004022:	2b60      	cmp	r3, #96	; 0x60
 8004024:	d041      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004026:	e06a      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402c:	d066      	beq.n	80040fc <HAL_TIM_ConfigClockSource+0x152>
 800402e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004032:	d017      	beq.n	8004064 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004034:	e063      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	6899      	ldr	r1, [r3, #8]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f000 fa71 	bl	800452c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004058:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	609a      	str	r2, [r3, #8]
      break;
 8004062:	e04c      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6899      	ldr	r1, [r3, #8]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f000 fa5a 	bl	800452c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	6892      	ldr	r2, [r2, #8]
 8004082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004086:	609a      	str	r2, [r3, #8]
      break;
 8004088:	e039      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	461a      	mov	r2, r3
 8004098:	f000 f9ce 	bl	8004438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2150      	movs	r1, #80	; 0x50
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fa27 	bl	80044f6 <TIM_ITRx_SetConfig>
      break;
 80040a8:	e029      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6859      	ldr	r1, [r3, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f000 f9ed 	bl	8004496 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2160      	movs	r1, #96	; 0x60
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fa17 	bl	80044f6 <TIM_ITRx_SetConfig>
      break;
 80040c8:	e019      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6859      	ldr	r1, [r3, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f000 f9ae 	bl	8004438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2140      	movs	r1, #64	; 0x40
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fa07 	bl	80044f6 <TIM_ITRx_SetConfig>
      break;
 80040e8:	e009      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f000 f9fe 	bl	80044f6 <TIM_ITRx_SetConfig>
      break;
 80040fa:	e000      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x154>
      break;
 80040fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_TIM_SlaveConfigSynchro+0x18>
 800412c:	2302      	movs	r3, #2
 800412e:	e031      	b.n	8004194 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004140:	6839      	ldr	r1, [r7, #0]
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f8f2 	bl	800432c <TIM_SlaveTimer_SetConfig>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e018      	b.n	8004194 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	68d2      	ldr	r2, [r2, #12]
 800416c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004170:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	68d2      	ldr	r2, [r2, #12]
 800417c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004180:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a40      	ldr	r2, [pc, #256]	; (8004300 <TIM_Base_SetConfig+0x114>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d00f      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a3d      	ldr	r2, [pc, #244]	; (8004304 <TIM_Base_SetConfig+0x118>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00b      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a3c      	ldr	r2, [pc, #240]	; (8004308 <TIM_Base_SetConfig+0x11c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a3b      	ldr	r2, [pc, #236]	; (800430c <TIM_Base_SetConfig+0x120>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3a      	ldr	r2, [pc, #232]	; (8004310 <TIM_Base_SetConfig+0x124>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d108      	bne.n	800423e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2f      	ldr	r2, [pc, #188]	; (8004300 <TIM_Base_SetConfig+0x114>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424c:	d027      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a2c      	ldr	r2, [pc, #176]	; (8004304 <TIM_Base_SetConfig+0x118>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d023      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <TIM_Base_SetConfig+0x11c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01f      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2a      	ldr	r2, [pc, #168]	; (800430c <TIM_Base_SetConfig+0x120>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a29      	ldr	r2, [pc, #164]	; (8004310 <TIM_Base_SetConfig+0x124>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d017      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a28      	ldr	r2, [pc, #160]	; (8004314 <TIM_Base_SetConfig+0x128>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a27      	ldr	r2, [pc, #156]	; (8004318 <TIM_Base_SetConfig+0x12c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00f      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a26      	ldr	r2, [pc, #152]	; (800431c <TIM_Base_SetConfig+0x130>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a25      	ldr	r2, [pc, #148]	; (8004320 <TIM_Base_SetConfig+0x134>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a24      	ldr	r2, [pc, #144]	; (8004324 <TIM_Base_SetConfig+0x138>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a23      	ldr	r2, [pc, #140]	; (8004328 <TIM_Base_SetConfig+0x13c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <TIM_Base_SetConfig+0x114>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_Base_SetConfig+0xf8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a0c      	ldr	r2, [pc, #48]	; (8004310 <TIM_Base_SetConfig+0x124>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d103      	bne.n	80042ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	615a      	str	r2, [r3, #20]
}
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40000c00 	.word	0x40000c00
 8004310:	40010400 	.word	0x40010400
 8004314:	40014000 	.word	0x40014000
 8004318:	40014400 	.word	0x40014400
 800431c:	40014800 	.word	0x40014800
 8004320:	40001800 	.word	0x40001800
 8004324:	40001c00 	.word	0x40001c00
 8004328:	40002000 	.word	0x40002000

0800432c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004344:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 0307 	bic.w	r3, r3, #7
 8004356:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b30      	cmp	r3, #48	; 0x30
 8004370:	d05c      	beq.n	800442c <TIM_SlaveTimer_SetConfig+0x100>
 8004372:	2b30      	cmp	r3, #48	; 0x30
 8004374:	d806      	bhi.n	8004384 <TIM_SlaveTimer_SetConfig+0x58>
 8004376:	2b10      	cmp	r3, #16
 8004378:	d058      	beq.n	800442c <TIM_SlaveTimer_SetConfig+0x100>
 800437a:	2b20      	cmp	r3, #32
 800437c:	d056      	beq.n	800442c <TIM_SlaveTimer_SetConfig+0x100>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d054      	beq.n	800442c <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8004382:	e054      	b.n	800442e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8004384:	2b50      	cmp	r3, #80	; 0x50
 8004386:	d03d      	beq.n	8004404 <TIM_SlaveTimer_SetConfig+0xd8>
 8004388:	2b50      	cmp	r3, #80	; 0x50
 800438a:	d802      	bhi.n	8004392 <TIM_SlaveTimer_SetConfig+0x66>
 800438c:	2b40      	cmp	r3, #64	; 0x40
 800438e:	d010      	beq.n	80043b2 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8004390:	e04d      	b.n	800442e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8004392:	2b60      	cmp	r3, #96	; 0x60
 8004394:	d040      	beq.n	8004418 <TIM_SlaveTimer_SetConfig+0xec>
 8004396:	2b70      	cmp	r3, #112	; 0x70
 8004398:	d000      	beq.n	800439c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800439a:	e048      	b.n	800442e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68d9      	ldr	r1, [r3, #12]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f000 f8be 	bl	800452c <TIM_ETR_SetConfig>
      break;
 80043b0:	e03d      	b.n	800442e <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d101      	bne.n	80043be <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e038      	b.n	8004430 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	6a12      	ldr	r2, [r2, #32]
 80043d0:	f022 0201 	bic.w	r2, r2, #1
 80043d4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	621a      	str	r2, [r3, #32]
      break;
 8004402:	e014      	b.n	800442e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6899      	ldr	r1, [r3, #8]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	461a      	mov	r2, r3
 8004412:	f000 f811 	bl	8004438 <TIM_TI1_ConfigInputStage>
      break;
 8004416:	e00a      	b.n	800442e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	461a      	mov	r2, r3
 8004426:	f000 f836 	bl	8004496 <TIM_TI2_ConfigInputStage>
      break;
 800442a:	e000      	b.n	800442e <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800442c:	bf00      	nop
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f023 0201 	bic.w	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f023 030a 	bic.w	r3, r3, #10
 8004474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004496:	b480      	push	{r7}
 8004498:	b087      	sub	sp, #28
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f023 0210 	bic.w	r2, r3, #16
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	031b      	lsls	r3, r3, #12
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	621a      	str	r2, [r3, #32]
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	f043 0307 	orr.w	r3, r3, #7
 8004518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	021a      	lsls	r2, r3, #8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	431a      	orrs	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4313      	orrs	r3, r2
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	609a      	str	r2, [r3, #8]
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004580:	2302      	movs	r3, #2
 8004582:	e05a      	b.n	800463a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a21      	ldr	r2, [pc, #132]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d022      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d0:	d01d      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1d      	ldr	r2, [pc, #116]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d018      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d013      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1a      	ldr	r2, [pc, #104]	; (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00e      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a18      	ldr	r2, [pc, #96]	; (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d009      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a17      	ldr	r2, [pc, #92]	; (800465c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a15      	ldr	r2, [pc, #84]	; (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d10c      	bne.n	8004628 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	4313      	orrs	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010000 	.word	0x40010000
 800464c:	40000400 	.word	0x40000400
 8004650:	40000800 	.word	0x40000800
 8004654:	40000c00 	.word	0x40000c00
 8004658:	40010400 	.word	0x40010400
 800465c:	40014000 	.word	0x40014000
 8004660:	40001800 	.word	0x40001800

08004664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e03f      	b.n	800471e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fd f978 	bl	80019a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2224      	movs	r2, #36	; 0x24
 80046bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	68d2      	ldr	r2, [r2, #12]
 80046ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fb6b 	bl	8004dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	6912      	ldr	r2, [r2, #16]
 80046e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	6952      	ldr	r2, [r2, #20]
 80046f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6812      	ldr	r2, [r2, #0]
 80046fe:	68d2      	ldr	r2, [r2, #12]
 8004700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004704:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	4613      	mov	r3, r2
 8004734:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b20      	cmp	r3, #32
 8004740:	d153      	bne.n	80047ea <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_UART_Transmit_DMA+0x26>
 8004748:	88fb      	ldrh	r3, [r7, #6]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e04c      	b.n	80047ec <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_UART_Transmit_DMA+0x38>
 800475c:	2302      	movs	r3, #2
 800475e:	e045      	b.n	80047ec <HAL_UART_Transmit_DMA+0xc4>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	88fa      	ldrh	r2, [r7, #6]
 8004778:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2221      	movs	r2, #33	; 0x21
 8004784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	4a19      	ldr	r2, [pc, #100]	; (80047f4 <HAL_UART_Transmit_DMA+0xcc>)
 800478e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <HAL_UART_Transmit_DMA+0xd0>)
 8004796:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	4a17      	ldr	r2, [pc, #92]	; (80047fc <HAL_UART_Transmit_DMA+0xd4>)
 800479e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	2200      	movs	r2, #0
 80047a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80047a8:	f107 0308 	add.w	r3, r7, #8
 80047ac:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	6819      	ldr	r1, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3304      	adds	r3, #4
 80047bc:	461a      	mov	r2, r3
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	f7fd fb84 	bl	8001ecc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047cc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	6952      	ldr	r2, [r2, #20]
 80047e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047e4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	08004a3d 	.word	0x08004a3d
 80047f8:	08004a8f 	.word	0x08004a8f
 80047fc:	08004aab 	.word	0x08004aab

08004800 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10d      	bne.n	8004852 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_UART_IRQHandler+0x52>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa2c 	bl	8004ca8 <UART_Receive_IT>
      return;
 8004850:	e0d1      	b.n	80049f6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80b0 	beq.w	80049ba <HAL_UART_IRQHandler+0x1ba>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <HAL_UART_IRQHandler+0x70>
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 80a5 	beq.w	80049ba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_UART_IRQHandler+0x90>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004888:	f043 0201 	orr.w	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_UART_IRQHandler+0xb0>
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a8:	f043 0202 	orr.w	r2, r3, #2
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_UART_IRQHandler+0xd0>
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c8:	f043 0204 	orr.w	r2, r3, #4
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00f      	beq.n	80048fa <HAL_UART_IRQHandler+0xfa>
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d104      	bne.n	80048ee <HAL_UART_IRQHandler+0xee>
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	f043 0208 	orr.w	r2, r3, #8
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d078      	beq.n	80049f4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <HAL_UART_IRQHandler+0x11c>
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f9c6 	bl	8004ca8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	bf0c      	ite	eq
 800492a:	2301      	moveq	r3, #1
 800492c:	2300      	movne	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d102      	bne.n	8004944 <HAL_UART_IRQHandler+0x144>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d031      	beq.n	80049a8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f910 	bl	8004b6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004954:	2b40      	cmp	r3, #64	; 0x40
 8004956:	d123      	bne.n	80049a0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6812      	ldr	r2, [r2, #0]
 8004960:	6952      	ldr	r2, [r2, #20]
 8004962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004966:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496c:	2b00      	cmp	r3, #0
 800496e:	d013      	beq.n	8004998 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	4a21      	ldr	r2, [pc, #132]	; (80049fc <HAL_UART_IRQHandler+0x1fc>)
 8004976:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497c:	4618      	mov	r0, r3
 800497e:	f7fd fb6d 	bl	800205c <HAL_DMA_Abort_IT>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d016      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004992:	4610      	mov	r0, r2
 8004994:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004996:	e00e      	b.n	80049b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f845 	bl	8004a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499e:	e00a      	b.n	80049b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f841 	bl	8004a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a6:	e006      	b.n	80049b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f83d 	bl	8004a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80049b4:	e01e      	b.n	80049f4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b6:	bf00      	nop
    return;
 80049b8:	e01c      	b.n	80049f4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_UART_IRQHandler+0x1d6>
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f8fd 	bl	8004bce <UART_Transmit_IT>
    return;
 80049d4:	e00f      	b.n	80049f6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_UART_IRQHandler+0x1f6>
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f944 	bl	8004c78 <UART_EndTransmit_IT>
    return;
 80049f0:	bf00      	nop
 80049f2:	e000      	b.n	80049f6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80049f4:	bf00      	nop
  }
}
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	08004ba7 	.word	0x08004ba7

08004a00 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d113      	bne.n	8004a80 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	6952      	ldr	r2, [r2, #20]
 8004a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a6c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	68d2      	ldr	r2, [r2, #12]
 8004a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a7c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a7e:	e002      	b.n	8004a86 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f7fc f9bd 	bl	8000e00 <HAL_UART_TxCpltCallback>
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f7ff ffaf 	bl	8004a00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	bf0c      	ite	eq
 8004aca:	2301      	moveq	r3, #1
 8004acc:	2300      	movne	r3, #0
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b21      	cmp	r3, #33	; 0x21
 8004adc:	d108      	bne.n	8004af0 <UART_DMAError+0x46>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004aea:	68b8      	ldr	r0, [r7, #8]
 8004aec:	f000 f827 	bl	8004b3e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afa:	2b40      	cmp	r3, #64	; 0x40
 8004afc:	bf0c      	ite	eq
 8004afe:	2301      	moveq	r3, #1
 8004b00:	2300      	movne	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b22      	cmp	r3, #34	; 0x22
 8004b10:	d108      	bne.n	8004b24 <UART_DMAError+0x7a>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004b1e:	68b8      	ldr	r0, [r7, #8]
 8004b20:	f000 f823 	bl	8004b6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b28:	f043 0210 	orr.w	r2, r3, #16
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b30:	68b8      	ldr	r0, [r7, #8]
 8004b32:	f7ff ff79 	bl	8004a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	68d2      	ldr	r2, [r2, #12]
 8004b50:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b54:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	68d2      	ldr	r2, [r2, #12]
 8004b7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b80:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	6952      	ldr	r2, [r2, #20]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f7ff ff31 	bl	8004a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b085      	sub	sp, #20
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b21      	cmp	r3, #33	; 0x21
 8004be0:	d143      	bne.n	8004c6a <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bea:	d119      	bne.n	8004c20 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	8812      	ldrh	r2, [r2, #0]
 8004bfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bfe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d105      	bne.n	8004c14 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	1c9a      	adds	r2, r3, #2
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	621a      	str	r2, [r3, #32]
 8004c12:	e00e      	b.n	8004c32 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	621a      	str	r2, [r3, #32]
 8004c1e:	e008      	b.n	8004c32 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	1c58      	adds	r0, r3, #1
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	6208      	str	r0, [r1, #32]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10f      	bne.n	8004c66 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	68d2      	ldr	r2, [r2, #12]
 8004c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	68d2      	ldr	r2, [r2, #12]
 8004c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	e000      	b.n	8004c6c <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004c6a:	2302      	movs	r3, #2
  }
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	68d2      	ldr	r2, [r2, #12]
 8004c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7fc f8b1 	bl	8000e00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b22      	cmp	r3, #34	; 0x22
 8004cba:	d171      	bne.n	8004da0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc4:	d123      	bne.n	8004d0e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10e      	bne.n	8004cf2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cea:	1c9a      	adds	r2, r3, #2
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	629a      	str	r2, [r3, #40]	; 0x28
 8004cf0:	e029      	b.n	8004d46 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d0c:	e01b      	b.n	8004d46 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	1c59      	adds	r1, r3, #1
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6291      	str	r1, [r2, #40]	; 0x28
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	6852      	ldr	r2, [r2, #4]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	e00c      	b.n	8004d46 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	1c59      	adds	r1, r3, #1
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6291      	str	r1, [r2, #40]	; 0x28
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	6852      	ldr	r2, [r2, #4]
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	4619      	mov	r1, r3
 8004d54:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d120      	bne.n	8004d9c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	68d2      	ldr	r2, [r2, #12]
 8004d64:	f022 0220 	bic.w	r2, r2, #32
 8004d68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	68d2      	ldr	r2, [r2, #12]
 8004d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	6952      	ldr	r2, [r2, #20]
 8004d84:	f022 0201 	bic.w	r2, r2, #1
 8004d88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fe3e 	bl	8004a14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e002      	b.n	8004da2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e000      	b.n	8004da2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004da0:	2302      	movs	r3, #2
  }
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db0:	b0a3      	sub	sp, #140	; 0x8c
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004db8:	6819      	ldr	r1, [r3, #0]
 8004dba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 8004de6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004de8:	6819      	ldr	r1, [r3, #0]
 8004dea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8004df4:	f022 020c 	bic.w	r2, r2, #12
 8004df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1e:	f040 8171 	bne.w	8005104 <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4ab4      	ldr	r2, [pc, #720]	; (80050f8 <UART_SetConfig+0x34c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d005      	beq.n	8004e38 <UART_SetConfig+0x8c>
 8004e2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4ab2      	ldr	r2, [pc, #712]	; (80050fc <UART_SetConfig+0x350>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	f040 80b1 	bne.w	8004f9a <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e38:	f7fd ff34 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8004e3c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e42:	681d      	ldr	r5, [r3, #0]
 8004e44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4614      	mov	r4, r2
 8004e52:	18db      	adds	r3, r3, r3
 8004e54:	eb44 0404 	adc.w	r4, r4, r4
 8004e58:	185b      	adds	r3, r3, r1
 8004e5a:	eb44 0402 	adc.w	r4, r4, r2
 8004e5e:	00e0      	lsls	r0, r4, #3
 8004e60:	6478      	str	r0, [r7, #68]	; 0x44
 8004e62:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004e64:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004e68:	6478      	str	r0, [r7, #68]	; 0x44
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e6e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004e72:	eb13 0801 	adds.w	r8, r3, r1
 8004e76:	eb44 0902 	adc.w	r9, r4, r2
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f04f 0400 	mov.w	r4, #0
 8004e86:	18db      	adds	r3, r3, r3
 8004e88:	eb44 0404 	adc.w	r4, r4, r4
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4623      	mov	r3, r4
 8004e90:	f7fb fa0e 	bl	80002b0 <__aeabi_uldivmod>
 8004e94:	4603      	mov	r3, r0
 8004e96:	460c      	mov	r4, r1
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4b99      	ldr	r3, [pc, #612]	; (8005100 <UART_SetConfig+0x354>)
 8004e9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	011e      	lsls	r6, r3, #4
 8004ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4614      	mov	r4, r2
 8004eb2:	18db      	adds	r3, r3, r3
 8004eb4:	eb44 0404 	adc.w	r4, r4, r4
 8004eb8:	185b      	adds	r3, r3, r1
 8004eba:	eb44 0402 	adc.w	r4, r4, r2
 8004ebe:	00e0      	lsls	r0, r4, #3
 8004ec0:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004ec2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004ec4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004ec8:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ece:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004ed2:	eb13 0801 	adds.w	r8, r3, r1
 8004ed6:	eb44 0902 	adc.w	r9, r4, r2
 8004eda:	4640      	mov	r0, r8
 8004edc:	4649      	mov	r1, r9
 8004ede:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f04f 0400 	mov.w	r4, #0
 8004ee6:	18db      	adds	r3, r3, r3
 8004ee8:	eb44 0404 	adc.w	r4, r4, r4
 8004eec:	461a      	mov	r2, r3
 8004eee:	4623      	mov	r3, r4
 8004ef0:	f7fb f9de 	bl	80002b0 <__aeabi_uldivmod>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4b81      	ldr	r3, [pc, #516]	; (8005100 <UART_SetConfig+0x354>)
 8004efc:	fba3 1302 	umull	r1, r3, r3, r2
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	2164      	movs	r1, #100	; 0x64
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	3332      	adds	r3, #50	; 0x32
 8004f0e:	4a7c      	ldr	r2, [pc, #496]	; (8005100 <UART_SetConfig+0x354>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	095b      	lsrs	r3, r3, #5
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f1c:	441e      	add	r6, r3
 8004f1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f22:	4619      	mov	r1, r3
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4614      	mov	r4, r2
 8004f2c:	18db      	adds	r3, r3, r3
 8004f2e:	eb44 0404 	adc.w	r4, r4, r4
 8004f32:	185b      	adds	r3, r3, r1
 8004f34:	eb44 0402 	adc.w	r4, r4, r2
 8004f38:	00e0      	lsls	r0, r4, #3
 8004f3a:	6378      	str	r0, [r7, #52]	; 0x34
 8004f3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f3e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004f42:	6378      	str	r0, [r7, #52]	; 0x34
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	633b      	str	r3, [r7, #48]	; 0x30
 8004f48:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004f4c:	eb13 0801 	adds.w	r8, r3, r1
 8004f50:	eb44 0902 	adc.w	r9, r4, r2
 8004f54:	4640      	mov	r0, r8
 8004f56:	4649      	mov	r1, r9
 8004f58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f04f 0400 	mov.w	r4, #0
 8004f60:	18db      	adds	r3, r3, r3
 8004f62:	eb44 0404 	adc.w	r4, r4, r4
 8004f66:	461a      	mov	r2, r3
 8004f68:	4623      	mov	r3, r4
 8004f6a:	f7fb f9a1 	bl	80002b0 <__aeabi_uldivmod>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	460c      	mov	r4, r1
 8004f72:	461a      	mov	r2, r3
 8004f74:	4b62      	ldr	r3, [pc, #392]	; (8005100 <UART_SetConfig+0x354>)
 8004f76:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	2164      	movs	r1, #100	; 0x64
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	3332      	adds	r3, #50	; 0x32
 8004f88:	4a5d      	ldr	r2, [pc, #372]	; (8005100 <UART_SetConfig+0x354>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	4433      	add	r3, r6
 8004f96:	60ab      	str	r3, [r5, #8]
 8004f98:	e240      	b.n	800541c <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f9a:	f7fd fe6f 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8004f9e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	673a      	str	r2, [r7, #112]	; 0x70
 8004fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fac:	4619      	mov	r1, r3
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4614      	mov	r4, r2
 8004fb6:	18db      	adds	r3, r3, r3
 8004fb8:	eb44 0404 	adc.w	r4, r4, r4
 8004fbc:	185b      	adds	r3, r3, r1
 8004fbe:	eb44 0402 	adc.w	r4, r4, r2
 8004fc2:	00e0      	lsls	r0, r4, #3
 8004fc4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fc8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004fcc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004fd6:	185d      	adds	r5, r3, r1
 8004fd8:	eb44 0602 	adc.w	r6, r4, r2
 8004fdc:	4628      	mov	r0, r5
 8004fde:	4631      	mov	r1, r6
 8004fe0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f04f 0400 	mov.w	r4, #0
 8004fe8:	18db      	adds	r3, r3, r3
 8004fea:	eb44 0404 	adc.w	r4, r4, r4
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4623      	mov	r3, r4
 8004ff2:	f7fb f95d 	bl	80002b0 <__aeabi_uldivmod>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4b40      	ldr	r3, [pc, #256]	; (8005100 <UART_SetConfig+0x354>)
 8004ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	011e      	lsls	r6, r3, #4
 8005006:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800500a:	4619      	mov	r1, r3
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	460b      	mov	r3, r1
 8005012:	4614      	mov	r4, r2
 8005014:	18db      	adds	r3, r3, r3
 8005016:	eb44 0404 	adc.w	r4, r4, r4
 800501a:	185b      	adds	r3, r3, r1
 800501c:	eb44 0402 	adc.w	r4, r4, r2
 8005020:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8005024:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8005028:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 800502c:	4653      	mov	r3, sl
 800502e:	465c      	mov	r4, fp
 8005030:	eb13 0a01 	adds.w	sl, r3, r1
 8005034:	eb44 0b02 	adc.w	fp, r4, r2
 8005038:	4650      	mov	r0, sl
 800503a:	4659      	mov	r1, fp
 800503c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f04f 0400 	mov.w	r4, #0
 8005044:	18db      	adds	r3, r3, r3
 8005046:	eb44 0404 	adc.w	r4, r4, r4
 800504a:	461a      	mov	r2, r3
 800504c:	4623      	mov	r3, r4
 800504e:	f7fb f92f 	bl	80002b0 <__aeabi_uldivmod>
 8005052:	4603      	mov	r3, r0
 8005054:	460c      	mov	r4, r1
 8005056:	461a      	mov	r2, r3
 8005058:	4b29      	ldr	r3, [pc, #164]	; (8005100 <UART_SetConfig+0x354>)
 800505a:	fba3 1302 	umull	r1, r3, r3, r2
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	2164      	movs	r1, #100	; 0x64
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	3332      	adds	r3, #50	; 0x32
 800506c:	4a24      	ldr	r2, [pc, #144]	; (8005100 <UART_SetConfig+0x354>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800507a:	441e      	add	r6, r3
 800507c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005080:	4619      	mov	r1, r3
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	460b      	mov	r3, r1
 8005088:	4614      	mov	r4, r2
 800508a:	18db      	adds	r3, r3, r3
 800508c:	eb44 0404 	adc.w	r4, r4, r4
 8005090:	185b      	adds	r3, r3, r1
 8005092:	eb44 0402 	adc.w	r4, r4, r2
 8005096:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800509a:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800509e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80050a2:	4643      	mov	r3, r8
 80050a4:	464c      	mov	r4, r9
 80050a6:	eb13 0801 	adds.w	r8, r3, r1
 80050aa:	eb44 0902 	adc.w	r9, r4, r2
 80050ae:	4640      	mov	r0, r8
 80050b0:	4649      	mov	r1, r9
 80050b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f04f 0400 	mov.w	r4, #0
 80050ba:	18db      	adds	r3, r3, r3
 80050bc:	eb44 0404 	adc.w	r4, r4, r4
 80050c0:	461a      	mov	r2, r3
 80050c2:	4623      	mov	r3, r4
 80050c4:	f7fb f8f4 	bl	80002b0 <__aeabi_uldivmod>
 80050c8:	4603      	mov	r3, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	461a      	mov	r2, r3
 80050ce:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <UART_SetConfig+0x354>)
 80050d0:	fba3 1302 	umull	r1, r3, r3, r2
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	2164      	movs	r1, #100	; 0x64
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	3332      	adds	r3, #50	; 0x32
 80050e2:	4a07      	ldr	r2, [pc, #28]	; (8005100 <UART_SetConfig+0x354>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	4433      	add	r3, r6
 80050f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80050f2:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80050f4:	e192      	b.n	800541c <UART_SetConfig+0x670>
 80050f6:	bf00      	nop
 80050f8:	40011000 	.word	0x40011000
 80050fc:	40011400 	.word	0x40011400
 8005100:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005104:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	4bc1      	ldr	r3, [pc, #772]	; (8005410 <UART_SetConfig+0x664>)
 800510a:	429a      	cmp	r2, r3
 800510c:	d005      	beq.n	800511a <UART_SetConfig+0x36e>
 800510e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4bc0      	ldr	r3, [pc, #768]	; (8005414 <UART_SetConfig+0x668>)
 8005114:	429a      	cmp	r2, r3
 8005116:	f040 80bf 	bne.w	8005298 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 800511a:	f7fd fdc3 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 800511e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005122:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005124:	681e      	ldr	r6, [r3, #0]
 8005126:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800512a:	4619      	mov	r1, r3
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	460b      	mov	r3, r1
 8005132:	4614      	mov	r4, r2
 8005134:	18db      	adds	r3, r3, r3
 8005136:	eb44 0404 	adc.w	r4, r4, r4
 800513a:	185b      	adds	r3, r3, r1
 800513c:	eb44 0402 	adc.w	r4, r4, r2
 8005140:	00e0      	lsls	r0, r4, #3
 8005142:	6278      	str	r0, [r7, #36]	; 0x24
 8005144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005146:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800514a:	6278      	str	r0, [r7, #36]	; 0x24
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	623b      	str	r3, [r7, #32]
 8005150:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005154:	eb13 0801 	adds.w	r8, r3, r1
 8005158:	eb44 0902 	adc.w	r9, r4, r2
 800515c:	4640      	mov	r0, r8
 800515e:	4649      	mov	r1, r9
 8005160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f04f 0400 	mov.w	r4, #0
 8005168:	00a2      	lsls	r2, r4, #2
 800516a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800516c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800516e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8005172:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	65bb      	str	r3, [r7, #88]	; 0x58
 8005178:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800517c:	f7fb f898 	bl	80002b0 <__aeabi_uldivmod>
 8005180:	4603      	mov	r3, r0
 8005182:	460c      	mov	r4, r1
 8005184:	461a      	mov	r2, r3
 8005186:	4ba4      	ldr	r3, [pc, #656]	; (8005418 <UART_SetConfig+0x66c>)
 8005188:	fba3 2302 	umull	r2, r3, r3, r2
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	011d      	lsls	r5, r3, #4
 8005190:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005194:	4619      	mov	r1, r3
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	460b      	mov	r3, r1
 800519c:	4614      	mov	r4, r2
 800519e:	18db      	adds	r3, r3, r3
 80051a0:	eb44 0404 	adc.w	r4, r4, r4
 80051a4:	185b      	adds	r3, r3, r1
 80051a6:	eb44 0402 	adc.w	r4, r4, r2
 80051aa:	00e0      	lsls	r0, r4, #3
 80051ac:	61f8      	str	r0, [r7, #28]
 80051ae:	69f8      	ldr	r0, [r7, #28]
 80051b0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80051b4:	61f8      	str	r0, [r7, #28]
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80051be:	eb13 0801 	adds.w	r8, r3, r1
 80051c2:	eb44 0902 	adc.w	r9, r4, r2
 80051c6:	4640      	mov	r0, r8
 80051c8:	4649      	mov	r1, r9
 80051ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f04f 0400 	mov.w	r4, #0
 80051d2:	00a2      	lsls	r2, r4, #2
 80051d4:	657a      	str	r2, [r7, #84]	; 0x54
 80051d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051d8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80051dc:	657a      	str	r2, [r7, #84]	; 0x54
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	653b      	str	r3, [r7, #80]	; 0x50
 80051e2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051e6:	f7fb f863 	bl	80002b0 <__aeabi_uldivmod>
 80051ea:	4603      	mov	r3, r0
 80051ec:	460c      	mov	r4, r1
 80051ee:	461a      	mov	r2, r3
 80051f0:	4b89      	ldr	r3, [pc, #548]	; (8005418 <UART_SetConfig+0x66c>)
 80051f2:	fba3 1302 	umull	r1, r3, r3, r2
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	2164      	movs	r1, #100	; 0x64
 80051fa:	fb01 f303 	mul.w	r3, r1, r3
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	3332      	adds	r3, #50	; 0x32
 8005204:	4a84      	ldr	r2, [pc, #528]	; (8005418 <UART_SetConfig+0x66c>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005210:	441d      	add	r5, r3
 8005212:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005216:	4619      	mov	r1, r3
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	460b      	mov	r3, r1
 800521e:	4614      	mov	r4, r2
 8005220:	18db      	adds	r3, r3, r3
 8005222:	eb44 0404 	adc.w	r4, r4, r4
 8005226:	185b      	adds	r3, r3, r1
 8005228:	eb44 0402 	adc.w	r4, r4, r2
 800522c:	00e0      	lsls	r0, r4, #3
 800522e:	6178      	str	r0, [r7, #20]
 8005230:	6978      	ldr	r0, [r7, #20]
 8005232:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8005236:	6178      	str	r0, [r7, #20]
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005240:	eb13 0801 	adds.w	r8, r3, r1
 8005244:	eb44 0902 	adc.w	r9, r4, r2
 8005248:	4640      	mov	r0, r8
 800524a:	4649      	mov	r1, r9
 800524c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f04f 0400 	mov.w	r4, #0
 8005254:	00a2      	lsls	r2, r4, #2
 8005256:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800525a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800525e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	64bb      	str	r3, [r7, #72]	; 0x48
 8005264:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005268:	f7fb f822 	bl	80002b0 <__aeabi_uldivmod>
 800526c:	4603      	mov	r3, r0
 800526e:	460c      	mov	r4, r1
 8005270:	461a      	mov	r2, r3
 8005272:	4b69      	ldr	r3, [pc, #420]	; (8005418 <UART_SetConfig+0x66c>)
 8005274:	fba3 1302 	umull	r1, r3, r3, r2
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	2164      	movs	r1, #100	; 0x64
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	3332      	adds	r3, #50	; 0x32
 8005286:	4a64      	ldr	r2, [pc, #400]	; (8005418 <UART_SetConfig+0x66c>)
 8005288:	fba2 2303 	umull	r2, r3, r2, r3
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	442b      	add	r3, r5
 8005294:	60b3      	str	r3, [r6, #8]
 8005296:	e0c1      	b.n	800541c <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005298:	f7fd fcf0 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 800529c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80052a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052aa:	4619      	mov	r1, r3
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4614      	mov	r4, r2
 80052b4:	18db      	adds	r3, r3, r3
 80052b6:	eb44 0404 	adc.w	r4, r4, r4
 80052ba:	185b      	adds	r3, r3, r1
 80052bc:	eb44 0402 	adc.w	r4, r4, r2
 80052c0:	00e6      	lsls	r6, r4, #3
 80052c2:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80052c6:	00dd      	lsls	r5, r3, #3
 80052c8:	462b      	mov	r3, r5
 80052ca:	4634      	mov	r4, r6
 80052cc:	185d      	adds	r5, r3, r1
 80052ce:	eb44 0602 	adc.w	r6, r4, r2
 80052d2:	4628      	mov	r0, r5
 80052d4:	4631      	mov	r1, r6
 80052d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f04f 0400 	mov.w	r4, #0
 80052de:	00a5      	lsls	r5, r4, #2
 80052e0:	677d      	str	r5, [r7, #116]	; 0x74
 80052e2:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 80052e4:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 80052e8:	677d      	str	r5, [r7, #116]	; 0x74
 80052ea:	009c      	lsls	r4, r3, #2
 80052ec:	673c      	str	r4, [r7, #112]	; 0x70
 80052ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80052f2:	f7fa ffdd 	bl	80002b0 <__aeabi_uldivmod>
 80052f6:	4603      	mov	r3, r0
 80052f8:	460c      	mov	r4, r1
 80052fa:	461a      	mov	r2, r3
 80052fc:	4b46      	ldr	r3, [pc, #280]	; (8005418 <UART_SetConfig+0x66c>)
 80052fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	011d      	lsls	r5, r3, #4
 8005306:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800530a:	4619      	mov	r1, r3
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	460b      	mov	r3, r1
 8005312:	4614      	mov	r4, r2
 8005314:	18db      	adds	r3, r3, r3
 8005316:	eb44 0404 	adc.w	r4, r4, r4
 800531a:	185b      	adds	r3, r3, r1
 800531c:	eb44 0402 	adc.w	r4, r4, r2
 8005320:	00e0      	lsls	r0, r4, #3
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	00d8      	lsls	r0, r3, #3
 800532e:	60b8      	str	r0, [r7, #8]
 8005330:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005334:	eb13 0801 	adds.w	r8, r3, r1
 8005338:	eb44 0902 	adc.w	r9, r4, r2
 800533c:	4640      	mov	r0, r8
 800533e:	4649      	mov	r1, r9
 8005340:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f04f 0400 	mov.w	r4, #0
 8005348:	00a6      	lsls	r6, r4, #2
 800534a:	66fe      	str	r6, [r7, #108]	; 0x6c
 800534c:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 800534e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8005352:	66fe      	str	r6, [r7, #108]	; 0x6c
 8005354:	009c      	lsls	r4, r3, #2
 8005356:	66bc      	str	r4, [r7, #104]	; 0x68
 8005358:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800535c:	f7fa ffa8 	bl	80002b0 <__aeabi_uldivmod>
 8005360:	4603      	mov	r3, r0
 8005362:	460c      	mov	r4, r1
 8005364:	461a      	mov	r2, r3
 8005366:	4b2c      	ldr	r3, [pc, #176]	; (8005418 <UART_SetConfig+0x66c>)
 8005368:	fba3 1302 	umull	r1, r3, r3, r2
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	2164      	movs	r1, #100	; 0x64
 8005370:	fb01 f303 	mul.w	r3, r1, r3
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	3332      	adds	r3, #50	; 0x32
 800537a:	4a27      	ldr	r2, [pc, #156]	; (8005418 <UART_SetConfig+0x66c>)
 800537c:	fba2 1303 	umull	r1, r3, r2, r3
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005386:	441d      	add	r5, r3
 8005388:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800538c:	4619      	mov	r1, r3
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	460b      	mov	r3, r1
 8005394:	4614      	mov	r4, r2
 8005396:	18db      	adds	r3, r3, r3
 8005398:	eb44 0404 	adc.w	r4, r4, r4
 800539c:	185b      	adds	r3, r3, r1
 800539e:	eb44 0402 	adc.w	r4, r4, r2
 80053a2:	00e0      	lsls	r0, r4, #3
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	00d8      	lsls	r0, r3, #3
 80053b0:	6038      	str	r0, [r7, #0]
 80053b2:	e897 0018 	ldmia.w	r7, {r3, r4}
 80053b6:	eb13 0801 	adds.w	r8, r3, r1
 80053ba:	eb44 0902 	adc.w	r9, r4, r2
 80053be:	4640      	mov	r0, r8
 80053c0:	4649      	mov	r1, r9
 80053c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f04f 0400 	mov.w	r4, #0
 80053ca:	00a6      	lsls	r6, r4, #2
 80053cc:	667e      	str	r6, [r7, #100]	; 0x64
 80053ce:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 80053d0:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80053d4:	667e      	str	r6, [r7, #100]	; 0x64
 80053d6:	009c      	lsls	r4, r3, #2
 80053d8:	663c      	str	r4, [r7, #96]	; 0x60
 80053da:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80053de:	f7fa ff67 	bl	80002b0 <__aeabi_uldivmod>
 80053e2:	4603      	mov	r3, r0
 80053e4:	460c      	mov	r4, r1
 80053e6:	461a      	mov	r2, r3
 80053e8:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <UART_SetConfig+0x66c>)
 80053ea:	fba3 1302 	umull	r1, r3, r3, r2
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	2164      	movs	r1, #100	; 0x64
 80053f2:	fb01 f303 	mul.w	r3, r1, r3
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	3332      	adds	r3, #50	; 0x32
 80053fc:	4a06      	ldr	r2, [pc, #24]	; (8005418 <UART_SetConfig+0x66c>)
 80053fe:	fba2 1303 	umull	r1, r3, r2, r3
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	442b      	add	r3, r5
 800540a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800540c:	6093      	str	r3, [r2, #8]
}
 800540e:	e005      	b.n	800541c <UART_SetConfig+0x670>
 8005410:	40011000 	.word	0x40011000
 8005414:	40011400 	.word	0x40011400
 8005418:	51eb851f 	.word	0x51eb851f
 800541c:	bf00      	nop
 800541e:	378c      	adds	r7, #140	; 0x8c
 8005420:	46bd      	mov	sp, r7
 8005422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005426:	bf00      	nop

08005428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8005428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005460 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800542c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800542e:	e003      	b.n	8005438 <LoopCopyDataInit>

08005430 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005432:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005434:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005436:	3104      	adds	r1, #4

08005438 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005438:	480b      	ldr	r0, [pc, #44]	; (8005468 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800543c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800543e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005440:	d3f6      	bcc.n	8005430 <CopyDataInit>
  ldr  r2, =_sbss
 8005442:	4a0b      	ldr	r2, [pc, #44]	; (8005470 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005444:	e002      	b.n	800544c <LoopFillZerobss>

08005446 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005446:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005448:	f842 3b04 	str.w	r3, [r2], #4

0800544c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800544c:	4b09      	ldr	r3, [pc, #36]	; (8005474 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800544e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005450:	d3f9      	bcc.n	8005446 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005452:	f7fc f92d 	bl	80016b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005456:	f012 f91d 	bl	8017694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800545a:	f7fb fd1f 	bl	8000e9c <main>
  bx  lr    
 800545e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005460:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8005464:	0801ccfc 	.word	0x0801ccfc
  ldr  r0, =_sdata
 8005468:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800546c:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 8005470:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 8005474:	200007e0 	.word	0x200007e0

08005478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005478:	e7fe      	b.n	8005478 <ADC_IRQHandler>
	...

0800547c <Time_GetNow>:
 800547c:	1d01      	adds	r1, r0, #4
 800547e:	f7fb bb95 	b.w	8000bac <Timer_GetCounterValue>
 8005482:	bf00      	nop

08005484 <Time_GetElapsedUSec>:
 8005484:	b510      	push	{r4, lr}
 8005486:	4604      	mov	r4, r0
 8005488:	b082      	sub	sp, #8
 800548a:	4668      	mov	r0, sp
 800548c:	a901      	add	r1, sp, #4
 800548e:	f7fb fb8d 	bl	8000bac <Timer_GetCounterValue>
 8005492:	6860      	ldr	r0, [r4, #4]
 8005494:	9b01      	ldr	r3, [sp, #4]
 8005496:	4298      	cmp	r0, r3
 8005498:	d819      	bhi.n	80054ce <Time_GetElapsedUSec+0x4a>
 800549a:	1a18      	subs	r0, r3, r0
 800549c:	2300      	movs	r3, #0
 800549e:	6821      	ldr	r1, [r4, #0]
 80054a0:	9a00      	ldr	r2, [sp, #0]
 80054a2:	1a52      	subs	r2, r2, r1
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	f241 02c5 	movw	r2, #4293	; 0x10c5
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d906      	bls.n	80054bc <Time_GetElapsedUSec+0x38>
 80054ae:	f241 02c6 	movw	r2, #4294	; 0x10c6
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d107      	bne.n	80054c6 <Time_GetElapsedUSec+0x42>
 80054b6:	4a09      	ldr	r2, [pc, #36]	; (80054dc <Time_GetElapsedUSec+0x58>)
 80054b8:	4290      	cmp	r0, r2
 80054ba:	d804      	bhi.n	80054c6 <Time_GetElapsedUSec+0x42>
 80054bc:	4a08      	ldr	r2, [pc, #32]	; (80054e0 <Time_GetElapsedUSec+0x5c>)
 80054be:	fb02 0003 	mla	r0, r2, r3, r0
 80054c2:	b002      	add	sp, #8
 80054c4:	bd10      	pop	{r4, pc}
 80054c6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ca:	b002      	add	sp, #8
 80054cc:	bd10      	pop	{r4, pc}
 80054ce:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 80054d2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80054d6:	1a18      	subs	r0, r3, r0
 80054d8:	2301      	movs	r3, #1
 80054da:	e7e0      	b.n	800549e <Time_GetElapsedUSec+0x1a>
 80054dc:	000ec27e 	.word	0x000ec27e
 80054e0:	000f4240 	.word	0x000f4240

080054e4 <Time_DiffUSec>:
 80054e4:	b410      	push	{r4}
 80054e6:	6843      	ldr	r3, [r0, #4]
 80054e8:	684c      	ldr	r4, [r1, #4]
 80054ea:	42a3      	cmp	r3, r4
 80054ec:	d81b      	bhi.n	8005526 <Time_DiffUSec+0x42>
 80054ee:	1ae4      	subs	r4, r4, r3
 80054f0:	2300      	movs	r3, #0
 80054f2:	680a      	ldr	r2, [r1, #0]
 80054f4:	6800      	ldr	r0, [r0, #0]
 80054f6:	1a12      	subs	r2, r2, r0
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	f241 02c5 	movw	r2, #4293	; 0x10c5
 80054fe:	4293      	cmp	r3, r2
 8005500:	d906      	bls.n	8005510 <Time_DiffUSec+0x2c>
 8005502:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8005506:	4293      	cmp	r3, r2
 8005508:	d108      	bne.n	800551c <Time_DiffUSec+0x38>
 800550a:	4a0a      	ldr	r2, [pc, #40]	; (8005534 <Time_DiffUSec+0x50>)
 800550c:	4294      	cmp	r4, r2
 800550e:	d805      	bhi.n	800551c <Time_DiffUSec+0x38>
 8005510:	4809      	ldr	r0, [pc, #36]	; (8005538 <Time_DiffUSec+0x54>)
 8005512:	fb00 4003 	mla	r0, r0, r3, r4
 8005516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	f04f 30ff 	mov.w	r0, #4294967295
 8005520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	f504 2474 	add.w	r4, r4, #999424	; 0xf4000
 800552a:	f504 7410 	add.w	r4, r4, #576	; 0x240
 800552e:	1ae4      	subs	r4, r4, r3
 8005530:	2301      	movs	r3, #1
 8005532:	e7de      	b.n	80054f2 <Time_DiffUSec+0xe>
 8005534:	000ec27e 	.word	0x000ec27e
 8005538:	000f4240 	.word	0x000f4240

0800553c <Time_DelayUSec>:
 800553c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553e:	4e37      	ldr	r6, [pc, #220]	; (800561c <Time_DelayUSec+0xe0>)
 8005540:	4f37      	ldr	r7, [pc, #220]	; (8005620 <Time_DelayUSec+0xe4>)
 8005542:	4d38      	ldr	r5, [pc, #224]	; (8005624 <Time_DelayUSec+0xe8>)
 8005544:	b085      	sub	sp, #20
 8005546:	4604      	mov	r4, r0
 8005548:	a901      	add	r1, sp, #4
 800554a:	4668      	mov	r0, sp
 800554c:	fba6 3604 	umull	r3, r6, r6, r4
 8005550:	f7fb fb2c 	bl	8000bac <Timer_GetCounterValue>
 8005554:	0cb6      	lsrs	r6, r6, #18
 8005556:	fb07 4716 	mls	r7, r7, r6, r4
 800555a:	42ac      	cmp	r4, r5
 800555c:	d923      	bls.n	80055a6 <Time_DelayUSec+0x6a>
 800555e:	a903      	add	r1, sp, #12
 8005560:	a802      	add	r0, sp, #8
 8005562:	f7fb fb23 	bl	8000bac <Timer_GetCounterValue>
 8005566:	e9dd 1000 	ldrd	r1, r0, [sp]
 800556a:	183b      	adds	r3, r7, r0
 800556c:	42ab      	cmp	r3, r5
 800556e:	eb06 0201 	add.w	r2, r6, r1
 8005572:	d904      	bls.n	800557e <Time_DelayUSec+0x42>
 8005574:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8005578:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800557c:	3201      	adds	r2, #1
 800557e:	428a      	cmp	r2, r1
 8005580:	d031      	beq.n	80055e6 <Time_DelayUSec+0xaa>
 8005582:	bf8c      	ite	hi
 8005584:	f04f 0c01 	movhi.w	ip, #1
 8005588:	f04f 0c00 	movls.w	ip, #0
 800558c:	f1bc 0f00 	cmp.w	ip, #0
 8005590:	d016      	beq.n	80055c0 <Time_DelayUSec+0x84>
 8005592:	f8dd c008 	ldr.w	ip, [sp, #8]
 8005596:	4594      	cmp	ip, r2
 8005598:	d039      	beq.n	800560e <Time_DelayUSec+0xd2>
 800559a:	bf8c      	ite	hi
 800559c:	2301      	movhi	r3, #1
 800559e:	2300      	movls	r3, #0
 80055a0:	b1bb      	cbz	r3, 80055d2 <Time_DelayUSec+0x96>
 80055a2:	b005      	add	sp, #20
 80055a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a6:	2c00      	cmp	r4, #0
 80055a8:	d0fb      	beq.n	80055a2 <Time_DelayUSec+0x66>
 80055aa:	a802      	add	r0, sp, #8
 80055ac:	a903      	add	r1, sp, #12
 80055ae:	f7fb fafd 	bl	8000bac <Timer_GetCounterValue>
 80055b2:	e9dd 2000 	ldrd	r2, r0, [sp]
 80055b6:	1823      	adds	r3, r4, r0
 80055b8:	42ab      	cmp	r3, r5
 80055ba:	d914      	bls.n	80055e6 <Time_DelayUSec+0xaa>
 80055bc:	4611      	mov	r1, r2
 80055be:	e7d9      	b.n	8005574 <Time_DelayUSec+0x38>
 80055c0:	f8dd c008 	ldr.w	ip, [sp, #8]
 80055c4:	4594      	cmp	ip, r2
 80055c6:	d01c      	beq.n	8005602 <Time_DelayUSec+0xc6>
 80055c8:	bf8c      	ite	hi
 80055ca:	2301      	movhi	r3, #1
 80055cc:	2300      	movls	r3, #0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0c3      	beq.n	800555a <Time_DelayUSec+0x1e>
 80055d2:	458c      	cmp	ip, r1
 80055d4:	d00f      	beq.n	80055f6 <Time_DelayUSec+0xba>
 80055d6:	bf8c      	ite	hi
 80055d8:	2001      	movhi	r0, #1
 80055da:	2000      	movls	r0, #0
 80055dc:	f080 0001 	eor.w	r0, r0, #1
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d0ba      	beq.n	800555a <Time_DelayUSec+0x1e>
 80055e4:	e7dd      	b.n	80055a2 <Time_DelayUSec+0x66>
 80055e6:	4298      	cmp	r0, r3
 80055e8:	bf8c      	ite	hi
 80055ea:	f04f 0c00 	movhi.w	ip, #0
 80055ee:	f04f 0c01 	movls.w	ip, #1
 80055f2:	4611      	mov	r1, r2
 80055f4:	e7ca      	b.n	800558c <Time_DelayUSec+0x50>
 80055f6:	9b03      	ldr	r3, [sp, #12]
 80055f8:	4283      	cmp	r3, r0
 80055fa:	bf34      	ite	cc
 80055fc:	2000      	movcc	r0, #0
 80055fe:	2001      	movcs	r0, #1
 8005600:	e7ec      	b.n	80055dc <Time_DelayUSec+0xa0>
 8005602:	9a03      	ldr	r2, [sp, #12]
 8005604:	429a      	cmp	r2, r3
 8005606:	bf34      	ite	cc
 8005608:	2300      	movcc	r3, #0
 800560a:	2301      	movcs	r3, #1
 800560c:	e7df      	b.n	80055ce <Time_DelayUSec+0x92>
 800560e:	9a03      	ldr	r2, [sp, #12]
 8005610:	429a      	cmp	r2, r3
 8005612:	bf34      	ite	cc
 8005614:	2300      	movcc	r3, #0
 8005616:	2301      	movcs	r3, #1
 8005618:	e7c2      	b.n	80055a0 <Time_DelayUSec+0x64>
 800561a:	bf00      	nop
 800561c:	431bde83 	.word	0x431bde83
 8005620:	000f4240 	.word	0x000f4240
 8005624:	000f423f 	.word	0x000f423f

08005628 <Time_CheckTimeoutUSec>:
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	4d32      	ldr	r5, [pc, #200]	; (80056f4 <Time_CheckTimeoutUSec+0xcc>)
 800562c:	42a9      	cmp	r1, r5
 800562e:	b082      	sub	sp, #8
 8005630:	460c      	mov	r4, r1
 8005632:	4606      	mov	r6, r0
 8005634:	d926      	bls.n	8005684 <Time_CheckTimeoutUSec+0x5c>
 8005636:	a901      	add	r1, sp, #4
 8005638:	4668      	mov	r0, sp
 800563a:	f7fb fab7 	bl	8000bac <Timer_GetCounterValue>
 800563e:	4b2e      	ldr	r3, [pc, #184]	; (80056f8 <Time_CheckTimeoutUSec+0xd0>)
 8005640:	492e      	ldr	r1, [pc, #184]	; (80056fc <Time_CheckTimeoutUSec+0xd4>)
 8005642:	e9d6 6200 	ldrd	r6, r2, [r6]
 8005646:	fba3 0304 	umull	r0, r3, r3, r4
 800564a:	0c9b      	lsrs	r3, r3, #18
 800564c:	fb01 4113 	mls	r1, r1, r3, r4
 8005650:	4411      	add	r1, r2
 8005652:	42a9      	cmp	r1, r5
 8005654:	4433      	add	r3, r6
 8005656:	d820      	bhi.n	800569a <Time_CheckTimeoutUSec+0x72>
 8005658:	42b3      	cmp	r3, r6
 800565a:	d035      	beq.n	80056c8 <Time_CheckTimeoutUSec+0xa0>
 800565c:	bf8c      	ite	hi
 800565e:	2001      	movhi	r0, #1
 8005660:	2000      	movls	r0, #0
 8005662:	9c00      	ldr	r4, [sp, #0]
 8005664:	b1f8      	cbz	r0, 80056a6 <Time_CheckTimeoutUSec+0x7e>
 8005666:	429c      	cmp	r4, r3
 8005668:	d03c      	beq.n	80056e4 <Time_CheckTimeoutUSec+0xbc>
 800566a:	bf8c      	ite	hi
 800566c:	2101      	movhi	r1, #1
 800566e:	2100      	movls	r1, #0
 8005670:	bb39      	cbnz	r1, 80056c2 <Time_CheckTimeoutUSec+0x9a>
 8005672:	42b4      	cmp	r4, r6
 8005674:	d01f      	beq.n	80056b6 <Time_CheckTimeoutUSec+0x8e>
 8005676:	bf8c      	ite	hi
 8005678:	2001      	movhi	r0, #1
 800567a:	2000      	movls	r0, #0
 800567c:	f080 0001 	eor.w	r0, r0, #1
 8005680:	b002      	add	sp, #8
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	b1e9      	cbz	r1, 80056c2 <Time_CheckTimeoutUSec+0x9a>
 8005686:	a901      	add	r1, sp, #4
 8005688:	4668      	mov	r0, sp
 800568a:	f7fb fa8f 	bl	8000bac <Timer_GetCounterValue>
 800568e:	e9d6 3200 	ldrd	r3, r2, [r6]
 8005692:	18a1      	adds	r1, r4, r2
 8005694:	42a9      	cmp	r1, r5
 8005696:	d917      	bls.n	80056c8 <Time_CheckTimeoutUSec+0xa0>
 8005698:	461e      	mov	r6, r3
 800569a:	f5a1 2174 	sub.w	r1, r1, #999424	; 0xf4000
 800569e:	f5a1 7110 	sub.w	r1, r1, #576	; 0x240
 80056a2:	3301      	adds	r3, #1
 80056a4:	e7d8      	b.n	8005658 <Time_CheckTimeoutUSec+0x30>
 80056a6:	429c      	cmp	r4, r3
 80056a8:	d014      	beq.n	80056d4 <Time_CheckTimeoutUSec+0xac>
 80056aa:	bf8c      	ite	hi
 80056ac:	2001      	movhi	r0, #1
 80056ae:	2000      	movls	r0, #0
 80056b0:	b140      	cbz	r0, 80056c4 <Time_CheckTimeoutUSec+0x9c>
 80056b2:	42b4      	cmp	r4, r6
 80056b4:	d1df      	bne.n	8005676 <Time_CheckTimeoutUSec+0x4e>
 80056b6:	9801      	ldr	r0, [sp, #4]
 80056b8:	4290      	cmp	r0, r2
 80056ba:	bf34      	ite	cc
 80056bc:	2000      	movcc	r0, #0
 80056be:	2001      	movcs	r0, #1
 80056c0:	e7dc      	b.n	800567c <Time_CheckTimeoutUSec+0x54>
 80056c2:	2001      	movs	r0, #1
 80056c4:	b002      	add	sp, #8
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	4291      	cmp	r1, r2
 80056ca:	bf34      	ite	cc
 80056cc:	2000      	movcc	r0, #0
 80056ce:	2001      	movcs	r0, #1
 80056d0:	461e      	mov	r6, r3
 80056d2:	e7c6      	b.n	8005662 <Time_CheckTimeoutUSec+0x3a>
 80056d4:	9801      	ldr	r0, [sp, #4]
 80056d6:	4288      	cmp	r0, r1
 80056d8:	bf34      	ite	cc
 80056da:	2000      	movcc	r0, #0
 80056dc:	2001      	movcs	r0, #1
 80056de:	2800      	cmp	r0, #0
 80056e0:	d0f0      	beq.n	80056c4 <Time_CheckTimeoutUSec+0x9c>
 80056e2:	e7e6      	b.n	80056b2 <Time_CheckTimeoutUSec+0x8a>
 80056e4:	9801      	ldr	r0, [sp, #4]
 80056e6:	4288      	cmp	r0, r1
 80056e8:	bf34      	ite	cc
 80056ea:	2100      	movcc	r1, #0
 80056ec:	2101      	movcs	r1, #1
 80056ee:	2900      	cmp	r1, #0
 80056f0:	d0bf      	beq.n	8005672 <Time_CheckTimeoutUSec+0x4a>
 80056f2:	e7e6      	b.n	80056c2 <Time_CheckTimeoutUSec+0x9a>
 80056f4:	000f423f 	.word	0x000f423f
 80056f8:	431bde83 	.word	0x431bde83
 80056fc:	000f4240 	.word	0x000f4240

08005700 <Time_CheckTimeoutMSec>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8005706:	b082      	sub	sp, #8
 8005708:	460c      	mov	r4, r1
 800570a:	4605      	mov	r5, r0
 800570c:	d329      	bcc.n	8005762 <Time_CheckTimeoutMSec+0x62>
 800570e:	4668      	mov	r0, sp
 8005710:	a901      	add	r1, sp, #4
 8005712:	f7fb fa4b 	bl	8000bac <Timer_GetCounterValue>
 8005716:	4b33      	ldr	r3, [pc, #204]	; (80057e4 <Time_CheckTimeoutMSec+0xe4>)
 8005718:	4e33      	ldr	r6, [pc, #204]	; (80057e8 <Time_CheckTimeoutMSec+0xe8>)
 800571a:	e9d5 1200 	ldrd	r1, r2, [r5]
 800571e:	fba3 0304 	umull	r0, r3, r3, r4
 8005722:	099b      	lsrs	r3, r3, #6
 8005724:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8005728:	fb05 4013 	mls	r0, r5, r3, r4
 800572c:	fb05 2000 	mla	r0, r5, r0, r2
 8005730:	42b0      	cmp	r0, r6
 8005732:	440b      	add	r3, r1
 8005734:	d825      	bhi.n	8005782 <Time_CheckTimeoutMSec+0x82>
 8005736:	428b      	cmp	r3, r1
 8005738:	d03b      	beq.n	80057b2 <Time_CheckTimeoutMSec+0xb2>
 800573a:	bf8c      	ite	hi
 800573c:	2401      	movhi	r4, #1
 800573e:	2400      	movls	r4, #0
 8005740:	b32c      	cbz	r4, 800578e <Time_CheckTimeoutMSec+0x8e>
 8005742:	9c00      	ldr	r4, [sp, #0]
 8005744:	429c      	cmp	r4, r3
 8005746:	d044      	beq.n	80057d2 <Time_CheckTimeoutMSec+0xd2>
 8005748:	bf8c      	ite	hi
 800574a:	2001      	movhi	r0, #1
 800574c:	2000      	movls	r0, #0
 800574e:	bb68      	cbnz	r0, 80057ac <Time_CheckTimeoutMSec+0xac>
 8005750:	428c      	cmp	r4, r1
 8005752:	d025      	beq.n	80057a0 <Time_CheckTimeoutMSec+0xa0>
 8005754:	bf8c      	ite	hi
 8005756:	2001      	movhi	r0, #1
 8005758:	2000      	movls	r0, #0
 800575a:	f080 0001 	eor.w	r0, r0, #1
 800575e:	b002      	add	sp, #8
 8005760:	bd70      	pop	{r4, r5, r6, pc}
 8005762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005766:	fb00 f404 	mul.w	r4, r0, r4
 800576a:	b1fc      	cbz	r4, 80057ac <Time_CheckTimeoutMSec+0xac>
 800576c:	a901      	add	r1, sp, #4
 800576e:	4668      	mov	r0, sp
 8005770:	f7fb fa1c 	bl	8000bac <Timer_GetCounterValue>
 8005774:	686a      	ldr	r2, [r5, #4]
 8005776:	491c      	ldr	r1, [pc, #112]	; (80057e8 <Time_CheckTimeoutMSec+0xe8>)
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	18a0      	adds	r0, r4, r2
 800577c:	4288      	cmp	r0, r1
 800577e:	d918      	bls.n	80057b2 <Time_CheckTimeoutMSec+0xb2>
 8005780:	4619      	mov	r1, r3
 8005782:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
 8005786:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
 800578a:	3301      	adds	r3, #1
 800578c:	e7d3      	b.n	8005736 <Time_CheckTimeoutMSec+0x36>
 800578e:	9c00      	ldr	r4, [sp, #0]
 8005790:	429c      	cmp	r4, r3
 8005792:	d016      	beq.n	80057c2 <Time_CheckTimeoutMSec+0xc2>
 8005794:	bf8c      	ite	hi
 8005796:	2001      	movhi	r0, #1
 8005798:	2000      	movls	r0, #0
 800579a:	b140      	cbz	r0, 80057ae <Time_CheckTimeoutMSec+0xae>
 800579c:	428c      	cmp	r4, r1
 800579e:	d1d9      	bne.n	8005754 <Time_CheckTimeoutMSec+0x54>
 80057a0:	9801      	ldr	r0, [sp, #4]
 80057a2:	4290      	cmp	r0, r2
 80057a4:	bf34      	ite	cc
 80057a6:	2000      	movcc	r0, #0
 80057a8:	2001      	movcs	r0, #1
 80057aa:	e7d6      	b.n	800575a <Time_CheckTimeoutMSec+0x5a>
 80057ac:	2001      	movs	r0, #1
 80057ae:	b002      	add	sp, #8
 80057b0:	bd70      	pop	{r4, r5, r6, pc}
 80057b2:	4290      	cmp	r0, r2
 80057b4:	bf34      	ite	cc
 80057b6:	2400      	movcc	r4, #0
 80057b8:	2401      	movcs	r4, #1
 80057ba:	4619      	mov	r1, r3
 80057bc:	2c00      	cmp	r4, #0
 80057be:	d0e6      	beq.n	800578e <Time_CheckTimeoutMSec+0x8e>
 80057c0:	e7bf      	b.n	8005742 <Time_CheckTimeoutMSec+0x42>
 80057c2:	9b01      	ldr	r3, [sp, #4]
 80057c4:	4283      	cmp	r3, r0
 80057c6:	bf34      	ite	cc
 80057c8:	2000      	movcc	r0, #0
 80057ca:	2001      	movcs	r0, #1
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d0ee      	beq.n	80057ae <Time_CheckTimeoutMSec+0xae>
 80057d0:	e7e4      	b.n	800579c <Time_CheckTimeoutMSec+0x9c>
 80057d2:	9b01      	ldr	r3, [sp, #4]
 80057d4:	4283      	cmp	r3, r0
 80057d6:	bf34      	ite	cc
 80057d8:	2000      	movcc	r0, #0
 80057da:	2001      	movcs	r0, #1
 80057dc:	2800      	cmp	r0, #0
 80057de:	d1e5      	bne.n	80057ac <Time_CheckTimeoutMSec+0xac>
 80057e0:	e7b6      	b.n	8005750 <Time_CheckTimeoutMSec+0x50>
 80057e2:	bf00      	nop
 80057e4:	10624dd3 	.word	0x10624dd3
 80057e8:	000f423f 	.word	0x000f423f

080057ec <Argus_Init>:
 80057ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80057f4:	2800      	cmp	r0, #0
 80057f6:	f000 8088 	beq.w	800590a <Argus_Init+0x11e>
 80057fa:	4604      	mov	r4, r0
 80057fc:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8005800:	468b      	mov	fp, r1
 8005802:	2100      	movs	r1, #0
 8005804:	f011 ff8c 	bl	8017720 <memset>
 8005808:	f604 08f4 	addw	r8, r4, #2292	; 0x8f4
 800580c:	f06f 0306 	mvn.w	r3, #6
 8005810:	f104 0608 	add.w	r6, r4, #8
 8005814:	f504 77f2 	add.w	r7, r4, #484	; 0x1e4
 8005818:	60a3      	str	r3, [r4, #8]
 800581a:	4640      	mov	r0, r8
 800581c:	4631      	mov	r1, r6
 800581e:	463a      	mov	r2, r7
 8005820:	f000 f9c8 	bl	8005bb4 <Argus_Measurement_Init>
 8005824:	1e05      	subs	r5, r0, #0
 8005826:	db38      	blt.n	800589a <Argus_Init+0xae>
 8005828:	f604 4a94 	addw	sl, r4, #3220	; 0xc94
 800582c:	f504 797f 	add.w	r9, r4, #1020	; 0x3fc
 8005830:	4650      	mov	r0, sl
 8005832:	464b      	mov	r3, r9
 8005834:	463a      	mov	r2, r7
 8005836:	4631      	mov	r1, r6
 8005838:	f000 ff94 	bl	8006764 <Argus_Eval_Init>
 800583c:	1e05      	subs	r5, r0, #0
 800583e:	db43      	blt.n	80058c8 <Argus_Init+0xdc>
 8005840:	f8cd b000 	str.w	fp, [sp]
 8005844:	4652      	mov	r2, sl
 8005846:	4643      	mov	r3, r8
 8005848:	4649      	mov	r1, r9
 800584a:	4630      	mov	r0, r6
 800584c:	f008 feb6 	bl	800e5bc <Argus_Dev_Init>
 8005850:	1e05      	subs	r5, r0, #0
 8005852:	db2b      	blt.n	80058ac <Argus_Init+0xc0>
 8005854:	4643      	mov	r3, r8
 8005856:	4632      	mov	r2, r6
 8005858:	4639      	mov	r1, r7
 800585a:	4648      	mov	r0, r9
 800585c:	f00c ffba 	bl	80127d4 <Argus_Cal_Init>
 8005860:	1e05      	subs	r5, r0, #0
 8005862:	db3a      	blt.n	80058da <Argus_Init+0xee>
 8005864:	4642      	mov	r2, r8
 8005866:	4631      	mov	r1, r6
 8005868:	4638      	mov	r0, r7
 800586a:	f002 fdef 	bl	800844c <Argus_Cfg_Init>
 800586e:	1e05      	subs	r5, r0, #0
 8005870:	db3c      	blt.n	80058ec <Argus_Init+0x100>
 8005872:	4648      	mov	r0, r9
 8005874:	f010 fa78 	bl	8015d68 <Argus_Cal_AssembleData>
 8005878:	1e05      	subs	r5, r0, #0
 800587a:	db20      	blt.n	80058be <Argus_Init+0xd2>
 800587c:	a902      	add	r1, sp, #8
 800587e:	4638      	mov	r0, r7
 8005880:	f003 fc78 	bl	8009174 <Argus_Cfg_GetCurrentDefaultConfiguration>
 8005884:	1e05      	subs	r5, r0, #0
 8005886:	db36      	blt.n	80058f6 <Argus_Init+0x10a>
 8005888:	a902      	add	r1, sp, #8
 800588a:	4638      	mov	r0, r7
 800588c:	f002 fe14 	bl	80084b8 <Argus_Cfg_SetConfiguration>
 8005890:	1e05      	subs	r5, r0, #0
 8005892:	db35      	blt.n	8005900 <Argus_Init+0x114>
 8005894:	4b20      	ldr	r3, [pc, #128]	; (8005918 <Argus_Init+0x12c>)
 8005896:	6023      	str	r3, [r4, #0]
 8005898:	e003      	b.n	80058a2 <Argus_Init+0xb6>
 800589a:	4629      	mov	r1, r5
 800589c:	481f      	ldr	r0, [pc, #124]	; (800591c <Argus_Init+0x130>)
 800589e:	f7fb fad7 	bl	8000e50 <print>
 80058a2:	4628      	mov	r0, r5
 80058a4:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 80058a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ac:	4629      	mov	r1, r5
 80058ae:	481c      	ldr	r0, [pc, #112]	; (8005920 <Argus_Init+0x134>)
 80058b0:	f7fb face 	bl	8000e50 <print>
 80058b4:	4628      	mov	r0, r5
 80058b6:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 80058ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058be:	4629      	mov	r1, r5
 80058c0:	4818      	ldr	r0, [pc, #96]	; (8005924 <Argus_Init+0x138>)
 80058c2:	f7fb fac5 	bl	8000e50 <print>
 80058c6:	e7ec      	b.n	80058a2 <Argus_Init+0xb6>
 80058c8:	4629      	mov	r1, r5
 80058ca:	4817      	ldr	r0, [pc, #92]	; (8005928 <Argus_Init+0x13c>)
 80058cc:	f7fb fac0 	bl	8000e50 <print>
 80058d0:	4628      	mov	r0, r5
 80058d2:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 80058d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058da:	4629      	mov	r1, r5
 80058dc:	4813      	ldr	r0, [pc, #76]	; (800592c <Argus_Init+0x140>)
 80058de:	f7fb fab7 	bl	8000e50 <print>
 80058e2:	4628      	mov	r0, r5
 80058e4:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 80058e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ec:	4629      	mov	r1, r5
 80058ee:	4810      	ldr	r0, [pc, #64]	; (8005930 <Argus_Init+0x144>)
 80058f0:	f7fb faae 	bl	8000e50 <print>
 80058f4:	e7d5      	b.n	80058a2 <Argus_Init+0xb6>
 80058f6:	4629      	mov	r1, r5
 80058f8:	480e      	ldr	r0, [pc, #56]	; (8005934 <Argus_Init+0x148>)
 80058fa:	f7fb faa9 	bl	8000e50 <print>
 80058fe:	e7d0      	b.n	80058a2 <Argus_Init+0xb6>
 8005900:	4629      	mov	r1, r5
 8005902:	480d      	ldr	r0, [pc, #52]	; (8005938 <Argus_Init+0x14c>)
 8005904:	f7fb faa4 	bl	8000e50 <print>
 8005908:	e7cb      	b.n	80058a2 <Argus_Init+0xb6>
 800590a:	480c      	ldr	r0, [pc, #48]	; (800593c <Argus_Init+0x150>)
 800590c:	f7fb faa0 	bl	8000e50 <print>
 8005910:	f06f 0504 	mvn.w	r5, #4
 8005914:	e7c5      	b.n	80058a2 <Argus_Init+0xb6>
 8005916:	bf00      	nop
 8005918:	0afb8550 	.word	0x0afb8550
 800591c:	08018b94 	.word	0x08018b94
 8005920:	08018c40 	.word	0x08018c40
 8005924:	08018d48 	.word	0x08018d48
 8005928:	08018be8 	.word	0x08018be8
 800592c:	08018c9c 	.word	0x08018c9c
 8005930:	08018cf0 	.word	0x08018cf0
 8005934:	08018da0 	.word	0x08018da0
 8005938:	08018df4 	.word	0x08018df4
 800593c:	08018b64 	.word	0x08018b64

08005940 <Argus_Malloc>:
 8005940:	f011 becc 	b.w	80176dc <malloc>

08005944 <Argus_CreateHandle>:
 8005944:	b510      	push	{r4, lr}
 8005946:	f44f 607f 	mov.w	r0, #4080	; 0xff0
 800594a:	f7ff fff9 	bl	8005940 <Argus_Malloc>
 800594e:	4604      	mov	r4, r0
 8005950:	b138      	cbz	r0, 8005962 <Argus_CreateHandle+0x1e>
 8005952:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8005956:	2100      	movs	r1, #0
 8005958:	f011 fee2 	bl	8017720 <memset>
 800595c:	f06f 0306 	mvn.w	r3, #6
 8005960:	60a3      	str	r3, [r4, #8]
 8005962:	4620      	mov	r0, r4
 8005964:	bd10      	pop	{r4, pc}
 8005966:	bf00      	nop

08005968 <Argus_GetStatus>:
 8005968:	b1c8      	cbz	r0, 800599e <Argus_GetStatus+0x36>
 800596a:	b508      	push	{r3, lr}
 800596c:	6802      	ldr	r2, [r0, #0]
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <Argus_GetStatus+0x3c>)
 8005970:	429a      	cmp	r2, r3
 8005972:	d111      	bne.n	8005998 <Argus_GetStatus+0x30>
 8005974:	3008      	adds	r0, #8
 8005976:	f009 f809 	bl	800e98c <Argus_Dev_GetStatus>
 800597a:	2867      	cmp	r0, #103	; 0x67
 800597c:	d00a      	beq.n	8005994 <Argus_GetStatus+0x2c>
 800597e:	dd05      	ble.n	800598c <Argus_GetStatus+0x24>
 8005980:	f1a0 03c1 	sub.w	r3, r0, #193	; 0xc1
 8005984:	2b03      	cmp	r3, #3
 8005986:	bf98      	it	ls
 8005988:	2002      	movls	r0, #2
 800598a:	bd08      	pop	{r3, pc}
 800598c:	2864      	cmp	r0, #100	; 0x64
 800598e:	bf08      	it	eq
 8005990:	2002      	moveq	r0, #2
 8005992:	bd08      	pop	{r3, pc}
 8005994:	2002      	movs	r0, #2
 8005996:	bd08      	pop	{r3, pc}
 8005998:	f06f 0006 	mvn.w	r0, #6
 800599c:	bd08      	pop	{r3, pc}
 800599e:	f06f 0004 	mvn.w	r0, #4
 80059a2:	4770      	bx	lr
 80059a4:	0afb8550 	.word	0x0afb8550

080059a8 <Argus_TriggerMeasurement>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	b340      	cbz	r0, 80059fe <Argus_TriggerMeasurement+0x56>
 80059ac:	4b1a      	ldr	r3, [pc, #104]	; (8005a18 <Argus_TriggerMeasurement+0x70>)
 80059ae:	6802      	ldr	r2, [r0, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	4604      	mov	r4, r0
 80059b4:	d129      	bne.n	8005a0a <Argus_TriggerMeasurement+0x62>
 80059b6:	f100 0508 	add.w	r5, r0, #8
 80059ba:	4628      	mov	r0, r5
 80059bc:	460e      	mov	r6, r1
 80059be:	f008 ffe5 	bl	800e98c <Argus_Dev_GetStatus>
 80059c2:	2867      	cmp	r0, #103	; 0x67
 80059c4:	d00b      	beq.n	80059de <Argus_TriggerMeasurement+0x36>
 80059c6:	dd11      	ble.n	80059ec <Argus_TriggerMeasurement+0x44>
 80059c8:	f1a0 03c1 	sub.w	r3, r0, #193	; 0xc1
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d906      	bls.n	80059de <Argus_TriggerMeasurement+0x36>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	da04      	bge.n	80059de <Argus_TriggerMeasurement+0x36>
 80059d4:	4628      	mov	r0, r5
 80059d6:	f009 fdd3 	bl	800f580 <Argus_Dev_RecoverFromError>
 80059da:	2800      	cmp	r0, #0
 80059dc:	db14      	blt.n	8005a08 <Argus_TriggerMeasurement+0x60>
 80059de:	4631      	mov	r1, r6
 80059e0:	f604 00f4 	addw	r0, r4, #2292	; 0x8f4
 80059e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059e8:	f000 b942 	b.w	8005c70 <Argus_Measurement_Trigger>
 80059ec:	2864      	cmp	r0, #100	; 0x64
 80059ee:	d1ef      	bne.n	80059d0 <Argus_TriggerMeasurement+0x28>
 80059f0:	4631      	mov	r1, r6
 80059f2:	f604 00f4 	addw	r0, r4, #2292	; 0x8f4
 80059f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059fa:	f000 b939 	b.w	8005c70 <Argus_Measurement_Trigger>
 80059fe:	4807      	ldr	r0, [pc, #28]	; (8005a1c <Argus_TriggerMeasurement+0x74>)
 8005a00:	f7fb fa26 	bl	8000e50 <print>
 8005a04:	f06f 0004 	mvn.w	r0, #4
 8005a08:	bd70      	pop	{r4, r5, r6, pc}
 8005a0a:	4805      	ldr	r0, [pc, #20]	; (8005a20 <Argus_TriggerMeasurement+0x78>)
 8005a0c:	f7fb fa20 	bl	8000e50 <print>
 8005a10:	f06f 0006 	mvn.w	r0, #6
 8005a14:	bd70      	pop	{r4, r5, r6, pc}
 8005a16:	bf00      	nop
 8005a18:	0afb8550 	.word	0x0afb8550
 8005a1c:	08018b64 	.word	0x08018b64
 8005a20:	08018e4c 	.word	0x08018e4c

08005a24 <Argus_EvaluateData>:
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	b318      	cbz	r0, 8005a70 <Argus_EvaluateData+0x4c>
 8005a28:	4616      	mov	r6, r2
 8005a2a:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <Argus_EvaluateData+0x58>)
 8005a2c:	6802      	ldr	r2, [r0, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	4604      	mov	r4, r0
 8005a32:	d114      	bne.n	8005a5e <Argus_EvaluateData+0x3a>
 8005a34:	b1c9      	cbz	r1, 8005a6a <Argus_EvaluateData+0x46>
 8005a36:	b1c6      	cbz	r6, 8005a6a <Argus_EvaluateData+0x46>
 8005a38:	7903      	ldrb	r3, [r0, #4]
 8005a3a:	b11b      	cbz	r3, 8005a44 <Argus_EvaluateData+0x20>
 8005a3c:	8bb3      	ldrh	r3, [r6, #28]
 8005a3e:	f043 0308 	orr.w	r3, r3, #8
 8005a42:	83b3      	strh	r3, [r6, #28]
 8005a44:	4632      	mov	r2, r6
 8005a46:	f604 4094 	addw	r0, r4, #3220	; 0xc94
 8005a4a:	2500      	movs	r5, #0
 8005a4c:	f001 fa64 	bl	8006f18 <Argus_Eval_Apply>
 8005a50:	f604 00f4 	addw	r0, r4, #2292	; 0x8f4
 8005a54:	6035      	str	r5, [r6, #0]
 8005a56:	f000 f8c9 	bl	8005bec <Argus_Measurement_Start>
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	bd70      	pop	{r4, r5, r6, pc}
 8005a5e:	4808      	ldr	r0, [pc, #32]	; (8005a80 <Argus_EvaluateData+0x5c>)
 8005a60:	f7fb f9f6 	bl	8000e50 <print>
 8005a64:	f06f 0006 	mvn.w	r0, #6
 8005a68:	bd70      	pop	{r4, r5, r6, pc}
 8005a6a:	f06f 0004 	mvn.w	r0, #4
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}
 8005a70:	4804      	ldr	r0, [pc, #16]	; (8005a84 <Argus_EvaluateData+0x60>)
 8005a72:	f7fb f9ed 	bl	8000e50 <print>
 8005a76:	f06f 0004 	mvn.w	r0, #4
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	0afb8550 	.word	0x0afb8550
 8005a80:	08018e4c 	.word	0x08018e4c
 8005a84:	08018b64 	.word	0x08018b64

08005a88 <Argus_GetAPIVersion>:
 8005a88:	4800      	ldr	r0, [pc, #0]	; (8005a8c <Argus_GetAPIVersion+0x4>)
 8005a8a:	4770      	bx	lr
 8005a8c:	01020003 	.word	0x01020003

08005a90 <Argus_GetModuleVersion>:
 8005a90:	b118      	cbz	r0, 8005a9a <Argus_GetModuleVersion+0xa>
 8005a92:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <Argus_GetModuleVersion+0x44>)
 8005a94:	6802      	ldr	r2, [r0, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d001      	beq.n	8005a9e <Argus_GetModuleVersion+0xe>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	4770      	bx	lr
 8005a9e:	b510      	push	{r4, lr}
 8005aa0:	f100 0408 	add.w	r4, r0, #8
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f008 ff71 	bl	800e98c <Argus_Dev_GetStatus>
 8005aaa:	2867      	cmp	r0, #103	; 0x67
 8005aac:	d00d      	beq.n	8005aca <Argus_GetModuleVersion+0x3a>
 8005aae:	dd0a      	ble.n	8005ac6 <Argus_GetModuleVersion+0x36>
 8005ab0:	f1a0 03c1 	sub.w	r3, r0, #193	; 0xc1
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d908      	bls.n	8005aca <Argus_GetModuleVersion+0x3a>
 8005ab8:	f110 0f65 	cmn.w	r0, #101	; 0x65
 8005abc:	d001      	beq.n	8005ac2 <Argus_GetModuleVersion+0x32>
 8005abe:	3007      	adds	r0, #7
 8005ac0:	d103      	bne.n	8005aca <Argus_GetModuleVersion+0x3a>
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	bd10      	pop	{r4, pc}
 8005ac6:	2864      	cmp	r0, #100	; 0x64
 8005ac8:	d1f6      	bne.n	8005ab8 <Argus_GetModuleVersion+0x28>
 8005aca:	4620      	mov	r0, r4
 8005acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad0:	f009 bb4e 	b.w	800f170 <Argus_Dev_GetModule>
 8005ad4:	0afb8550 	.word	0x0afb8550

08005ad8 <Argus_GetChipID>:
 8005ad8:	b118      	cbz	r0, 8005ae2 <Argus_GetChipID+0xa>
 8005ada:	4b10      	ldr	r3, [pc, #64]	; (8005b1c <Argus_GetChipID+0x44>)
 8005adc:	6802      	ldr	r2, [r0, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d001      	beq.n	8005ae6 <Argus_GetChipID+0xe>
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	4770      	bx	lr
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	f100 0408 	add.w	r4, r0, #8
 8005aec:	4620      	mov	r0, r4
 8005aee:	f008 ff4d 	bl	800e98c <Argus_Dev_GetStatus>
 8005af2:	2867      	cmp	r0, #103	; 0x67
 8005af4:	d00d      	beq.n	8005b12 <Argus_GetChipID+0x3a>
 8005af6:	dd0a      	ble.n	8005b0e <Argus_GetChipID+0x36>
 8005af8:	f1a0 03c1 	sub.w	r3, r0, #193	; 0xc1
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d908      	bls.n	8005b12 <Argus_GetChipID+0x3a>
 8005b00:	f110 0f65 	cmn.w	r0, #101	; 0x65
 8005b04:	d001      	beq.n	8005b0a <Argus_GetChipID+0x32>
 8005b06:	3007      	adds	r0, #7
 8005b08:	d103      	bne.n	8005b12 <Argus_GetChipID+0x3a>
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	bd10      	pop	{r4, pc}
 8005b0e:	2864      	cmp	r0, #100	; 0x64
 8005b10:	d1f6      	bne.n	8005b00 <Argus_GetChipID+0x28>
 8005b12:	4620      	mov	r0, r4
 8005b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b18:	f009 bb2c 	b.w	800f174 <Argus_Dev_GetChipID>
 8005b1c:	0afb8550 	.word	0x0afb8550

08005b20 <Argus_SetConfigurationFrameTime>:
 8005b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b22:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8005b26:	b3c8      	cbz	r0, 8005b9c <Argus_SetConfigurationFrameTime+0x7c>
 8005b28:	4b1f      	ldr	r3, [pc, #124]	; (8005ba8 <Argus_SetConfigurationFrameTime+0x88>)
 8005b2a:	6805      	ldr	r5, [r0, #0]
 8005b2c:	429d      	cmp	r5, r3
 8005b2e:	4604      	mov	r4, r0
 8005b30:	d12e      	bne.n	8005b90 <Argus_SetConfigurationFrameTime+0x70>
 8005b32:	f500 76f2 	add.w	r6, r0, #484	; 0x1e4
 8005b36:	460f      	mov	r7, r1
 8005b38:	4630      	mov	r0, r6
 8005b3a:	4669      	mov	r1, sp
 8005b3c:	f002 fd02 	bl	8008544 <Argus_Cfg_GetConfiguration>
 8005b40:	b110      	cbz	r0, 8005b48 <Argus_SetConfigurationFrameTime+0x28>
 8005b42:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8005b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	9701      	str	r7, [sp, #4]
 8005b4c:	42ab      	cmp	r3, r5
 8005b4e:	d11f      	bne.n	8005b90 <Argus_SetConfigurationFrameTime+0x70>
 8005b50:	3408      	adds	r4, #8
 8005b52:	4620      	mov	r0, r4
 8005b54:	f008 ff1a 	bl	800e98c <Argus_Dev_GetStatus>
 8005b58:	2867      	cmp	r0, #103	; 0x67
 8005b5a:	d009      	beq.n	8005b70 <Argus_SetConfigurationFrameTime+0x50>
 8005b5c:	dc0f      	bgt.n	8005b7e <Argus_SetConfigurationFrameTime+0x5e>
 8005b5e:	2864      	cmp	r0, #100	; 0x64
 8005b60:	d006      	beq.n	8005b70 <Argus_SetConfigurationFrameTime+0x50>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	da04      	bge.n	8005b70 <Argus_SetConfigurationFrameTime+0x50>
 8005b66:	4620      	mov	r0, r4
 8005b68:	f009 fd0a 	bl	800f580 <Argus_Dev_RecoverFromError>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	dbe8      	blt.n	8005b42 <Argus_SetConfigurationFrameTime+0x22>
 8005b70:	4669      	mov	r1, sp
 8005b72:	4630      	mov	r0, r6
 8005b74:	f002 fca0 	bl	80084b8 <Argus_Cfg_SetConfiguration>
 8005b78:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8005b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b7e:	f1a0 03c1 	sub.w	r3, r0, #193	; 0xc1
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d8ed      	bhi.n	8005b62 <Argus_SetConfigurationFrameTime+0x42>
 8005b86:	4669      	mov	r1, sp
 8005b88:	4630      	mov	r0, r6
 8005b8a:	f002 fc95 	bl	80084b8 <Argus_Cfg_SetConfiguration>
 8005b8e:	e7f3      	b.n	8005b78 <Argus_SetConfigurationFrameTime+0x58>
 8005b90:	4806      	ldr	r0, [pc, #24]	; (8005bac <Argus_SetConfigurationFrameTime+0x8c>)
 8005b92:	f7fb f95d 	bl	8000e50 <print>
 8005b96:	f06f 0006 	mvn.w	r0, #6
 8005b9a:	e7d2      	b.n	8005b42 <Argus_SetConfigurationFrameTime+0x22>
 8005b9c:	4804      	ldr	r0, [pc, #16]	; (8005bb0 <Argus_SetConfigurationFrameTime+0x90>)
 8005b9e:	f7fb f957 	bl	8000e50 <print>
 8005ba2:	f06f 0004 	mvn.w	r0, #4
 8005ba6:	e7cc      	b.n	8005b42 <Argus_SetConfigurationFrameTime+0x22>
 8005ba8:	0afb8550 	.word	0x0afb8550
 8005bac:	08018e4c 	.word	0x08018e4c
 8005bb0:	08018b64 	.word	0x08018b64

08005bb4 <Argus_Measurement_Init>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	460e      	mov	r6, r1
 8005bba:	4615      	mov	r5, r2
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 8005bc2:	f011 fdad 	bl	8017720 <memset>
 8005bc6:	e9c4 65e6 	strd	r6, r5, [r4, #920]	; 0x398
 8005bca:	4802      	ldr	r0, [pc, #8]	; (8005bd4 <Argus_Measurement_Init+0x20>)
 8005bcc:	f7fb f8ae 	bl	8000d2c <Timer_SetCallback>
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	08005ded 	.word	0x08005ded

08005bd8 <Argus_Measurement_GetBusyBuffers>:
 8005bd8:	6943      	ldr	r3, [r0, #20]
 8005bda:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
 8005bde:	1c18      	adds	r0, r3, #0
 8005be0:	bf18      	it	ne
 8005be2:	2001      	movne	r0, #1
 8005be4:	b10a      	cbz	r2, 8005bea <Argus_Measurement_GetBusyBuffers+0x12>
 8005be6:	f040 0002 	orr.w	r0, r0, #2
 8005bea:	4770      	bx	lr

08005bec <Argus_Measurement_Start>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4604      	mov	r4, r0
 8005bf0:	f7fa fd16 	bl	8000620 <IRQ_LOCK>
 8005bf4:	7923      	ldrb	r3, [r4, #4]
 8005bf6:	b3a3      	cbz	r3, 8005c62 <Argus_Measurement_Start+0x76>
 8005bf8:	21c4      	movs	r1, #196	; 0xc4
 8005bfa:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005bfe:	f008 fe9d 	bl	800e93c <Argus_Dev_SetStatus>
 8005c02:	4605      	mov	r5, r0
 8005c04:	b9d8      	cbnz	r0, 8005c3e <Argus_Measurement_Start+0x52>
 8005c06:	6923      	ldr	r3, [r4, #16]
 8005c08:	b97b      	cbnz	r3, 8005c2a <Argus_Measurement_Start+0x3e>
 8005c0a:	6963      	ldr	r3, [r4, #20]
 8005c0c:	bb13      	cbnz	r3, 8005c54 <Argus_Measurement_Start+0x68>
 8005c0e:	f104 0314 	add.w	r3, r4, #20
 8005c12:	6123      	str	r3, [r4, #16]
 8005c14:	2102      	movs	r1, #2
 8005c16:	2200      	movs	r2, #0
 8005c18:	6019      	str	r1, [r3, #0]
 8005c1a:	7122      	strb	r2, [r4, #4]
 8005c1c:	f7fa fcde 	bl	80005dc <IRQ_UNLOCK>
 8005c20:	4620      	mov	r0, r4
 8005c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c26:	f000 b8a5 	b.w	8005d74 <MeasurementPrepare>
 8005c2a:	2502      	movs	r5, #2
 8005c2c:	f7fa fcd6 	bl	80005dc <IRQ_UNLOCK>
 8005c30:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005c34:	21c4      	movs	r1, #196	; 0xc4
 8005c36:	f008 fe95 	bl	800e964 <Argus_Dev_ClearStatus>
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	bd38      	pop	{r3, r4, r5, pc}
 8005c3e:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005c42:	f500 70b2 	add.w	r0, r0, #356	; 0x164
 8005c46:	f006 fba3 	bl	800c390 <Argus_Dca_RecoverLaserFailure>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d0db      	beq.n	8005c06 <Argus_Measurement_Start+0x1a>
 8005c4e:	f7fa fcc5 	bl	80005dc <IRQ_UNLOCK>
 8005c52:	e7f2      	b.n	8005c3a <Argus_Measurement_Start+0x4e>
 8005c54:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8005c58:	b943      	cbnz	r3, 8005c6c <Argus_Measurement_Start+0x80>
 8005c5a:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
 8005c5e:	6123      	str	r3, [r4, #16]
 8005c60:	e7d8      	b.n	8005c14 <Argus_Measurement_Start+0x28>
 8005c62:	2569      	movs	r5, #105	; 0x69
 8005c64:	f7fa fcba 	bl	80005dc <IRQ_UNLOCK>
 8005c68:	4628      	mov	r0, r5
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	2568      	movs	r5, #104	; 0x68
 8005c6e:	e7dd      	b.n	8005c2c <Argus_Measurement_Start+0x40>

08005c70 <Argus_Measurement_Trigger>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	4604      	mov	r4, r0
 8005c74:	b084      	sub	sp, #16
 8005c76:	460e      	mov	r6, r1
 8005c78:	f7fa fcd2 	bl	8000620 <IRQ_LOCK>
 8005c7c:	6825      	ldr	r5, [r4, #0]
 8005c7e:	bb7d      	cbnz	r5, 8005ce0 <Argus_Measurement_Trigger+0x70>
 8005c80:	f7fa fcac 	bl	80005dc <IRQ_UNLOCK>
 8005c84:	f8d4 039c 	ldr.w	r0, [r4, #924]	; 0x39c
 8005c88:	f002 fc66 	bl	8008558 <Argus_Cfg_GetConfigurationPtr>
 8005c8c:	6842      	ldr	r2, [r0, #4]
 8005c8e:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005c92:	0a52      	lsrs	r2, r2, #9
 8005c94:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f008 fdb7 	bl	800e80c <Argus_Dev_AwaitStatus>
 8005c9e:	b108      	cbz	r0, 8005ca4 <Argus_Measurement_Trigger+0x34>
 8005ca0:	b004      	add	sp, #16
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	f8c4 6394 	str.w	r6, [r4, #916]	; 0x394
 8005ca8:	f8d4 039c 	ldr.w	r0, [r4, #924]	; 0x39c
 8005cac:	f002 fc54 	bl	8008558 <Argus_Cfg_GetConfigurationPtr>
 8005cb0:	f104 0308 	add.w	r3, r4, #8
 8005cb4:	6846      	ldr	r6, [r0, #4]
 8005cb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005cba:	466d      	mov	r5, sp
 8005cbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cc0:	a802      	add	r0, sp, #8
 8005cc2:	f7ff fbdb 	bl	800547c <Time_GetNow>
 8005cc6:	a902      	add	r1, sp, #8
 8005cc8:	4628      	mov	r0, r5
 8005cca:	f7ff fc0b 	bl	80054e4 <Time_DiffUSec>
 8005cce:	4286      	cmp	r6, r0
 8005cd0:	bf9c      	itt	ls
 8005cd2:	2301      	movls	r3, #1
 8005cd4:	7123      	strbls	r3, [r4, #4]
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f7ff ff88 	bl	8005bec <Argus_Measurement_Start>
 8005cdc:	b004      	add	sp, #16
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	2500      	movs	r5, #0
 8005ce2:	f8c4 6394 	str.w	r6, [r4, #916]	; 0x394
 8005ce6:	6025      	str	r5, [r4, #0]
 8005ce8:	f7fa fc78 	bl	80005dc <IRQ_UNLOCK>
 8005cec:	4628      	mov	r0, r5
 8005cee:	b004      	add	sp, #16
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
 8005cf2:	bf00      	nop

08005cf4 <MeasurementFinish>:
 8005cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	2600      	movs	r6, #0
 8005cfc:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8005d00:	610e      	str	r6, [r1, #16]
 8005d02:	4605      	mov	r5, r0
 8005d04:	f8d1 0398 	ldr.w	r0, [r1, #920]	; 0x398
 8005d08:	f8d4 7394 	ldr.w	r7, [r4, #916]	; 0x394
 8005d0c:	21c4      	movs	r1, #196	; 0xc4
 8005d0e:	f008 fe29 	bl	800e964 <Argus_Dev_ClearStatus>
 8005d12:	f115 0f72 	cmn.w	r5, #114	; 0x72
 8005d16:	d00d      	beq.n	8005d34 <MeasurementFinish+0x40>
 8005d18:	1daa      	adds	r2, r5, #6
 8005d1a:	d00b      	beq.n	8005d34 <MeasurementFinish+0x40>
 8005d1c:	42b5      	cmp	r5, r6
 8005d1e:	db0e      	blt.n	8005d3e <MeasurementFinish+0x4a>
 8005d20:	4620      	mov	r0, r4
 8005d22:	f7ff ff63 	bl	8005bec <Argus_Measurement_Start>
 8005d26:	b1f7      	cbz	r7, 8005d66 <MeasurementFinish+0x72>
 8005d28:	4641      	mov	r1, r8
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d32:	4718      	bx	r3
 8005d34:	4620      	mov	r0, r4
 8005d36:	4635      	mov	r5, r6
 8005d38:	f7ff ff58 	bl	8005bec <Argus_Measurement_Start>
 8005d3c:	e7f3      	b.n	8005d26 <MeasurementFinish+0x32>
 8005d3e:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005d42:	f008 fe35 	bl	800e9b0 <Argus_Dev_Abort>
 8005d46:	6026      	str	r6, [r4, #0]
 8005d48:	f8d4 039c 	ldr.w	r0, [r4, #924]	; 0x39c
 8005d4c:	f002 fc04 	bl	8008558 <Argus_Cfg_GetConfigurationPtr>
 8005d50:	6842      	ldr	r2, [r0, #4]
 8005d52:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005d56:	0a52      	lsrs	r2, r2, #9
 8005d58:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	f008 fd55 	bl	800e80c <Argus_Dev_AwaitStatus>
 8005d62:	1cab      	adds	r3, r5, #2
 8005d64:	d1df      	bne.n	8005d26 <MeasurementFinish+0x32>
 8005d66:	2300      	movs	r3, #0
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f8c8 3000 	str.w	r3, [r8]
 8005d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d72:	bf00      	nop

08005d74 <MeasurementPrepare>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4604      	mov	r4, r0
 8005d78:	6900      	ldr	r0, [r0, #16]
 8005d7a:	3004      	adds	r0, #4
 8005d7c:	f7ff fb7e 	bl	800547c <Time_GetNow>
 8005d80:	6923      	ldr	r3, [r4, #16]
 8005d82:	6822      	ldr	r2, [r4, #0]
 8005d84:	3304      	adds	r3, #4
 8005d86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d8a:	f104 0308 	add.w	r3, r4, #8
 8005d8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005d92:	b13a      	cbz	r2, 8005da4 <MeasurementPrepare+0x30>
 8005d94:	f8d4 039c 	ldr.w	r0, [r4, #924]	; 0x39c
 8005d98:	f002 fbde 	bl	8008558 <Argus_Cfg_GetConfigurationPtr>
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	6840      	ldr	r0, [r0, #4]
 8005da0:	4283      	cmp	r3, r0
 8005da2:	d109      	bne.n	8005db8 <MeasurementPrepare+0x44>
 8005da4:	4623      	mov	r3, r4
 8005da6:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <MeasurementPrepare+0x6c>)
 8005da8:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005dac:	2100      	movs	r1, #0
 8005dae:	f009 fa27 	bl	800f200 <Argus_Dev_Update>
 8005db2:	1e05      	subs	r5, r0, #0
 8005db4:	db09      	blt.n	8005dca <MeasurementPrepare+0x56>
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	6020      	str	r0, [r4, #0]
 8005dba:	4621      	mov	r1, r4
 8005dbc:	f7fa ffa0 	bl	8000d00 <Timer_SetInterval>
 8005dc0:	1e05      	subs	r5, r0, #0
 8005dc2:	daef      	bge.n	8005da4 <MeasurementPrepare+0x30>
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	4807      	ldr	r0, [pc, #28]	; (8005de4 <MeasurementPrepare+0x70>)
 8005dc8:	e001      	b.n	8005dce <MeasurementPrepare+0x5a>
 8005dca:	4807      	ldr	r0, [pc, #28]	; (8005de8 <MeasurementPrepare+0x74>)
 8005dcc:	4629      	mov	r1, r5
 8005dce:	f7fb f83f 	bl	8000e50 <print>
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dda:	f7ff bf8b 	b.w	8005cf4 <MeasurementFinish>
 8005dde:	bf00      	nop
 8005de0:	08005e6d 	.word	0x08005e6d
 8005de4:	08018ee4 	.word	0x08018ee4
 8005de8:	08018f44 	.word	0x08018f44

08005dec <TimerCallback>:
 8005dec:	6803      	ldr	r3, [r0, #0]
 8005dee:	b313      	cbz	r3, 8005e36 <TimerCallback+0x4a>
 8005df0:	b510      	push	{r4, lr}
 8005df2:	2301      	movs	r3, #1
 8005df4:	4604      	mov	r4, r0
 8005df6:	7103      	strb	r3, [r0, #4]
 8005df8:	f7fa fc12 	bl	8000620 <IRQ_LOCK>
 8005dfc:	7923      	ldrb	r3, [r4, #4]
 8005dfe:	b343      	cbz	r3, 8005e52 <TimerCallback+0x66>
 8005e00:	21c4      	movs	r1, #196	; 0xc4
 8005e02:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005e06:	f008 fd99 	bl	800e93c <Argus_Dev_SetStatus>
 8005e0a:	b9d0      	cbnz	r0, 8005e42 <TimerCallback+0x56>
 8005e0c:	6923      	ldr	r3, [r4, #16]
 8005e0e:	bb23      	cbnz	r3, 8005e5a <TimerCallback+0x6e>
 8005e10:	6963      	ldr	r3, [r4, #20]
 8005e12:	b193      	cbz	r3, 8005e3a <TimerCallback+0x4e>
 8005e14:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8005e18:	b9fb      	cbnz	r3, 8005e5a <TimerCallback+0x6e>
 8005e1a:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
 8005e1e:	6123      	str	r3, [r4, #16]
 8005e20:	2102      	movs	r1, #2
 8005e22:	2200      	movs	r2, #0
 8005e24:	6019      	str	r1, [r3, #0]
 8005e26:	7122      	strb	r2, [r4, #4]
 8005e28:	f7fa fbd8 	bl	80005dc <IRQ_UNLOCK>
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e32:	f7ff bf9f 	b.w	8005d74 <MeasurementPrepare>
 8005e36:	f7fa bf3b 	b.w	8000cb0 <Timer_Stop>
 8005e3a:	f104 0314 	add.w	r3, r4, #20
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	e7ee      	b.n	8005e20 <TimerCallback+0x34>
 8005e42:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005e46:	f500 70b2 	add.w	r0, r0, #356	; 0x164
 8005e4a:	f006 faa1 	bl	800c390 <Argus_Dca_RecoverLaserFailure>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d0dc      	beq.n	8005e0c <TimerCallback+0x20>
 8005e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e56:	f7fa bbc1 	b.w	80005dc <IRQ_UNLOCK>
 8005e5a:	f7fa fbbf 	bl	80005dc <IRQ_UNLOCK>
 8005e5e:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005e62:	21c4      	movs	r1, #196	; 0xc4
 8005e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e68:	f008 bd7c 	b.w	800e964 <Argus_Dev_ClearStatus>

08005e6c <MeasurementStartIntegration>:
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	b510      	push	{r4, lr}
 8005e70:	460c      	mov	r4, r1
 8005e72:	da04      	bge.n	8005e7e <MeasurementStartIntegration+0x12>
 8005e74:	4621      	mov	r1, r4
 8005e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e7a:	f7ff bf3b 	b.w	8005cf4 <MeasurementFinish>
 8005e7e:	6909      	ldr	r1, [r1, #16]
 8005e80:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005e84:	310c      	adds	r1, #12
 8005e86:	f009 f8d9 	bl	800f03c <Argus_Dev_GetFrameConfig>
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	4904      	ldr	r1, [pc, #16]	; (8005ea0 <MeasurementStartIntegration+0x34>)
 8005e8e:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005e92:	f009 fc65 	bl	800f760 <Argus_Dev_StartIntegration>
 8005e96:	1e03      	subs	r3, r0, #0
 8005e98:	db00      	blt.n	8005e9c <MeasurementStartIntegration+0x30>
 8005e9a:	bd10      	pop	{r4, pc}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	e7e9      	b.n	8005e74 <MeasurementStartIntegration+0x8>
 8005ea0:	08005f65 	.word	0x08005f65

08005ea4 <MeasurementStartAuxChannels>:
 8005ea4:	b510      	push	{r4, lr}
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	b110      	cbz	r0, 8005eb0 <MeasurementStartAuxChannels+0xc>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	db08      	blt.n	8005ec0 <MeasurementStartAuxChannels+0x1c>
 8005eae:	bd10      	pop	{r4, pc}
 8005eb0:	460a      	mov	r2, r1
 8005eb2:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005eb6:	4905      	ldr	r1, [pc, #20]	; (8005ecc <MeasurementStartAuxChannels+0x28>)
 8005eb8:	f00a fb06 	bl	80104c8 <Argus_Dev_StartAuxMeasurement>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	daf6      	bge.n	8005eae <MeasurementStartAuxChannels+0xa>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ec6:	f7ff bf15 	b.w	8005cf4 <MeasurementFinish>
 8005eca:	bf00      	nop
 8005ecc:	08005ed1 	.word	0x08005ed1

08005ed0 <MeasurementReadAuxChannels>:
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	b118      	cbz	r0, 8005ee0 <MeasurementReadAuxChannels+0x10>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	db0d      	blt.n	8005ef8 <MeasurementReadAuxChannels+0x28>
 8005edc:	b002      	add	sp, #8
 8005ede:	bd10      	pop	{r4, pc}
 8005ee0:	6909      	ldr	r1, [r1, #16]
 8005ee2:	9400      	str	r4, [sp, #0]
 8005ee4:	f201 11ad 	addw	r1, r1, #429	; 0x1ad
 8005ee8:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <MeasurementReadAuxChannels+0x34>)
 8005eea:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005eee:	2205      	movs	r2, #5
 8005ef0:	f008 fd62 	bl	800e9b8 <Argus_Dev_ReadData>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	daf1      	bge.n	8005edc <MeasurementReadAuxChannels+0xc>
 8005ef8:	4621      	mov	r1, r4
 8005efa:	b002      	add	sp, #8
 8005efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f00:	f7ff bef8 	b.w	8005cf4 <MeasurementFinish>
 8005f04:	08005f09 	.word	0x08005f09

08005f08 <MeasurementDetuneClock>:
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	b110      	cbz	r0, 8005f14 <MeasurementDetuneClock+0xc>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	db08      	blt.n	8005f24 <MeasurementDetuneClock+0x1c>
 8005f12:	bd10      	pop	{r4, pc}
 8005f14:	460a      	mov	r2, r1
 8005f16:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005f1a:	4905      	ldr	r1, [pc, #20]	; (8005f30 <MeasurementDetuneClock+0x28>)
 8005f1c:	f009 fc7e 	bl	800f81c <Argus_Dev_DetuneClock>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	daf6      	bge.n	8005f12 <MeasurementDetuneClock+0xa>
 8005f24:	4621      	mov	r1, r4
 8005f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f2a:	f7ff bee3 	b.w	8005cf4 <MeasurementFinish>
 8005f2e:	bf00      	nop
 8005f30:	08005f35 	.word	0x08005f35

08005f34 <MeasurementUpdateConfig>:
 8005f34:	2800      	cmp	r0, #0
 8005f36:	b510      	push	{r4, lr}
 8005f38:	460c      	mov	r4, r1
 8005f3a:	da04      	bge.n	8005f46 <MeasurementUpdateConfig+0x12>
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f42:	f7ff bed7 	b.w	8005cf4 <MeasurementFinish>
 8005f46:	460b      	mov	r3, r1
 8005f48:	f8d1 0398 	ldr.w	r0, [r1, #920]	; 0x398
 8005f4c:	4a04      	ldr	r2, [pc, #16]	; (8005f60 <MeasurementUpdateConfig+0x2c>)
 8005f4e:	2101      	movs	r1, #1
 8005f50:	f009 f956 	bl	800f200 <Argus_Dev_Update>
 8005f54:	1e03      	subs	r3, r0, #0
 8005f56:	db00      	blt.n	8005f5a <MeasurementUpdateConfig+0x26>
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	e7ee      	b.n	8005f3c <MeasurementUpdateConfig+0x8>
 8005f5e:	bf00      	nop
 8005f60:	08005cf5 	.word	0x08005cf5

08005f64 <MeasurementReadData>:
 8005f64:	b570      	push	{r4, r5, r6, lr}
 8005f66:	460c      	mov	r4, r1
 8005f68:	b082      	sub	sp, #8
 8005f6a:	b1d0      	cbz	r0, 8005fa2 <MeasurementReadData+0x3e>
 8005f6c:	f110 0f72 	cmn.w	r0, #114	; 0x72
 8005f70:	d007      	beq.n	8005f82 <MeasurementReadData+0x1e>
 8005f72:	1d83      	adds	r3, r0, #6
 8005f74:	d005      	beq.n	8005f82 <MeasurementReadData+0x1e>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	db47      	blt.n	800600c <MeasurementReadData+0xa8>
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	b002      	add	sp, #8
 8005f80:	bd70      	pop	{r4, r5, r6, pc}
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	4a25      	ldr	r2, [pc, #148]	; (800601c <MeasurementReadData+0xb8>)
 8005f86:	6018      	str	r0, [r3, #0]
 8005f88:	2101      	movs	r1, #1
 8005f8a:	4623      	mov	r3, r4
 8005f8c:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8005f90:	f009 f936 	bl	800f200 <Argus_Dev_Update>
 8005f94:	1e03      	subs	r3, r0, #0
 8005f96:	daf1      	bge.n	8005f7c <MeasurementReadData+0x18>
 8005f98:	4621      	mov	r1, r4
 8005f9a:	f7ff feab 	bl	8005cf4 <MeasurementFinish>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	e7ea      	b.n	8005f78 <MeasurementReadData+0x14>
 8005fa2:	6909      	ldr	r1, [r1, #16]
 8005fa4:	4b1e      	ldr	r3, [pc, #120]	; (8006020 <MeasurementReadData+0xbc>)
 8005fa6:	e9d1 0503 	ldrd	r0, r5, [r1, #12]
 8005faa:	0842      	lsrs	r2, r0, #1
 8005fac:	f002 3255 	and.w	r2, r2, #1431655765	; 0x55555555
 8005fb0:	086e      	lsrs	r6, r5, #1
 8005fb2:	1a80      	subs	r0, r0, r2
 8005fb4:	f006 3655 	and.w	r6, r6, #1431655765	; 0x55555555
 8005fb8:	0882      	lsrs	r2, r0, #2
 8005fba:	1bad      	subs	r5, r5, r6
 8005fbc:	f002 3633 	and.w	r6, r2, #858993459	; 0x33333333
 8005fc0:	f000 3233 	and.w	r2, r0, #858993459	; 0x33333333
 8005fc4:	08a8      	lsrs	r0, r5, #2
 8005fc6:	4432      	add	r2, r6
 8005fc8:	f000 3633 	and.w	r6, r0, #858993459	; 0x33333333
 8005fcc:	f005 3033 	and.w	r0, r5, #858993459	; 0x33333333
 8005fd0:	eb02 1212 	add.w	r2, r2, r2, lsr #4
 8005fd4:	4430      	add	r0, r6
 8005fd6:	f002 320f 	and.w	r2, r2, #252645135	; 0xf0f0f0f
 8005fda:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8005fde:	eb02 2202 	add.w	r2, r2, r2, lsl #8
 8005fe2:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8005fe6:	eb02 4202 	add.w	r2, r2, r2, lsl #16
 8005fea:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8005fee:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8005ff2:	0e12      	lsrs	r2, r2, #24
 8005ff4:	9400      	str	r4, [sp, #0]
 8005ff6:	eb02 6210 	add.w	r2, r2, r0, lsr #24
 8005ffa:	3120      	adds	r1, #32
 8005ffc:	0092      	lsls	r2, r2, #2
 8005ffe:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 8006002:	f008 fcd9 	bl	800e9b8 <Argus_Dev_ReadData>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	dab7      	bge.n	8005f7c <MeasurementReadData+0x18>
 800600c:	4621      	mov	r1, r4
 800600e:	4618      	mov	r0, r3
 8006010:	b002      	add	sp, #8
 8006012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006016:	f7ff be6d 	b.w	8005cf4 <MeasurementFinish>
 800601a:	bf00      	nop
 800601c:	08005cf5 	.word	0x08005cf5
 8006020:	08005ea5 	.word	0x08005ea5

08006024 <Argus_Eval_None>:
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop

08006028 <ApplyPhaseEvaluation>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	b0cf      	sub	sp, #316	; 0x13c
 800602e:	468b      	mov	fp, r1
 8006030:	4604      	mov	r4, r0
 8006032:	9009      	str	r0, [sp, #36]	; 0x24
 8006034:	2284      	movs	r2, #132	; 0x84
 8006036:	2100      	movs	r1, #0
 8006038:	a80c      	add	r0, sp, #48	; 0x30
 800603a:	f011 fb71 	bl	8017720 <memset>
 800603e:	2284      	movs	r2, #132	; 0x84
 8006040:	2100      	movs	r1, #0
 8006042:	a82d      	add	r0, sp, #180	; 0xb4
 8006044:	f011 fb6c 	bl	8017720 <memset>
 8006048:	f8bb 201c 	ldrh.w	r2, [fp, #28]
 800604c:	f8d4 0358 	ldr.w	r0, [r4, #856]	; 0x358
 8006050:	920a      	str	r2, [sp, #40]	; 0x28
 8006052:	4611      	mov	r1, r2
 8006054:	4615      	mov	r5, r2
 8006056:	f00e ff4d 	bl	8014ef4 <Argus_Cal_GetSCSlope>
 800605a:	f8bb 1014 	ldrh.w	r1, [fp, #20]
 800605e:	9005      	str	r0, [sp, #20]
 8006060:	f8d4 0358 	ldr.w	r0, [r4, #856]	; 0x358
 8006064:	f00e ff56 	bl	8014f14 <Argus_Cal_GetPixelDecompFactor>
 8006068:	4629      	mov	r1, r5
 800606a:	9007      	str	r0, [sp, #28]
 800606c:	f8d4 0358 	ldr.w	r0, [r4, #856]	; 0x358
 8006070:	f00e ff62 	bl	8014f38 <Argus_Cal_GetXtalkTable>
 8006074:	f8bb 2016 	ldrh.w	r2, [fp, #22]
 8006078:	f894 3325 	ldrb.w	r3, [r4, #805]	; 0x325
 800607c:	f8bb 101c 	ldrh.w	r1, [fp, #28]
 8006080:	f8db 700c 	ldr.w	r7, [fp, #12]
 8006084:	9701      	str	r7, [sp, #4]
 8006086:	fb02 f303 	mul.w	r3, r2, r3
 800608a:	f3c1 2403 	ubfx	r4, r1, #8, #4
 800608e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8006092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006096:	fbb3 f3f2 	udiv	r3, r3, r2
 800609a:	3301      	adds	r3, #1
 800609c:	2100      	movs	r1, #0
 800609e:	ebc8 3202 	rsb	r2, r8, r2, lsl #12
 80060a2:	ea4f 0953 	mov.w	r9, r3, lsr #1
 80060a6:	f1c4 030c 	rsb	r3, r4, #12
 80060aa:	940b      	str	r4, [sp, #44]	; 0x2c
 80060ac:	3002      	adds	r0, #2
 80060ae:	9206      	str	r2, [sp, #24]
 80060b0:	9308      	str	r3, [sp, #32]
 80060b2:	f10b 0520 	add.w	r5, fp, #32
 80060b6:	e9cd 1103 	strd	r1, r1, [sp, #12]
 80060ba:	e011      	b.n	80060e0 <ApplyPhaseEvaluation+0xb8>
 80060bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80060c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80060ca:	445b      	add	r3, fp
 80060cc:	3101      	adds	r1, #1
 80060ce:	f04f 0201 	mov.w	r2, #1
 80060d2:	2920      	cmp	r1, #32
 80060d4:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
 80060d8:	f100 0004 	add.w	r0, r0, #4
 80060dc:	f000 808e 	beq.w	80061fc <ApplyPhaseEvaluation+0x1d4>
 80060e0:	9c01      	ldr	r4, [sp, #4]
 80060e2:	08ca      	lsrs	r2, r1, #3
 80060e4:	40cc      	lsrs	r4, r1
 80060e6:	f002 0602 	and.w	r6, r2, #2
 80060ea:	ea6f 0351 	mvn.w	r3, r1, lsr #1
 80060ee:	f001 0201 	and.w	r2, r1, #1
 80060f2:	07e4      	lsls	r4, r4, #31
 80060f4:	ea42 0206 	orr.w	r2, r2, r6
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	d5de      	bpl.n	80060bc <ApplyPhaseEvaluation+0x94>
 80060fe:	682c      	ldr	r4, [r5, #0]
 8006100:	f414 0f40 	tst.w	r4, #12582912	; 0xc00000
 8006104:	f3c4 0a15 	ubfx	sl, r4, #0, #22
 8006108:	f040 8112 	bne.w	8006330 <ApplyPhaseEvaluation+0x308>
 800610c:	45d0      	cmp	r8, sl
 800610e:	f200 810f 	bhi.w	8006330 <ApplyPhaseEvaluation+0x308>
 8006112:	9c06      	ldr	r4, [sp, #24]
 8006114:	4554      	cmp	r4, sl
 8006116:	bf34      	ite	cc
 8006118:	2602      	movcc	r6, #2
 800611a:	2600      	movcs	r6, #0
 800611c:	686c      	ldr	r4, [r5, #4]
 800611e:	f414 0f40 	tst.w	r4, #12582912	; 0xc00000
 8006122:	f3c4 0e15 	ubfx	lr, r4, #0, #22
 8006126:	f040 810c 	bne.w	8006342 <ApplyPhaseEvaluation+0x31a>
 800612a:	45f0      	cmp	r8, lr
 800612c:	f200 8109 	bhi.w	8006342 <ApplyPhaseEvaluation+0x31a>
 8006130:	9c06      	ldr	r4, [sp, #24]
 8006132:	4574      	cmp	r4, lr
 8006134:	bf38      	it	cc
 8006136:	2602      	movcc	r6, #2
 8006138:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800613c:	f3cc 0415 	ubfx	r4, ip, #0, #22
 8006140:	f41c 0f40 	tst.w	ip, #12582912	; 0xc00000
 8006144:	9402      	str	r4, [sp, #8]
 8006146:	f040 80f1 	bne.w	800632c <ApplyPhaseEvaluation+0x304>
 800614a:	45a0      	cmp	r8, r4
 800614c:	4627      	mov	r7, r4
 800614e:	f200 80ed 	bhi.w	800632c <ApplyPhaseEvaluation+0x304>
 8006152:	9c06      	ldr	r4, [sp, #24]
 8006154:	42bc      	cmp	r4, r7
 8006156:	bf38      	it	cc
 8006158:	2602      	movcc	r6, #2
 800615a:	9c02      	ldr	r4, [sp, #8]
 800615c:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8006160:	eba4 040a 	sub.w	r4, r4, sl
 8006164:	f41c 0f40 	tst.w	ip, #12582912	; 0xc00000
 8006168:	4627      	mov	r7, r4
 800616a:	f3cc 0a15 	ubfx	sl, ip, #0, #22
 800616e:	f040 80ea 	bne.w	8006346 <ApplyPhaseEvaluation+0x31e>
 8006172:	45d0      	cmp	r8, sl
 8006174:	f200 80e7 	bhi.w	8006346 <ApplyPhaseEvaluation+0x31e>
 8006178:	9c06      	ldr	r4, [sp, #24]
 800617a:	4554      	cmp	r4, sl
 800617c:	bf38      	it	cc
 800617e:	2602      	movcc	r6, #2
 8006180:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006184:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800618e:	445b      	add	r3, fp
 8006190:	ebaa 0e0e 	sub.w	lr, sl, lr
 8006194:	f883 6244 	strb.w	r6, [r3, #580]	; 0x244
 8006198:	f930 3c02 	ldrsh.w	r3, [r0, #-2]
 800619c:	9e08      	ldr	r6, [sp, #32]
 800619e:	f9b0 2000 	ldrsh.w	r2, [r0]
 80061a2:	40b3      	lsls	r3, r6
 80061a4:	fb07 3409 	mla	r4, r7, r9, r3
 80061a8:	40b2      	lsls	r2, r6
 80061aa:	ab2d      	add	r3, sp, #180	; 0xb4
 80061ac:	fb09 220e 	mla	r2, r9, lr, r2
 80061b0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80061b4:	ab0c      	add	r3, sp, #48	; 0x30
 80061b6:	3510      	adds	r5, #16
 80061b8:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
 80061bc:	9b07      	ldr	r3, [sp, #28]
 80061be:	b15b      	cbz	r3, 80061d8 <ApplyPhaseEvaluation+0x1b0>
 80061c0:	11a4      	asrs	r4, r4, #6
 80061c2:	1192      	asrs	r2, r2, #6
 80061c4:	fb03 f404 	mul.w	r4, r3, r4
 80061c8:	fb03 f202 	mul.w	r2, r3, r2
 80061cc:	ab0c      	add	r3, sp, #48	; 0x30
 80061ce:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
 80061d2:	ab2d      	add	r3, sp, #180	; 0xb4
 80061d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80061d8:	9b05      	ldr	r3, [sp, #20]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f040 80b5 	bne.w	800634a <ApplyPhaseEvaluation+0x322>
 80061e0:	9b03      	ldr	r3, [sp, #12]
 80061e2:	eb03 0364 	add.w	r3, r3, r4, asr #1
 80061e6:	9303      	str	r3, [sp, #12]
 80061e8:	9b04      	ldr	r3, [sp, #16]
 80061ea:	3101      	adds	r1, #1
 80061ec:	eb03 0362 	add.w	r3, r3, r2, asr #1
 80061f0:	2920      	cmp	r1, #32
 80061f2:	9304      	str	r3, [sp, #16]
 80061f4:	f100 0004 	add.w	r0, r0, #4
 80061f8:	f47f af72 	bne.w	80060e0 <ApplyPhaseEvaluation+0xb8>
 80061fc:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006200:	07db      	lsls	r3, r3, #31
 8006202:	f100 8156 	bmi.w	80064b2 <ApplyPhaseEvaluation+0x48a>
 8006206:	2301      	movs	r3, #1
 8006208:	f88b 3238 	strb.w	r3, [fp, #568]	; 0x238
 800620c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800620e:	f8d2 3354 	ldr.w	r3, [r2, #852]	; 0x354
 8006212:	f8d2 0358 	ldr.w	r0, [r2, #856]	; 0x358
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800621c:	3b01      	subs	r3, #1
 800621e:	fb02 0303 	mla	r3, r2, r3, r0
 8006222:	f893 2378 	ldrb.w	r2, [r3, #888]	; 0x378
 8006226:	2a00      	cmp	r2, #0
 8006228:	f040 80c7 	bne.w	80063ba <ApplyPhaseEvaluation+0x392>
 800622c:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8006230:	9201      	str	r2, [sp, #4]
 8006232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006234:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006236:	f8b3 832e 	ldrh.w	r8, [r3, #814]	; 0x32e
 800623a:	f8d3 9338 	ldr.w	r9, [r3, #824]	; 0x338
 800623e:	f00e fe41 	bl	8014ec4 <Argus_Cal_GetPhaseOffset>
 8006242:	2600      	movs	r6, #0
 8006244:	ea4f 3848 	mov.w	r8, r8, lsl #13
 8006248:	4637      	mov	r7, r6
 800624a:	4682      	mov	sl, r0
 800624c:	f8cd b008 	str.w	fp, [sp, #8]
 8006250:	9b02      	ldr	r3, [sp, #8]
 8006252:	f087 050e 	eor.w	r5, r7, #14
 8006256:	199c      	adds	r4, r3, r6
 8006258:	f04f 0b00 	mov.w	fp, #0
 800625c:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8006260:	f00b 0301 	and.w	r3, fp, #1
 8006264:	f894 0244 	ldrb.w	r0, [r4, #580]	; 0x244
 8006268:	f002 0210 	and.w	r2, r2, #16
 800626c:	432b      	orrs	r3, r5
 800626e:	4313      	orrs	r3, r2
 8006270:	2801      	cmp	r0, #1
 8006272:	aa4e      	add	r2, sp, #312	; 0x138
 8006274:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006278:	d020      	beq.n	80062bc <ApplyPhaseEvaluation+0x294>
 800627a:	a90c      	add	r1, sp, #48	; 0x30
 800627c:	f852 2c84 	ldr.w	r2, [r2, #-132]
 8006280:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006284:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8006288:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 800628c:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
 8006290:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8006294:	4463      	add	r3, ip
 8006296:	ea4f 3c53 	mov.w	ip, r3, lsr #13
 800629a:	4598      	cmp	r8, r3
 800629c:	f8a4 c246 	strh.w	ip, [r4, #582]	; 0x246
 80062a0:	f040 0020 	orr.w	r0, r0, #32
 80062a4:	d97c      	bls.n	80063a0 <ApplyPhaseEvaluation+0x378>
 80062a6:	f884 0244 	strb.w	r0, [r4, #580]	; 0x244
 80062aa:	f504 700f 	add.w	r0, r4, #572	; 0x23c
 80062ae:	47c8      	blx	r9
 80062b0:	f8b4 3240 	ldrh.w	r3, [r4, #576]	; 0x240
 80062b4:	eba3 030a 	sub.w	r3, r3, sl
 80062b8:	f8a4 3240 	strh.w	r3, [r4, #576]	; 0x240
 80062bc:	f10b 0b01 	add.w	fp, fp, #1
 80062c0:	f1bb 0f04 	cmp.w	fp, #4
 80062c4:	f104 040c 	add.w	r4, r4, #12
 80062c8:	d1c8      	bne.n	800625c <ApplyPhaseEvaluation+0x234>
 80062ca:	3630      	adds	r6, #48	; 0x30
 80062cc:	f5b6 7fc0 	cmp.w	r6, #384	; 0x180
 80062d0:	f107 0702 	add.w	r7, r7, #2
 80062d4:	d1bc      	bne.n	8006250 <ApplyPhaseEvaluation+0x228>
 80062d6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80062da:	f89b 0238 	ldrb.w	r0, [fp, #568]	; 0x238
 80062de:	2801      	cmp	r0, #1
 80062e0:	d021      	beq.n	8006326 <ApplyPhaseEvaluation+0x2fe>
 80062e2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80062e4:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 80062e6:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 80062ea:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80062ee:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 80062f2:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 80062f6:	4423      	add	r3, r4
 80062f8:	0b5c      	lsrs	r4, r3, #13
 80062fa:	4598      	cmp	r8, r3
 80062fc:	f8ab 423a 	strh.w	r4, [fp, #570]	; 0x23a
 8006300:	d856      	bhi.n	80063b0 <ApplyPhaseEvaluation+0x388>
 8006302:	9b01      	ldr	r3, [sp, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 818c 	bne.w	8006622 <ApplyPhaseEvaluation+0x5fa>
 800630a:	f50b 700c 	add.w	r0, fp, #560	; 0x230
 800630e:	47c8      	blx	r9
 8006310:	e9dd 3109 	ldrd	r3, r1, [sp, #36]	; 0x24
 8006314:	f8d3 0358 	ldr.w	r0, [r3, #856]	; 0x358
 8006318:	f00e fde0 	bl	8014edc <Argus_Cal_GetPhaseOffsetRefPx>
 800631c:	f8bb 3234 	ldrh.w	r3, [fp, #564]	; 0x234
 8006320:	1a18      	subs	r0, r3, r0
 8006322:	f8ab 0234 	strh.w	r0, [fp, #564]	; 0x234
 8006326:	b04f      	add	sp, #316	; 0x13c
 8006328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632c:	2602      	movs	r6, #2
 800632e:	e715      	b.n	800615c <ApplyPhaseEvaluation+0x134>
 8006330:	686c      	ldr	r4, [r5, #4]
 8006332:	f414 0f40 	tst.w	r4, #12582912	; 0xc00000
 8006336:	f04f 0602 	mov.w	r6, #2
 800633a:	f3c4 0e15 	ubfx	lr, r4, #0, #22
 800633e:	f43f aef4 	beq.w	800612a <ApplyPhaseEvaluation+0x102>
 8006342:	2602      	movs	r6, #2
 8006344:	e6f8      	b.n	8006138 <ApplyPhaseEvaluation+0x110>
 8006346:	2602      	movs	r6, #2
 8006348:	e71a      	b.n	8006180 <ApplyPhaseEvaluation+0x158>
 800634a:	2c00      	cmp	r4, #0
 800634c:	bfb8      	it	lt
 800634e:	4264      	neglt	r4, r4
 8006350:	b2a6      	uxth	r6, r4
 8006352:	ea4f 4314 	mov.w	r3, r4, lsr #16
 8006356:	9c05      	ldr	r4, [sp, #20]
 8006358:	fb04 f606 	mul.w	r6, r4, r6
 800635c:	fb04 f303 	mul.w	r3, r4, r3
 8006360:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 8006364:	b2b6      	uxth	r6, r6
 8006366:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 800636a:	bfb4      	ite	lt
 800636c:	f04f 3cff 	movlt.w	ip, #4294967295
 8006370:	f04f 0c01 	movge.w	ip, #1
 8006374:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8006378:	bf38      	it	cc
 800637a:	f506 4680 	addcc.w	r6, r6, #16384	; 0x4000
 800637e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8006382:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8006386:	bf34      	ite	cc
 8006388:	0bf4      	lsrcc	r4, r6, #15
 800638a:	f44f 3400 	movcs.w	r4, #131072	; 0x20000
 800638e:	441c      	add	r4, r3
 8006390:	f1bc 0f01 	cmp.w	ip, #1
 8006394:	ab0c      	add	r3, sp, #48	; 0x30
 8006396:	bf18      	it	ne
 8006398:	4264      	negne	r4, r4
 800639a:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
 800639e:	e71f      	b.n	80061e0 <ApplyPhaseEvaluation+0x1b8>
 80063a0:	9801      	ldr	r0, [sp, #4]
 80063a2:	4283      	cmp	r3, r0
 80063a4:	d281      	bcs.n	80062aa <ApplyPhaseEvaluation+0x282>
 80063a6:	9b05      	ldr	r3, [sp, #20]
 80063a8:	4419      	add	r1, r3
 80063aa:	9b06      	ldr	r3, [sp, #24]
 80063ac:	441a      	add	r2, r3
 80063ae:	e77c      	b.n	80062aa <ApplyPhaseEvaluation+0x282>
 80063b0:	f040 0020 	orr.w	r0, r0, #32
 80063b4:	f88b 0238 	strb.w	r0, [fp, #568]	; 0x238
 80063b8:	e7a7      	b.n	800630a <ApplyPhaseEvaluation+0x2e2>
 80063ba:	9903      	ldr	r1, [sp, #12]
 80063bc:	f8b3 c37a 	ldrh.w	ip, [r3, #890]	; 0x37a
 80063c0:	f893 8379 	ldrb.w	r8, [r3, #889]	; 0x379
 80063c4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80063c6:	2900      	cmp	r1, #0
 80063c8:	e9d0 e30c 	ldrd	lr, r3, [r0, #48]	; 0x30
 80063cc:	ea4f 3c4c 	mov.w	ip, ip, lsl #13
 80063d0:	f2c0 80d8 	blt.w	8006584 <ApplyPhaseEvaluation+0x55c>
 80063d4:	f04f 34ff 	mov.w	r4, #4294967295
 80063d8:	2701      	movs	r7, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bfb8      	it	lt
 80063de:	425b      	neglt	r3, r3
 80063e0:	ea4f 4611 	mov.w	r6, r1, lsr #16
 80063e4:	b29d      	uxth	r5, r3
 80063e6:	b289      	uxth	r1, r1
 80063e8:	bfb8      	it	lt
 80063ea:	4627      	movlt	r7, r4
 80063ec:	0c1b      	lsrs	r3, r3, #16
 80063ee:	fb05 f401 	mul.w	r4, r5, r1
 80063f2:	fb05 f506 	mul.w	r5, r5, r6
 80063f6:	eb05 4514 	add.w	r5, r5, r4, lsr #16
 80063fa:	fb03 f101 	mul.w	r1, r3, r1
 80063fe:	fa11 f185 	uxtah	r1, r1, r5
 8006402:	fb03 f306 	mul.w	r3, r3, r6
 8006406:	eb03 4515 	add.w	r5, r3, r5, lsr #16
 800640a:	040b      	lsls	r3, r1, #16
 800640c:	fa13 f384 	uxtah	r3, r3, r4
 8006410:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8006414:	bf38      	it	cc
 8006416:	f503 4380 	addcc.w	r3, r3, #16384	; 0x4000
 800641a:	eb05 4511 	add.w	r5, r5, r1, lsr #16
 800641e:	bf34      	ite	cc
 8006420:	0bdb      	lsrcc	r3, r3, #15
 8006422:	f44f 3300 	movcs.w	r3, #131072	; 0x20000
 8006426:	046d      	lsls	r5, r5, #17
 8006428:	442b      	add	r3, r5
 800642a:	2f01      	cmp	r7, #1
 800642c:	bf18      	it	ne
 800642e:	425b      	negne	r3, r3
 8006430:	4259      	negs	r1, r3
 8006432:	9105      	str	r1, [sp, #20]
 8006434:	9904      	ldr	r1, [sp, #16]
 8006436:	2900      	cmp	r1, #0
 8006438:	f2c0 80ab 	blt.w	8006592 <ApplyPhaseEvaluation+0x56a>
 800643c:	f04f 34ff 	mov.w	r4, #4294967295
 8006440:	2701      	movs	r7, #1
 8006442:	2a00      	cmp	r2, #0
 8006444:	bfbc      	itt	lt
 8006446:	4252      	neglt	r2, r2
 8006448:	4627      	movlt	r7, r4
 800644a:	0c0e      	lsrs	r6, r1, #16
 800644c:	b294      	uxth	r4, r2
 800644e:	b289      	uxth	r1, r1
 8006450:	fb04 f501 	mul.w	r5, r4, r1
 8006454:	0c12      	lsrs	r2, r2, #16
 8006456:	fb04 f406 	mul.w	r4, r4, r6
 800645a:	eb04 4415 	add.w	r4, r4, r5, lsr #16
 800645e:	fb02 f101 	mul.w	r1, r2, r1
 8006462:	fa11 f184 	uxtah	r1, r1, r4
 8006466:	fb02 f206 	mul.w	r2, r2, r6
 800646a:	eb02 4414 	add.w	r4, r2, r4, lsr #16
 800646e:	040a      	lsls	r2, r1, #16
 8006470:	fa12 f285 	uxtah	r2, r2, r5
 8006474:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8006478:	bf38      	it	cc
 800647a:	f502 4280 	addcc.w	r2, r2, #16384	; 0x4000
 800647e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006482:	bf34      	ite	cc
 8006484:	0bd2      	lsrcc	r2, r2, #15
 8006486:	f44f 3200 	movcs.w	r2, #131072	; 0x20000
 800648a:	0464      	lsls	r4, r4, #17
 800648c:	4422      	add	r2, r4
 800648e:	2f01      	cmp	r7, #1
 8006490:	bf18      	it	ne
 8006492:	4252      	negne	r2, r2
 8006494:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8006498:	2b00      	cmp	r3, #0
 800649a:	bfb8      	it	lt
 800649c:	425b      	neglt	r3, r3
 800649e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 80064a2:	440b      	add	r3, r1
 80064a4:	4252      	negs	r2, r2
 80064a6:	459c      	cmp	ip, r3
 80064a8:	9206      	str	r2, [sp, #24]
 80064aa:	d377      	bcc.n	800659c <ApplyPhaseEvaluation+0x574>
 80064ac:	2300      	movs	r3, #0
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	e6bf      	b.n	8006232 <ApplyPhaseEvaluation+0x20a>
 80064b2:	682b      	ldr	r3, [r5, #0]
 80064b4:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
 80064b8:	f3c3 0115 	ubfx	r1, r3, #0, #22
 80064bc:	d05a      	beq.n	8006574 <ApplyPhaseEvaluation+0x54c>
 80064be:	2306      	movs	r3, #6
 80064c0:	686a      	ldr	r2, [r5, #4]
 80064c2:	f412 0f40 	tst.w	r2, #12582912	; 0xc00000
 80064c6:	f3c2 0615 	ubfx	r6, r2, #0, #22
 80064ca:	d04c      	beq.n	8006566 <ApplyPhaseEvaluation+0x53e>
 80064cc:	2306      	movs	r3, #6
 80064ce:	68aa      	ldr	r2, [r5, #8]
 80064d0:	f412 0f40 	tst.w	r2, #12582912	; 0xc00000
 80064d4:	f3c2 0015 	ubfx	r0, r2, #0, #22
 80064d8:	d03e      	beq.n	8006558 <ApplyPhaseEvaluation+0x530>
 80064da:	2306      	movs	r3, #6
 80064dc:	68ea      	ldr	r2, [r5, #12]
 80064de:	f412 0f40 	tst.w	r2, #12582912	; 0xc00000
 80064e2:	eba0 0501 	sub.w	r5, r0, r1
 80064e6:	f3c2 0415 	ubfx	r4, r2, #0, #22
 80064ea:	d150      	bne.n	800658e <ApplyPhaseEvaluation+0x566>
 80064ec:	45a0      	cmp	r8, r4
 80064ee:	d84e      	bhi.n	800658e <ApplyPhaseEvaluation+0x566>
 80064f0:	9a06      	ldr	r2, [sp, #24]
 80064f2:	42a2      	cmp	r2, r4
 80064f4:	bf38      	it	cc
 80064f6:	2306      	movcc	r3, #6
 80064f8:	f88b 3238 	strb.w	r3, [fp, #568]	; 0x238
 80064fc:	e9dd 3109 	ldrd	r3, r1, [sp, #36]	; 0x24
 8006500:	f8d3 0358 	ldr.w	r0, [r3, #856]	; 0x358
 8006504:	f00e fd20 	bl	8014f48 <Argus_Cal_GetRefPxXtalk>
 8006508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800650a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800650e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8006512:	f1c3 020c 	rsb	r2, r3, #12
 8006516:	4091      	lsls	r1, r2
 8006518:	fa00 f202 	lsl.w	r2, r0, r2
 800651c:	fb05 2509 	mla	r5, r5, r9, r2
 8006520:	1ba3      	subs	r3, r4, r6
 8006522:	9a07      	ldr	r2, [sp, #28]
 8006524:	952c      	str	r5, [sp, #176]	; 0xb0
 8006526:	fb09 1303 	mla	r3, r9, r3, r1
 800652a:	934d      	str	r3, [sp, #308]	; 0x134
 800652c:	b13a      	cbz	r2, 800653e <ApplyPhaseEvaluation+0x516>
 800652e:	11ad      	asrs	r5, r5, #6
 8006530:	119b      	asrs	r3, r3, #6
 8006532:	fb02 f505 	mul.w	r5, r2, r5
 8006536:	fb02 f303 	mul.w	r3, r2, r3
 800653a:	952c      	str	r5, [sp, #176]	; 0xb0
 800653c:	934d      	str	r3, [sp, #308]	; 0x134
 800653e:	9a05      	ldr	r2, [sp, #20]
 8006540:	2a00      	cmp	r2, #0
 8006542:	f040 80db 	bne.w	80066fc <ApplyPhaseEvaluation+0x6d4>
 8006546:	9a03      	ldr	r2, [sp, #12]
 8006548:	eb02 0265 	add.w	r2, r2, r5, asr #1
 800654c:	9203      	str	r2, [sp, #12]
 800654e:	9a04      	ldr	r2, [sp, #16]
 8006550:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8006554:	9304      	str	r3, [sp, #16]
 8006556:	e659      	b.n	800620c <ApplyPhaseEvaluation+0x1e4>
 8006558:	4580      	cmp	r8, r0
 800655a:	d8be      	bhi.n	80064da <ApplyPhaseEvaluation+0x4b2>
 800655c:	9a06      	ldr	r2, [sp, #24]
 800655e:	4282      	cmp	r2, r0
 8006560:	bf38      	it	cc
 8006562:	2306      	movcc	r3, #6
 8006564:	e7ba      	b.n	80064dc <ApplyPhaseEvaluation+0x4b4>
 8006566:	45b0      	cmp	r8, r6
 8006568:	d8b0      	bhi.n	80064cc <ApplyPhaseEvaluation+0x4a4>
 800656a:	9a06      	ldr	r2, [sp, #24]
 800656c:	42b2      	cmp	r2, r6
 800656e:	bf38      	it	cc
 8006570:	2306      	movcc	r3, #6
 8006572:	e7ac      	b.n	80064ce <ApplyPhaseEvaluation+0x4a6>
 8006574:	4588      	cmp	r8, r1
 8006576:	d8a2      	bhi.n	80064be <ApplyPhaseEvaluation+0x496>
 8006578:	9b06      	ldr	r3, [sp, #24]
 800657a:	428b      	cmp	r3, r1
 800657c:	bf2c      	ite	cs
 800657e:	2304      	movcs	r3, #4
 8006580:	2306      	movcc	r3, #6
 8006582:	e79d      	b.n	80064c0 <ApplyPhaseEvaluation+0x498>
 8006584:	4249      	negs	r1, r1
 8006586:	2401      	movs	r4, #1
 8006588:	f04f 37ff 	mov.w	r7, #4294967295
 800658c:	e725      	b.n	80063da <ApplyPhaseEvaluation+0x3b2>
 800658e:	2306      	movs	r3, #6
 8006590:	e7b2      	b.n	80064f8 <ApplyPhaseEvaluation+0x4d0>
 8006592:	4249      	negs	r1, r1
 8006594:	2401      	movs	r4, #1
 8006596:	f04f 37ff 	mov.w	r7, #4294967295
 800659a:	e752      	b.n	8006442 <ApplyPhaseEvaluation+0x41a>
 800659c:	9b03      	ldr	r3, [sp, #12]
 800659e:	9a04      	ldr	r2, [sp, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bfb8      	it	lt
 80065a4:	425b      	neglt	r3, r3
 80065a6:	2a00      	cmp	r2, #0
 80065a8:	bfb8      	it	lt
 80065aa:	4252      	neglt	r2, r2
 80065ac:	189b      	adds	r3, r3, r2
 80065ae:	f100 80c9 	bmi.w	8006744 <ApplyPhaseEvaluation+0x71c>
 80065b2:	f04f 32ff 	mov.w	r2, #4294967295
 80065b6:	2401      	movs	r4, #1
 80065b8:	f1be 0f00 	cmp.w	lr, #0
 80065bc:	bfb8      	it	lt
 80065be:	f1ce 0e00 	rsblt	lr, lr, #0
 80065c2:	ea4f 4113 	mov.w	r1, r3, lsr #16
 80065c6:	bfb8      	it	lt
 80065c8:	4614      	movlt	r4, r2
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	fa1f f28e 	uxth.w	r2, lr
 80065d0:	fb02 f503 	mul.w	r5, r2, r3
 80065d4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80065d8:	fb02 f201 	mul.w	r2, r2, r1
 80065dc:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 80065e0:	fb0e f303 	mul.w	r3, lr, r3
 80065e4:	fa13 f382 	uxtah	r3, r3, r2
 80065e8:	fb0e fe01 	mul.w	lr, lr, r1
 80065ec:	eb0e 4112 	add.w	r1, lr, r2, lsr #16
 80065f0:	041a      	lsls	r2, r3, #16
 80065f2:	fa12 f285 	uxtah	r2, r2, r5
 80065f6:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 80065fa:	eb01 4313 	add.w	r3, r1, r3, lsr #16
 80065fe:	bf38      	it	cc
 8006600:	f502 4280 	addcc.w	r2, r2, #16384	; 0x4000
 8006604:	ea4f 4143 	mov.w	r1, r3, lsl #17
 8006608:	bf34      	ite	cc
 800660a:	0bd3      	lsrcc	r3, r2, #15
 800660c:	f44f 3300 	movcs.w	r3, #131072	; 0x20000
 8006610:	440b      	add	r3, r1
 8006612:	2c01      	cmp	r4, #1
 8006614:	bf18      	it	ne
 8006616:	425b      	negne	r3, r3
 8006618:	121b      	asrs	r3, r3, #8
 800661a:	fb08 f303 	mul.w	r3, r8, r3
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	e607      	b.n	8006232 <ApplyPhaseEvaluation+0x20a>
 8006622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006624:	f8d3 6358 	ldr.w	r6, [r3, #856]	; 0x358
 8006628:	9b03      	ldr	r3, [sp, #12]
 800662a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800662c:	2b00      	cmp	r3, #0
 800662e:	f2c0 8093 	blt.w	8006758 <ApplyPhaseEvaluation+0x730>
 8006632:	f04f 34ff 	mov.w	r4, #4294967295
 8006636:	f04f 0c01 	mov.w	ip, #1
 800663a:	2800      	cmp	r0, #0
 800663c:	bfb8      	it	lt
 800663e:	4240      	neglt	r0, r0
 8006640:	ea4f 4713 	mov.w	r7, r3, lsr #16
 8006644:	b285      	uxth	r5, r0
 8006646:	b29b      	uxth	r3, r3
 8006648:	bfb8      	it	lt
 800664a:	46a4      	movlt	ip, r4
 800664c:	0c00      	lsrs	r0, r0, #16
 800664e:	fb05 f403 	mul.w	r4, r5, r3
 8006652:	fb05 f507 	mul.w	r5, r5, r7
 8006656:	eb05 4514 	add.w	r5, r5, r4, lsr #16
 800665a:	fb00 f303 	mul.w	r3, r0, r3
 800665e:	fa13 f385 	uxtah	r3, r3, r5
 8006662:	fb00 f007 	mul.w	r0, r0, r7
 8006666:	eb00 4515 	add.w	r5, r0, r5, lsr #16
 800666a:	0418      	lsls	r0, r3, #16
 800666c:	fa10 f084 	uxtah	r0, r0, r4
 8006670:	eb05 4313 	add.w	r3, r5, r3, lsr #16
 8006674:	f510 4f80 	cmn.w	r0, #16384	; 0x4000
 8006678:	ea4f 4443 	mov.w	r4, r3, lsl #17
 800667c:	bf3a      	itte	cc
 800667e:	f500 4380 	addcc.w	r3, r0, #16384	; 0x4000
 8006682:	0bdb      	lsrcc	r3, r3, #15
 8006684:	f44f 3300 	movcs.w	r3, #131072	; 0x20000
 8006688:	441c      	add	r4, r3
 800668a:	9b04      	ldr	r3, [sp, #16]
 800668c:	6c30      	ldr	r0, [r6, #64]	; 0x40
 800668e:	f1bc 0f01 	cmp.w	ip, #1
 8006692:	bf18      	it	ne
 8006694:	4264      	negne	r4, r4
 8006696:	2b00      	cmp	r3, #0
 8006698:	db59      	blt.n	800674e <ApplyPhaseEvaluation+0x726>
 800669a:	f04f 36ff 	mov.w	r6, #4294967295
 800669e:	2501      	movs	r5, #1
 80066a0:	2800      	cmp	r0, #0
 80066a2:	bfb8      	it	lt
 80066a4:	4240      	neglt	r0, r0
 80066a6:	ea4f 4713 	mov.w	r7, r3, lsr #16
 80066aa:	fa1f fc80 	uxth.w	ip, r0
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	bfb8      	it	lt
 80066b2:	4635      	movlt	r5, r6
 80066b4:	0c00      	lsrs	r0, r0, #16
 80066b6:	fb0c f603 	mul.w	r6, ip, r3
 80066ba:	fb0c fc07 	mul.w	ip, ip, r7
 80066be:	eb0c 4c16 	add.w	ip, ip, r6, lsr #16
 80066c2:	fb00 f303 	mul.w	r3, r0, r3
 80066c6:	fa13 f38c 	uxtah	r3, r3, ip
 80066ca:	fb00 f007 	mul.w	r0, r0, r7
 80066ce:	041f      	lsls	r7, r3, #16
 80066d0:	fa17 f686 	uxtah	r6, r7, r6
 80066d4:	eb00 401c 	add.w	r0, r0, ip, lsr #16
 80066d8:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 80066dc:	eb00 4313 	add.w	r3, r0, r3, lsr #16
 80066e0:	bf3a      	itte	cc
 80066e2:	f506 4680 	addcc.w	r6, r6, #16384	; 0x4000
 80066e6:	0bf0      	lsrcc	r0, r6, #15
 80066e8:	f44f 3000 	movcs.w	r0, #131072	; 0x20000
 80066ec:	045b      	lsls	r3, r3, #17
 80066ee:	4403      	add	r3, r0
 80066f0:	2d01      	cmp	r5, #1
 80066f2:	bf18      	it	ne
 80066f4:	425b      	negne	r3, r3
 80066f6:	1b09      	subs	r1, r1, r4
 80066f8:	1ad2      	subs	r2, r2, r3
 80066fa:	e606      	b.n	800630a <ApplyPhaseEvaluation+0x2e2>
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	bfb8      	it	lt
 8006700:	426d      	neglt	r5, r5
 8006702:	b2a8      	uxth	r0, r5
 8006704:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8006708:	fb02 f000 	mul.w	r0, r2, r0
 800670c:	fb02 f505 	mul.w	r5, r2, r5
 8006710:	eb05 4210 	add.w	r2, r5, r0, lsr #16
 8006714:	b280      	uxth	r0, r0
 8006716:	eb00 4002 	add.w	r0, r0, r2, lsl #16
 800671a:	bfb4      	ite	lt
 800671c:	f04f 31ff 	movlt.w	r1, #4294967295
 8006720:	2101      	movge	r1, #1
 8006722:	f510 4f80 	cmn.w	r0, #16384	; 0x4000
 8006726:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800672a:	bf3a      	itte	cc
 800672c:	f500 4280 	addcc.w	r2, r0, #16384	; 0x4000
 8006730:	0bd2      	lsrcc	r2, r2, #15
 8006732:	f44f 3200 	movcs.w	r2, #131072	; 0x20000
 8006736:	046d      	lsls	r5, r5, #17
 8006738:	4415      	add	r5, r2
 800673a:	2901      	cmp	r1, #1
 800673c:	bf18      	it	ne
 800673e:	426d      	negne	r5, r5
 8006740:	952c      	str	r5, [sp, #176]	; 0xb0
 8006742:	e700      	b.n	8006546 <ApplyPhaseEvaluation+0x51e>
 8006744:	425b      	negs	r3, r3
 8006746:	2201      	movs	r2, #1
 8006748:	f04f 34ff 	mov.w	r4, #4294967295
 800674c:	e734      	b.n	80065b8 <ApplyPhaseEvaluation+0x590>
 800674e:	425b      	negs	r3, r3
 8006750:	2601      	movs	r6, #1
 8006752:	f04f 35ff 	mov.w	r5, #4294967295
 8006756:	e7a3      	b.n	80066a0 <ApplyPhaseEvaluation+0x678>
 8006758:	425b      	negs	r3, r3
 800675a:	2401      	movs	r4, #1
 800675c:	f04f 3cff 	mov.w	ip, #4294967295
 8006760:	e76b      	b.n	800663a <ApplyPhaseEvaluation+0x612>
 8006762:	bf00      	nop

08006764 <Argus_Eval_Init>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	4604      	mov	r4, r0
 8006768:	460d      	mov	r5, r1
 800676a:	461e      	mov	r6, r3
 800676c:	4617      	mov	r7, r2
 800676e:	2100      	movs	r1, #0
 8006770:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8006774:	f010 ffd4 	bl	8017720 <memset>
 8006778:	f8c4 5350 	str.w	r5, [r4, #848]	; 0x350
 800677c:	e9c4 76d5 	strd	r7, r6, [r4, #852]	; 0x354
 8006780:	f504 704f 	add.w	r0, r4, #828	; 0x33c
 8006784:	f001 f932 	bl	80079ec <Argus_Pba_Init>
 8006788:	1e05      	subs	r5, r0, #0
 800678a:	db11      	blt.n	80067b0 <Argus_Eval_Init+0x4c>
 800678c:	4620      	mov	r0, r4
 800678e:	f504 71c6 	add.w	r1, r4, #396	; 0x18c
 8006792:	7a02      	ldrb	r2, [r0, #8]
 8006794:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
 8006798:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800679c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80067a0:	7202      	strb	r2, [r0, #8]
 80067a2:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
 80067a6:	300c      	adds	r0, #12
 80067a8:	4288      	cmp	r0, r1
 80067aa:	d1f2      	bne.n	8006792 <Argus_Eval_Init+0x2e>
 80067ac:	4628      	mov	r0, r5
 80067ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b0:	4629      	mov	r1, r5
 80067b2:	4802      	ldr	r0, [pc, #8]	; (80067bc <Argus_Eval_Init+0x58>)
 80067b4:	f7fa fb4c 	bl	8000e50 <print>
 80067b8:	4628      	mov	r0, r5
 80067ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067bc:	08018fa0 	.word	0x08018fa0

080067c0 <Argus_Eval_GetRangeFactors>:
 80067c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	4604      	mov	r4, r0
 80067c6:	f8d0 0350 	ldr.w	r0, [r0, #848]	; 0x350
 80067ca:	4690      	mov	r8, r2
 80067cc:	460e      	mov	r6, r1
 80067ce:	f008 fcfd 	bl	800f1cc <Argus_Dev_GetCfg>
 80067d2:	4607      	mov	r7, r0
 80067d4:	f8d4 0358 	ldr.w	r0, [r4, #856]	; 0x358
 80067d8:	f00a f8ba 	bl	8010950 <Argus_Cal_GetCalibrationPtr>
 80067dc:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80067e0:	f990 2051 	ldrsb.w	r2, [r0, #81]	; 0x51
 80067e4:	683d      	ldr	r5, [r7, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 80d5 	beq.w	8006996 <Argus_Eval_GetRangeFactors+0x1d6>
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	332e      	adds	r3, #46	; 0x2e
 80067f2:	2a00      	cmp	r2, #0
 80067f4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80067f8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80067fc:	eb03 0c05 	add.w	ip, r3, r5
 8006800:	eba5 0503 	sub.w	r5, r5, r3
 8006804:	f2c0 80cb 	blt.w	800699e <Argus_Eval_GetRangeFactors+0x1de>
 8006808:	2d00      	cmp	r5, #0
 800680a:	fa1f fa82 	uxth.w	sl, r2
 800680e:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006812:	f2c0 80bc 	blt.w	800698e <Argus_Eval_GetRangeFactors+0x1ce>
 8006816:	462c      	mov	r4, r5
 8006818:	2301      	movs	r3, #1
 800681a:	0c20      	lsrs	r0, r4, #16
 800681c:	b2a4      	uxth	r4, r4
 800681e:	fb0a f104 	mul.w	r1, sl, r4
 8006822:	fb0a fe00 	mul.w	lr, sl, r0
 8006826:	eb0e 4e11 	add.w	lr, lr, r1, lsr #16
 800682a:	fb0b f404 	mul.w	r4, fp, r4
 800682e:	fa14 f48e 	uxtah	r4, r4, lr
 8006832:	fb0b f000 	mul.w	r0, fp, r0
 8006836:	eb00 401e 	add.w	r0, r0, lr, lsr #16
 800683a:	ea4f 4e04 	mov.w	lr, r4, lsl #16
 800683e:	fa1e f181 	uxtah	r1, lr, r1
 8006842:	f511 7f00 	cmn.w	r1, #512	; 0x200
 8006846:	bf38      	it	cc
 8006848:	f501 7100 	addcc.w	r1, r1, #512	; 0x200
 800684c:	eb00 4014 	add.w	r0, r0, r4, lsr #16
 8006850:	bf34      	ite	cc
 8006852:	0a89      	lsrcc	r1, r1, #10
 8006854:	f44f 0180 	movcs.w	r1, #4194304	; 0x400000
 8006858:	0580      	lsls	r0, r0, #22
 800685a:	2b01      	cmp	r3, #1
 800685c:	4408      	add	r0, r1
 800685e:	bf18      	it	ne
 8006860:	4240      	negne	r0, r0
 8006862:	f1bc 0f00 	cmp.w	ip, #0
 8006866:	f2c0 80a5 	blt.w	80069b4 <Argus_Eval_GetRangeFactors+0x1f4>
 800686a:	46e1      	mov	r9, ip
 800686c:	f04f 3eff 	mov.w	lr, #4294967295
 8006870:	2101      	movs	r1, #1
 8006872:	ea4f 4319 	mov.w	r3, r9, lsr #16
 8006876:	fa1f f989 	uxth.w	r9, r9
 800687a:	fb0a f409 	mul.w	r4, sl, r9
 800687e:	fb0a fa03 	mul.w	sl, sl, r3
 8006882:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 8006886:	fb0b f909 	mul.w	r9, fp, r9
 800688a:	fa19 f98a 	uxtah	r9, r9, sl
 800688e:	fb0b f303 	mul.w	r3, fp, r3
 8006892:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006896:	ea4f 4a09 	mov.w	sl, r9, lsl #16
 800689a:	fa1a f484 	uxtah	r4, sl, r4
 800689e:	ea31 0122 	bics.w	r1, r1, r2, asr #32
 80068a2:	bf28      	it	cs
 80068a4:	4671      	movcs	r1, lr
 80068a6:	f514 7f00 	cmn.w	r4, #512	; 0x200
 80068aa:	bf38      	it	cc
 80068ac:	f504 7400 	addcc.w	r4, r4, #512	; 0x200
 80068b0:	eb03 4319 	add.w	r3, r3, r9, lsr #16
 80068b4:	ea4f 5383 	mov.w	r3, r3, lsl #22
 80068b8:	bf34      	ite	cc
 80068ba:	0aa4      	lsrcc	r4, r4, #10
 80068bc:	f44f 0480 	movcs.w	r4, #4194304	; 0x400000
 80068c0:	441c      	add	r4, r3
 80068c2:	79bb      	ldrb	r3, [r7, #6]
 80068c4:	2901      	cmp	r1, #1
 80068c6:	bf18      	it	ne
 80068c8:	4264      	negne	r4, r4
 80068ca:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 8108 	beq.w	8006ae4 <Argus_Eval_GetRangeFactors+0x324>
 80068d4:	f897 7071 	ldrb.w	r7, [r7, #113]	; 0x71
 80068d8:	09bf      	lsrs	r7, r7, #6
 80068da:	f1c7 0704 	rsb	r7, r7, #4
 80068de:	4428      	add	r0, r5
 80068e0:	40b8      	lsls	r0, r7
 80068e2:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80068e6:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80068ea:	4573      	cmp	r3, lr
 80068ec:	ea80 000e 	eor.w	r0, r0, lr
 80068f0:	46f1      	mov	r9, lr
 80068f2:	f240 8118 	bls.w	8006b26 <Argus_Eval_GetRangeFactors+0x366>
 80068f6:	46f2      	mov	sl, lr
 80068f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80068fc:	e001      	b.n	8006902 <Argus_Eval_GetRangeFactors+0x142>
 80068fe:	460a      	mov	r2, r1
 8006900:	46aa      	mov	sl, r5
 8006902:	ea4f 054a 	mov.w	r5, sl, lsl #1
 8006906:	42ab      	cmp	r3, r5
 8006908:	ea4f 0142 	mov.w	r1, r2, lsl #1
 800690c:	d8f7      	bhi.n	80068fe <Argus_Eval_GetRangeFactors+0x13e>
 800690e:	2900      	cmp	r1, #0
 8006910:	f040 80cb 	bne.w	8006aaa <Argus_Eval_GetRangeFactors+0x2ea>
 8006914:	2800      	cmp	r0, #0
 8006916:	bfb4      	ite	lt
 8006918:	2200      	movlt	r2, #0
 800691a:	f06f 0201 	mvnge.w	r2, #1
 800691e:	4464      	add	r4, ip
 8006920:	fa04 f707 	lsl.w	r7, r4, r7
 8006924:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
 8006928:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
 800692c:	458e      	cmp	lr, r1
 800692e:	ea8e 0707 	eor.w	r7, lr, r7
 8006932:	bf38      	it	cc
 8006934:	f44f 3080 	movcc.w	r0, #65536	; 0x10000
 8006938:	d302      	bcc.n	8006940 <Argus_Eval_GetRangeFactors+0x180>
 800693a:	e101      	b.n	8006b40 <Argus_Eval_GetRangeFactors+0x380>
 800693c:	4618      	mov	r0, r3
 800693e:	46f1      	mov	r9, lr
 8006940:	ea4f 0e49 	mov.w	lr, r9, lsl #1
 8006944:	4571      	cmp	r1, lr
 8006946:	ea4f 0340 	mov.w	r3, r0, lsl #1
 800694a:	d8f7      	bhi.n	800693c <Argus_Eval_GetRangeFactors+0x17c>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d038      	beq.n	80069c2 <Argus_Eval_GetRangeFactors+0x202>
 8006950:	f1be 0f00 	cmp.w	lr, #0
 8006954:	f2c0 80d6 	blt.w	8006b04 <Argus_Eval_GetRangeFactors+0x344>
 8006958:	2000      	movs	r0, #0
 800695a:	e000      	b.n	800695e <Argus_Eval_GetRangeFactors+0x19e>
 800695c:	b159      	cbz	r1, 8006976 <Argus_Eval_GetRangeFactors+0x1b6>
 800695e:	458e      	cmp	lr, r1
 8006960:	bf9c      	itt	ls
 8006962:	eba1 010e 	subls.w	r1, r1, lr
 8006966:	4318      	orrls	r0, r3
 8006968:	085b      	lsrs	r3, r3, #1
 800696a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800696e:	d1f5      	bne.n	800695c <Argus_Eval_GetRangeFactors+0x19c>
 8006970:	4571      	cmp	r1, lr
 8006972:	bf28      	it	cs
 8006974:	3001      	addcs	r0, #1
 8006976:	2f00      	cmp	r7, #0
 8006978:	bfb8      	it	lt
 800697a:	4240      	neglt	r0, r0
 800697c:	0043      	lsls	r3, r0, #1
 800697e:	bb42      	cbnz	r2, 80069d2 <Argus_Eval_GetRangeFactors+0x212>
 8006980:	6032      	str	r2, [r6, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d159      	bne.n	8006a3a <Argus_Eval_GetRangeFactors+0x27a>
 8006986:	f8c8 3000 	str.w	r3, [r8]
 800698a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698e:	426c      	negs	r4, r5
 8006990:	f04f 33ff 	mov.w	r3, #4294967295
 8006994:	e741      	b.n	800681a <Argus_Eval_GetRangeFactors+0x5a>
 8006996:	2a00      	cmp	r2, #0
 8006998:	46ac      	mov	ip, r5
 800699a:	f6bf af35 	bge.w	8006808 <Argus_Eval_GetRangeFactors+0x48>
 800699e:	2d00      	cmp	r5, #0
 80069a0:	f1c2 0a00 	rsb	sl, r2, #0
 80069a4:	f2c0 80b6 	blt.w	8006b14 <Argus_Eval_GetRangeFactors+0x354>
 80069a8:	462c      	mov	r4, r5
 80069aa:	f04f 0b00 	mov.w	fp, #0
 80069ae:	f04f 33ff 	mov.w	r3, #4294967295
 80069b2:	e732      	b.n	800681a <Argus_Eval_GetRangeFactors+0x5a>
 80069b4:	f1cc 0900 	rsb	r9, ip, #0
 80069b8:	f04f 0e01 	mov.w	lr, #1
 80069bc:	f04f 31ff 	mov.w	r1, #4294967295
 80069c0:	e757      	b.n	8006872 <Argus_Eval_GetRangeFactors+0xb2>
 80069c2:	2f00      	cmp	r7, #0
 80069c4:	f2c0 808b 	blt.w	8006ade <Argus_Eval_GetRangeFactors+0x31e>
 80069c8:	2a00      	cmp	r2, #0
 80069ca:	f000 80a8 	beq.w	8006b1e <Argus_Eval_GetRangeFactors+0x35e>
 80069ce:	f06f 0301 	mvn.w	r3, #1
 80069d2:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 80069d6:	4860      	ldr	r0, [pc, #384]	; (8006b58 <Argus_Eval_GetRangeFactors+0x398>)
 80069d8:	4f60      	ldr	r7, [pc, #384]	; (8006b5c <Argus_Eval_GetRangeFactors+0x39c>)
 80069da:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 80069de:	4281      	cmp	r1, r0
 80069e0:	460c      	mov	r4, r1
 80069e2:	ea87 0702 	eor.w	r7, r7, r2
 80069e6:	f300 80a3 	bgt.w	8006b30 <Argus_Eval_GetRangeFactors+0x370>
 80069ea:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80069ee:	e001      	b.n	80069f4 <Argus_Eval_GetRangeFactors+0x234>
 80069f0:	4615      	mov	r5, r2
 80069f2:	460c      	mov	r4, r1
 80069f4:	0061      	lsls	r1, r4, #1
 80069f6:	4281      	cmp	r1, r0
 80069f8:	ea4f 0245 	mov.w	r2, r5, lsl #1
 80069fc:	d9f8      	bls.n	80069f0 <Argus_Eval_GetRangeFactors+0x230>
 80069fe:	b1aa      	cbz	r2, 8006a2c <Argus_Eval_GetRangeFactors+0x26c>
 8006a00:	2900      	cmp	r1, #0
 8006a02:	db75      	blt.n	8006af0 <Argus_Eval_GetRangeFactors+0x330>
 8006a04:	4855      	ldr	r0, [pc, #340]	; (8006b5c <Argus_Eval_GetRangeFactors+0x39c>)
 8006a06:	2400      	movs	r4, #0
 8006a08:	e000      	b.n	8006a0c <Argus_Eval_GetRangeFactors+0x24c>
 8006a0a:	b150      	cbz	r0, 8006a22 <Argus_Eval_GetRangeFactors+0x262>
 8006a0c:	4281      	cmp	r1, r0
 8006a0e:	bf9c      	itt	ls
 8006a10:	1a40      	subls	r0, r0, r1
 8006a12:	4314      	orrls	r4, r2
 8006a14:	0852      	lsrs	r2, r2, #1
 8006a16:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8006a1a:	d1f6      	bne.n	8006a0a <Argus_Eval_GetRangeFactors+0x24a>
 8006a1c:	4281      	cmp	r1, r0
 8006a1e:	d800      	bhi.n	8006a22 <Argus_Eval_GetRangeFactors+0x262>
 8006a20:	3401      	adds	r4, #1
 8006a22:	2f00      	cmp	r7, #0
 8006a24:	bfb8      	it	lt
 8006a26:	4264      	neglt	r4, r4
 8006a28:	00e2      	lsls	r2, r4, #3
 8006a2a:	e003      	b.n	8006a34 <Argus_Eval_GetRangeFactors+0x274>
 8006a2c:	2f00      	cmp	r7, #0
 8006a2e:	bfa8      	it	ge
 8006a30:	f06f 0207 	mvnge.w	r2, #7
 8006a34:	6032      	str	r2, [r6, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0a5      	beq.n	8006986 <Argus_Eval_GetRangeFactors+0x1c6>
 8006a3a:	4947      	ldr	r1, [pc, #284]	; (8006b58 <Argus_Eval_GetRangeFactors+0x398>)
 8006a3c:	4c47      	ldr	r4, [pc, #284]	; (8006b5c <Argus_Eval_GetRangeFactors+0x39c>)
 8006a3e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8006a42:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8006a46:	428a      	cmp	r2, r1
 8006a48:	ea84 0403 	eor.w	r4, r4, r3
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	dc72      	bgt.n	8006b36 <Argus_Eval_GetRangeFactors+0x376>
 8006a50:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006a54:	4d40      	ldr	r5, [pc, #256]	; (8006b58 <Argus_Eval_GetRangeFactors+0x398>)
 8006a56:	e001      	b.n	8006a5c <Argus_Eval_GetRangeFactors+0x29c>
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	0042      	lsls	r2, r0, #1
 8006a5e:	42aa      	cmp	r2, r5
 8006a60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006a64:	d9f8      	bls.n	8006a58 <Argus_Eval_GetRangeFactors+0x298>
 8006a66:	b1c3      	cbz	r3, 8006a9a <Argus_Eval_GetRangeFactors+0x2da>
 8006a68:	2a00      	cmp	r2, #0
 8006a6a:	db46      	blt.n	8006afa <Argus_Eval_GetRangeFactors+0x33a>
 8006a6c:	493b      	ldr	r1, [pc, #236]	; (8006b5c <Argus_Eval_GetRangeFactors+0x39c>)
 8006a6e:	2000      	movs	r0, #0
 8006a70:	e000      	b.n	8006a74 <Argus_Eval_GetRangeFactors+0x2b4>
 8006a72:	b151      	cbz	r1, 8006a8a <Argus_Eval_GetRangeFactors+0x2ca>
 8006a74:	4291      	cmp	r1, r2
 8006a76:	bf24      	itt	cs
 8006a78:	1a89      	subcs	r1, r1, r2
 8006a7a:	4318      	orrcs	r0, r3
 8006a7c:	085b      	lsrs	r3, r3, #1
 8006a7e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006a82:	d1f6      	bne.n	8006a72 <Argus_Eval_GetRangeFactors+0x2b2>
 8006a84:	4291      	cmp	r1, r2
 8006a86:	d300      	bcc.n	8006a8a <Argus_Eval_GetRangeFactors+0x2ca>
 8006a88:	3001      	adds	r0, #1
 8006a8a:	2c00      	cmp	r4, #0
 8006a8c:	bfb8      	it	lt
 8006a8e:	4240      	neglt	r0, r0
 8006a90:	00c3      	lsls	r3, r0, #3
 8006a92:	f8c8 3000 	str.w	r3, [r8]
 8006a96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9a:	2c00      	cmp	r4, #0
 8006a9c:	bfa8      	it	ge
 8006a9e:	f06f 0307 	mvnge.w	r3, #7
 8006aa2:	f8c8 3000 	str.w	r3, [r8]
 8006aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aaa:	2d00      	cmp	r5, #0
 8006aac:	da04      	bge.n	8006ab8 <Argus_Eval_GetRangeFactors+0x2f8>
 8006aae:	f032 4100 	bics.w	r1, r2, #2147483648	; 0x80000000
 8006ab2:	f02a 4500 	bic.w	r5, sl, #2147483648	; 0x80000000
 8006ab6:	d041      	beq.n	8006b3c <Argus_Eval_GetRangeFactors+0x37c>
 8006ab8:	2200      	movs	r2, #0
 8006aba:	e000      	b.n	8006abe <Argus_Eval_GetRangeFactors+0x2fe>
 8006abc:	b153      	cbz	r3, 8006ad4 <Argus_Eval_GetRangeFactors+0x314>
 8006abe:	429d      	cmp	r5, r3
 8006ac0:	bf9c      	itt	ls
 8006ac2:	1b5b      	subls	r3, r3, r5
 8006ac4:	430a      	orrls	r2, r1
 8006ac6:	0849      	lsrs	r1, r1, #1
 8006ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006acc:	d1f6      	bne.n	8006abc <Argus_Eval_GetRangeFactors+0x2fc>
 8006ace:	42ab      	cmp	r3, r5
 8006ad0:	bf28      	it	cs
 8006ad2:	3201      	addcs	r2, #1
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	bfb8      	it	lt
 8006ad8:	4252      	neglt	r2, r2
 8006ada:	0052      	lsls	r2, r2, #1
 8006adc:	e71f      	b.n	800691e <Argus_Eval_GetRangeFactors+0x15e>
 8006ade:	2a00      	cmp	r2, #0
 8006ae0:	f47f af77 	bne.w	80069d2 <Argus_Eval_GetRangeFactors+0x212>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	6033      	str	r3, [r6, #0]
 8006ae8:	f8c8 3000 	str.w	r3, [r8]
 8006aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af0:	f035 4200 	bics.w	r2, r5, #2147483648	; 0x80000000
 8006af4:	d029      	beq.n	8006b4a <Argus_Eval_GetRangeFactors+0x38a>
 8006af6:	4621      	mov	r1, r4
 8006af8:	e784      	b.n	8006a04 <Argus_Eval_GetRangeFactors+0x244>
 8006afa:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8006afe:	d022      	beq.n	8006b46 <Argus_Eval_GetRangeFactors+0x386>
 8006b00:	4602      	mov	r2, r0
 8006b02:	e7b3      	b.n	8006a6c <Argus_Eval_GetRangeFactors+0x2ac>
 8006b04:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8006b08:	f029 4e00 	bic.w	lr, r9, #2147483648	; 0x80000000
 8006b0c:	f47f af24 	bne.w	8006958 <Argus_Eval_GetRangeFactors+0x198>
 8006b10:	4618      	mov	r0, r3
 8006b12:	e72d      	b.n	8006970 <Argus_Eval_GetRangeFactors+0x1b0>
 8006b14:	426c      	negs	r4, r5
 8006b16:	f04f 0b00 	mov.w	fp, #0
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e67d      	b.n	800681a <Argus_Eval_GetRangeFactors+0x5a>
 8006b1e:	6032      	str	r2, [r6, #0]
 8006b20:	4c0f      	ldr	r4, [pc, #60]	; (8006b60 <Argus_Eval_GetRangeFactors+0x3a0>)
 8006b22:	2002      	movs	r0, #2
 8006b24:	e794      	b.n	8006a50 <Argus_Eval_GetRangeFactors+0x290>
 8006b26:	b193      	cbz	r3, 8006b4e <Argus_Eval_GetRangeFactors+0x38e>
 8006b28:	4675      	mov	r5, lr
 8006b2a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006b2e:	e7c3      	b.n	8006ab8 <Argus_Eval_GetRangeFactors+0x2f8>
 8006b30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b34:	e766      	b.n	8006a04 <Argus_Eval_GetRangeFactors+0x244>
 8006b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b3a:	e797      	b.n	8006a6c <Argus_Eval_GetRangeFactors+0x2ac>
 8006b3c:	460a      	mov	r2, r1
 8006b3e:	e7c6      	b.n	8006ace <Argus_Eval_GetRangeFactors+0x30e>
 8006b40:	b939      	cbnz	r1, 8006b52 <Argus_Eval_GetRangeFactors+0x392>
 8006b42:	4608      	mov	r0, r1
 8006b44:	e717      	b.n	8006976 <Argus_Eval_GetRangeFactors+0x1b6>
 8006b46:	2001      	movs	r0, #1
 8006b48:	e79f      	b.n	8006a8a <Argus_Eval_GetRangeFactors+0x2ca>
 8006b4a:	2401      	movs	r4, #1
 8006b4c:	e769      	b.n	8006a22 <Argus_Eval_GetRangeFactors+0x262>
 8006b4e:	461a      	mov	r2, r3
 8006b50:	e7c0      	b.n	8006ad4 <Argus_Eval_GetRangeFactors+0x314>
 8006b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b56:	e6ff      	b.n	8006958 <Argus_Eval_GetRangeFactors+0x198>
 8006b58:	4779e127 	.word	0x4779e127
 8006b5c:	4779e128 	.word	0x4779e128
 8006b60:	b8861ed6 	.word	0xb8861ed6

08006b64 <Argus_Eval_Update>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4604      	mov	r4, r0
 8006b68:	f8d0 0350 	ldr.w	r0, [r0, #848]	; 0x350
 8006b6c:	f008 fb2e 	bl	800f1cc <Argus_Dev_GetCfg>
 8006b70:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
 8006b74:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
 8006b78:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 8006b7c:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
 8006b80:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8006b84:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
 8006b88:	f890 50ab 	ldrb.w	r5, [r0, #171]	; 0xab
 8006b8c:	f884 5324 	strb.w	r5, [r4, #804]	; 0x324
 8006b90:	2d00      	cmp	r5, #0
 8006b92:	f000 809d 	beq.w	8006cd0 <Argus_Eval_Update+0x16c>
 8006b96:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
 8006b9a:	0309      	lsls	r1, r1, #12
 8006b9c:	016b      	lsls	r3, r5, #5
 8006b9e:	428b      	cmp	r3, r1
 8006ba0:	f0c0 8093 	bcc.w	8006cca <Argus_Eval_Update+0x166>
 8006ba4:	1a5b      	subs	r3, r3, r1
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006bac:	d04e      	beq.n	8006c4c <Argus_Eval_Update+0xe8>
 8006bae:	4299      	cmp	r1, r3
 8006bb0:	bf9c      	itt	ls
 8006bb2:	1a5b      	subls	r3, r3, r1
 8006bb4:	f445 6580 	orrls.w	r5, r5, #1024	; 0x400
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	d047      	beq.n	8006c4c <Argus_Eval_Update+0xe8>
 8006bbc:	4299      	cmp	r1, r3
 8006bbe:	bf9c      	itt	ls
 8006bc0:	1a5b      	subls	r3, r3, r1
 8006bc2:	f445 7500 	orrls.w	r5, r5, #512	; 0x200
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	d040      	beq.n	8006c4c <Argus_Eval_Update+0xe8>
 8006bca:	4299      	cmp	r1, r3
 8006bcc:	bf9c      	itt	ls
 8006bce:	1a5b      	subls	r3, r3, r1
 8006bd0:	f445 7580 	orrls.w	r5, r5, #256	; 0x100
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	d039      	beq.n	8006c4c <Argus_Eval_Update+0xe8>
 8006bd8:	4299      	cmp	r1, r3
 8006bda:	bf9c      	itt	ls
 8006bdc:	1a5b      	subls	r3, r3, r1
 8006bde:	f045 0580 	orrls.w	r5, r5, #128	; 0x80
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	d032      	beq.n	8006c4c <Argus_Eval_Update+0xe8>
 8006be6:	4299      	cmp	r1, r3
 8006be8:	bf9c      	itt	ls
 8006bea:	1a5b      	subls	r3, r3, r1
 8006bec:	f045 0540 	orrls.w	r5, r5, #64	; 0x40
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	d02b      	beq.n	8006c4c <Argus_Eval_Update+0xe8>
 8006bf4:	4299      	cmp	r1, r3
 8006bf6:	bf9c      	itt	ls
 8006bf8:	1a5b      	subls	r3, r3, r1
 8006bfa:	f045 0520 	orrls.w	r5, r5, #32
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	d024      	beq.n	8006c4c <Argus_Eval_Update+0xe8>
 8006c02:	4299      	cmp	r1, r3
 8006c04:	bf9c      	itt	ls
 8006c06:	1a5b      	subls	r3, r3, r1
 8006c08:	f045 0510 	orrls.w	r5, r5, #16
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	d01d      	beq.n	8006c4c <Argus_Eval_Update+0xe8>
 8006c10:	4299      	cmp	r1, r3
 8006c12:	bf9c      	itt	ls
 8006c14:	1a5b      	subls	r3, r3, r1
 8006c16:	f045 0508 	orrls.w	r5, r5, #8
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	d016      	beq.n	8006c4c <Argus_Eval_Update+0xe8>
 8006c1e:	4299      	cmp	r1, r3
 8006c20:	bf9c      	itt	ls
 8006c22:	1a5b      	subls	r3, r3, r1
 8006c24:	f045 0504 	orrls.w	r5, r5, #4
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	d00f      	beq.n	8006c4c <Argus_Eval_Update+0xe8>
 8006c2c:	4299      	cmp	r1, r3
 8006c2e:	bf9c      	itt	ls
 8006c30:	1a5b      	subls	r3, r3, r1
 8006c32:	f045 0502 	orrls.w	r5, r5, #2
 8006c36:	005a      	lsls	r2, r3, #1
 8006c38:	d008      	beq.n	8006c4c <Argus_Eval_Update+0xe8>
 8006c3a:	4291      	cmp	r1, r2
 8006c3c:	bf9c      	itt	ls
 8006c3e:	1a52      	subls	r2, r2, r1
 8006c40:	f045 0501 	orrls.w	r5, r5, #1
 8006c44:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8006c48:	bf98      	it	ls
 8006c4a:	3501      	addls	r5, #1
 8006c4c:	2dff      	cmp	r5, #255	; 0xff
 8006c4e:	bf28      	it	cs
 8006c50:	25ff      	movcs	r5, #255	; 0xff
 8006c52:	b2eb      	uxtb	r3, r5
 8006c54:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
 8006c58:	7a03      	ldrb	r3, [r0, #8]
 8006c5a:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
 8006c5e:	8943      	ldrh	r3, [r0, #10]
 8006c60:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
 8006c64:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 8006c68:	b10b      	cbz	r3, 8006c6e <Argus_Eval_Update+0x10a>
 8006c6a:	f8b0 30a2 	ldrh.w	r3, [r0, #162]	; 0xa2
 8006c6e:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
 8006c72:	f504 724d 	add.w	r2, r4, #820	; 0x334
 8006c76:	f504 714c 	add.w	r1, r4, #816	; 0x330
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f7ff fda0 	bl	80067c0 <Argus_Eval_GetRangeFactors>
 8006c80:	f8d4 0350 	ldr.w	r0, [r4, #848]	; 0x350
 8006c84:	f008 faa2 	bl	800f1cc <Argus_Dev_GetCfg>
 8006c88:	7a43      	ldrb	r3, [r0, #9]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d015      	beq.n	8006cba <Argus_Eval_Update+0x156>
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d117      	bne.n	8006cc2 <Argus_Eval_Update+0x15e>
 8006c92:	4b10      	ldr	r3, [pc, #64]	; (8006cd4 <Argus_Eval_Update+0x170>)
 8006c94:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
 8006c98:	f8d4 0354 	ldr.w	r0, [r4, #852]	; 0x354
 8006c9c:	f001 fc5c 	bl	8008558 <Argus_Cfg_GetConfigurationPtr>
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	f8d4 0358 	ldr.w	r0, [r4, #856]	; 0x358
 8006ca6:	f009 fe53 	bl	8010950 <Argus_Cal_GetCalibrationPtr>
 8006caa:	4629      	mov	r1, r5
 8006cac:	4602      	mov	r2, r0
 8006cae:	f504 704f 	add.w	r0, r4, #828	; 0x33c
 8006cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cb6:	f000 becd 	b.w	8007a54 <Argus_Pba_UpdateConfig>
 8006cba:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <Argus_Eval_Update+0x174>)
 8006cbc:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
 8006cc0:	e7ea      	b.n	8006c98 <Argus_Eval_Update+0x134>
 8006cc2:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <Argus_Eval_Update+0x178>)
 8006cc4:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
 8006cc8:	e7e6      	b.n	8006c98 <Argus_Eval_Update+0x134>
 8006cca:	01ab      	lsls	r3, r5, #6
 8006ccc:	2500      	movs	r5, #0
 8006cce:	e76e      	b.n	8006bae <Argus_Eval_Update+0x4a>
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	e7bf      	b.n	8006c54 <Argus_Eval_Update+0xf0>
 8006cd4:	08008191 	.word	0x08008191
 8006cd8:	08008059 	.word	0x08008059
 8006cdc:	08006025 	.word	0x08006025

08006ce0 <Argus_Eval_ApplyPreEvaluation>:
 8006ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ce2:	f101 070c 	add.w	r7, r1, #12
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	460c      	mov	r4, r1
 8006cea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006cec:	f105 060c 	add.w	r6, r5, #12
 8006cf0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006cf2:	1d23      	adds	r3, r4, #4
 8006cf4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6033      	str	r3, [r6, #0]
 8006cfe:	2a00      	cmp	r2, #0
 8006d00:	f105 0304 	add.w	r3, r5, #4
 8006d04:	e883 0003 	stmia.w	r3, {r0, r1}
 8006d08:	f105 0020 	add.w	r0, r5, #32
 8006d0c:	f2c0 8098 	blt.w	8006e40 <Argus_Eval_ApplyPreEvaluation+0x160>
 8006d10:	e9d5 7103 	ldrd	r7, r1, [r5, #12]
 8006d14:	087e      	lsrs	r6, r7, #1
 8006d16:	f006 3255 	and.w	r2, r6, #1431655765	; 0x55555555
 8006d1a:	ea4f 0c51 	mov.w	ip, r1, lsr #1
 8006d1e:	1aba      	subs	r2, r7, r2
 8006d20:	f00c 3c55 	and.w	ip, ip, #1431655765	; 0x55555555
 8006d24:	0893      	lsrs	r3, r2, #2
 8006d26:	eba1 0c0c 	sub.w	ip, r1, ip
 8006d2a:	f003 3e33 	and.w	lr, r3, #858993459	; 0x33333333
 8006d2e:	f002 3333 	and.w	r3, r2, #858993459	; 0x33333333
 8006d32:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8006d36:	4473      	add	r3, lr
 8006d38:	f002 3e33 	and.w	lr, r2, #858993459	; 0x33333333
 8006d3c:	f00c 3233 	and.w	r2, ip, #858993459	; 0x33333333
 8006d40:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8006d44:	4472      	add	r2, lr
 8006d46:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8006d4a:	eb02 1212 	add.w	r2, r2, r2, lsr #4
 8006d4e:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8006d52:	f002 320f 	and.w	r2, r2, #252645135	; 0xf0f0f0f
 8006d56:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8006d5a:	eb02 2202 	add.w	r2, r2, r2, lsl #8
 8006d5e:	eb02 4202 	add.w	r2, r2, r2, lsl #16
 8006d62:	0e1b      	lsrs	r3, r3, #24
 8006d64:	eb03 6312 	add.w	r3, r3, r2, lsr #24
 8006d68:	2200      	movs	r2, #0
 8006d6a:	3421      	adds	r4, #33	; 0x21
 8006d6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006d70:	602a      	str	r2, [r5, #0]
 8006d72:	b91f      	cbnz	r7, 8006d7c <Argus_Eval_ApplyPreEvaluation+0x9c>
 8006d74:	e032      	b.n	8006ddc <Argus_Eval_ApplyPreEvaluation+0xfc>
 8006d76:	4637      	mov	r7, r6
 8006d78:	b37e      	cbz	r6, 8006dda <Argus_Eval_ApplyPreEvaluation+0xfa>
 8006d7a:	0876      	lsrs	r6, r6, #1
 8006d7c:	07f9      	lsls	r1, r7, #31
 8006d7e:	d5fa      	bpl.n	8006d76 <Argus_Eval_ApplyPreEvaluation+0x96>
 8006d80:	7862      	ldrb	r2, [r4, #1]
 8006d82:	7827      	ldrb	r7, [r4, #0]
 8006d84:	78a1      	ldrb	r1, [r4, #2]
 8006d86:	0212      	lsls	r2, r2, #8
 8006d88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	18e1      	adds	r1, r4, r3
 8006d90:	6002      	str	r2, [r0, #0]
 8006d92:	784a      	ldrb	r2, [r1, #1]
 8006d94:	f814 c003 	ldrb.w	ip, [r4, r3]
 8006d98:	788f      	ldrb	r7, [r1, #2]
 8006d9a:	0212      	lsls	r2, r2, #8
 8006d9c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8006da0:	433a      	orrs	r2, r7
 8006da2:	18cf      	adds	r7, r1, r3
 8006da4:	6042      	str	r2, [r0, #4]
 8006da6:	787a      	ldrb	r2, [r7, #1]
 8006da8:	f814 e013 	ldrb.w	lr, [r4, r3, lsl #1]
 8006dac:	f897 c002 	ldrb.w	ip, [r7, #2]
 8006db0:	0212      	lsls	r2, r2, #8
 8006db2:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8006db6:	ea42 020c 	orr.w	r2, r2, ip
 8006dba:	441f      	add	r7, r3
 8006dbc:	6082      	str	r2, [r0, #8]
 8006dbe:	787a      	ldrb	r2, [r7, #1]
 8006dc0:	f811 c013 	ldrb.w	ip, [r1, r3, lsl #1]
 8006dc4:	78b9      	ldrb	r1, [r7, #2]
 8006dc6:	0212      	lsls	r2, r2, #8
 8006dc8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	60c2      	str	r2, [r0, #12]
 8006dd0:	3403      	adds	r4, #3
 8006dd2:	3010      	adds	r0, #16
 8006dd4:	4637      	mov	r7, r6
 8006dd6:	2e00      	cmp	r6, #0
 8006dd8:	d1cf      	bne.n	8006d7a <Argus_Eval_ApplyPreEvaluation+0x9a>
 8006dda:	6929      	ldr	r1, [r5, #16]
 8006ddc:	b911      	cbnz	r1, 8006de4 <Argus_Eval_ApplyPreEvaluation+0x104>
 8006dde:	e02e      	b.n	8006e3e <Argus_Eval_ApplyPreEvaluation+0x15e>
 8006de0:	0849      	lsrs	r1, r1, #1
 8006de2:	d02c      	beq.n	8006e3e <Argus_Eval_ApplyPreEvaluation+0x15e>
 8006de4:	07ca      	lsls	r2, r1, #31
 8006de6:	d5fb      	bpl.n	8006de0 <Argus_Eval_ApplyPreEvaluation+0x100>
 8006de8:	7862      	ldrb	r2, [r4, #1]
 8006dea:	7826      	ldrb	r6, [r4, #0]
 8006dec:	78a5      	ldrb	r5, [r4, #2]
 8006dee:	0212      	lsls	r2, r2, #8
 8006df0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8006df4:	432a      	orrs	r2, r5
 8006df6:	18e5      	adds	r5, r4, r3
 8006df8:	6002      	str	r2, [r0, #0]
 8006dfa:	786a      	ldrb	r2, [r5, #1]
 8006dfc:	5ce7      	ldrb	r7, [r4, r3]
 8006dfe:	78ae      	ldrb	r6, [r5, #2]
 8006e00:	0212      	lsls	r2, r2, #8
 8006e02:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006e06:	4332      	orrs	r2, r6
 8006e08:	18ee      	adds	r6, r5, r3
 8006e0a:	6042      	str	r2, [r0, #4]
 8006e0c:	7872      	ldrb	r2, [r6, #1]
 8006e0e:	f814 c013 	ldrb.w	ip, [r4, r3, lsl #1]
 8006e12:	78b7      	ldrb	r7, [r6, #2]
 8006e14:	0212      	lsls	r2, r2, #8
 8006e16:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8006e1a:	433a      	orrs	r2, r7
 8006e1c:	441e      	add	r6, r3
 8006e1e:	6082      	str	r2, [r0, #8]
 8006e20:	7872      	ldrb	r2, [r6, #1]
 8006e22:	f815 7013 	ldrb.w	r7, [r5, r3, lsl #1]
 8006e26:	78b5      	ldrb	r5, [r6, #2]
 8006e28:	0212      	lsls	r2, r2, #8
 8006e2a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006e2e:	432a      	orrs	r2, r5
 8006e30:	0849      	lsrs	r1, r1, #1
 8006e32:	60c2      	str	r2, [r0, #12]
 8006e34:	f104 0403 	add.w	r4, r4, #3
 8006e38:	f100 0010 	add.w	r0, r0, #16
 8006e3c:	d1d2      	bne.n	8006de4 <Argus_Eval_ApplyPreEvaluation+0x104>
 8006e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	602b      	str	r3, [r5, #0]
 8006e44:	f44f 7204 	mov.w	r2, #528	; 0x210
 8006e48:	2100      	movs	r1, #0
 8006e4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006e4e:	f010 bc67 	b.w	8017720 <memset>
 8006e52:	bf00      	nop

08006e54 <Argus_Eval_ApplyAuxEvaluation>:
 8006e54:	b430      	push	{r4, r5}
 8006e56:	f8b0 432c 	ldrh.w	r4, [r0, #812]	; 0x32c
 8006e5a:	2c00      	cmp	r4, #0
 8006e5c:	d04c      	beq.n	8006ef8 <Argus_Eval_ApplyAuxEvaluation+0xa4>
 8006e5e:	7890      	ldrb	r0, [r2, #2]
 8006e60:	7855      	ldrb	r5, [r2, #1]
 8006e62:	78d3      	ldrb	r3, [r2, #3]
 8006e64:	0200      	lsls	r0, r0, #8
 8006e66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8006e6a:	4318      	orrs	r0, r3
 8006e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e70:	fbb3 f3f4 	udiv	r3, r3, r4
 8006e74:	3301      	adds	r3, #1
 8006e76:	105b      	asrs	r3, r3, #1
 8006e78:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8006e7c:	fb03 f000 	mul.w	r0, r3, r0
 8006e80:	0b00      	lsrs	r0, r0, #12
 8006e82:	8008      	strh	r0, [r1, #0]
 8006e84:	7950      	ldrb	r0, [r2, #5]
 8006e86:	7915      	ldrb	r5, [r2, #4]
 8006e88:	7994      	ldrb	r4, [r2, #6]
 8006e8a:	0200      	lsls	r0, r0, #8
 8006e8c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8006e90:	4320      	orrs	r0, r4
 8006e92:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8006e96:	fb03 f000 	mul.w	r0, r3, r0
 8006e9a:	0b00      	lsrs	r0, r0, #12
 8006e9c:	8048      	strh	r0, [r1, #2]
 8006e9e:	7a10      	ldrb	r0, [r2, #8]
 8006ea0:	79d5      	ldrb	r5, [r2, #7]
 8006ea2:	7a54      	ldrb	r4, [r2, #9]
 8006ea4:	0200      	lsls	r0, r0, #8
 8006ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8006eaa:	4320      	orrs	r0, r4
 8006eac:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8006eb0:	fb03 f000 	mul.w	r0, r3, r0
 8006eb4:	0b00      	lsrs	r0, r0, #12
 8006eb6:	8088      	strh	r0, [r1, #4]
 8006eb8:	7ad0      	ldrb	r0, [r2, #11]
 8006eba:	7a95      	ldrb	r5, [r2, #10]
 8006ebc:	7b14      	ldrb	r4, [r2, #12]
 8006ebe:	0200      	lsls	r0, r0, #8
 8006ec0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8006ec4:	4320      	orrs	r0, r4
 8006ec6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8006eca:	fb03 f000 	mul.w	r0, r3, r0
 8006ece:	0b00      	lsrs	r0, r0, #12
 8006ed0:	80c8      	strh	r0, [r1, #6]
 8006ed2:	7b90      	ldrb	r0, [r2, #14]
 8006ed4:	7b54      	ldrb	r4, [r2, #13]
 8006ed6:	7bd2      	ldrb	r2, [r2, #15]
 8006ed8:	0200      	lsls	r0, r0, #8
 8006eda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8006ede:	4310      	orrs	r0, r2
 8006ee0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8006ee4:	fb03 f300 	mul.w	r3, r3, r0
 8006ee8:	0b1b      	lsrs	r3, r3, #12
 8006eea:	810b      	strh	r3, [r1, #8]
 8006eec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef0:	f8c1 300a 	str.w	r3, [r1, #10]
 8006ef4:	bc30      	pop	{r4, r5}
 8006ef6:	4770      	bx	lr
 8006ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8006efc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006f00:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006f04:	604b      	str	r3, [r1, #4]
 8006f06:	810b      	strh	r3, [r1, #8]
 8006f08:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0c:	8008      	strh	r0, [r1, #0]
 8006f0e:	804a      	strh	r2, [r1, #2]
 8006f10:	f8c1 300a 	str.w	r3, [r1, #10]
 8006f14:	bc30      	pop	{r4, r5}
 8006f16:	4770      	bx	lr

08006f18 <Argus_Eval_Apply>:
 8006f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	b08d      	sub	sp, #52	; 0x34
 8006f20:	4606      	mov	r6, r0
 8006f22:	4611      	mov	r1, r2
 8006f24:	4620      	mov	r0, r4
 8006f26:	4617      	mov	r7, r2
 8006f28:	9200      	str	r2, [sp, #0]
 8006f2a:	f7ff fed9 	bl	8006ce0 <Argus_Eval_ApplyPreEvaluation>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f280 814f 	bge.w	80071d4 <Argus_Eval_Apply+0x2bc>
 8006f36:	f8d6 0350 	ldr.w	r0, [r6, #848]	; 0x350
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	f500 70b2 	add.w	r0, r0, #356	; 0x164
 8006f40:	f005 fa4a 	bl	800c3d8 <Argus_Dca_Evaluate>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	1d9a      	adds	r2, r3, #6
 8006f48:	d023      	beq.n	8006f92 <Argus_Eval_Apply+0x7a>
 8006f4a:	f113 0f6b 	cmn.w	r3, #107	; 0x6b
 8006f4e:	d020      	beq.n	8006f92 <Argus_Eval_Apply+0x7a>
 8006f50:	3372      	adds	r3, #114	; 0x72
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d91d      	bls.n	8006f92 <Argus_Eval_Apply+0x7a>
 8006f56:	f8d6 0350 	ldr.w	r0, [r6, #848]	; 0x350
 8006f5a:	f008 f859 	bl	800f010 <Argus_Dev_HasUpdateFlag>
 8006f5e:	b1a8      	cbz	r0, 8006f8c <Argus_Eval_Apply+0x74>
 8006f60:	f8d6 0350 	ldr.w	r0, [r6, #848]	; 0x350
 8006f64:	9a00      	ldr	r2, [sp, #0]
 8006f66:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 8006f6a:	3314      	adds	r3, #20
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	bf0b      	itete	eq
 8006f70:	2580      	moveq	r5, #128	; 0x80
 8006f72:	2540      	movne	r5, #64	; 0x40
 8006f74:	2440      	moveq	r4, #64	; 0x40
 8006f76:	2480      	movne	r4, #128	; 0x80
 8006f78:	f008 f84a 	bl	800f010 <Argus_Dev_HasUpdateFlag>
 8006f7c:	4228      	tst	r0, r5
 8006f7e:	f000 8312 	beq.w	80075a6 <Argus_Eval_Apply+0x68e>
 8006f82:	4621      	mov	r1, r4
 8006f84:	f8d6 0350 	ldr.w	r0, [r6, #848]	; 0x350
 8006f88:	f008 f83a 	bl	800f000 <Argus_Dev_ClearUpdateFlag>
 8006f8c:	b00d      	add	sp, #52	; 0x34
 8006f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f92:	f44f 7204 	mov.w	r2, #528	; 0x210
 8006f96:	2100      	movs	r1, #0
 8006f98:	f104 0020 	add.w	r0, r4, #32
 8006f9c:	f010 fbc0 	bl	8017720 <memset>
 8006fa0:	f894 325c 	ldrb.w	r3, [r4, #604]	; 0x25c
 8006fa4:	f894 0268 	ldrb.w	r0, [r4, #616]	; 0x268
 8006fa8:	f894 1274 	ldrb.w	r1, [r4, #628]	; 0x274
 8006fac:	f894 2280 	ldrb.w	r2, [r4, #640]	; 0x280
 8006fb0:	f894 c244 	ldrb.w	ip, [r4, #580]	; 0x244
 8006fb4:	f894 7250 	ldrb.w	r7, [r4, #592]	; 0x250
 8006fb8:	f894 528c 	ldrb.w	r5, [r4, #652]	; 0x28c
 8006fbc:	f063 031b 	orn	r3, r3, #27
 8006fc0:	f060 001b 	orn	r0, r0, #27
 8006fc4:	f061 011b 	orn	r1, r1, #27
 8006fc8:	f062 021b 	orn	r2, r2, #27
 8006fcc:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
 8006fd0:	f894 3298 	ldrb.w	r3, [r4, #664]	; 0x298
 8006fd4:	f884 0268 	strb.w	r0, [r4, #616]	; 0x268
 8006fd8:	f884 1274 	strb.w	r1, [r4, #628]	; 0x274
 8006fdc:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
 8006fe0:	f894 12b0 	ldrb.w	r1, [r4, #688]	; 0x2b0
 8006fe4:	f884 2280 	strb.w	r2, [r4, #640]	; 0x280
 8006fe8:	f894 22bc 	ldrb.w	r2, [r4, #700]	; 0x2bc
 8006fec:	f063 031b 	orn	r3, r3, #27
 8006ff0:	f06c 0c1b 	orn	ip, ip, #27
 8006ff4:	f067 071b 	orn	r7, r7, #27
 8006ff8:	f065 051b 	orn	r5, r5, #27
 8006ffc:	f060 001b 	orn	r0, r0, #27
 8007000:	f061 011b 	orn	r1, r1, #27
 8007004:	f062 021b 	orn	r2, r2, #27
 8007008:	f884 3298 	strb.w	r3, [r4, #664]	; 0x298
 800700c:	2300      	movs	r3, #0
 800700e:	f884 c244 	strb.w	ip, [r4, #580]	; 0x244
 8007012:	f884 7250 	strb.w	r7, [r4, #592]	; 0x250
 8007016:	f884 528c 	strb.w	r5, [r4, #652]	; 0x28c
 800701a:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
 800701e:	f884 12b0 	strb.w	r1, [r4, #688]	; 0x2b0
 8007022:	f884 22bc 	strb.w	r2, [r4, #700]	; 0x2bc
 8007026:	f8a4 3242 	strh.w	r3, [r4, #578]	; 0x242
 800702a:	f8a4 324e 	strh.w	r3, [r4, #590]	; 0x24e
 800702e:	f8a4 325a 	strh.w	r3, [r4, #602]	; 0x25a
 8007032:	f8a4 3266 	strh.w	r3, [r4, #614]	; 0x266
 8007036:	f8a4 3272 	strh.w	r3, [r4, #626]	; 0x272
 800703a:	f8a4 327e 	strh.w	r3, [r4, #638]	; 0x27e
 800703e:	f8a4 328a 	strh.w	r3, [r4, #650]	; 0x28a
 8007042:	f8a4 3296 	strh.w	r3, [r4, #662]	; 0x296
 8007046:	f8a4 32a2 	strh.w	r3, [r4, #674]	; 0x2a2
 800704a:	f8a4 32ae 	strh.w	r3, [r4, #686]	; 0x2ae
 800704e:	f8a4 32ba 	strh.w	r3, [r4, #698]	; 0x2ba
 8007052:	f894 72c8 	ldrb.w	r7, [r4, #712]	; 0x2c8
 8007056:	f894 52d4 	ldrb.w	r5, [r4, #724]	; 0x2d4
 800705a:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
 800705e:	f894 12ec 	ldrb.w	r1, [r4, #748]	; 0x2ec
 8007062:	f894 22f8 	ldrb.w	r2, [r4, #760]	; 0x2f8
 8007066:	f894 c304 	ldrb.w	ip, [r4, #772]	; 0x304
 800706a:	f8a4 32c6 	strh.w	r3, [r4, #710]	; 0x2c6
 800706e:	f067 071b 	orn	r7, r7, #27
 8007072:	f065 051b 	orn	r5, r5, #27
 8007076:	f060 001b 	orn	r0, r0, #27
 800707a:	f061 011b 	orn	r1, r1, #27
 800707e:	f062 021b 	orn	r2, r2, #27
 8007082:	f884 72c8 	strb.w	r7, [r4, #712]	; 0x2c8
 8007086:	f884 52d4 	strb.w	r5, [r4, #724]	; 0x2d4
 800708a:	f894 7310 	ldrb.w	r7, [r4, #784]	; 0x310
 800708e:	f894 531c 	ldrb.w	r5, [r4, #796]	; 0x31c
 8007092:	f884 02e0 	strb.w	r0, [r4, #736]	; 0x2e0
 8007096:	f884 12ec 	strb.w	r1, [r4, #748]	; 0x2ec
 800709a:	f894 0328 	ldrb.w	r0, [r4, #808]	; 0x328
 800709e:	f894 1334 	ldrb.w	r1, [r4, #820]	; 0x334
 80070a2:	f884 22f8 	strb.w	r2, [r4, #760]	; 0x2f8
 80070a6:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
 80070aa:	f8a4 32d2 	strh.w	r3, [r4, #722]	; 0x2d2
 80070ae:	f06c 0c1b 	orn	ip, ip, #27
 80070b2:	f067 071b 	orn	r7, r7, #27
 80070b6:	f065 051b 	orn	r5, r5, #27
 80070ba:	f060 001b 	orn	r0, r0, #27
 80070be:	f061 011b 	orn	r1, r1, #27
 80070c2:	f062 021b 	orn	r2, r2, #27
 80070c6:	f884 c304 	strb.w	ip, [r4, #772]	; 0x304
 80070ca:	f884 7310 	strb.w	r7, [r4, #784]	; 0x310
 80070ce:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
 80070d2:	f884 0328 	strb.w	r0, [r4, #808]	; 0x328
 80070d6:	f884 1334 	strb.w	r1, [r4, #820]	; 0x334
 80070da:	f884 2340 	strb.w	r2, [r4, #832]	; 0x340
 80070de:	f8a4 32de 	strh.w	r3, [r4, #734]	; 0x2de
 80070e2:	f8a4 32ea 	strh.w	r3, [r4, #746]	; 0x2ea
 80070e6:	f8a4 32f6 	strh.w	r3, [r4, #758]	; 0x2f6
 80070ea:	f8a4 3302 	strh.w	r3, [r4, #770]	; 0x302
 80070ee:	f8a4 330e 	strh.w	r3, [r4, #782]	; 0x30e
 80070f2:	f8a4 331a 	strh.w	r3, [r4, #794]	; 0x31a
 80070f6:	f8a4 3326 	strh.w	r3, [r4, #806]	; 0x326
 80070fa:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332
 80070fe:	f8a4 333e 	strh.w	r3, [r4, #830]	; 0x33e
 8007102:	f894 734c 	ldrb.w	r7, [r4, #844]	; 0x34c
 8007106:	f894 5358 	ldrb.w	r5, [r4, #856]	; 0x358
 800710a:	f894 0364 	ldrb.w	r0, [r4, #868]	; 0x364
 800710e:	f894 1370 	ldrb.w	r1, [r4, #880]	; 0x370
 8007112:	f894 237c 	ldrb.w	r2, [r4, #892]	; 0x37c
 8007116:	f894 c388 	ldrb.w	ip, [r4, #904]	; 0x388
 800711a:	f8a4 334a 	strh.w	r3, [r4, #842]	; 0x34a
 800711e:	f067 071b 	orn	r7, r7, #27
 8007122:	f065 051b 	orn	r5, r5, #27
 8007126:	f060 001b 	orn	r0, r0, #27
 800712a:	f061 011b 	orn	r1, r1, #27
 800712e:	f062 021b 	orn	r2, r2, #27
 8007132:	f884 734c 	strb.w	r7, [r4, #844]	; 0x34c
 8007136:	f884 5358 	strb.w	r5, [r4, #856]	; 0x358
 800713a:	f894 7394 	ldrb.w	r7, [r4, #916]	; 0x394
 800713e:	f894 53a0 	ldrb.w	r5, [r4, #928]	; 0x3a0
 8007142:	f884 0364 	strb.w	r0, [r4, #868]	; 0x364
 8007146:	f884 1370 	strb.w	r1, [r4, #880]	; 0x370
 800714a:	f894 03ac 	ldrb.w	r0, [r4, #940]	; 0x3ac
 800714e:	f894 13b8 	ldrb.w	r1, [r4, #952]	; 0x3b8
 8007152:	f884 237c 	strb.w	r2, [r4, #892]	; 0x37c
 8007156:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
 800715a:	f8a4 3356 	strh.w	r3, [r4, #854]	; 0x356
 800715e:	f060 001b 	orn	r0, r0, #27
 8007162:	f062 021b 	orn	r2, r2, #27
 8007166:	f06c 0c1b 	orn	ip, ip, #27
 800716a:	f067 071b 	orn	r7, r7, #27
 800716e:	f065 051b 	orn	r5, r5, #27
 8007172:	f061 011b 	orn	r1, r1, #27
 8007176:	f884 03ac 	strb.w	r0, [r4, #940]	; 0x3ac
 800717a:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238
 800717e:	f8a4 3362 	strh.w	r3, [r4, #866]	; 0x362
 8007182:	f8a4 336e 	strh.w	r3, [r4, #878]	; 0x36e
 8007186:	f8a4 337a 	strh.w	r3, [r4, #890]	; 0x37a
 800718a:	f8a4 3386 	strh.w	r3, [r4, #902]	; 0x386
 800718e:	f8a4 3392 	strh.w	r3, [r4, #914]	; 0x392
 8007192:	f8a4 339e 	strh.w	r3, [r4, #926]	; 0x39e
 8007196:	f8a4 33aa 	strh.w	r3, [r4, #938]	; 0x3aa
 800719a:	f8a4 33b6 	strh.w	r3, [r4, #950]	; 0x3b6
 800719e:	f884 c388 	strb.w	ip, [r4, #904]	; 0x388
 80071a2:	f884 7394 	strb.w	r7, [r4, #916]	; 0x394
 80071a6:	f884 53a0 	strb.w	r5, [r4, #928]	; 0x3a0
 80071aa:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
 80071ae:	4632      	mov	r2, r6
 80071b0:	f8a4 3236 	strh.w	r3, [r4, #566]	; 0x236
 80071b4:	f506 70c6 	add.w	r0, r6, #396	; 0x18c
 80071b8:	7a11      	ldrb	r1, [r2, #8]
 80071ba:	f892 3198 	ldrb.w	r3, [r2, #408]	; 0x198
 80071be:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 80071c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80071c6:	7211      	strb	r1, [r2, #8]
 80071c8:	f882 3198 	strb.w	r3, [r2, #408]	; 0x198
 80071cc:	320c      	adds	r2, #12
 80071ce:	4282      	cmp	r2, r0
 80071d0:	d1f2      	bne.n	80071b8 <Argus_Eval_Apply+0x2a0>
 80071d2:	e6c0      	b.n	8006f56 <Argus_Eval_Apply+0x3e>
 80071d4:	f504 7571 	add.w	r5, r4, #964	; 0x3c4
 80071d8:	4629      	mov	r1, r5
 80071da:	f207 12ad 	addw	r2, r7, #429	; 0x1ad
 80071de:	4630      	mov	r0, r6
 80071e0:	f7ff fe38 	bl	8006e54 <Argus_Eval_ApplyAuxEvaluation>
 80071e4:	8ba2      	ldrh	r2, [r4, #28]
 80071e6:	f8d6 0358 	ldr.w	r0, [r6, #856]	; 0x358
 80071ea:	f00d f841 	bl	8014270 <Argus_Cal_ApplyAuxCalibration>
 80071ee:	4621      	mov	r1, r4
 80071f0:	4630      	mov	r0, r6
 80071f2:	f7fe ff19 	bl	8006028 <ApplyPhaseEvaluation>
 80071f6:	f8d6 0350 	ldr.w	r0, [r6, #848]	; 0x350
 80071fa:	f007 ffe7 	bl	800f1cc <Argus_Dev_GetCfg>
 80071fe:	f8d0 70dc 	ldr.w	r7, [r0, #220]	; 0xdc
 8007202:	8ba3      	ldrh	r3, [r4, #28]
 8007204:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 8007208:	f504 750f 	add.w	r5, r4, #572	; 0x23c
 800720c:	b1a7      	cbz	r7, 8007238 <Argus_Eval_Apply+0x320>
 800720e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007212:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8007216:	fb02 6101 	mla	r1, r2, r1, r6
 800721a:	f8d6 8328 	ldr.w	r8, [r6, #808]	; 0x328
 800721e:	f8b1 218c 	ldrh.w	r2, [r1, #396]	; 0x18c
 8007222:	405a      	eors	r2, r3
 8007224:	0792      	lsls	r2, r2, #30
 8007226:	f000 81c7 	beq.w	80075b8 <Argus_Eval_Apply+0x6a0>
 800722a:	f1b8 0f00 	cmp.w	r8, #0
 800722e:	f280 82df 	bge.w	80077f0 <Argus_Eval_Apply+0x8d8>
 8007232:	2200      	movs	r2, #0
 8007234:	f8a4 23d0 	strh.w	r2, [r4, #976]	; 0x3d0
 8007238:	f003 0204 	and.w	r2, r3, #4
 800723c:	2a00      	cmp	r2, #0
 800723e:	bf18      	it	ne
 8007240:	2101      	movne	r1, #1
 8007242:	f04f 0200 	mov.w	r2, #0
 8007246:	bf08      	it	eq
 8007248:	2100      	moveq	r1, #0
 800724a:	f8b6 018e 	ldrh.w	r0, [r6, #398]	; 0x18e
 800724e:	920a      	str	r2, [sp, #40]	; 0x28
 8007250:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007254:	f8b6 118c 	ldrh.w	r1, [r6, #396]	; 0x18c
 8007258:	9206      	str	r2, [sp, #24]
 800725a:	f8a6 318c 	strh.w	r3, [r6, #396]	; 0x18c
 800725e:	e9cd 2207 	strd	r2, r2, [sp, #28]
 8007262:	9209      	str	r2, [sp, #36]	; 0x24
 8007264:	f8a6 031e 	strh.w	r0, [r6, #798]	; 0x31e
 8007268:	f8a6 e18e 	strh.w	lr, [r6, #398]	; 0x18e
 800726c:	f8a6 131c 	strh.w	r1, [r6, #796]	; 0x31c
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	f104 0c0c 	add.w	ip, r4, #12
 8007278:	f000 8184 	beq.w	8007584 <Argus_Eval_Apply+0x66c>
 800727c:	f8d6 1334 	ldr.w	r1, [r6, #820]	; 0x334
 8007280:	910b      	str	r1, [sp, #44]	; 0x2c
 8007282:	2b00      	cmp	r3, #0
 8007284:	d04b      	beq.n	800731e <Argus_Eval_Apply+0x406>
 8007286:	f8d6 2330 	ldr.w	r2, [r6, #816]	; 0x330
 800728a:	460b      	mov	r3, r1
 800728c:	4617      	mov	r7, r2
 800728e:	1aff      	subs	r7, r7, r3
 8007290:	d036      	beq.n	8007300 <Argus_Eval_Apply+0x3e8>
 8007292:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8007296:	ea87 7ee7 	eor.w	lr, r7, r7, asr #31
 800729a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800729e:	ebae 7ee7 	sub.w	lr, lr, r7, asr #31
 80072a2:	4573      	cmp	r3, lr
 80072a4:	ea82 0907 	eor.w	r9, r2, r7
 80072a8:	f240 8340 	bls.w	800792c <Argus_Eval_Apply+0xa14>
 80072ac:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 80072b0:	e001      	b.n	80072b6 <Argus_Eval_Apply+0x39e>
 80072b2:	4690      	mov	r8, r2
 80072b4:	4686      	mov	lr, r0
 80072b6:	ea4f 004e 	mov.w	r0, lr, lsl #1
 80072ba:	4283      	cmp	r3, r0
 80072bc:	ea4f 0248 	mov.w	r2, r8, lsl #1
 80072c0:	d8f7      	bhi.n	80072b2 <Argus_Eval_Apply+0x39a>
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	f000 82a1 	beq.w	800780a <Argus_Eval_Apply+0x8f2>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	f2c0 82b3 	blt.w	8007834 <Argus_Eval_Apply+0x91c>
 80072ce:	2700      	movs	r7, #0
 80072d0:	e000      	b.n	80072d4 <Argus_Eval_Apply+0x3bc>
 80072d2:	b153      	cbz	r3, 80072ea <Argus_Eval_Apply+0x3d2>
 80072d4:	4298      	cmp	r0, r3
 80072d6:	bf9c      	itt	ls
 80072d8:	1a1b      	subls	r3, r3, r0
 80072da:	4317      	orrls	r7, r2
 80072dc:	0852      	lsrs	r2, r2, #1
 80072de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072e2:	d1f6      	bne.n	80072d2 <Argus_Eval_Apply+0x3ba>
 80072e4:	4298      	cmp	r0, r3
 80072e6:	bf98      	it	ls
 80072e8:	3701      	addls	r7, #1
 80072ea:	f1b9 0f00 	cmp.w	r9, #0
 80072ee:	bfb8      	it	lt
 80072f0:	427f      	neglt	r7, r7
 80072f2:	2f00      	cmp	r7, #0
 80072f4:	f280 834f 	bge.w	8007996 <Argus_Eval_Apply+0xa7e>
 80072f8:	f1c7 0780 	rsb	r7, r7, #128	; 0x80
 80072fc:	0a3f      	lsrs	r7, r7, #8
 80072fe:	427f      	negs	r7, r7
 8007300:	f896 3320 	ldrb.w	r3, [r6, #800]	; 0x320
 8007304:	f896 2321 	ldrb.w	r2, [r6, #801]	; 0x321
 8007308:	9706      	str	r7, [sp, #24]
 800730a:	0a09      	lsrs	r1, r1, #8
 800730c:	fb03 f101 	mul.w	r1, r3, r1
 8007310:	f896 3322 	ldrb.w	r3, [r6, #802]	; 0x322
 8007314:	9108      	str	r1, [sp, #32]
 8007316:	01d2      	lsls	r2, r2, #7
 8007318:	041b      	lsls	r3, r3, #16
 800731a:	9207      	str	r2, [sp, #28]
 800731c:	9309      	str	r3, [sp, #36]	; 0x24
 800731e:	4661      	mov	r1, ip
 8007320:	aa0b      	add	r2, sp, #44	; 0x2c
 8007322:	f8d6 0358 	ldr.w	r0, [r6, #856]	; 0x358
 8007326:	f00c fef9 	bl	801411c <Argus_Cal_ApplyFrequencyTemperatureCompensation>
 800732a:	f04f 0800 	mov.w	r8, #0
 800732e:	f106 030c 	add.w	r3, r6, #12
 8007332:	46a4      	mov	ip, r4
 8007334:	e01c      	b.n	8007370 <Argus_Eval_Apply+0x458>
 8007336:	f04f 0200 	mov.w	r2, #0
 800733a:	80aa      	strh	r2, [r5, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	602a      	str	r2, [r5, #0]
 8007340:	f1a3 040c 	sub.w	r4, r3, #12
 8007344:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007348:	f503 77c2 	add.w	r7, r3, #388	; 0x184
 800734c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8007350:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007354:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007358:	f108 0801 	add.w	r8, r8, #1
 800735c:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
 8007360:	d075      	beq.n	800744e <Argus_Eval_Apply+0x536>
 8007362:	f1b8 0f20 	cmp.w	r8, #32
 8007366:	bf14      	ite	ne
 8007368:	350c      	addne	r5, #12
 800736a:	f50c 750c 	addeq.w	r5, ip, #560	; 0x230
 800736e:	330c      	adds	r3, #12
 8007370:	7a28      	ldrb	r0, [r5, #8]
 8007372:	f010 0a01 	ands.w	sl, r0, #1
 8007376:	d1de      	bne.n	8007336 <Argus_Eval_Apply+0x41e>
 8007378:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800737a:	88a9      	ldrh	r1, [r5, #4]
 800737c:	9a06      	ldr	r2, [sp, #24]
 800737e:	f3c7 0e0e 	ubfx	lr, r7, #0, #15
 8007382:	fb01 fe0e 	mul.w	lr, r1, lr
 8007386:	0bfc      	lsrs	r4, r7, #15
 8007388:	f50e 4e80 	add.w	lr, lr, #16384	; 0x4000
 800738c:	fb01 f404 	mul.w	r4, r1, r4
 8007390:	eb04 34de 	add.w	r4, r4, lr, lsr #15
 8007394:	2a00      	cmp	r2, #0
 8007396:	f000 80d3 	beq.w	8007540 <Argus_Eval_Apply+0x628>
 800739a:	f1b8 0f20 	cmp.w	r8, #32
 800739e:	f000 80b7 	beq.w	8007510 <Argus_Eval_Apply+0x5f8>
 80073a2:	f913 ec03 	ldrsb.w	lr, [r3, #-3]
 80073a6:	f885 e009 	strb.w	lr, [r5, #9]
 80073aa:	f813 9c04 	ldrb.w	r9, [r3, #-4]
 80073ae:	f893 b18c 	ldrb.w	fp, [r3, #396]	; 0x18c
 80073b2:	ea49 090b 	orr.w	r9, r9, fp
 80073b6:	ea40 0909 	orr.w	r9, r0, r9
 80073ba:	f019 0f22 	tst.w	r9, #34	; 0x22
 80073be:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80073c2:	d05e      	beq.n	8007482 <Argus_Eval_Apply+0x56a>
 80073c4:	0781      	lsls	r1, r0, #30
 80073c6:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 80073ca:	bf58      	it	pl
 80073cc:	fb07 440e 	mlapl	r4, r7, lr, r4
 80073d0:	722a      	strb	r2, [r5, #8]
 80073d2:	bf48      	it	mi
 80073d4:	f885 a009 	strbmi.w	sl, [r5, #9]
 80073d8:	4627      	mov	r7, r4
 80073da:	f8b5 e006 	ldrh.w	lr, [r5, #6]
 80073de:	f833 1c06 	ldrh.w	r1, [r3, #-6]
 80073e2:	f896 0324 	ldrb.w	r0, [r6, #804]	; 0x324
 80073e6:	f896 9323 	ldrb.w	r9, [r6, #803]	; 0x323
 80073ea:	ebae 0201 	sub.w	r2, lr, r1
 80073ee:	2a00      	cmp	r2, #0
 80073f0:	dd39      	ble.n	8007466 <Argus_Eval_Apply+0x54e>
 80073f2:	fb01 f109 	mul.w	r1, r1, r9
 80073f6:	ebb2 1f11 	cmp.w	r2, r1, lsr #4
 80073fa:	bfcc      	ite	gt
 80073fc:	2101      	movgt	r1, #1
 80073fe:	2100      	movle	r1, #0
 8007400:	2900      	cmp	r1, #0
 8007402:	d13b      	bne.n	800747c <Argus_Eval_Apply+0x564>
 8007404:	f3c2 094f 	ubfx	r9, r2, #1, #16
 8007408:	f1a3 0e0c 	sub.w	lr, r3, #12
 800740c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8007410:	f503 7ac2 	add.w	sl, r3, #388	; 0x184
 8007414:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8007418:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800741c:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8007420:	88ea      	ldrh	r2, [r5, #6]
 8007422:	7a29      	ldrb	r1, [r5, #8]
 8007424:	f843 4c0c 	str.w	r4, [r3, #-12]
 8007428:	eba2 0209 	sub.w	r2, r2, r9
 800742c:	80ea      	strh	r2, [r5, #6]
 800742e:	068a      	lsls	r2, r1, #26
 8007430:	f140 8089 	bpl.w	8007546 <Argus_Eval_Apply+0x62e>
 8007434:	f8bc 201c 	ldrh.w	r2, [ip, #28]
 8007438:	f108 0801 	add.w	r8, r8, #1
 800743c:	f012 0f08 	tst.w	r2, #8
 8007440:	bf08      	it	eq
 8007442:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000
 8007446:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
 800744a:	602f      	str	r7, [r5, #0]
 800744c:	d189      	bne.n	8007362 <Argus_Eval_Apply+0x44a>
 800744e:	4664      	mov	r4, ip
 8007450:	4661      	mov	r1, ip
 8007452:	f8d6 0358 	ldr.w	r0, [r6, #856]	; 0x358
 8007456:	f00d fc35 	bl	8014cc4 <Argus_Cal_ApplyCalibration>
 800745a:	4621      	mov	r1, r4
 800745c:	f506 704f 	add.w	r0, r6, #828	; 0x33c
 8007460:	f000 fb0c 	bl	8007a7c <Argus_Pba_Apply>
 8007464:	e567      	b.n	8006f36 <Argus_Eval_Apply+0x1e>
 8007466:	fb01 f000 	mul.w	r0, r1, r0
 800746a:	eba1 010e 	sub.w	r1, r1, lr
 800746e:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 8007472:	bfcc      	ite	gt
 8007474:	2101      	movgt	r1, #1
 8007476:	2100      	movle	r1, #0
 8007478:	2900      	cmp	r1, #0
 800747a:	d0c3      	beq.n	8007404 <Argus_Eval_Apply+0x4ec>
 800747c:	f04f 0900 	mov.w	r9, #0
 8007480:	e7c2      	b.n	8007408 <Argus_Eval_Apply+0x4f0>
 8007482:	f8b3 9188 	ldrh.w	r9, [r3, #392]	; 0x188
 8007486:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800748a:	eba1 0909 	sub.w	r9, r1, r9
 800748e:	fa0f f989 	sxth.w	r9, r9
 8007492:	f1ba 0f00 	cmp.w	sl, #0
 8007496:	d004      	beq.n	80074a2 <Argus_Eval_Apply+0x58a>
 8007498:	f1b9 0f00 	cmp.w	r9, #0
 800749c:	dd1c      	ble.n	80074d8 <Argus_Eval_Apply+0x5c0>
 800749e:	45d1      	cmp	r9, sl
 80074a0:	dc1e      	bgt.n	80074e0 <Argus_Eval_Apply+0x5c8>
 80074a2:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
 80074a6:	f833 ac08 	ldrh.w	sl, [r3, #-8]
 80074aa:	f3c9 094f 	ubfx	r9, r9, #1, #16
 80074ae:	f1bb 0f00 	cmp.w	fp, #0
 80074b2:	d05b      	beq.n	800756c <Argus_Eval_Apply+0x654>
 80074b4:	eba1 0a0a 	sub.w	sl, r1, sl
 80074b8:	ebaa 0909 	sub.w	r9, sl, r9
 80074bc:	fa1f f989 	uxth.w	r9, r9
 80074c0:	fb02 f209 	mul.w	r2, r2, r9
 80074c4:	0209      	lsls	r1, r1, #8
 80074c6:	ebb2 0901 	subs.w	r9, r2, r1
 80074ca:	d510      	bpl.n	80074ee <Argus_Eval_Apply+0x5d6>
 80074cc:	1a89      	subs	r1, r1, r2
 80074ce:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 80074d2:	d362      	bcc.n	800759a <Argus_Eval_Apply+0x682>
 80074d4:	2200      	movs	r2, #0
 80074d6:	e00d      	b.n	80074f4 <Argus_Eval_Apply+0x5dc>
 80074d8:	f1c9 0b00 	rsb	fp, r9, #0
 80074dc:	45da      	cmp	sl, fp
 80074de:	dae0      	bge.n	80074a2 <Argus_Eval_Apply+0x58a>
 80074e0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80074e4:	fb07 440e 	mla	r4, r7, lr, r4
 80074e8:	7228      	strb	r0, [r5, #8]
 80074ea:	4627      	mov	r7, r4
 80074ec:	e775      	b.n	80073da <Argus_Eval_Apply+0x4c2>
 80074ee:	f509 0200 	add.w	r2, r9, #8388608	; 0x800000
 80074f2:	1612      	asrs	r2, r2, #24
 80074f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074f6:	b141      	cbz	r1, 800750a <Argus_Eval_Apply+0x5f2>
 80074f8:	eba9 6902 	sub.w	r9, r9, r2, lsl #24
 80074fc:	f1b9 0f00 	cmp.w	r9, #0
 8007500:	bfb8      	it	lt
 8007502:	f1c9 0900 	rsblt	r9, r9, #0
 8007506:	4549      	cmp	r1, r9
 8007508:	d3ea      	bcc.n	80074e0 <Argus_Eval_Apply+0x5c8>
 800750a:	726a      	strb	r2, [r5, #9]
 800750c:	fb07 4402 	mla	r4, r7, r2, r4
 8007510:	f000 0240 	and.w	r2, r0, #64	; 0x40
 8007514:	b992      	cbnz	r2, 800753c <Argus_Eval_Apply+0x624>
 8007516:	9908      	ldr	r1, [sp, #32]
 8007518:	b181      	cbz	r1, 800753c <Argus_Eval_Apply+0x624>
 800751a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800751e:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 8007522:	4422      	add	r2, r4
 8007524:	eba7 0762 	sub.w	r7, r7, r2, asr #1
 8007528:	107f      	asrs	r7, r7, #1
 800752a:	2f00      	cmp	r7, #0
 800752c:	dd24      	ble.n	8007578 <Argus_Eval_Apply+0x660>
 800752e:	42b9      	cmp	r1, r7
 8007530:	bfac      	ite	ge
 8007532:	2100      	movge	r1, #0
 8007534:	2101      	movlt	r1, #1
 8007536:	b9a1      	cbnz	r1, 8007562 <Argus_Eval_Apply+0x64a>
 8007538:	4427      	add	r7, r4
 800753a:	e74e      	b.n	80073da <Argus_Eval_Apply+0x4c2>
 800753c:	4627      	mov	r7, r4
 800753e:	e74c      	b.n	80073da <Argus_Eval_Apply+0x4c2>
 8007540:	4691      	mov	r9, r2
 8007542:	4627      	mov	r7, r4
 8007544:	e760      	b.n	8007408 <Argus_Eval_Apply+0x4f0>
 8007546:	064c      	lsls	r4, r1, #25
 8007548:	d509      	bpl.n	800755e <Argus_Eval_Apply+0x646>
 800754a:	f8bc 201c 	ldrh.w	r2, [ip, #28]
 800754e:	0710      	lsls	r0, r2, #28
 8007550:	bf58      	it	pl
 8007552:	682f      	ldrpl	r7, [r5, #0]
 8007554:	602f      	str	r7, [r5, #0]
 8007556:	f061 017f 	orn	r1, r1, #127	; 0x7f
 800755a:	7229      	strb	r1, [r5, #8]
 800755c:	e6fc      	b.n	8007358 <Argus_Eval_Apply+0x440>
 800755e:	602f      	str	r7, [r5, #0]
 8007560:	e6fa      	b.n	8007358 <Argus_Eval_Apply+0x440>
 8007562:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8007566:	7228      	strb	r0, [r5, #8]
 8007568:	4627      	mov	r7, r4
 800756a:	e736      	b.n	80073da <Argus_Eval_Apply+0x4c2>
 800756c:	ebaa 0a01 	sub.w	sl, sl, r1
 8007570:	44d1      	add	r9, sl
 8007572:	fa1f f989 	uxth.w	r9, r9
 8007576:	e7a3      	b.n	80074c0 <Argus_Eval_Apply+0x5a8>
 8007578:	427a      	negs	r2, r7
 800757a:	4291      	cmp	r1, r2
 800757c:	bfac      	ite	ge
 800757e:	2100      	movge	r1, #0
 8007580:	2101      	movlt	r1, #1
 8007582:	e7d8      	b.n	8007536 <Argus_Eval_Apply+0x61e>
 8007584:	f8d6 1330 	ldr.w	r1, [r6, #816]	; 0x330
 8007588:	910b      	str	r1, [sp, #44]	; 0x2c
 800758a:	2b00      	cmp	r3, #0
 800758c:	f43f aec7 	beq.w	800731e <Argus_Eval_Apply+0x406>
 8007590:	f8d6 2334 	ldr.w	r2, [r6, #820]	; 0x334
 8007594:	460f      	mov	r7, r1
 8007596:	4613      	mov	r3, r2
 8007598:	e679      	b.n	800728e <Argus_Eval_Apply+0x376>
 800759a:	f501 0200 	add.w	r2, r1, #8388608	; 0x800000
 800759e:	0e12      	lsrs	r2, r2, #24
 80075a0:	4252      	negs	r2, r2
 80075a2:	b252      	sxtb	r2, r2
 80075a4:	e7a6      	b.n	80074f4 <Argus_Eval_Apply+0x5dc>
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7ff fadc 	bl	8006b64 <Argus_Eval_Update>
 80075ac:	4621      	mov	r1, r4
 80075ae:	f8d6 0350 	ldr.w	r0, [r6, #848]	; 0x350
 80075b2:	f007 fd25 	bl	800f000 <Argus_Dev_ClearUpdateFlag>
 80075b6:	e4e9      	b.n	8006f8c <Argus_Eval_Apply+0x74>
 80075b8:	f8b1 218e 	ldrh.w	r2, [r1, #398]	; 0x18e
 80075bc:	4572      	cmp	r2, lr
 80075be:	f47f ae34 	bne.w	800722a <Argus_Eval_Apply+0x312>
 80075c2:	9101      	str	r1, [sp, #4]
 80075c4:	ea4f 228e 	mov.w	r2, lr, lsl #10
 80075c8:	f1be 0f00 	cmp.w	lr, #0
 80075cc:	f000 815c 	beq.w	8007888 <Argus_Eval_Apply+0x970>
 80075d0:	ea82 7ce2 	eor.w	ip, r2, r2, asr #31
 80075d4:	ebac 7ce2 	sub.w	ip, ip, r2, asr #31
 80075d8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80075dc:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 80075e0:	f300 8176 	bgt.w	80078d0 <Argus_Eval_Apply+0x9b8>
 80075e4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80075e8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80075ec:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80075f0:	d9f8      	bls.n	80075e4 <Argus_Eval_Apply+0x6cc>
 80075f2:	9101      	str	r1, [sp, #4]
 80075f4:	f1b9 0f00 	cmp.w	r9, #0
 80075f8:	f040 816a 	bne.w	80078d0 <Argus_Eval_Apply+0x9b8>
 80075fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007600:	9102      	str	r1, [sp, #8]
 8007602:	2a00      	cmp	r2, #0
 8007604:	f000 8141 	beq.w	800788a <Argus_Eval_Apply+0x972>
 8007608:	2a00      	cmp	r2, #0
 800760a:	bfb8      	it	lt
 800760c:	4252      	neglt	r2, r2
 800760e:	2aff      	cmp	r2, #255	; 0xff
 8007610:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8007614:	f300 813c 	bgt.w	8007890 <Argus_Eval_Apply+0x978>
 8007618:	9901      	ldr	r1, [sp, #4]
 800761a:	0052      	lsls	r2, r2, #1
 800761c:	2aff      	cmp	r2, #255	; 0xff
 800761e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007622:	d9fa      	bls.n	800761a <Argus_Eval_Apply+0x702>
 8007624:	9101      	str	r1, [sp, #4]
 8007626:	f1bc 0f00 	cmp.w	ip, #0
 800762a:	f040 8131 	bne.w	8007890 <Argus_Eval_Apply+0x978>
 800762e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007632:	4692      	mov	sl, r2
 8007634:	2200      	movs	r2, #0
 8007636:	4693      	mov	fp, r2
 8007638:	9305      	str	r3, [sp, #20]
 800763a:	9901      	ldr	r1, [sp, #4]
 800763c:	9b02      	ldr	r3, [sp, #8]
 800763e:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8007642:	46ac      	mov	ip, r5
 8007644:	4650      	mov	r0, sl
 8007646:	465d      	mov	r5, fp
 8007648:	f082 090e 	eor.w	r9, r2, #14
 800764c:	fa27 f909 	lsr.w	r9, r7, r9
 8007650:	f019 0f01 	tst.w	r9, #1
 8007654:	d019      	beq.n	800768a <Argus_Eval_Apply+0x772>
 8007656:	f89c 9008 	ldrb.w	r9, [ip, #8]
 800765a:	f019 0f03 	tst.w	r9, #3
 800765e:	d114      	bne.n	800768a <Argus_Eval_Apply+0x772>
 8007660:	f891 9008 	ldrb.w	r9, [r1, #8]
 8007664:	f019 0f03 	tst.w	r9, #3
 8007668:	d10f      	bne.n	800768a <Argus_Eval_Apply+0x772>
 800766a:	f8bc a00a 	ldrh.w	sl, [ip, #10]
 800766e:	f8b1 900a 	ldrh.w	r9, [r1, #10]
 8007672:	fb03 fa0a 	mul.w	sl, r3, sl
 8007676:	fb00 a919 	mls	r9, r0, r9, sl
 800767a:	f1b9 0f00 	cmp.w	r9, #0
 800767e:	bfb8      	it	lt
 8007680:	f1c9 0900 	rsblt	r9, r9, #0
 8007684:	f10b 0b01 	add.w	fp, fp, #1
 8007688:	444d      	add	r5, r9
 800768a:	f082 090f 	eor.w	r9, r2, #15
 800768e:	fa27 f909 	lsr.w	r9, r7, r9
 8007692:	f019 0f01 	tst.w	r9, #1
 8007696:	d019      	beq.n	80076cc <Argus_Eval_Apply+0x7b4>
 8007698:	f89c 9014 	ldrb.w	r9, [ip, #20]
 800769c:	f019 0f03 	tst.w	r9, #3
 80076a0:	d114      	bne.n	80076cc <Argus_Eval_Apply+0x7b4>
 80076a2:	f891 9014 	ldrb.w	r9, [r1, #20]
 80076a6:	f019 0f03 	tst.w	r9, #3
 80076aa:	d10f      	bne.n	80076cc <Argus_Eval_Apply+0x7b4>
 80076ac:	f8bc a016 	ldrh.w	sl, [ip, #22]
 80076b0:	f8b1 9016 	ldrh.w	r9, [r1, #22]
 80076b4:	fb03 fa0a 	mul.w	sl, r3, sl
 80076b8:	fb00 a919 	mls	r9, r0, r9, sl
 80076bc:	f1b9 0f00 	cmp.w	r9, #0
 80076c0:	bfb8      	it	lt
 80076c2:	f1c9 0900 	rsblt	r9, r9, #0
 80076c6:	f10b 0b01 	add.w	fp, fp, #1
 80076ca:	444d      	add	r5, r9
 80076cc:	f082 091e 	eor.w	r9, r2, #30
 80076d0:	fa27 f909 	lsr.w	r9, r7, r9
 80076d4:	f019 0f01 	tst.w	r9, #1
 80076d8:	d019      	beq.n	800770e <Argus_Eval_Apply+0x7f6>
 80076da:	f89c 9020 	ldrb.w	r9, [ip, #32]
 80076de:	f019 0f03 	tst.w	r9, #3
 80076e2:	d114      	bne.n	800770e <Argus_Eval_Apply+0x7f6>
 80076e4:	f891 9020 	ldrb.w	r9, [r1, #32]
 80076e8:	f019 0f03 	tst.w	r9, #3
 80076ec:	d10f      	bne.n	800770e <Argus_Eval_Apply+0x7f6>
 80076ee:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
 80076f2:	f8b1 9022 	ldrh.w	r9, [r1, #34]	; 0x22
 80076f6:	fb03 fa0a 	mul.w	sl, r3, sl
 80076fa:	fb00 a919 	mls	r9, r0, r9, sl
 80076fe:	f1b9 0f00 	cmp.w	r9, #0
 8007702:	bfb8      	it	lt
 8007704:	f1c9 0900 	rsblt	r9, r9, #0
 8007708:	f10b 0b01 	add.w	fp, fp, #1
 800770c:	444d      	add	r5, r9
 800770e:	f082 091f 	eor.w	r9, r2, #31
 8007712:	fa27 f909 	lsr.w	r9, r7, r9
 8007716:	f019 0f01 	tst.w	r9, #1
 800771a:	d019      	beq.n	8007750 <Argus_Eval_Apply+0x838>
 800771c:	f89c 902c 	ldrb.w	r9, [ip, #44]	; 0x2c
 8007720:	f019 0f03 	tst.w	r9, #3
 8007724:	d114      	bne.n	8007750 <Argus_Eval_Apply+0x838>
 8007726:	f891 902c 	ldrb.w	r9, [r1, #44]	; 0x2c
 800772a:	f019 0f03 	tst.w	r9, #3
 800772e:	d10f      	bne.n	8007750 <Argus_Eval_Apply+0x838>
 8007730:	f8bc a02e 	ldrh.w	sl, [ip, #46]	; 0x2e
 8007734:	f8b1 902e 	ldrh.w	r9, [r1, #46]	; 0x2e
 8007738:	fb03 fa0a 	mul.w	sl, r3, sl
 800773c:	fb00 a919 	mls	r9, r0, r9, sl
 8007740:	f1b9 0f00 	cmp.w	r9, #0
 8007744:	bfb8      	it	lt
 8007746:	f1c9 0900 	rsblt	r9, r9, #0
 800774a:	f10b 0b01 	add.w	fp, fp, #1
 800774e:	444d      	add	r5, r9
 8007750:	3202      	adds	r2, #2
 8007752:	2a10      	cmp	r2, #16
 8007754:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8007758:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800775c:	f47f af74 	bne.w	8007648 <Argus_Eval_Apply+0x730>
 8007760:	4629      	mov	r1, r5
 8007762:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 8007766:	9d03      	ldr	r5, [sp, #12]
 8007768:	f1bb 0f00 	cmp.w	fp, #0
 800776c:	f43f ad5d 	beq.w	800722a <Argus_Eval_Apply+0x312>
 8007770:	ea5f 220b 	movs.w	r2, fp, lsl #8
 8007774:	f000 80cd 	beq.w	8007912 <Argus_Eval_Apply+0x9fa>
 8007778:	2900      	cmp	r1, #0
 800777a:	ea82 7ce2 	eor.w	ip, r2, r2, asr #31
 800777e:	460f      	mov	r7, r1
 8007780:	ebac 7ce2 	sub.w	ip, ip, r2, asr #31
 8007784:	bfb8      	it	lt
 8007786:	424f      	neglt	r7, r1
 8007788:	4567      	cmp	r7, ip
 800778a:	ea81 0102 	eor.w	r1, r1, r2
 800778e:	460a      	mov	r2, r1
 8007790:	f240 810d 	bls.w	80079ae <Argus_Eval_Apply+0xa96>
 8007794:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8007798:	e001      	b.n	800779e <Argus_Eval_Apply+0x886>
 800779a:	468a      	mov	sl, r1
 800779c:	46cc      	mov	ip, r9
 800779e:	ea4f 094c 	mov.w	r9, ip, lsl #1
 80077a2:	454f      	cmp	r7, r9
 80077a4:	ea4f 014a 	mov.w	r1, sl, lsl #1
 80077a8:	d8f7      	bhi.n	800779a <Argus_Eval_Apply+0x882>
 80077aa:	b3a9      	cbz	r1, 8007818 <Argus_Eval_Apply+0x900>
 80077ac:	f1b9 0f00 	cmp.w	r9, #0
 80077b0:	f2c0 80ea 	blt.w	8007988 <Argus_Eval_Apply+0xa70>
 80077b4:	f04f 0c00 	mov.w	ip, #0
 80077b8:	e000      	b.n	80077bc <Argus_Eval_Apply+0x8a4>
 80077ba:	b16f      	cbz	r7, 80077d8 <Argus_Eval_Apply+0x8c0>
 80077bc:	45b9      	cmp	r9, r7
 80077be:	bf9c      	itt	ls
 80077c0:	eba7 0709 	subls.w	r7, r7, r9
 80077c4:	ea4c 0c01 	orrls.w	ip, ip, r1
 80077c8:	0849      	lsrs	r1, r1, #1
 80077ca:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80077ce:	d1f4      	bne.n	80077ba <Argus_Eval_Apply+0x8a2>
 80077d0:	454f      	cmp	r7, r9
 80077d2:	bf28      	it	cs
 80077d4:	f10c 0c01 	addcs.w	ip, ip, #1
 80077d8:	2a00      	cmp	r2, #0
 80077da:	bfb8      	it	lt
 80077dc:	f1cc 0c00 	rsblt	ip, ip, #0
 80077e0:	f1b8 0f00 	cmp.w	r8, #0
 80077e4:	4662      	mov	r2, ip
 80077e6:	da2c      	bge.n	8007842 <Argus_Eval_Apply+0x92a>
 80077e8:	46e0      	mov	r8, ip
 80077ea:	f8c6 8328 	str.w	r8, [r6, #808]	; 0x328
 80077ee:	e51c      	b.n	800722a <Argus_Eval_Apply+0x312>
 80077f0:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 80077f4:	ea4f 3818 	mov.w	r8, r8, lsr #12
 80077f8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80077fc:	4590      	cmp	r8, r2
 80077fe:	d816      	bhi.n	800782e <Argus_Eval_Apply+0x916>
 8007800:	fa1f f888 	uxth.w	r8, r8
 8007804:	f8a4 83d0 	strh.w	r8, [r4, #976]	; 0x3d0
 8007808:	e516      	b.n	8007238 <Argus_Eval_Apply+0x320>
 800780a:	f1b9 0f00 	cmp.w	r9, #0
 800780e:	4f73      	ldr	r7, [pc, #460]	; (80079dc <Argus_Eval_Apply+0xac4>)
 8007810:	bfa8      	it	ge
 8007812:	f44f 0700 	movge.w	r7, #8388608	; 0x800000
 8007816:	e573      	b.n	8007300 <Argus_Eval_Apply+0x3e8>
 8007818:	2a00      	cmp	r2, #0
 800781a:	f2c0 80cb 	blt.w	80079b4 <Argus_Eval_Apply+0xa9c>
 800781e:	f1b8 0f00 	cmp.w	r8, #0
 8007822:	f280 80a9 	bge.w	8007978 <Argus_Eval_Apply+0xa60>
 8007826:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800782a:	f8c6 2328 	str.w	r2, [r6, #808]	; 0x328
 800782e:	f64f 78fe 	movw	r8, #65534	; 0xfffe
 8007832:	e7e7      	b.n	8007804 <Argus_Eval_Apply+0x8ec>
 8007834:	f038 4200 	bics.w	r2, r8, #2147483648	; 0x80000000
 8007838:	4670      	mov	r0, lr
 800783a:	f47f ad48 	bne.w	80072ce <Argus_Eval_Apply+0x3b6>
 800783e:	4617      	mov	r7, r2
 8007840:	e550      	b.n	80072e4 <Argus_Eval_Apply+0x3cc>
 8007842:	f890 00d5 	ldrb.w	r0, [r0, #213]	; 0xd5
 8007846:	2800      	cmp	r0, #0
 8007848:	d0ce      	beq.n	80077e8 <Argus_Eval_Apply+0x8d0>
 800784a:	4542      	cmp	r2, r8
 800784c:	4601      	mov	r1, r0
 800784e:	dd76      	ble.n	800793e <Argus_Eval_Apply+0xa26>
 8007850:	eba2 0208 	sub.w	r2, r2, r8
 8007854:	b291      	uxth	r1, r2
 8007856:	0c12      	lsrs	r2, r2, #16
 8007858:	fb00 f101 	mul.w	r1, r0, r1
 800785c:	fb00 f202 	mul.w	r2, r0, r2
 8007860:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007864:	0410      	lsls	r0, r2, #16
 8007866:	fa10 f181 	uxtah	r1, r0, r1
 800786a:	f111 0f81 	cmn.w	r1, #129	; 0x81
 800786e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007872:	bf98      	it	ls
 8007874:	3180      	addls	r1, #128	; 0x80
 8007876:	ea4f 6202 	mov.w	r2, r2, lsl #24
 800787a:	bf94      	ite	ls
 800787c:	0a09      	lsrls	r1, r1, #8
 800787e:	f04f 7180 	movhi.w	r1, #16777216	; 0x1000000
 8007882:	4490      	add	r8, r2
 8007884:	4488      	add	r8, r1
 8007886:	e7b0      	b.n	80077ea <Argus_Eval_Apply+0x8d2>
 8007888:	9202      	str	r2, [sp, #8]
 800788a:	2200      	movs	r2, #0
 800788c:	4692      	mov	sl, r2
 800788e:	e6d1      	b.n	8007634 <Argus_Eval_Apply+0x71c>
 8007890:	f44f 7980 	mov.w	r9, #256	; 0x100
 8007894:	2100      	movs	r1, #0
 8007896:	46cb      	mov	fp, r9
 8007898:	468a      	mov	sl, r1
 800789a:	4691      	mov	r9, r2
 800789c:	9901      	ldr	r1, [sp, #4]
 800789e:	465a      	mov	r2, fp
 80078a0:	e001      	b.n	80078a6 <Argus_Eval_Apply+0x98e>
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	d040      	beq.n	8007928 <Argus_Eval_Apply+0xa10>
 80078a6:	4591      	cmp	r9, r2
 80078a8:	bf9c      	itt	ls
 80078aa:	eba2 0209 	subls.w	r2, r2, r9
 80078ae:	ea4a 0a0c 	orrls.w	sl, sl, ip
 80078b2:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
 80078b6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80078ba:	d1f2      	bne.n	80078a2 <Argus_Eval_Apply+0x98a>
 80078bc:	4694      	mov	ip, r2
 80078be:	464a      	mov	r2, r9
 80078c0:	4562      	cmp	r2, ip
 80078c2:	9101      	str	r1, [sp, #4]
 80078c4:	f63f aeb6 	bhi.w	8007634 <Argus_Eval_Apply+0x71c>
 80078c8:	4652      	mov	r2, sl
 80078ca:	3201      	adds	r2, #1
 80078cc:	4692      	mov	sl, r2
 80078ce:	e6b1      	b.n	8007634 <Argus_Eval_Apply+0x71c>
 80078d0:	2100      	movs	r1, #0
 80078d2:	f44f 7a80 	mov.w	sl, #256	; 0x100
 80078d6:	469b      	mov	fp, r3
 80078d8:	4653      	mov	r3, sl
 80078da:	468a      	mov	sl, r1
 80078dc:	9901      	ldr	r1, [sp, #4]
 80078de:	e000      	b.n	80078e2 <Argus_Eval_Apply+0x9ca>
 80078e0:	b1f3      	cbz	r3, 8007920 <Argus_Eval_Apply+0xa08>
 80078e2:	4563      	cmp	r3, ip
 80078e4:	bf24      	itt	cs
 80078e6:	eba3 030c 	subcs.w	r3, r3, ip
 80078ea:	ea4a 0a09 	orrcs.w	sl, sl, r9
 80078ee:	ea5f 0959 	movs.w	r9, r9, lsr #1
 80078f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80078f6:	d1f3      	bne.n	80078e0 <Argus_Eval_Apply+0x9c8>
 80078f8:	46d1      	mov	r9, sl
 80078fa:	f8cd a008 	str.w	sl, [sp, #8]
 80078fe:	469a      	mov	sl, r3
 8007900:	45e2      	cmp	sl, ip
 8007902:	465b      	mov	r3, fp
 8007904:	9101      	str	r1, [sp, #4]
 8007906:	f4ff ae7c 	bcc.w	8007602 <Argus_Eval_Apply+0x6ea>
 800790a:	4649      	mov	r1, r9
 800790c:	3101      	adds	r1, #1
 800790e:	9102      	str	r1, [sp, #8]
 8007910:	e677      	b.n	8007602 <Argus_Eval_Apply+0x6ea>
 8007912:	f1b8 0f00 	cmp.w	r8, #0
 8007916:	da0f      	bge.n	8007938 <Argus_Eval_Apply+0xa20>
 8007918:	f8c6 2328 	str.w	r2, [r6, #808]	; 0x328
 800791c:	4690      	mov	r8, r2
 800791e:	e76f      	b.n	8007800 <Argus_Eval_Apply+0x8e8>
 8007920:	465b      	mov	r3, fp
 8007922:	e9cd 1a01 	strd	r1, sl, [sp, #4]
 8007926:	e66c      	b.n	8007602 <Argus_Eval_Apply+0x6ea>
 8007928:	9101      	str	r1, [sp, #4]
 800792a:	e683      	b.n	8007634 <Argus_Eval_Apply+0x71c>
 800792c:	bbbb      	cbnz	r3, 800799e <Argus_Eval_Apply+0xa86>
 800792e:	f1b9 0f00 	cmp.w	r9, #0
 8007932:	db31      	blt.n	8007998 <Argus_Eval_Apply+0xa80>
 8007934:	461f      	mov	r7, r3
 8007936:	e4e3      	b.n	8007300 <Argus_Eval_Apply+0x3e8>
 8007938:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
 800793c:	b399      	cbz	r1, 80079a6 <Argus_Eval_Apply+0xa8e>
 800793e:	eba8 0202 	sub.w	r2, r8, r2
 8007942:	b290      	uxth	r0, r2
 8007944:	0c12      	lsrs	r2, r2, #16
 8007946:	fb01 f000 	mul.w	r0, r1, r0
 800794a:	fb01 f102 	mul.w	r1, r1, r2
 800794e:	eb01 4210 	add.w	r2, r1, r0, lsr #16
 8007952:	0411      	lsls	r1, r2, #16
 8007954:	fa11 f080 	uxtah	r0, r1, r0
 8007958:	f110 0f81 	cmn.w	r0, #129	; 0x81
 800795c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007960:	ea4f 6202 	mov.w	r2, r2, lsl #24
 8007964:	bf9a      	itte	ls
 8007966:	3080      	addls	r0, #128	; 0x80
 8007968:	0a01      	lsrls	r1, r0, #8
 800796a:	f04f 7180 	movhi.w	r1, #16777216	; 0x1000000
 800796e:	eba8 0802 	sub.w	r8, r8, r2
 8007972:	eba8 0801 	sub.w	r8, r8, r1
 8007976:	e738      	b.n	80077ea <Argus_Eval_Apply+0x8d2>
 8007978:	f890 00d5 	ldrb.w	r0, [r0, #213]	; 0xd5
 800797c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007980:	2800      	cmp	r0, #0
 8007982:	f47f af62 	bne.w	800784a <Argus_Eval_Apply+0x932>
 8007986:	e750      	b.n	800782a <Argus_Eval_Apply+0x912>
 8007988:	f03a 4100 	bics.w	r1, sl, #2147483648	; 0x80000000
 800798c:	46e1      	mov	r9, ip
 800798e:	f47f af11 	bne.w	80077b4 <Argus_Eval_Apply+0x89c>
 8007992:	468c      	mov	ip, r1
 8007994:	e71c      	b.n	80077d0 <Argus_Eval_Apply+0x8b8>
 8007996:	463b      	mov	r3, r7
 8007998:	3380      	adds	r3, #128	; 0x80
 800799a:	0a1f      	lsrs	r7, r3, #8
 800799c:	e4b0      	b.n	8007300 <Argus_Eval_Apply+0x3e8>
 800799e:	4670      	mov	r0, lr
 80079a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80079a4:	e493      	b.n	80072ce <Argus_Eval_Apply+0x3b6>
 80079a6:	f8c6 1328 	str.w	r1, [r6, #808]	; 0x328
 80079aa:	4688      	mov	r8, r1
 80079ac:	e728      	b.n	8007800 <Argus_Eval_Apply+0x8e8>
 80079ae:	b94f      	cbnz	r7, 80079c4 <Argus_Eval_Apply+0xaac>
 80079b0:	46bc      	mov	ip, r7
 80079b2:	e711      	b.n	80077d8 <Argus_Eval_Apply+0x8c0>
 80079b4:	f1b8 0f00 	cmp.w	r8, #0
 80079b8:	da08      	bge.n	80079cc <Argus_Eval_Apply+0xab4>
 80079ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079be:	f8c6 2328 	str.w	r2, [r6, #808]	; 0x328
 80079c2:	e436      	b.n	8007232 <Argus_Eval_Apply+0x31a>
 80079c4:	46e1      	mov	r9, ip
 80079c6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80079ca:	e6f3      	b.n	80077b4 <Argus_Eval_Apply+0x89c>
 80079cc:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
 80079d0:	2900      	cmp	r1, #0
 80079d2:	d0f2      	beq.n	80079ba <Argus_Eval_Apply+0xaa2>
 80079d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079d8:	e7b1      	b.n	800793e <Argus_Eval_Apply+0xa26>
 80079da:	bf00      	nop
 80079dc:	ff800000 	.word	0xff800000

080079e0 <Argus_Eval_ResetShotNoiseAmplitudeEMA>:
 80079e0:	f04f 33ff 	mov.w	r3, #4294967295
 80079e4:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop

080079ec <Argus_Pba_Init>:
 80079ec:	b508      	push	{r3, lr}
 80079ee:	2214      	movs	r2, #20
 80079f0:	2100      	movs	r1, #0
 80079f2:	f00f fe95 	bl	8017720 <memset>
 80079f6:	2000      	movs	r0, #0
 80079f8:	bd08      	pop	{r3, pc}
 80079fa:	bf00      	nop

080079fc <Argus_Pba_CheckCfg>:
 80079fc:	b508      	push	{r3, lr}
 80079fe:	7803      	ldrb	r3, [r0, #0]
 8007a00:	f013 0201 	ands.w	r2, r3, #1
 8007a04:	d00b      	beq.n	8007a1e <Argus_Pba_CheckCfg+0x22>
 8007a06:	4602      	mov	r2, r0
 8007a08:	f033 0061 	bics.w	r0, r3, #97	; 0x61
 8007a0c:	d109      	bne.n	8007a22 <Argus_Pba_CheckCfg+0x26>
 8007a0e:	7851      	ldrb	r1, [r2, #1]
 8007a10:	1e4b      	subs	r3, r1, #1
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d811      	bhi.n	8007a3a <Argus_Pba_CheckCfg+0x3e>
 8007a16:	6893      	ldr	r3, [r2, #8]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	d008      	beq.n	8007a2e <Argus_Pba_CheckCfg+0x32>
 8007a1c:	bd08      	pop	{r3, pc}
 8007a1e:	4610      	mov	r0, r2
 8007a20:	bd08      	pop	{r3, pc}
 8007a22:	4809      	ldr	r0, [pc, #36]	; (8007a48 <Argus_Pba_CheckCfg+0x4c>)
 8007a24:	f7f9 fa14 	bl	8000e50 <print>
 8007a28:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8007a2c:	bd08      	pop	{r3, pc}
 8007a2e:	4807      	ldr	r0, [pc, #28]	; (8007a4c <Argus_Pba_CheckCfg+0x50>)
 8007a30:	f7f9 fa0e 	bl	8000e50 <print>
 8007a34:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8007a38:	bd08      	pop	{r3, pc}
 8007a3a:	4805      	ldr	r0, [pc, #20]	; (8007a50 <Argus_Pba_CheckCfg+0x54>)
 8007a3c:	f7f9 fa08 	bl	8000e50 <print>
 8007a40:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8007a44:	bd08      	pop	{r3, pc}
 8007a46:	bf00      	nop
 8007a48:	08018ff8 	.word	0x08018ff8
 8007a4c:	0801907c 	.word	0x0801907c
 8007a50:	08019038 	.word	0x08019038

08007a54 <Argus_Pba_UpdateConfig>:
 8007a54:	4603      	mov	r3, r0
 8007a56:	f892 0058 	ldrb.w	r0, [r2, #88]	; 0x58
 8007a5a:	7118      	strb	r0, [r3, #4]
 8007a5c:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 8007a60:	715a      	strb	r2, [r3, #5]
 8007a62:	780a      	ldrb	r2, [r1, #0]
 8007a64:	3a01      	subs	r2, #1
 8007a66:	eb02 1282 	add.w	r2, r2, r2, lsl #6
 8007a6a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a6e:	3120      	adds	r1, #32
 8007a70:	c907      	ldmia	r1, {r0, r1, r2}
 8007a72:	3308      	adds	r3, #8
 8007a74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop

08007a7c <Argus_Pba_Apply>:
 8007a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a80:	f890 e008 	ldrb.w	lr, [r0, #8]
 8007a84:	2300      	movs	r3, #0
 8007a86:	f01e 0f01 	tst.w	lr, #1
 8007a8a:	b089      	sub	sp, #36	; 0x24
 8007a8c:	f8c1 33bc 	str.w	r3, [r1, #956]	; 0x3bc
 8007a90:	f8a1 33c0 	strh.w	r3, [r1, #960]	; 0x3c0
 8007a94:	d102      	bne.n	8007a9c <Argus_Pba_Apply+0x20>
 8007a96:	b009      	add	sp, #36	; 0x24
 8007a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9c:	4689      	mov	r9, r1
 8007a9e:	461d      	mov	r5, r3
 8007aa0:	460a      	mov	r2, r1
 8007aa2:	2601      	movs	r6, #1
 8007aa4:	e037      	b.n	8007b16 <Argus_Pba_Apply+0x9a>
 8007aa6:	2c00      	cmp	r4, #0
 8007aa8:	d16c      	bne.n	8007b84 <Argus_Pba_Apply+0x108>
 8007aaa:	f8b2 4242 	ldrh.w	r4, [r2, #578]	; 0x242
 8007aae:	42a5      	cmp	r5, r4
 8007ab0:	bf38      	it	cc
 8007ab2:	4625      	movcc	r5, r4
 8007ab4:	f083 070f 	eor.w	r7, r3, #15
 8007ab8:	fa21 f707 	lsr.w	r7, r1, r7
 8007abc:	07ff      	lsls	r7, r7, #31
 8007abe:	f892 4250 	ldrb.w	r4, [r2, #592]	; 0x250
 8007ac2:	d459      	bmi.n	8007b78 <Argus_Pba_Apply+0xfc>
 8007ac4:	2c00      	cmp	r4, #0
 8007ac6:	d17a      	bne.n	8007bbe <Argus_Pba_Apply+0x142>
 8007ac8:	f8b2 424e 	ldrh.w	r4, [r2, #590]	; 0x24e
 8007acc:	42a5      	cmp	r5, r4
 8007ace:	bf38      	it	cc
 8007ad0:	4625      	movcc	r5, r4
 8007ad2:	f083 071e 	eor.w	r7, r3, #30
 8007ad6:	fa21 f707 	lsr.w	r7, r1, r7
 8007ada:	07ff      	lsls	r7, r7, #31
 8007adc:	f892 425c 	ldrb.w	r4, [r2, #604]	; 0x25c
 8007ae0:	d444      	bmi.n	8007b6c <Argus_Pba_Apply+0xf0>
 8007ae2:	2c00      	cmp	r4, #0
 8007ae4:	d161      	bne.n	8007baa <Argus_Pba_Apply+0x12e>
 8007ae6:	f8b2 425a 	ldrh.w	r4, [r2, #602]	; 0x25a
 8007aea:	42a5      	cmp	r5, r4
 8007aec:	bf38      	it	cc
 8007aee:	4625      	movcc	r5, r4
 8007af0:	f083 071f 	eor.w	r7, r3, #31
 8007af4:	40f9      	lsrs	r1, r7
 8007af6:	07c9      	lsls	r1, r1, #31
 8007af8:	f892 4268 	ldrb.w	r4, [r2, #616]	; 0x268
 8007afc:	d41a      	bmi.n	8007b34 <Argus_Pba_Apply+0xb8>
 8007afe:	2c00      	cmp	r4, #0
 8007b00:	d14a      	bne.n	8007b98 <Argus_Pba_Apply+0x11c>
 8007b02:	f8b2 1266 	ldrh.w	r1, [r2, #614]	; 0x266
 8007b06:	428d      	cmp	r5, r1
 8007b08:	bf38      	it	cc
 8007b0a:	460d      	movcc	r5, r1
 8007b0c:	3302      	adds	r3, #2
 8007b0e:	2b10      	cmp	r3, #16
 8007b10:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8007b14:	d017      	beq.n	8007b46 <Argus_Pba_Apply+0xca>
 8007b16:	6901      	ldr	r1, [r0, #16]
 8007b18:	f892 4244 	ldrb.w	r4, [r2, #580]	; 0x244
 8007b1c:	f083 070e 	eor.w	r7, r3, #14
 8007b20:	fa21 f707 	lsr.w	r7, r1, r7
 8007b24:	07ff      	lsls	r7, r7, #31
 8007b26:	d5be      	bpl.n	8007aa6 <Argus_Pba_Apply+0x2a>
 8007b28:	f044 0414 	orr.w	r4, r4, #20
 8007b2c:	f882 4244 	strb.w	r4, [r2, #580]	; 0x244
 8007b30:	6901      	ldr	r1, [r0, #16]
 8007b32:	e7bf      	b.n	8007ab4 <Argus_Pba_Apply+0x38>
 8007b34:	3302      	adds	r3, #2
 8007b36:	f044 0414 	orr.w	r4, r4, #20
 8007b3a:	2b10      	cmp	r3, #16
 8007b3c:	f882 4268 	strb.w	r4, [r2, #616]	; 0x268
 8007b40:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8007b44:	d1e7      	bne.n	8007b16 <Argus_Pba_Apply+0x9a>
 8007b46:	f8d9 8000 	ldr.w	r8, [r9]
 8007b4a:	2d00      	cmp	r5, #0
 8007b4c:	d145      	bne.n	8007bda <Argus_Pba_Apply+0x15e>
 8007b4e:	2e00      	cmp	r6, #0
 8007b50:	f000 8143 	beq.w	8007dda <Argus_Pba_Apply+0x35e>
 8007b54:	f1b8 0f00 	cmp.w	r8, #0
 8007b58:	d13b      	bne.n	8007bd2 <Argus_Pba_Apply+0x156>
 8007b5a:	226c      	movs	r2, #108	; 0x6c
 8007b5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b60:	f8c9 2000 	str.w	r2, [r9]
 8007b64:	4690      	mov	r8, r2
 8007b66:	f8c9 13bc 	str.w	r1, [r9, #956]	; 0x3bc
 8007b6a:	e03a      	b.n	8007be2 <Argus_Pba_Apply+0x166>
 8007b6c:	f044 0414 	orr.w	r4, r4, #20
 8007b70:	f882 425c 	strb.w	r4, [r2, #604]	; 0x25c
 8007b74:	6901      	ldr	r1, [r0, #16]
 8007b76:	e7bb      	b.n	8007af0 <Argus_Pba_Apply+0x74>
 8007b78:	f044 0414 	orr.w	r4, r4, #20
 8007b7c:	f882 4250 	strb.w	r4, [r2, #592]	; 0x250
 8007b80:	6901      	ldr	r1, [r0, #16]
 8007b82:	e7a6      	b.n	8007ad2 <Argus_Pba_Apply+0x56>
 8007b84:	f044 0104 	orr.w	r1, r4, #4
 8007b88:	f014 0420 	ands.w	r4, r4, #32
 8007b8c:	f882 1244 	strb.w	r1, [r2, #580]	; 0x244
 8007b90:	d1ce      	bne.n	8007b30 <Argus_Pba_Apply+0xb4>
 8007b92:	4626      	mov	r6, r4
 8007b94:	6901      	ldr	r1, [r0, #16]
 8007b96:	e78d      	b.n	8007ab4 <Argus_Pba_Apply+0x38>
 8007b98:	f014 0f20 	tst.w	r4, #32
 8007b9c:	f044 0404 	orr.w	r4, r4, #4
 8007ba0:	bf08      	it	eq
 8007ba2:	2600      	moveq	r6, #0
 8007ba4:	f882 4268 	strb.w	r4, [r2, #616]	; 0x268
 8007ba8:	e7b0      	b.n	8007b0c <Argus_Pba_Apply+0x90>
 8007baa:	f044 0104 	orr.w	r1, r4, #4
 8007bae:	f014 0420 	ands.w	r4, r4, #32
 8007bb2:	f882 125c 	strb.w	r1, [r2, #604]	; 0x25c
 8007bb6:	d1dd      	bne.n	8007b74 <Argus_Pba_Apply+0xf8>
 8007bb8:	4626      	mov	r6, r4
 8007bba:	6901      	ldr	r1, [r0, #16]
 8007bbc:	e798      	b.n	8007af0 <Argus_Pba_Apply+0x74>
 8007bbe:	f044 0104 	orr.w	r1, r4, #4
 8007bc2:	f014 0420 	ands.w	r4, r4, #32
 8007bc6:	f882 1250 	strb.w	r1, [r2, #592]	; 0x250
 8007bca:	d1d9      	bne.n	8007b80 <Argus_Pba_Apply+0x104>
 8007bcc:	4626      	mov	r6, r4
 8007bce:	6901      	ldr	r1, [r0, #16]
 8007bd0:	e77f      	b.n	8007ad2 <Argus_Pba_Apply+0x56>
 8007bd2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007bd6:	f8c9 23bc 	str.w	r2, [r9, #956]	; 0x3bc
 8007bda:	f1b8 0f00 	cmp.w	r8, #0
 8007bde:	f6ff af5a 	blt.w	8007a96 <Argus_Pba_Apply+0x1a>
 8007be2:	7a81      	ldrb	r1, [r0, #10]
 8007be4:	8982      	ldrh	r2, [r0, #12]
 8007be6:	b121      	cbz	r1, 8007bf2 <Argus_Pba_Apply+0x176>
 8007be8:	fb01 f105 	mul.w	r1, r1, r5
 8007bec:	3180      	adds	r1, #128	; 0x80
 8007bee:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8007bf2:	2a00      	cmp	r2, #0
 8007bf4:	f040 80ed 	bne.w	8007dd2 <Argus_Pba_Apply+0x356>
 8007bf8:	f509 7cc0 	add.w	ip, r9, #384	; 0x180
 8007bfc:	464a      	mov	r2, r9
 8007bfe:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8007c02:	2400      	movs	r4, #0
 8007c04:	2604      	movs	r6, #4
 8007c06:	e038      	b.n	8007c7a <Argus_Pba_Apply+0x1fe>
 8007c08:	f8d2 723c 	ldr.w	r7, [r2, #572]	; 0x23c
 8007c0c:	4554      	cmp	r4, sl
 8007c0e:	bf38      	it	cc
 8007c10:	4654      	movcc	r4, sl
 8007c12:	42bd      	cmp	r5, r7
 8007c14:	bfa8      	it	ge
 8007c16:	463d      	movge	r5, r7
 8007c18:	f892 7250 	ldrb.w	r7, [r2, #592]	; 0x250
 8007c1c:	b967      	cbnz	r7, 8007c38 <Argus_Pba_Apply+0x1bc>
 8007c1e:	f8b2 a24e 	ldrh.w	sl, [r2, #590]	; 0x24e
 8007c22:	4551      	cmp	r1, sl
 8007c24:	f200 80a7 	bhi.w	8007d76 <Argus_Pba_Apply+0x2fa>
 8007c28:	f8d2 7248 	ldr.w	r7, [r2, #584]	; 0x248
 8007c2c:	4554      	cmp	r4, sl
 8007c2e:	bf38      	it	cc
 8007c30:	4654      	movcc	r4, sl
 8007c32:	42bd      	cmp	r5, r7
 8007c34:	bfa8      	it	ge
 8007c36:	463d      	movge	r5, r7
 8007c38:	f892 725c 	ldrb.w	r7, [r2, #604]	; 0x25c
 8007c3c:	b95f      	cbnz	r7, 8007c56 <Argus_Pba_Apply+0x1da>
 8007c3e:	f8b2 a25a 	ldrh.w	sl, [r2, #602]	; 0x25a
 8007c42:	4551      	cmp	r1, sl
 8007c44:	d824      	bhi.n	8007c90 <Argus_Pba_Apply+0x214>
 8007c46:	f8d2 7254 	ldr.w	r7, [r2, #596]	; 0x254
 8007c4a:	4554      	cmp	r4, sl
 8007c4c:	bf38      	it	cc
 8007c4e:	4654      	movcc	r4, sl
 8007c50:	42bd      	cmp	r5, r7
 8007c52:	bfa8      	it	ge
 8007c54:	463d      	movge	r5, r7
 8007c56:	f892 7268 	ldrb.w	r7, [r2, #616]	; 0x268
 8007c5a:	b95f      	cbnz	r7, 8007c74 <Argus_Pba_Apply+0x1f8>
 8007c5c:	f8b2 a266 	ldrh.w	sl, [r2, #614]	; 0x266
 8007c60:	4551      	cmp	r1, sl
 8007c62:	d818      	bhi.n	8007c96 <Argus_Pba_Apply+0x21a>
 8007c64:	f8d2 7260 	ldr.w	r7, [r2, #608]	; 0x260
 8007c68:	4554      	cmp	r4, sl
 8007c6a:	bf38      	it	cc
 8007c6c:	4654      	movcc	r4, sl
 8007c6e:	42bd      	cmp	r5, r7
 8007c70:	bfa8      	it	ge
 8007c72:	463d      	movge	r5, r7
 8007c74:	3230      	adds	r2, #48	; 0x30
 8007c76:	4562      	cmp	r2, ip
 8007c78:	d012      	beq.n	8007ca0 <Argus_Pba_Apply+0x224>
 8007c7a:	f892 7244 	ldrb.w	r7, [r2, #580]	; 0x244
 8007c7e:	2f00      	cmp	r7, #0
 8007c80:	d1ca      	bne.n	8007c18 <Argus_Pba_Apply+0x19c>
 8007c82:	f8b2 a242 	ldrh.w	sl, [r2, #578]	; 0x242
 8007c86:	4551      	cmp	r1, sl
 8007c88:	d9be      	bls.n	8007c08 <Argus_Pba_Apply+0x18c>
 8007c8a:	f882 6244 	strb.w	r6, [r2, #580]	; 0x244
 8007c8e:	e7c3      	b.n	8007c18 <Argus_Pba_Apply+0x19c>
 8007c90:	f882 625c 	strb.w	r6, [r2, #604]	; 0x25c
 8007c94:	e7df      	b.n	8007c56 <Argus_Pba_Apply+0x1da>
 8007c96:	f882 6268 	strb.w	r6, [r2, #616]	; 0x268
 8007c9a:	3230      	adds	r2, #48	; 0x30
 8007c9c:	4562      	cmp	r2, ip
 8007c9e:	d1ec      	bne.n	8007c7a <Argus_Pba_Apply+0x1fe>
 8007ca0:	2c00      	cmp	r4, #0
 8007ca2:	d06b      	beq.n	8007d7c <Argus_Pba_Apply+0x300>
 8007ca4:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8007ca8:	f040 814f 	bne.w	8007f4a <Argus_Pba_Apply+0x4ce>
 8007cac:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8007cb0:	f890 8009 	ldrb.w	r8, [r0, #9]
 8007cb4:	f1b8 0f02 	cmp.w	r8, #2
 8007cb8:	f000 8126 	beq.w	8007f08 <Argus_Pba_Apply+0x48c>
 8007cbc:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007cc0:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8007cc4:	e9cd 6206 	strd	r6, r2, [sp, #24]
 8007cc8:	f502 1240 	add.w	r2, r2, #3145728	; 0x300000
 8007ccc:	9205      	str	r2, [sp, #20]
 8007cce:	2215      	movs	r2, #21
 8007cd0:	9201      	str	r2, [sp, #4]
 8007cd2:	f04f 0e05 	mov.w	lr, #5
 8007cd6:	f509 72d8 	add.w	r2, r9, #432	; 0x1b0
 8007cda:	2700      	movs	r7, #0
 8007cdc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007ce0:	f8cd 9010 	str.w	r9, [sp, #16]
 8007ce4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007ce8:	9402      	str	r4, [sp, #8]
 8007cea:	9003      	str	r0, [sp, #12]
 8007cec:	46bb      	mov	fp, r7
 8007cee:	f04f 0a04 	mov.w	sl, #4
 8007cf2:	4674      	mov	r4, lr
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007cfc:	f893 2244 	ldrb.w	r2, [r3, #580]	; 0x244
 8007d00:	b92a      	cbnz	r2, 8007d0e <Argus_Pba_Apply+0x292>
 8007d02:	f8d3 123c 	ldr.w	r1, [r3, #572]	; 0x23c
 8007d06:	4561      	cmp	r1, ip
 8007d08:	dd74      	ble.n	8007df4 <Argus_Pba_Apply+0x378>
 8007d0a:	f883 a244 	strb.w	sl, [r3, #580]	; 0x244
 8007d0e:	330c      	adds	r3, #12
 8007d10:	42b3      	cmp	r3, r6
 8007d12:	d1f3      	bne.n	8007cfc <Argus_Pba_Apply+0x280>
 8007d14:	f103 0630 	add.w	r6, r3, #48	; 0x30
 8007d18:	4286      	cmp	r6, r0
 8007d1a:	d1ed      	bne.n	8007cf8 <Argus_Pba_Apply+0x27c>
 8007d1c:	46a6      	mov	lr, r4
 8007d1e:	e9dd 4002 	ldrd	r4, r0, [sp, #8]
 8007d22:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8007d26:	f8a9 43c0 	strh.w	r4, [r9, #960]	; 0x3c0
 8007d2a:	b1f7      	cbz	r7, 8007d6a <Argus_Pba_Apply+0x2ee>
 8007d2c:	ea8b 73eb 	eor.w	r3, fp, fp, asr #31
 8007d30:	eba3 73eb 	sub.w	r3, r3, fp, asr #31
 8007d34:	42bb      	cmp	r3, r7
 8007d36:	4639      	mov	r1, r7
 8007d38:	ea8b 0507 	eor.w	r5, fp, r7
 8007d3c:	f240 8172 	bls.w	8008024 <Argus_Pba_Apply+0x5a8>
 8007d40:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8007d44:	e001      	b.n	8007d4a <Argus_Pba_Apply+0x2ce>
 8007d46:	4614      	mov	r4, r2
 8007d48:	4639      	mov	r1, r7
 8007d4a:	004f      	lsls	r7, r1, #1
 8007d4c:	42bb      	cmp	r3, r7
 8007d4e:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8007d52:	d8f8      	bhi.n	8007d46 <Argus_Pba_Apply+0x2ca>
 8007d54:	2a00      	cmp	r2, #0
 8007d56:	f040 813b 	bne.w	8007fd0 <Argus_Pba_Apply+0x554>
 8007d5a:	2d00      	cmp	r5, #0
 8007d5c:	bfb4      	ite	lt
 8007d5e:	f04f 4700 	movlt.w	r7, #2147483648	; 0x80000000
 8007d62:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 8007d66:	fa07 f70e 	lsl.w	r7, r7, lr
 8007d6a:	f8c9 73bc 	str.w	r7, [r9, #956]	; 0x3bc
 8007d6e:	6007      	str	r7, [r0, #0]
 8007d70:	b009      	add	sp, #36	; 0x24
 8007d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d76:	f882 6250 	strb.w	r6, [r2, #592]	; 0x250
 8007d7a:	e75d      	b.n	8007c38 <Argus_Pba_Apply+0x1bc>
 8007d7c:	f01e 0f20 	tst.w	lr, #32
 8007d80:	f000 8098 	beq.w	8007eb4 <Argus_Pba_Apply+0x438>
 8007d84:	f8b9 301c 	ldrh.w	r3, [r9, #28]
 8007d88:	f043 0310 	orr.w	r3, r3, #16
 8007d8c:	f8a9 301c 	strh.w	r3, [r9, #28]
 8007d90:	7906      	ldrb	r6, [r0, #4]
 8007d92:	7945      	ldrb	r5, [r0, #5]
 8007d94:	0072      	lsls	r2, r6, #1
 8007d96:	1993      	adds	r3, r2, r6
 8007d98:	0069      	lsls	r1, r5, #1
 8007d9a:	194f      	adds	r7, r1, r5
 8007d9c:	011b      	lsls	r3, r3, #4
 8007d9e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007da2:	444b      	add	r3, r9
 8007da4:	f8b3 7242 	ldrh.w	r7, [r3, #578]	; 0x242
 8007da8:	f8a9 73c0 	strh.w	r7, [r9, #960]	; 0x3c0
 8007dac:	f893 7244 	ldrb.w	r7, [r3, #580]	; 0x244
 8007db0:	f017 0ffb 	tst.w	r7, #251	; 0xfb
 8007db4:	f000 80f7 	beq.w	8007fa6 <Argus_Pba_Apply+0x52a>
 8007db8:	06bf      	lsls	r7, r7, #26
 8007dba:	d57b      	bpl.n	8007eb4 <Argus_Pba_Apply+0x438>
 8007dbc:	f1b8 0f00 	cmp.w	r8, #0
 8007dc0:	d102      	bne.n	8007dc8 <Argus_Pba_Apply+0x34c>
 8007dc2:	236c      	movs	r3, #108	; 0x6c
 8007dc4:	f8c9 3000 	str.w	r3, [r9]
 8007dc8:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8007dcc:	f8c9 73bc 	str.w	r7, [r9, #956]	; 0x3bc
 8007dd0:	e7cd      	b.n	8007d6e <Argus_Pba_Apply+0x2f2>
 8007dd2:	4291      	cmp	r1, r2
 8007dd4:	bf38      	it	cc
 8007dd6:	4611      	movcc	r1, r2
 8007dd8:	e70e      	b.n	8007bf8 <Argus_Pba_Apply+0x17c>
 8007dda:	f1b8 0f00 	cmp.w	r8, #0
 8007dde:	bfa4      	itt	ge
 8007de0:	f06f 036d 	mvnge.w	r3, #109	; 0x6d
 8007de4:	f8c9 3000 	strge.w	r3, [r9]
 8007de8:	6803      	ldr	r3, [r0, #0]
 8007dea:	f8c9 33bc 	str.w	r3, [r9, #956]	; 0x3bc
 8007dee:	b009      	add	sp, #36	; 0x24
 8007df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df4:	f1b8 0f01 	cmp.w	r8, #1
 8007df8:	d024      	beq.n	8007e44 <Argus_Pba_Apply+0x3c8>
 8007dfa:	f1b8 0f02 	cmp.w	r8, #2
 8007dfe:	d186      	bne.n	8007d0e <Argus_Pba_Apply+0x292>
 8007e00:	2900      	cmp	r1, #0
 8007e02:	f8b3 5242 	ldrh.w	r5, [r3, #578]	; 0x242
 8007e06:	db34      	blt.n	8007e72 <Argus_Pba_Apply+0x3f6>
 8007e08:	f1b9 0f10 	cmp.w	r9, #16
 8007e0c:	d95a      	bls.n	8007ec4 <Argus_Pba_Apply+0x448>
 8007e0e:	fa1f fe81 	uxth.w	lr, r1
 8007e12:	2c1f      	cmp	r4, #31
 8007e14:	fb05 fe0e 	mul.w	lr, r5, lr
 8007e18:	d804      	bhi.n	8007e24 <Argus_Pba_Apply+0x3a8>
 8007e1a:	0c0a      	lsrs	r2, r1, #16
 8007e1c:	9900      	ldr	r1, [sp, #0]
 8007e1e:	fb05 1202 	mla	r2, r5, r2, r1
 8007e22:	40e2      	lsrs	r2, r4
 8007e24:	f1b9 0f20 	cmp.w	r9, #32
 8007e28:	f000 80f3 	beq.w	8008012 <Argus_Pba_Apply+0x596>
 8007e2c:	d807      	bhi.n	8007e3e <Argus_Pba_Apply+0x3c2>
 8007e2e:	9907      	ldr	r1, [sp, #28]
 8007e30:	458e      	cmp	lr, r1
 8007e32:	f240 80e8 	bls.w	8008006 <Argus_Pba_Apply+0x58a>
 8007e36:	fa2e f109 	lsr.w	r1, lr, r9
 8007e3a:	3101      	adds	r1, #1
 8007e3c:	440a      	add	r2, r1
 8007e3e:	4493      	add	fp, r2
 8007e40:	442f      	add	r7, r5
 8007e42:	e764      	b.n	8007d0e <Argus_Pba_Apply+0x292>
 8007e44:	2900      	cmp	r1, #0
 8007e46:	db09      	blt.n	8007e5c <Argus_Pba_Apply+0x3e0>
 8007e48:	b18c      	cbz	r4, 8007e6e <Argus_Pba_Apply+0x3f2>
 8007e4a:	2c1f      	cmp	r4, #31
 8007e4c:	d803      	bhi.n	8007e56 <Argus_Pba_Apply+0x3da>
 8007e4e:	9a00      	ldr	r2, [sp, #0]
 8007e50:	188a      	adds	r2, r1, r2
 8007e52:	40e2      	lsrs	r2, r4
 8007e54:	4493      	add	fp, r2
 8007e56:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8007e5a:	e758      	b.n	8007d0e <Argus_Pba_Apply+0x292>
 8007e5c:	b13c      	cbz	r4, 8007e6e <Argus_Pba_Apply+0x3f2>
 8007e5e:	2c1f      	cmp	r4, #31
 8007e60:	d8f9      	bhi.n	8007e56 <Argus_Pba_Apply+0x3da>
 8007e62:	9a00      	ldr	r2, [sp, #0]
 8007e64:	1a52      	subs	r2, r2, r1
 8007e66:	40e2      	lsrs	r2, r4
 8007e68:	ebab 0b02 	sub.w	fp, fp, r2
 8007e6c:	e7f3      	b.n	8007e56 <Argus_Pba_Apply+0x3da>
 8007e6e:	448b      	add	fp, r1
 8007e70:	e7f1      	b.n	8007e56 <Argus_Pba_Apply+0x3da>
 8007e72:	f1b9 0f10 	cmp.w	r9, #16
 8007e76:	f1c1 0100 	rsb	r1, r1, #0
 8007e7a:	d934      	bls.n	8007ee6 <Argus_Pba_Apply+0x46a>
 8007e7c:	fa1f fe81 	uxth.w	lr, r1
 8007e80:	2c1f      	cmp	r4, #31
 8007e82:	fb05 fe0e 	mul.w	lr, r5, lr
 8007e86:	d804      	bhi.n	8007e92 <Argus_Pba_Apply+0x416>
 8007e88:	0c0a      	lsrs	r2, r1, #16
 8007e8a:	9900      	ldr	r1, [sp, #0]
 8007e8c:	fb05 1202 	mla	r2, r5, r2, r1
 8007e90:	40e2      	lsrs	r2, r4
 8007e92:	f1b9 0f20 	cmp.w	r9, #32
 8007e96:	f000 80c9 	beq.w	800802c <Argus_Pba_Apply+0x5b0>
 8007e9a:	d807      	bhi.n	8007eac <Argus_Pba_Apply+0x430>
 8007e9c:	9907      	ldr	r1, [sp, #28]
 8007e9e:	458e      	cmp	lr, r1
 8007ea0:	f240 80ba 	bls.w	8008018 <Argus_Pba_Apply+0x59c>
 8007ea4:	fa2e f109 	lsr.w	r1, lr, r9
 8007ea8:	3101      	adds	r1, #1
 8007eaa:	440a      	add	r2, r1
 8007eac:	4252      	negs	r2, r2
 8007eae:	4493      	add	fp, r2
 8007eb0:	442f      	add	r7, r5
 8007eb2:	e72c      	b.n	8007d0e <Argus_Pba_Apply+0x292>
 8007eb4:	6807      	ldr	r7, [r0, #0]
 8007eb6:	f8c9 73bc 	str.w	r7, [r9, #956]	; 0x3bc
 8007eba:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007ebe:	f8c9 3000 	str.w	r3, [r9]
 8007ec2:	e754      	b.n	8007d6e <Argus_Pba_Apply+0x2f2>
 8007ec4:	9a05      	ldr	r2, [sp, #20]
 8007ec6:	fa21 fe09 	lsr.w	lr, r1, r9
 8007eca:	400a      	ands	r2, r1
 8007ecc:	fb05 fe0e 	mul.w	lr, r5, lr
 8007ed0:	fb05 f202 	mul.w	r2, r5, r2
 8007ed4:	f1b9 0f00 	cmp.w	r9, #0
 8007ed8:	d003      	beq.n	8007ee2 <Argus_Pba_Apply+0x466>
 8007eda:	9906      	ldr	r1, [sp, #24]
 8007edc:	440a      	add	r2, r1
 8007ede:	fa22 f209 	lsr.w	r2, r2, r9
 8007ee2:	4472      	add	r2, lr
 8007ee4:	e7ab      	b.n	8007e3e <Argus_Pba_Apply+0x3c2>
 8007ee6:	9a05      	ldr	r2, [sp, #20]
 8007ee8:	fa21 fe09 	lsr.w	lr, r1, r9
 8007eec:	400a      	ands	r2, r1
 8007eee:	fb05 fe0e 	mul.w	lr, r5, lr
 8007ef2:	fb05 f202 	mul.w	r2, r5, r2
 8007ef6:	f1b9 0f00 	cmp.w	r9, #0
 8007efa:	d003      	beq.n	8007f04 <Argus_Pba_Apply+0x488>
 8007efc:	9906      	ldr	r1, [sp, #24]
 8007efe:	440a      	add	r2, r1
 8007f00:	fa22 f209 	lsr.w	r2, r2, r9
 8007f04:	4472      	add	r2, lr
 8007f06:	e7d1      	b.n	8007eac <Argus_Pba_Apply+0x430>
 8007f08:	0ae2      	lsrs	r2, r4, #11
 8007f0a:	f000 8092 	beq.w	8008032 <Argus_Pba_Apply+0x5b6>
 8007f0e:	2205      	movs	r2, #5
 8007f10:	e000      	b.n	8007f14 <Argus_Pba_Apply+0x498>
 8007f12:	4672      	mov	r2, lr
 8007f14:	f102 3eff 	add.w	lr, r2, #4294967295
 8007f18:	f1ce 0310 	rsb	r3, lr, #16
 8007f1c:	fa54 f303 	asrs.w	r3, r4, r3
 8007f20:	d1f7      	bne.n	8007f12 <Argus_Pba_Apply+0x496>
 8007f22:	f102 030f 	add.w	r3, r2, #15
 8007f26:	461e      	mov	r6, r3
 8007f28:	f102 050e 	add.w	r5, r2, #14
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8007f32:	2301      	movs	r3, #1
 8007f34:	fa03 f505 	lsl.w	r5, r3, r5
 8007f38:	3a02      	subs	r2, #2
 8007f3a:	40b1      	lsls	r1, r6
 8007f3c:	43c9      	mvns	r1, r1
 8007f3e:	4093      	lsls	r3, r2
 8007f40:	43ea      	mvns	r2, r5
 8007f42:	9506      	str	r5, [sp, #24]
 8007f44:	9105      	str	r1, [sp, #20]
 8007f46:	9207      	str	r2, [sp, #28]
 8007f48:	e6c5      	b.n	8007cd6 <Argus_Pba_Apply+0x25a>
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	bfb4      	ite	lt
 8007f4e:	426f      	neglt	r7, r5
 8007f50:	462f      	movge	r7, r5
 8007f52:	7ac2      	ldrb	r2, [r0, #11]
 8007f54:	b2b9      	uxth	r1, r7
 8007f56:	ea4f 4717 	mov.w	r7, r7, lsr #16
 8007f5a:	fb02 f101 	mul.w	r1, r2, r1
 8007f5e:	fb02 f207 	mul.w	r2, r2, r7
 8007f62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f66:	ea4f 4702 	mov.w	r7, r2, lsl #16
 8007f6a:	fa17 f181 	uxtah	r1, r7, r1
 8007f6e:	bfb4      	ite	lt
 8007f70:	f04f 36ff 	movlt.w	r6, #4294967295
 8007f74:	2601      	movge	r6, #1
 8007f76:	f111 0f81 	cmn.w	r1, #129	; 0x81
 8007f7a:	bf98      	it	ls
 8007f7c:	3180      	addls	r1, #128	; 0x80
 8007f7e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007f82:	bf94      	ite	ls
 8007f84:	0a09      	lsrls	r1, r1, #8
 8007f86:	f04f 7180 	movhi.w	r1, #16777216	; 0x1000000
 8007f8a:	0612      	lsls	r2, r2, #24
 8007f8c:	2e01      	cmp	r6, #1
 8007f8e:	440a      	add	r2, r1
 8007f90:	d11c      	bne.n	8007fcc <Argus_Pba_Apply+0x550>
 8007f92:	f8b0 c00e 	ldrh.w	ip, [r0, #14]
 8007f96:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
 8007f9a:	4594      	cmp	ip, r2
 8007f9c:	bfac      	ite	ge
 8007f9e:	44ac      	addge	ip, r5
 8007fa0:	eb05 0c02 	addlt.w	ip, r5, r2
 8007fa4:	e684      	b.n	8007cb0 <Argus_Pba_Apply+0x234>
 8007fa6:	f883 4244 	strb.w	r4, [r3, #580]	; 0x244
 8007faa:	f1b8 0f00 	cmp.w	r8, #0
 8007fae:	d102      	bne.n	8007fb6 <Argus_Pba_Apply+0x53a>
 8007fb0:	236b      	movs	r3, #107	; 0x6b
 8007fb2:	f8c9 3000 	str.w	r3, [r9]
 8007fb6:	1993      	adds	r3, r2, r6
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	4429      	add	r1, r5
 8007fbc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007fc0:	444b      	add	r3, r9
 8007fc2:	f8d3 723c 	ldr.w	r7, [r3, #572]	; 0x23c
 8007fc6:	f8c9 73bc 	str.w	r7, [r9, #956]	; 0x3bc
 8007fca:	e6d0      	b.n	8007d6e <Argus_Pba_Apply+0x2f2>
 8007fcc:	4252      	negs	r2, r2
 8007fce:	e7e0      	b.n	8007f92 <Argus_Pba_Apply+0x516>
 8007fd0:	2f00      	cmp	r7, #0
 8007fd2:	da04      	bge.n	8007fde <Argus_Pba_Apply+0x562>
 8007fd4:	f034 4200 	bics.w	r2, r4, #2147483648	; 0x80000000
 8007fd8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007fdc:	d036      	beq.n	800804c <Argus_Pba_Apply+0x5d0>
 8007fde:	2100      	movs	r1, #0
 8007fe0:	e000      	b.n	8007fe4 <Argus_Pba_Apply+0x568>
 8007fe2:	b153      	cbz	r3, 8007ffa <Argus_Pba_Apply+0x57e>
 8007fe4:	42bb      	cmp	r3, r7
 8007fe6:	bf24      	itt	cs
 8007fe8:	1bdb      	subcs	r3, r3, r7
 8007fea:	4311      	orrcs	r1, r2
 8007fec:	0852      	lsrs	r2, r2, #1
 8007fee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007ff2:	d1f6      	bne.n	8007fe2 <Argus_Pba_Apply+0x566>
 8007ff4:	42bb      	cmp	r3, r7
 8007ff6:	bf28      	it	cs
 8007ff8:	3101      	addcs	r1, #1
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	bfb8      	it	lt
 8007ffe:	4249      	neglt	r1, r1
 8008000:	fa01 f70e 	lsl.w	r7, r1, lr
 8008004:	e6b1      	b.n	8007d6a <Argus_Pba_Apply+0x2ee>
 8008006:	9906      	ldr	r1, [sp, #24]
 8008008:	4471      	add	r1, lr
 800800a:	fa21 f109 	lsr.w	r1, r1, r9
 800800e:	440a      	add	r2, r1
 8008010:	e715      	b.n	8007e3e <Argus_Pba_Apply+0x3c2>
 8008012:	eb02 72de 	add.w	r2, r2, lr, lsr #31
 8008016:	e712      	b.n	8007e3e <Argus_Pba_Apply+0x3c2>
 8008018:	9906      	ldr	r1, [sp, #24]
 800801a:	4471      	add	r1, lr
 800801c:	fa21 f109 	lsr.w	r1, r1, r9
 8008020:	440a      	add	r2, r1
 8008022:	e743      	b.n	8007eac <Argus_Pba_Apply+0x430>
 8008024:	b1a3      	cbz	r3, 8008050 <Argus_Pba_Apply+0x5d4>
 8008026:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800802a:	e7d8      	b.n	8007fde <Argus_Pba_Apply+0x562>
 800802c:	eb02 72de 	add.w	r2, r2, lr, lsr #31
 8008030:	e73c      	b.n	8007eac <Argus_Pba_Apply+0x430>
 8008032:	4908      	ldr	r1, [pc, #32]	; (8008054 <Argus_Pba_Apply+0x5d8>)
 8008034:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008038:	e9cd 1205 	strd	r1, r2, [sp, #20]
 800803c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008040:	9207      	str	r2, [sp, #28]
 8008042:	2215      	movs	r2, #21
 8008044:	9201      	str	r2, [sp, #4]
 8008046:	f04f 0e05 	mov.w	lr, #5
 800804a:	e644      	b.n	8007cd6 <Argus_Pba_Apply+0x25a>
 800804c:	4611      	mov	r1, r2
 800804e:	e7d1      	b.n	8007ff4 <Argus_Pba_Apply+0x578>
 8008050:	4619      	mov	r1, r3
 8008052:	e7d2      	b.n	8007ffa <Argus_Pba_Apply+0x57e>
 8008054:	001fffff 	.word	0x001fffff

08008058 <Argus_Eval_Trapezoidal>:
 8008058:	2a00      	cmp	r2, #0
 800805a:	b4f0      	push	{r4, r5, r6, r7}
 800805c:	dd43      	ble.n	80080e6 <Argus_Eval_Trapezoidal+0x8e>
 800805e:	2900      	cmp	r1, #0
 8008060:	db2b      	blt.n	80080ba <Argus_Eval_Trapezoidal+0x62>
 8008062:	428a      	cmp	r2, r1
 8008064:	4616      	mov	r6, r2
 8008066:	bfb8      	it	lt
 8008068:	460e      	movlt	r6, r1
 800806a:	4633      	mov	r3, r6
 800806c:	1a89      	subs	r1, r1, r2
 800806e:	f44f 3540 	mov.w	r5, #196608	; 0x30000
 8008072:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8008076:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 800807a:	429c      	cmp	r4, r3
 800807c:	ea81 0106 	eor.w	r1, r1, r6
 8008080:	d976      	bls.n	8008170 <Argus_Eval_Trapezoidal+0x118>
 8008082:	469c      	mov	ip, r3
 8008084:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8008088:	e001      	b.n	800808e <Argus_Eval_Trapezoidal+0x36>
 800808a:	4617      	mov	r7, r2
 800808c:	46b4      	mov	ip, r6
 800808e:	ea4f 064c 	mov.w	r6, ip, lsl #1
 8008092:	42b4      	cmp	r4, r6
 8008094:	ea4f 0247 	mov.w	r2, r7, lsl #1
 8008098:	d8f7      	bhi.n	800808a <Argus_Eval_Trapezoidal+0x32>
 800809a:	bb82      	cbnz	r2, 80080fe <Argus_Eval_Trapezoidal+0xa6>
 800809c:	2900      	cmp	r1, #0
 800809e:	db6f      	blt.n	8008180 <Argus_Eval_Trapezoidal+0x128>
 80080a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a8:	0b1b      	lsrs	r3, r3, #12
 80080aa:	d10f      	bne.n	80080cc <Argus_Eval_Trapezoidal+0x74>
 80080ac:	7a02      	ldrb	r2, [r0, #8]
 80080ae:	6043      	str	r3, [r0, #4]
 80080b0:	f042 0308 	orr.w	r3, r2, #8
 80080b4:	7203      	strb	r3, [r0, #8]
 80080b6:	bcf0      	pop	{r4, r5, r6, r7}
 80080b8:	4770      	bx	lr
 80080ba:	424e      	negs	r6, r1
 80080bc:	4296      	cmp	r6, r2
 80080be:	bfb8      	it	lt
 80080c0:	4616      	movlt	r6, r2
 80080c2:	4411      	add	r1, r2
 80080c4:	4633      	mov	r3, r6
 80080c6:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80080ca:	e7d2      	b.n	8008072 <Argus_Eval_Trapezoidal+0x1a>
 80080cc:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80080d0:	428b      	cmp	r3, r1
 80080d2:	b292      	uxth	r2, r2
 80080d4:	d930      	bls.n	8008138 <Argus_Eval_Trapezoidal+0xe0>
 80080d6:	7a03      	ldrb	r3, [r0, #8]
 80080d8:	8082      	strh	r2, [r0, #4]
 80080da:	f043 0302 	orr.w	r3, r3, #2
 80080de:	80c1      	strh	r1, [r0, #6]
 80080e0:	7203      	strb	r3, [r0, #8]
 80080e2:	bcf0      	pop	{r4, r5, r6, r7}
 80080e4:	4770      	bx	lr
 80080e6:	2900      	cmp	r1, #0
 80080e8:	dd32      	ble.n	8008150 <Argus_Eval_Trapezoidal+0xf8>
 80080ea:	4252      	negs	r2, r2
 80080ec:	428a      	cmp	r2, r1
 80080ee:	4616      	mov	r6, r2
 80080f0:	bfb8      	it	lt
 80080f2:	460e      	movlt	r6, r1
 80080f4:	4633      	mov	r3, r6
 80080f6:	1a51      	subs	r1, r2, r1
 80080f8:	f44f 25a0 	mov.w	r5, #327680	; 0x50000
 80080fc:	e7b9      	b.n	8008072 <Argus_Eval_Trapezoidal+0x1a>
 80080fe:	2e00      	cmp	r6, #0
 8008100:	da03      	bge.n	800810a <Argus_Eval_Trapezoidal+0xb2>
 8008102:	f037 4200 	bics.w	r2, r7, #2147483648	; 0x80000000
 8008106:	4666      	mov	r6, ip
 8008108:	d038      	beq.n	800817c <Argus_Eval_Trapezoidal+0x124>
 800810a:	2700      	movs	r7, #0
 800810c:	e000      	b.n	8008110 <Argus_Eval_Trapezoidal+0xb8>
 800810e:	b154      	cbz	r4, 8008126 <Argus_Eval_Trapezoidal+0xce>
 8008110:	42a6      	cmp	r6, r4
 8008112:	bf9c      	itt	ls
 8008114:	1ba4      	subls	r4, r4, r6
 8008116:	4317      	orrls	r7, r2
 8008118:	0852      	lsrs	r2, r2, #1
 800811a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800811e:	d1f6      	bne.n	800810e <Argus_Eval_Trapezoidal+0xb6>
 8008120:	42a6      	cmp	r6, r4
 8008122:	bf98      	it	ls
 8008124:	3701      	addls	r7, #1
 8008126:	2900      	cmp	r1, #0
 8008128:	db0e      	blt.n	8008148 <Argus_Eval_Trapezoidal+0xf0>
 800812a:	197a      	adds	r2, r7, r5
 800812c:	d52c      	bpl.n	8008188 <Argus_Eval_Trapezoidal+0x130>
 800812e:	f1c2 0204 	rsb	r2, r2, #4
 8008132:	08d2      	lsrs	r2, r2, #3
 8008134:	4252      	negs	r2, r2
 8008136:	e7b5      	b.n	80080a4 <Argus_Eval_Trapezoidal+0x4c>
 8008138:	8082      	strh	r2, [r0, #4]
 800813a:	80c3      	strh	r3, [r0, #6]
 800813c:	bcf0      	pop	{r4, r5, r6, r7}
 800813e:	4770      	bx	lr
 8008140:	2900      	cmp	r1, #0
 8008142:	bfb8      	it	lt
 8008144:	4627      	movlt	r7, r4
 8008146:	da1e      	bge.n	8008186 <Argus_Eval_Trapezoidal+0x12e>
 8008148:	427f      	negs	r7, r7
 800814a:	197a      	adds	r2, r7, r5
 800814c:	d4ef      	bmi.n	800812e <Argus_Eval_Trapezoidal+0xd6>
 800814e:	e01b      	b.n	8008188 <Argus_Eval_Trapezoidal+0x130>
 8008150:	428a      	cmp	r2, r1
 8008152:	da05      	bge.n	8008160 <Argus_Eval_Trapezoidal+0x108>
 8008154:	4256      	negs	r6, r2
 8008156:	4633      	mov	r3, r6
 8008158:	1a51      	subs	r1, r2, r1
 800815a:	f44f 25e0 	mov.w	r5, #458752	; 0x70000
 800815e:	e788      	b.n	8008072 <Argus_Eval_Trapezoidal+0x1a>
 8008160:	424b      	negs	r3, r1
 8008162:	461e      	mov	r6, r3
 8008164:	2900      	cmp	r1, #0
 8008166:	d1f7      	bne.n	8008158 <Argus_Eval_Trapezoidal+0x100>
 8008168:	460b      	mov	r3, r1
 800816a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800816e:	e799      	b.n	80080a4 <Argus_Eval_Trapezoidal+0x4c>
 8008170:	2c00      	cmp	r4, #0
 8008172:	d0e5      	beq.n	8008140 <Argus_Eval_Trapezoidal+0xe8>
 8008174:	461e      	mov	r6, r3
 8008176:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800817a:	e7c6      	b.n	800810a <Argus_Eval_Trapezoidal+0xb2>
 800817c:	4617      	mov	r7, r2
 800817e:	e7cf      	b.n	8008120 <Argus_Eval_Trapezoidal+0xc8>
 8008180:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
 8008184:	e7d3      	b.n	800812e <Argus_Eval_Trapezoidal+0xd6>
 8008186:	462a      	mov	r2, r5
 8008188:	3204      	adds	r2, #4
 800818a:	08d2      	lsrs	r2, r2, #3
 800818c:	e78a      	b.n	80080a4 <Argus_Eval_Trapezoidal+0x4c>
 800818e:	bf00      	nop

08008190 <Argus_Eval_Triangular>:
 8008190:	2a00      	cmp	r2, #0
 8008192:	b4f0      	push	{r4, r5, r6, r7}
 8008194:	dd32      	ble.n	80081fc <Argus_Eval_Triangular+0x6c>
 8008196:	2900      	cmp	r1, #0
 8008198:	db2b      	blt.n	80081f2 <Argus_Eval_Triangular+0x62>
 800819a:	1856      	adds	r6, r2, r1
 800819c:	f44f 3540 	mov.w	r5, #196608	; 0x30000
 80081a0:	1a89      	subs	r1, r1, r2
 80081a2:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 80081a6:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 80081aa:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 80081ae:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 80081b2:	42bb      	cmp	r3, r7
 80081b4:	ea81 0106 	eor.w	r1, r1, r6
 80081b8:	d968      	bls.n	800828c <Argus_Eval_Triangular+0xfc>
 80081ba:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 80081be:	e001      	b.n	80081c4 <Argus_Eval_Triangular+0x34>
 80081c0:	4694      	mov	ip, r2
 80081c2:	4627      	mov	r7, r4
 80081c4:	007c      	lsls	r4, r7, #1
 80081c6:	42a3      	cmp	r3, r4
 80081c8:	ea4f 024c 	mov.w	r2, ip, lsl #1
 80081cc:	d8f8      	bhi.n	80081c0 <Argus_Eval_Triangular+0x30>
 80081ce:	bb42      	cbnz	r2, 8008222 <Argus_Eval_Triangular+0x92>
 80081d0:	2900      	cmp	r1, #0
 80081d2:	db63      	blt.n	800829c <Argus_Eval_Triangular+0x10c>
 80081d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80081d8:	f516 5f80 	cmn.w	r6, #4096	; 0x1000
 80081dc:	d341      	bcc.n	8008262 <Argus_Eval_Triangular+0xd2>
 80081de:	7a03      	ldrb	r3, [r0, #8]
 80081e0:	8085      	strh	r5, [r0, #4]
 80081e2:	f043 0302 	orr.w	r3, r3, #2
 80081e6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80081ea:	7203      	strb	r3, [r0, #8]
 80081ec:	80c2      	strh	r2, [r0, #6]
 80081ee:	bcf0      	pop	{r4, r5, r6, r7}
 80081f0:	4770      	bx	lr
 80081f2:	1a56      	subs	r6, r2, r1
 80081f4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80081f8:	4411      	add	r1, r2
 80081fa:	e7d2      	b.n	80081a2 <Argus_Eval_Triangular+0x12>
 80081fc:	2900      	cmp	r1, #0
 80081fe:	f1c2 0300 	rsb	r3, r2, #0
 8008202:	dd04      	ble.n	800820e <Argus_Eval_Triangular+0x7e>
 8008204:	1a8e      	subs	r6, r1, r2
 8008206:	f44f 25a0 	mov.w	r5, #327680	; 0x50000
 800820a:	1a59      	subs	r1, r3, r1
 800820c:	e7c9      	b.n	80081a2 <Argus_Eval_Triangular+0x12>
 800820e:	1a5e      	subs	r6, r3, r1
 8008210:	d14a      	bne.n	80082a8 <Argus_Eval_Triangular+0x118>
 8008212:	7a03      	ldrb	r3, [r0, #8]
 8008214:	2200      	movs	r2, #0
 8008216:	f043 0308 	orr.w	r3, r3, #8
 800821a:	7203      	strb	r3, [r0, #8]
 800821c:	6042      	str	r2, [r0, #4]
 800821e:	bcf0      	pop	{r4, r5, r6, r7}
 8008220:	4770      	bx	lr
 8008222:	2c00      	cmp	r4, #0
 8008224:	da03      	bge.n	800822e <Argus_Eval_Triangular+0x9e>
 8008226:	f03c 4200 	bics.w	r2, ip, #2147483648	; 0x80000000
 800822a:	463c      	mov	r4, r7
 800822c:	d034      	beq.n	8008298 <Argus_Eval_Triangular+0x108>
 800822e:	2700      	movs	r7, #0
 8008230:	e000      	b.n	8008234 <Argus_Eval_Triangular+0xa4>
 8008232:	b153      	cbz	r3, 800824a <Argus_Eval_Triangular+0xba>
 8008234:	429c      	cmp	r4, r3
 8008236:	bf9c      	itt	ls
 8008238:	1b1b      	subls	r3, r3, r4
 800823a:	4317      	orrls	r7, r2
 800823c:	0852      	lsrs	r2, r2, #1
 800823e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008242:	d1f6      	bne.n	8008232 <Argus_Eval_Triangular+0xa2>
 8008244:	429c      	cmp	r4, r3
 8008246:	bf98      	it	ls
 8008248:	3701      	addls	r7, #1
 800824a:	2900      	cmp	r1, #0
 800824c:	db1a      	blt.n	8008284 <Argus_Eval_Triangular+0xf4>
 800824e:	197d      	adds	r5, r7, r5
 8008250:	d527      	bpl.n	80082a2 <Argus_Eval_Triangular+0x112>
 8008252:	f1c5 0504 	rsb	r5, r5, #4
 8008256:	08ed      	lsrs	r5, r5, #3
 8008258:	f516 5f80 	cmn.w	r6, #4096	; 0x1000
 800825c:	f1c5 0500 	rsb	r5, r5, #0
 8008260:	d2bd      	bcs.n	80081de <Argus_Eval_Triangular+0x4e>
 8008262:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8008266:	0b76      	lsrs	r6, r6, #13
 8008268:	d0d3      	beq.n	8008212 <Argus_Eval_Triangular+0x82>
 800826a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800826e:	4296      	cmp	r6, r2
 8008270:	b2ab      	uxth	r3, r5
 8008272:	d8b4      	bhi.n	80081de <Argus_Eval_Triangular+0x4e>
 8008274:	80c6      	strh	r6, [r0, #6]
 8008276:	8083      	strh	r3, [r0, #4]
 8008278:	bcf0      	pop	{r4, r5, r6, r7}
 800827a:	4770      	bx	lr
 800827c:	2900      	cmp	r1, #0
 800827e:	bfb8      	it	lt
 8008280:	461f      	movlt	r7, r3
 8008282:	da0e      	bge.n	80082a2 <Argus_Eval_Triangular+0x112>
 8008284:	427f      	negs	r7, r7
 8008286:	197d      	adds	r5, r7, r5
 8008288:	d4e3      	bmi.n	8008252 <Argus_Eval_Triangular+0xc2>
 800828a:	e00a      	b.n	80082a2 <Argus_Eval_Triangular+0x112>
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0f5      	beq.n	800827c <Argus_Eval_Triangular+0xec>
 8008290:	463c      	mov	r4, r7
 8008292:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008296:	e7ca      	b.n	800822e <Argus_Eval_Triangular+0x9e>
 8008298:	4617      	mov	r7, r2
 800829a:	e7d3      	b.n	8008244 <Argus_Eval_Triangular+0xb4>
 800829c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80082a0:	e7d7      	b.n	8008252 <Argus_Eval_Triangular+0xc2>
 80082a2:	3504      	adds	r5, #4
 80082a4:	08ed      	lsrs	r5, r5, #3
 80082a6:	e797      	b.n	80081d8 <Argus_Eval_Triangular+0x48>
 80082a8:	1a51      	subs	r1, r2, r1
 80082aa:	f44f 25e0 	mov.w	r5, #458752	; 0x70000
 80082ae:	e778      	b.n	80081a2 <Argus_Eval_Triangular+0x12>

080082b0 <ClearStatusCallback>:
 80082b0:	f8d1 0210 	ldr.w	r0, [r1, #528]	; 0x210
 80082b4:	21c1      	movs	r1, #193	; 0xc1
 80082b6:	f006 bb55 	b.w	800e964 <Argus_Dev_ClearStatus>
 80082ba:	bf00      	nop

080082bc <PrepareConfiguration>:
 80082bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082be:	460c      	mov	r4, r1
 80082c0:	7809      	ldrb	r1, [r1, #0]
 80082c2:	1e4e      	subs	r6, r1, #1
 80082c4:	b2f3      	uxtb	r3, r6
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d853      	bhi.n	8008372 <PrepareConfiguration+0xb6>
 80082ca:	6861      	ldr	r1, [r4, #4]
 80082cc:	29f9      	cmp	r1, #249	; 0xf9
 80082ce:	d978      	bls.n	80083c2 <PrepareConfiguration+0x106>
 80082d0:	eb06 1386 	add.w	r3, r6, r6, lsl #6
 80082d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082d8:	4605      	mov	r5, r0
 80082da:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
 80082de:	2a00      	cmp	r2, #0
 80082e0:	d14d      	bne.n	800837e <PrepareConfiguration+0xc2>
 80082e2:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80082e6:	4630      	mov	r0, r6
 80082e8:	f006 fb6a 	bl	800e9c0 <Argus_Dev_CheckCfg>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	db45      	blt.n	800837c <PrepareConfiguration+0xc0>
 80082f0:	4631      	mov	r1, r6
 80082f2:	f104 0008 	add.w	r0, r4, #8
 80082f6:	f001 faaf 	bl	8009858 <Argus_Dca_CheckCfg>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	db3e      	blt.n	800837c <PrepareConfiguration+0xc0>
 80082fe:	f104 0020 	add.w	r0, r4, #32
 8008302:	f7ff fb7b 	bl	80079fc <Argus_Pba_CheckCfg>
 8008306:	2800      	cmp	r0, #0
 8008308:	db38      	blt.n	800837c <PrepareConfiguration+0xc0>
 800830a:	f504 7698 	add.w	r6, r4, #304	; 0x130
 800830e:	4630      	mov	r0, r6
 8008310:	f006 fb56 	bl	800e9c0 <Argus_Dev_CheckCfg>
 8008314:	2800      	cmp	r0, #0
 8008316:	db31      	blt.n	800837c <PrepareConfiguration+0xc0>
 8008318:	4631      	mov	r1, r6
 800831a:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 800831e:	f001 fa9b 	bl	8009858 <Argus_Dca_CheckCfg>
 8008322:	2800      	cmp	r0, #0
 8008324:	db2a      	blt.n	800837c <PrepareConfiguration+0xc0>
 8008326:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800832a:	f7ff fb67 	bl	80079fc <Argus_Pba_CheckCfg>
 800832e:	2800      	cmp	r0, #0
 8008330:	db24      	blt.n	800837c <PrepareConfiguration+0xc0>
 8008332:	4621      	mov	r1, r4
 8008334:	f44f 7204 	mov.w	r2, #528	; 0x210
 8008338:	4628      	mov	r0, r5
 800833a:	f00f f9e6 	bl	801770a <memcpy>
 800833e:	7829      	ldrb	r1, [r5, #0]
 8008340:	f8d5 0210 	ldr.w	r0, [r5, #528]	; 0x210
 8008344:	3901      	subs	r1, #1
 8008346:	eb01 1181 	add.w	r1, r1, r1, lsl #6
 800834a:	008c      	lsls	r4, r1, #2
 800834c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8008350:	4429      	add	r1, r5
 8008352:	462a      	mov	r2, r5
 8008354:	f006 ff14 	bl	800f180 <Argus_Dev_PrepareCfg>
 8008358:	2800      	cmp	r0, #0
 800835a:	db0f      	blt.n	800837c <PrepareConfiguration+0xc0>
 800835c:	f8d5 0210 	ldr.w	r0, [r5, #528]	; 0x210
 8008360:	f104 0108 	add.w	r1, r4, #8
 8008364:	4429      	add	r1, r5
 8008366:	f500 70b2 	add.w	r0, r0, #356	; 0x164
 800836a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800836e:	f001 bbd1 	b.w	8009b14 <Argus_Dca_PrepareCfg>
 8008372:	4817      	ldr	r0, [pc, #92]	; (80083d0 <PrepareConfiguration+0x114>)
 8008374:	f7f8 fd6c 	bl	8000e50 <print>
 8008378:	f06f 0068 	mvn.w	r0, #104	; 0x68
 800837c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800837e:	e9d3 0c2f 	ldrd	r0, ip, [r3, #188]	; 0xbc
 8008382:	8adf      	ldrh	r7, [r3, #22]
 8008384:	f8b3 e0c4 	ldrh.w	lr, [r3, #196]	; 0xc4
 8008388:	f8b3 20da 	ldrh.w	r2, [r3, #218]	; 0xda
 800838c:	09bf      	lsrs	r7, r7, #6
 800838e:	bf18      	it	ne
 8008390:	fb07 fc0c 	mulne.w	ip, r7, ip
 8008394:	4460      	add	r0, ip
 8008396:	f510 5f00 	cmn.w	r0, #8192	; 0x2000
 800839a:	bf3a      	itte	cc
 800839c:	f500 5300 	addcc.w	r3, r0, #8192	; 0x2000
 80083a0:	0b9b      	lsrcc	r3, r3, #14
 80083a2:	f44f 2380 	movcs.w	r3, #262144	; 0x40000
 80083a6:	eba1 010e 	sub.w	r1, r1, lr
 80083aa:	1acb      	subs	r3, r1, r3
 80083ac:	429a      	cmp	r2, r3
 80083ae:	dd98      	ble.n	80082e2 <PrepareConfiguration+0x26>
 80083b0:	4f08      	ldr	r7, [pc, #32]	; (80083d4 <PrepareConfiguration+0x118>)
 80083b2:	4909      	ldr	r1, [pc, #36]	; (80083d8 <PrepareConfiguration+0x11c>)
 80083b4:	4809      	ldr	r0, [pc, #36]	; (80083dc <PrepareConfiguration+0x120>)
 80083b6:	2e00      	cmp	r6, #0
 80083b8:	bf18      	it	ne
 80083ba:	4639      	movne	r1, r7
 80083bc:	f7f8 fd48 	bl	8000e50 <print>
 80083c0:	e78f      	b.n	80082e2 <PrepareConfiguration+0x26>
 80083c2:	4807      	ldr	r0, [pc, #28]	; (80083e0 <PrepareConfiguration+0x124>)
 80083c4:	f7f8 fd44 	bl	8000e50 <print>
 80083c8:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80083cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ce:	bf00      	nop
 80083d0:	080191e0 	.word	0x080191e0
 80083d4:	080191c0 	.word	0x080191c0
 80083d8:	080191d0 	.word	0x080191d0
 80083dc:	08019254 	.word	0x08019254
 80083e0:	08019218 	.word	0x08019218

080083e4 <ApplyInitCfg>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80083ea:	4669      	mov	r1, sp
 80083ec:	4604      	mov	r4, r0
 80083ee:	f000 fec1 	bl	8009174 <Argus_Cfg_GetCurrentDefaultConfiguration>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	db1f      	blt.n	8008436 <ApplyInitCfg+0x52>
 80083f6:	2300      	movs	r3, #0
 80083f8:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
 80083fc:	f88d 3008 	strb.w	r3, [sp, #8]
 8008400:	f88d 310c 	strb.w	r3, [sp, #268]	; 0x10c
 8008404:	f006 fe04 	bl	800f010 <Argus_Dev_HasUpdateFlag>
 8008408:	b9c0      	cbnz	r0, 800843c <ApplyInitCfg+0x58>
 800840a:	4669      	mov	r1, sp
 800840c:	4620      	mov	r0, r4
 800840e:	f7ff ff55 	bl	80082bc <PrepareConfiguration>
 8008412:	2800      	cmp	r0, #0
 8008414:	db0f      	blt.n	8008436 <ApplyInitCfg+0x52>
 8008416:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800841a:	f8d3 01d0 	ldr.w	r0, [r3, #464]	; 0x1d0
 800841e:	f00a fa0b 	bl	8012838 <Argus_Cal_Update>
 8008422:	2800      	cmp	r0, #0
 8008424:	db07      	blt.n	8008436 <ApplyInitCfg+0x52>
 8008426:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
 800842a:	2101      	movs	r1, #1
 800842c:	f007 f8e6 	bl	800f5fc <Argus_Dev_UpdateSync>
 8008430:	2803      	cmp	r0, #3
 8008432:	bf08      	it	eq
 8008434:	2000      	moveq	r0, #0
 8008436:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 800843a:	bd10      	pop	{r4, pc}
 800843c:	4802      	ldr	r0, [pc, #8]	; (8008448 <ApplyInitCfg+0x64>)
 800843e:	f7f8 fd07 	bl	8000e50 <print>
 8008442:	f06f 00be 	mvn.w	r0, #190	; 0xbe
 8008446:	e7f6      	b.n	8008436 <ApplyInitCfg+0x52>
 8008448:	080190c0 	.word	0x080190c0

0800844c <Argus_Cfg_Init>:
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	4604      	mov	r4, r0
 8008450:	460d      	mov	r5, r1
 8008452:	4616      	mov	r6, r2
 8008454:	2100      	movs	r1, #0
 8008456:	f44f 7206 	mov.w	r2, #536	; 0x218
 800845a:	f00f f961 	bl	8017720 <memset>
 800845e:	e9c4 5684 	strd	r5, r6, [r4, #528]	; 0x210
 8008462:	4620      	mov	r0, r4
 8008464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008468:	f7ff bfbc 	b.w	80083e4 <ApplyInitCfg>

0800846c <Argus_Cfg_SetConfigurationSync>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4604      	mov	r4, r0
 8008470:	f8d0 0210 	ldr.w	r0, [r0, #528]	; 0x210
 8008474:	460d      	mov	r5, r1
 8008476:	f006 fdcb 	bl	800f010 <Argus_Dev_HasUpdateFlag>
 800847a:	b9a0      	cbnz	r0, 80084a6 <Argus_Cfg_SetConfigurationSync+0x3a>
 800847c:	4629      	mov	r1, r5
 800847e:	4620      	mov	r0, r4
 8008480:	f7ff ff1c 	bl	80082bc <PrepareConfiguration>
 8008484:	2800      	cmp	r0, #0
 8008486:	db13      	blt.n	80084b0 <Argus_Cfg_SetConfigurationSync+0x44>
 8008488:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800848c:	f8d3 01d0 	ldr.w	r0, [r3, #464]	; 0x1d0
 8008490:	f00a f9d2 	bl	8012838 <Argus_Cal_Update>
 8008494:	2800      	cmp	r0, #0
 8008496:	db0b      	blt.n	80084b0 <Argus_Cfg_SetConfigurationSync+0x44>
 8008498:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
 800849c:	2101      	movs	r1, #1
 800849e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084a2:	f007 b8ab 	b.w	800f5fc <Argus_Dev_UpdateSync>
 80084a6:	4803      	ldr	r0, [pc, #12]	; (80084b4 <Argus_Cfg_SetConfigurationSync+0x48>)
 80084a8:	f7f8 fcd2 	bl	8000e50 <print>
 80084ac:	f06f 00be 	mvn.w	r0, #190	; 0xbe
 80084b0:	bd38      	pop	{r3, r4, r5, pc}
 80084b2:	bf00      	nop
 80084b4:	080190c0 	.word	0x080190c0

080084b8 <Argus_Cfg_SetConfiguration>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	4604      	mov	r4, r0
 80084bc:	f8d0 0210 	ldr.w	r0, [r0, #528]	; 0x210
 80084c0:	460e      	mov	r6, r1
 80084c2:	f006 fda5 	bl	800f010 <Argus_Dev_HasUpdateFlag>
 80084c6:	bb90      	cbnz	r0, 800852e <Argus_Cfg_SetConfiguration+0x76>
 80084c8:	6862      	ldr	r2, [r4, #4]
 80084ca:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
 80084ce:	0a52      	lsrs	r2, r2, #9
 80084d0:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 80084d4:	21c1      	movs	r1, #193	; 0xc1
 80084d6:	f006 f9eb 	bl	800e8b0 <Argus_Dev_SetStatusSync>
 80084da:	4605      	mov	r5, r0
 80084dc:	b108      	cbz	r0, 80084e2 <Argus_Cfg_SetConfiguration+0x2a>
 80084de:	4628      	mov	r0, r5
 80084e0:	bd70      	pop	{r4, r5, r6, pc}
 80084e2:	4631      	mov	r1, r6
 80084e4:	4620      	mov	r0, r4
 80084e6:	f7ff fee9 	bl	80082bc <PrepareConfiguration>
 80084ea:	1e03      	subs	r3, r0, #0
 80084ec:	db17      	blt.n	800851e <Argus_Cfg_SetConfiguration+0x66>
 80084ee:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80084f2:	f8d3 01d0 	ldr.w	r0, [r3, #464]	; 0x1d0
 80084f6:	f00a f99f 	bl	8012838 <Argus_Cal_Update>
 80084fa:	1e03      	subs	r3, r0, #0
 80084fc:	db0f      	blt.n	800851e <Argus_Cfg_SetConfiguration+0x66>
 80084fe:	4623      	mov	r3, r4
 8008500:	4a0e      	ldr	r2, [pc, #56]	; (800853c <Argus_Cfg_SetConfiguration+0x84>)
 8008502:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
 8008506:	2101      	movs	r1, #1
 8008508:	f006 fe7a 	bl	800f200 <Argus_Dev_Update>
 800850c:	1e06      	subs	r6, r0, #0
 800850e:	dae6      	bge.n	80084de <Argus_Cfg_SetConfiguration+0x26>
 8008510:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
 8008514:	21c1      	movs	r1, #193	; 0xc1
 8008516:	f006 fa25 	bl	800e964 <Argus_Dev_ClearStatus>
 800851a:	4635      	mov	r5, r6
 800851c:	e7df      	b.n	80084de <Argus_Cfg_SetConfiguration+0x26>
 800851e:	461d      	mov	r5, r3
 8008520:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
 8008524:	21c1      	movs	r1, #193	; 0xc1
 8008526:	f006 fa1d 	bl	800e964 <Argus_Dev_ClearStatus>
 800852a:	4628      	mov	r0, r5
 800852c:	bd70      	pop	{r4, r5, r6, pc}
 800852e:	4804      	ldr	r0, [pc, #16]	; (8008540 <Argus_Cfg_SetConfiguration+0x88>)
 8008530:	f7f8 fc8e 	bl	8000e50 <print>
 8008534:	f06f 05be 	mvn.w	r5, #190	; 0xbe
 8008538:	e7d1      	b.n	80084de <Argus_Cfg_SetConfiguration+0x26>
 800853a:	bf00      	nop
 800853c:	080082b1 	.word	0x080082b1
 8008540:	08019134 	.word	0x08019134

08008544 <Argus_Cfg_GetConfiguration>:
 8008544:	b508      	push	{r3, lr}
 8008546:	460b      	mov	r3, r1
 8008548:	f44f 7204 	mov.w	r2, #528	; 0x210
 800854c:	4601      	mov	r1, r0
 800854e:	4618      	mov	r0, r3
 8008550:	f00f f8db 	bl	801770a <memcpy>
 8008554:	2000      	movs	r0, #0
 8008556:	bd08      	pop	{r3, pc}

08008558 <Argus_Cfg_GetConfigurationPtr>:
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop

0800855c <Argus_GetDefaultPbaCfg.isra.0>:
 800855c:	2302      	movs	r3, #2
 800855e:	2a05      	cmp	r2, #5
 8008560:	7043      	strb	r3, [r0, #1]
 8008562:	b430      	push	{r4, r5}
 8008564:	7803      	ldrb	r3, [r0, #0]
 8008566:	d02d      	beq.n	80085c4 <Argus_GetDefaultPbaCfg.isra.0+0x68>
 8008568:	2a04      	cmp	r2, #4
 800856a:	d018      	beq.n	800859e <Argus_GetDefaultPbaCfg.isra.0+0x42>
 800856c:	2a03      	cmp	r2, #3
 800856e:	d049      	beq.n	8008604 <Argus_GetDefaultPbaCfg.isra.0+0xa8>
 8008570:	2902      	cmp	r1, #2
 8008572:	bf0c      	ite	eq
 8008574:	24f0      	moveq	r4, #240	; 0xf0
 8008576:	f44f 74c0 	movne.w	r4, #384	; 0x180
 800857a:	4d29      	ldr	r5, [pc, #164]	; (8008620 <Argus_GetDefaultPbaCfg.isra.0+0xc4>)
 800857c:	8084      	strh	r4, [r0, #4]
 800857e:	2433      	movs	r4, #51	; 0x33
 8008580:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8008584:	6085      	str	r5, [r0, #8]
 8008586:	7084      	strb	r4, [r0, #2]
 8008588:	bb3a      	cbnz	r2, 80085da <Argus_GetDefaultPbaCfg.isra.0+0x7e>
 800858a:	f240 6166 	movw	r1, #1638	; 0x666
 800858e:	221a      	movs	r2, #26
 8008590:	f043 0320 	orr.w	r3, r3, #32
 8008594:	80c1      	strh	r1, [r0, #6]
 8008596:	70c2      	strb	r2, [r0, #3]
 8008598:	7003      	strb	r3, [r0, #0]
 800859a:	bc30      	pop	{r4, r5}
 800859c:	4770      	bx	lr
 800859e:	2902      	cmp	r1, #2
 80085a0:	bf14      	ite	ne
 80085a2:	f44f 72f0 	movne.w	r2, #480	; 0x1e0
 80085a6:	22f0      	moveq	r2, #240	; 0xf0
 80085a8:	4c1e      	ldr	r4, [pc, #120]	; (8008624 <Argus_GetDefaultPbaCfg.isra.0+0xc8>)
 80085aa:	8082      	strh	r2, [r0, #4]
 80085ac:	f240 6166 	movw	r1, #1638	; 0x666
 80085b0:	f44f 52d4 	mov.w	r2, #6784	; 0x1a80
 80085b4:	f043 0361 	orr.w	r3, r3, #97	; 0x61
 80085b8:	6084      	str	r4, [r0, #8]
 80085ba:	80c1      	strh	r1, [r0, #6]
 80085bc:	8042      	strh	r2, [r0, #2]
 80085be:	7003      	strb	r3, [r0, #0]
 80085c0:	bc30      	pop	{r4, r5}
 80085c2:	4770      	bx	lr
 80085c4:	2902      	cmp	r1, #2
 80085c6:	f04f 0400 	mov.w	r4, #0
 80085ca:	bf0c      	ite	eq
 80085cc:	2540      	moveq	r5, #64	; 0x40
 80085ce:	2560      	movne	r5, #96	; 0x60
 80085d0:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 80085d4:	8085      	strh	r5, [r0, #4]
 80085d6:	6084      	str	r4, [r0, #8]
 80085d8:	7084      	strb	r4, [r0, #2]
 80085da:	2902      	cmp	r1, #2
 80085dc:	d00d      	beq.n	80085fa <Argus_GetDefaultPbaCfg.isra.0+0x9e>
 80085de:	f640 41cd 	movw	r1, #3277	; 0xccd
 80085e2:	80c1      	strh	r1, [r0, #6]
 80085e4:	2129      	movs	r1, #41	; 0x29
 80085e6:	2a05      	cmp	r2, #5
 80085e8:	70c1      	strb	r1, [r0, #3]
 80085ea:	b259      	sxtb	r1, r3
 80085ec:	bf1c      	itt	ne
 80085ee:	f041 0320 	orrne.w	r3, r1, #32
 80085f2:	b2db      	uxtbne	r3, r3
 80085f4:	7003      	strb	r3, [r0, #0]
 80085f6:	bc30      	pop	{r4, r5}
 80085f8:	4770      	bx	lr
 80085fa:	f240 6166 	movw	r1, #1638	; 0x666
 80085fe:	80c1      	strh	r1, [r0, #6]
 8008600:	211a      	movs	r1, #26
 8008602:	e7f0      	b.n	80085e6 <Argus_GetDefaultPbaCfg.isra.0+0x8a>
 8008604:	2902      	cmp	r1, #2
 8008606:	bf14      	ite	ne
 8008608:	f44f 7220 	movne.w	r2, #640	; 0x280
 800860c:	f44f 72a0 	moveq.w	r2, #320	; 0x140
 8008610:	4904      	ldr	r1, [pc, #16]	; (8008624 <Argus_GetDefaultPbaCfg.isra.0+0xc8>)
 8008612:	8082      	strh	r2, [r0, #4]
 8008614:	2280      	movs	r2, #128	; 0x80
 8008616:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 800861a:	6081      	str	r1, [r0, #8]
 800861c:	7082      	strb	r2, [r0, #2]
 800861e:	e7b4      	b.n	800858a <Argus_GetDefaultPbaCfg.isra.0+0x2e>
 8008620:	aa015501 	.word	0xaa015501
 8008624:	aa83ffd7 	.word	0xaa83ffd7

08008628 <Argus_Cfg_GetDefaultConfiguration>:
 8008628:	2907      	cmp	r1, #7
 800862a:	f200 8563 	bhi.w	80090f4 <Argus_Cfg_GetDefaultConfiguration+0xacc>
 800862e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008632:	460d      	mov	r5, r1
 8008634:	b087      	sub	sp, #28
 8008636:	4604      	mov	r4, r0
 8008638:	4690      	mov	r8, r2
 800863a:	461e      	mov	r6, r3
 800863c:	b132      	cbz	r2, 800864c <Argus_Cfg_GetDefaultConfiguration+0x24>
 800863e:	2a03      	cmp	r2, #3
 8008640:	d906      	bls.n	8008650 <Argus_Cfg_GetDefaultConfiguration+0x28>
 8008642:	f06f 00c5 	mvn.w	r0, #197	; 0xc5
 8008646:	b007      	add	sp, #28
 8008648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864c:	f04f 0803 	mov.w	r8, #3
 8008650:	2e00      	cmp	r6, #0
 8008652:	f000 838b 	beq.w	8008d6c <Argus_Cfg_GetDefaultConfiguration+0x744>
 8008656:	2e03      	cmp	r6, #3
 8008658:	f200 8383 	bhi.w	8008d62 <Argus_Cfg_GetDefaultConfiguration+0x73a>
 800865c:	f44f 7204 	mov.w	r2, #528	; 0x210
 8008660:	2100      	movs	r1, #0
 8008662:	4620      	mov	r0, r4
 8008664:	f00f f85c 	bl	8017720 <memset>
 8008668:	2302      	movs	r3, #2
 800866a:	f649 4040 	movw	r0, #40000	; 0x9c40
 800866e:	2100      	movs	r1, #0
 8008670:	4ae4      	ldr	r2, [pc, #912]	; (8008a04 <Argus_Cfg_GetDefaultConfiguration+0x3dc>)
 8008672:	7023      	strb	r3, [r4, #0]
 8008674:	2d01      	cmp	r5, #1
 8008676:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800867a:	6060      	str	r0, [r4, #4]
 800867c:	f8c4 1049 	str.w	r1, [r4, #73]	; 0x49
 8008680:	f8c4 204d 	str.w	r2, [r4, #77]	; 0x4d
 8008684:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 8008688:	f000 849c 	beq.w	8008fc4 <Argus_Cfg_GetDefaultConfiguration+0x99c>
 800868c:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 8008690:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8008694:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8008698:	f035 0304 	bics.w	r3, r5, #4
 800869c:	f040 8520 	bne.w	80090e0 <Argus_Cfg_GetDefaultConfiguration+0xab8>
 80086a0:	4ad9      	ldr	r2, [pc, #868]	; (8008a08 <Argus_Cfg_GetDefaultConfiguration+0x3e0>)
 80086a2:	f8c4 2056 	str.w	r2, [r4, #86]	; 0x56
 80086a6:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80086aa:	f8c4 205a 	str.w	r2, [r4, #90]	; 0x5a
 80086ae:	f8c4 205e 	str.w	r2, [r4, #94]	; 0x5e
 80086b2:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
 80086b6:	21ff      	movs	r1, #255	; 0xff
 80086b8:	2d04      	cmp	r5, #4
 80086ba:	f002 020f 	and.w	r2, r2, #15
 80086be:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
 80086c2:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 80086c6:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
 80086ca:	f000 8370 	beq.w	8008dae <Argus_Cfg_GetDefaultConfiguration+0x786>
 80086ce:	4608      	mov	r0, r1
 80086d0:	270f      	movs	r7, #15
 80086d2:	b905      	cbnz	r5, 80086d6 <Argus_Cfg_GetDefaultConfiguration+0xae>
 80086d4:	460f      	mov	r7, r1
 80086d6:	210f      	movs	r1, #15
 80086d8:	f884 7066 	strb.w	r7, [r4, #102]	; 0x66
 80086dc:	f884 0073 	strb.w	r0, [r4, #115]	; 0x73
 80086e0:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 80086e4:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
 80086e8:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
 80086ec:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
 80086f0:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
 80086f4:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
 80086f8:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
 80086fc:	f884 106c 	strb.w	r1, [r4, #108]	; 0x6c
 8008700:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
 8008704:	f884 106e 	strb.w	r1, [r4, #110]	; 0x6e
 8008708:	f884 106f 	strb.w	r1, [r4, #111]	; 0x6f
 800870c:	f884 1070 	strb.w	r1, [r4, #112]	; 0x70
 8008710:	f884 1071 	strb.w	r1, [r4, #113]	; 0x71
 8008714:	f884 1072 	strb.w	r1, [r4, #114]	; 0x72
 8008718:	2d00      	cmp	r5, #0
 800871a:	f040 8431 	bne.w	8008f80 <Argus_Cfg_GetDefaultConfiguration+0x958>
 800871e:	49ba      	ldr	r1, [pc, #744]	; (8008a08 <Argus_Cfg_GetDefaultConfiguration+0x3e0>)
 8008720:	f8c4 1076 	str.w	r1, [r4, #118]	; 0x76
 8008724:	f04f 31f0 	mov.w	r1, #4042322160	; 0xf0f0f0f0
 8008728:	f8c4 107a 	str.w	r1, [r4, #122]	; 0x7a
 800872c:	f8c4 107e 	str.w	r1, [r4, #126]	; 0x7e
 8008730:	21f0      	movs	r1, #240	; 0xf0
 8008732:	f884 1082 	strb.w	r1, [r4, #130]	; 0x82
 8008736:	2103      	movs	r1, #3
 8008738:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
 800873c:	2184      	movs	r1, #132	; 0x84
 800873e:	f884 1085 	strb.w	r1, [r4, #133]	; 0x85
 8008742:	2110      	movs	r1, #16
 8008744:	48b1      	ldr	r0, [pc, #708]	; (8008a0c <Argus_Cfg_GetDefaultConfiguration+0x3e4>)
 8008746:	f884 1086 	strb.w	r1, [r4, #134]	; 0x86
 800874a:	2d04      	cmp	r5, #4
 800874c:	f04f 0100 	mov.w	r1, #0
 8008750:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8008754:	f884 108d 	strb.w	r1, [r4, #141]	; 0x8d
 8008758:	f000 840a 	beq.w	8008f70 <Argus_Cfg_GetDefaultConfiguration+0x948>
 800875c:	2d00      	cmp	r5, #0
 800875e:	bf0c      	ite	eq
 8008760:	2120      	moveq	r1, #32
 8008762:	213e      	movne	r1, #62	; 0x3e
 8008764:	2e02      	cmp	r6, #2
 8008766:	bf08      	it	eq
 8008768:	f041 0101 	orreq.w	r1, r1, #1
 800876c:	f884 108e 	strb.w	r1, [r4, #142]	; 0x8e
 8008770:	f000 84ae 	beq.w	80090d0 <Argus_Cfg_GetDefaultConfiguration+0xaa8>
 8008774:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8008778:	2700      	movs	r7, #0
 800877a:	f022 020a 	bic.w	r2, r2, #10
 800877e:	f894 1091 	ldrb.w	r1, [r4, #145]	; 0x91
 8008782:	f894 c0a2 	ldrb.w	ip, [r4, #162]	; 0xa2
 8008786:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8008a54 <Argus_Cfg_GetDefaultConfiguration+0x42c>
 800878a:	f894 00a7 	ldrb.w	r0, [r4, #167]	; 0xa7
 800878e:	f8c4 e09d 	str.w	lr, [r4, #157]	; 0x9d
 8008792:	433a      	orrs	r2, r7
 8008794:	f042 0204 	orr.w	r2, r2, #4
 8008798:	f1b8 0f01 	cmp.w	r8, #1
 800879c:	f022 0201 	bic.w	r2, r2, #1
 80087a0:	f041 011e 	orr.w	r1, r1, #30
 80087a4:	bf14      	ite	ne
 80087a6:	f06f 087f 	mvnne.w	r8, #127	; 0x7f
 80087aa:	f06f 083f 	mvneq.w	r8, #63	; 0x3f
 80087ae:	f021 0101 	bic.w	r1, r1, #1
 80087b2:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
 80087b6:	f884 208f 	strb.w	r2, [r4, #143]	; 0x8f
 80087ba:	f04f 020d 	mov.w	r2, #13
 80087be:	f048 0e10 	orr.w	lr, r8, #16
 80087c2:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
 80087c6:	f884 c0a2 	strb.w	ip, [r4, #162]	; 0xa2
 80087ca:	f04f 0101 	mov.w	r1, #1
 80087ce:	f04f 0c21 	mov.w	ip, #33	; 0x21
 80087d2:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
 80087d6:	f04f 0226 	mov.w	r2, #38	; 0x26
 80087da:	bf14      	ite	ne
 80087dc:	f04f 0a08 	movne.w	sl, #8
 80087e0:	f04f 0a0c 	moveq.w	sl, #12
 80087e4:	f884 e09a 	strb.w	lr, [r4, #154]	; 0x9a
 80087e8:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
 80087ec:	f04f 0e12 	mov.w	lr, #18
 80087f0:	2200      	movs	r2, #0
 80087f2:	f884 c09b 	strb.w	ip, [r4, #155]	; 0x9b
 80087f6:	428d      	cmp	r5, r1
 80087f8:	f04f 0c03 	mov.w	ip, #3
 80087fc:	f884 a099 	strb.w	sl, [r4, #153]	; 0x99
 8008800:	f000 001f 	and.w	r0, r0, #31
 8008804:	f884 e094 	strb.w	lr, [r4, #148]	; 0x94
 8008808:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
 800880c:	f884 20a3 	strb.w	r2, [r4, #163]	; 0xa3
 8008810:	f884 c0a4 	strb.w	ip, [r4, #164]	; 0xa4
 8008814:	f000 844d 	beq.w	80090b2 <Argus_Cfg_GetDefaultConfiguration+0xa8a>
 8008818:	f884 10a6 	strb.w	r1, [r4, #166]	; 0xa6
 800881c:	f06f 021f 	mvn.w	r2, #31
 8008820:	4302      	orrs	r2, r0
 8008822:	f022 021e 	bic.w	r2, r2, #30
 8008826:	f894 00b5 	ldrb.w	r0, [r4, #181]	; 0xb5
 800882a:	f042 0206 	orr.w	r2, r2, #6
 800882e:	2100      	movs	r1, #0
 8008830:	f04f 0c01 	mov.w	ip, #1
 8008834:	f884 20a7 	strb.w	r2, [r4, #167]	; 0xa7
 8008838:	22ff      	movs	r2, #255	; 0xff
 800883a:	f020 0003 	bic.w	r0, r0, #3
 800883e:	f884 10a9 	strb.w	r1, [r4, #169]	; 0xa9
 8008842:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
 8008846:	f884 10ab 	strb.w	r1, [r4, #171]	; 0xab
 800884a:	f884 10b6 	strb.w	r1, [r4, #182]	; 0xb6
 800884e:	f884 10b8 	strb.w	r1, [r4, #184]	; 0xb8
 8008852:	f884 20ae 	strb.w	r2, [r4, #174]	; 0xae
 8008856:	2104      	movs	r1, #4
 8008858:	f884 20af 	strb.w	r2, [r4, #175]	; 0xaf
 800885c:	f884 20b1 	strb.w	r2, [r4, #177]	; 0xb1
 8008860:	f884 20b2 	strb.w	r2, [r4, #178]	; 0xb2
 8008864:	4565      	cmp	r5, ip
 8008866:	f04f 0202 	mov.w	r2, #2
 800886a:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
 800886e:	f884 c0ad 	strb.w	ip, [r4, #173]	; 0xad
 8008872:	f884 10b3 	strb.w	r1, [r4, #179]	; 0xb3
 8008876:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
 800887a:	f000 83ff 	beq.w	800907c <Argus_Cfg_GetDefaultConfiguration+0xa54>
 800887e:	4964      	ldr	r1, [pc, #400]	; (8008a10 <Argus_Cfg_GetDefaultConfiguration+0x3e8>)
 8008880:	62e1      	str	r1, [r4, #44]	; 0x2c
 8008882:	2166      	movs	r1, #102	; 0x66
 8008884:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8008888:	2150      	movs	r1, #80	; 0x50
 800888a:	4862      	ldr	r0, [pc, #392]	; (8008a14 <Argus_Cfg_GetDefaultConfiguration+0x3ec>)
 800888c:	86e1      	strh	r1, [r4, #54]	; 0x36
 800888e:	2108      	movs	r1, #8
 8008890:	f884 20b9 	strb.w	r2, [r4, #185]	; 0xb9
 8008894:	f884 c043 	strb.w	ip, [r4, #67]	; 0x43
 8008898:	6460      	str	r0, [r4, #68]	; 0x44
 800889a:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 829d 	beq.w	8008dde <Argus_Cfg_GetDefaultConfiguration+0x7b6>
 80088a4:	2120      	movs	r1, #32
 80088a6:	f884 c033 	strb.w	ip, [r4, #51]	; 0x33
 80088aa:	9204      	str	r2, [sp, #16]
 80088ac:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 80088b0:	f04f 0c15 	mov.w	ip, #21
 80088b4:	2126      	movs	r1, #38	; 0x26
 80088b6:	4858      	ldr	r0, [pc, #352]	; (8008a18 <Argus_Cfg_GetDefaultConfiguration+0x3f0>)
 80088b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80088bc:	4957      	ldr	r1, [pc, #348]	; (8008a1c <Argus_Cfg_GetDefaultConfiguration+0x3f4>)
 80088be:	63e0      	str	r0, [r4, #60]	; 0x3c
 80088c0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80088c4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80088c8:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
 80088cc:	2110      	movs	r1, #16
 80088ce:	63a2      	str	r2, [r4, #56]	; 0x38
 80088d0:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
 80088d4:	f44f 02a6 	mov.w	r2, #5439488	; 0x530000
 80088d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80088dc:	f8a4 10ce 	strh.w	r1, [r4, #206]	; 0xce
 80088e0:	494f      	ldr	r1, [pc, #316]	; (8008a20 <Argus_Cfg_GetDefaultConfiguration+0x3f8>)
 80088e2:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 80088e6:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
 80088ea:	2200      	movs	r2, #0
 80088ec:	484d      	ldr	r0, [pc, #308]	; (8008a24 <Argus_Cfg_GetDefaultConfiguration+0x3fc>)
 80088ee:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
 80088f2:	21b3      	movs	r1, #179	; 0xb3
 80088f4:	ebb5 0902 	subs.w	r9, r5, r2
 80088f8:	f884 c031 	strb.w	ip, [r4, #49]	; 0x31
 80088fc:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
 8008900:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8008904:	f04f 0005 	mov.w	r0, #5
 8008908:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
 800890c:	4946      	ldr	r1, [pc, #280]	; (8008a28 <Argus_Cfg_GetDefaultConfiguration+0x400>)
 800890e:	f8a4 c040 	strh.w	ip, [r4, #64]	; 0x40
 8008912:	bf18      	it	ne
 8008914:	f04f 0901 	movne.w	r9, #1
 8008918:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8008a58 <Argus_Cfg_GetDefaultConfiguration+0x430>
 800891c:	f884 00ed 	strb.w	r0, [r4, #237]	; 0xed
 8008920:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
 8008924:	f240 4006 	movw	r0, #1030	; 0x406
 8008928:	2103      	movs	r1, #3
 800892a:	2d05      	cmp	r5, #5
 800892c:	f8c4 c0c8 	str.w	ip, [r4, #200]	; 0xc8
 8008930:	f884 20cc 	strb.w	r2, [r4, #204]	; 0xcc
 8008934:	f884 90ec 	strb.w	r9, [r4, #236]	; 0xec
 8008938:	f8a4 00f4 	strh.w	r0, [r4, #244]	; 0xf4
 800893c:	f884 10f6 	strb.w	r1, [r4, #246]	; 0xf6
 8008940:	f000 8297 	beq.w	8008e72 <Argus_Cfg_GetDefaultConfiguration+0x84a>
 8008944:	4a39      	ldr	r2, [pc, #228]	; (8008a2c <Argus_Cfg_GetDefaultConfiguration+0x404>)
 8008946:	493a      	ldr	r1, [pc, #232]	; (8008a30 <Argus_Cfg_GetDefaultConfiguration+0x408>)
 8008948:	2d04      	cmp	r5, #4
 800894a:	e9c4 2140 	strd	r2, r1, [r4, #256]	; 0x100
 800894e:	f000 83ac 	beq.w	80090aa <Argus_Cfg_GetDefaultConfiguration+0xa82>
 8008952:	2d03      	cmp	r5, #3
 8008954:	f000 8260 	beq.w	8008e18 <Argus_Cfg_GetDefaultConfiguration+0x7f0>
 8008958:	2202      	movs	r2, #2
 800895a:	9201      	str	r2, [sp, #4]
 800895c:	4a35      	ldr	r2, [pc, #212]	; (8008a34 <Argus_Cfg_GetDefaultConfiguration+0x40c>)
 800895e:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
 8008962:	f641 3158 	movw	r1, #7000	; 0x1b58
 8008966:	4a34      	ldr	r2, [pc, #208]	; (8008a38 <Argus_Cfg_GetDefaultConfiguration+0x410>)
 8008968:	f8a4 10da 	strh.w	r1, [r4, #218]	; 0xda
 800896c:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
 8008970:	4932      	ldr	r1, [pc, #200]	; (8008a3c <Argus_Cfg_GetDefaultConfiguration+0x414>)
 8008972:	4a33      	ldr	r2, [pc, #204]	; (8008a40 <Argus_Cfg_GetDefaultConfiguration+0x418>)
 8008974:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
 8008978:	f115 30ff 	adds.w	r0, r5, #4294967295
 800897c:	4931      	ldr	r1, [pc, #196]	; (8008a44 <Argus_Cfg_GetDefaultConfiguration+0x41c>)
 800897e:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
 8008982:	f04f 0255 	mov.w	r2, #85	; 0x55
 8008986:	bf18      	it	ne
 8008988:	2001      	movne	r0, #1
 800898a:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
 800898e:	f884 20d5 	strb.w	r2, [r4, #213]	; 0xd5
 8008992:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008996:	22cd      	movs	r2, #205	; 0xcd
 8008998:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
 800899c:	f8a4 10d6 	strh.w	r1, [r4, #214]	; 0xd6
 80089a0:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
 80089a4:	2d00      	cmp	r5, #0
 80089a6:	f040 8223 	bne.w	8008df0 <Argus_Cfg_GetDefaultConfiguration+0x7c8>
 80089aa:	2203      	movs	r2, #3
 80089ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80089b0:	72a2      	strb	r2, [r4, #10]
 80089b2:	f04f 32ff 	mov.w	r2, #4294967295
 80089b6:	8121      	strh	r1, [r4, #8]
 80089b8:	9205      	str	r2, [sp, #20]
 80089ba:	2110      	movs	r1, #16
 80089bc:	4a22      	ldr	r2, [pc, #136]	; (8008a48 <Argus_Cfg_GetDefaultConfiguration+0x420>)
 80089be:	72e1      	strb	r1, [r4, #11]
 80089c0:	60e2      	str	r2, [r4, #12]
 80089c2:	4922      	ldr	r1, [pc, #136]	; (8008a4c <Argus_Cfg_GetDefaultConfiguration+0x424>)
 80089c4:	4a22      	ldr	r2, [pc, #136]	; (8008a50 <Argus_Cfg_GetDefaultConfiguration+0x428>)
 80089c6:	6121      	str	r1, [r4, #16]
 80089c8:	2d01      	cmp	r5, #1
 80089ca:	6162      	str	r2, [r4, #20]
 80089cc:	f040 8377 	bne.w	80090be <Argus_Cfg_GetDefaultConfiguration+0xa96>
 80089d0:	f240 11c3 	movw	r1, #451	; 0x1c3
 80089d4:	2202      	movs	r2, #2
 80089d6:	2071      	movs	r0, #113	; 0x71
 80089d8:	8321      	strh	r1, [r4, #24]
 80089da:	8360      	strh	r0, [r4, #26]
 80089dc:	83a2      	strh	r2, [r4, #28]
 80089de:	9203      	str	r2, [sp, #12]
 80089e0:	f04f 0b03 	mov.w	fp, #3
 80089e4:	2233      	movs	r2, #51	; 0x33
 80089e6:	77e2      	strb	r2, [r4, #31]
 80089e8:	2101      	movs	r1, #1
 80089ea:	462a      	mov	r2, r5
 80089ec:	f104 0020 	add.w	r0, r4, #32
 80089f0:	f884 b01e 	strb.w	fp, [r4, #30]
 80089f4:	9302      	str	r3, [sp, #8]
 80089f6:	f7ff fdb1 	bl	800855c <Argus_GetDefaultPbaCfg.isra.0>
 80089fa:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80089fe:	4901      	ldr	r1, [pc, #4]	; (8008a04 <Argus_Cfg_GetDefaultConfiguration+0x3dc>)
 8008a00:	e02c      	b.n	8008a5c <Argus_Cfg_GetDefaultConfiguration+0x434>
 8008a02:	bf00      	nop
 8008a04:	20640000 	.word	0x20640000
 8008a08:	f0f0f0ff 	.word	0xf0f0f0ff
 8008a0c:	030f51fe 	.word	0x030f51fe
 8008a10:	016e3600 	.word	0x016e3600
 8008a14:	003201f4 	.word	0x003201f4
 8008a18:	006400c0 	.word	0x006400c0
 8008a1c:	0002828f 	.word	0x0002828f
 8008a20:	019000f0 	.word	0x019000f0
 8008a24:	09600640 	.word	0x09600640
 8008a28:	0c80dac0 	.word	0x0c80dac0
 8008a2c:	06053302 	.word	0x06053302
 8008a30:	00200040 	.word	0x00200040
 8008a34:	fe01fd01 	.word	0xfe01fd01
 8008a38:	04430491 	.word	0x04430491
 8008a3c:	03c3038d 	.word	0x03c3038d
 8008a40:	005b8d80 	.word	0x005b8d80
 8008a44:	002dc6c0 	.word	0x002dc6c0
 8008a48:	0c801ae0 	.word	0x0c801ae0
 8008a4c:	01003840 	.word	0x01003840
 8008a50:	04000004 	.word	0x04000004
 8008a54:	e97fffbf 	.word	0xe97fffbf
 8008a58:	06070101 	.word	0x06070101
 8008a5c:	f8df c4c4 	ldr.w	ip, [pc, #1220]	; 8008f24 <Argus_Cfg_GetDefaultConfiguration+0x8fc>
 8008a60:	f8c4 1151 	str.w	r1, [r4, #337]	; 0x151
 8008a64:	f8c4 c156 	str.w	ip, [r4, #342]	; 0x156
 8008a68:	f04f 310f 	mov.w	r1, #252645135	; 0xf0f0f0f
 8008a6c:	f04f 0c04 	mov.w	ip, #4
 8008a70:	f8c4 215a 	str.w	r2, [r4, #346]	; 0x15a
 8008a74:	f8c4 215e 	str.w	r2, [r4, #350]	; 0x15e
 8008a78:	f8c4 2162 	str.w	r2, [r4, #354]	; 0x162
 8008a7c:	f8c4 2177 	str.w	r2, [r4, #375]	; 0x177
 8008a80:	f8c4 217b 	str.w	r2, [r4, #379]	; 0x17b
 8008a84:	f8c4 217f 	str.w	r2, [r4, #383]	; 0x17f
 8008a88:	f8c4 2183 	str.w	r2, [r4, #387]	; 0x183
 8008a8c:	2284      	movs	r2, #132	; 0x84
 8008a8e:	2000      	movs	r0, #0
 8008a90:	f8c4 1167 	str.w	r1, [r4, #359]	; 0x167
 8008a94:	f8c4 116b 	str.w	r1, [r4, #363]	; 0x16b
 8008a98:	f8c4 116f 	str.w	r1, [r4, #367]	; 0x16f
 8008a9c:	f8c4 1173 	str.w	r1, [r4, #371]	; 0x173
 8008aa0:	f04f 0e10 	mov.w	lr, #16
 8008aa4:	f884 c188 	strb.w	ip, [r4, #392]	; 0x188
 8008aa8:	21fe      	movs	r1, #254	; 0xfe
 8008aaa:	f884 2189 	strb.w	r2, [r4, #393]	; 0x189
 8008aae:	f04f 0c51 	mov.w	ip, #81	; 0x51
 8008ab2:	220f      	movs	r2, #15
 8008ab4:	2d01      	cmp	r5, #1
 8008ab6:	f8c4 014d 	str.w	r0, [r4, #333]	; 0x14d
 8008aba:	f884 e18a 	strb.w	lr, [r4, #394]	; 0x18a
 8008abe:	f884 118c 	strb.w	r1, [r4, #396]	; 0x18c
 8008ac2:	f884 c18d 	strb.w	ip, [r4, #397]	; 0x18d
 8008ac6:	f884 218e 	strb.w	r2, [r4, #398]	; 0x18e
 8008aca:	9b02      	ldr	r3, [sp, #8]
 8008acc:	f000 8232 	beq.w	8008f34 <Argus_Cfg_GetDefaultConfiguration+0x90c>
 8008ad0:	f894 2193 	ldrb.w	r2, [r4, #403]	; 0x193
 8008ad4:	f884 7191 	strb.w	r7, [r4, #401]	; 0x191
 8008ad8:	2105      	movs	r1, #5
 8008ada:	2d04      	cmp	r5, #4
 8008adc:	f002 020f 	and.w	r2, r2, #15
 8008ae0:	f884 118f 	strb.w	r1, [r4, #399]	; 0x18f
 8008ae4:	f000 8220 	beq.w	8008f28 <Argus_Cfg_GetDefaultConfiguration+0x900>
 8008ae8:	2d00      	cmp	r5, #0
 8008aea:	bf0c      	ite	eq
 8008aec:	2120      	moveq	r1, #32
 8008aee:	213e      	movne	r1, #62	; 0x3e
 8008af0:	2e02      	cmp	r6, #2
 8008af2:	bf08      	it	eq
 8008af4:	f041 0101 	orreq.w	r1, r1, #1
 8008af8:	f884 1192 	strb.w	r1, [r4, #402]	; 0x192
 8008afc:	f000 82ed 	beq.w	80090da <Argus_Cfg_GetDefaultConfiguration+0xab2>
 8008b00:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8008b04:	f022 020a 	bic.w	r2, r2, #10
 8008b08:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
 8008b0c:	f894 61a6 	ldrb.w	r6, [r4, #422]	; 0x1a6
 8008b10:	f894 01ab 	ldrb.w	r0, [r4, #427]	; 0x1ab
 8008b14:	f884 a19d 	strb.w	sl, [r4, #413]	; 0x19d
 8008b18:	4317      	orrs	r7, r2
 8008b1a:	f047 0704 	orr.w	r7, r7, #4
 8008b1e:	f041 011e 	orr.w	r1, r1, #30
 8008b22:	f027 0701 	bic.w	r7, r7, #1
 8008b26:	f021 0101 	bic.w	r1, r1, #1
 8008b2a:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8008b2e:	220f      	movs	r2, #15
 8008b30:	f884 7193 	strb.w	r7, [r4, #403]	; 0x193
 8008b34:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
 8008b38:	2712      	movs	r7, #18
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	f048 0810 	orr.w	r8, r8, #16
 8008b40:	f884 61a6 	strb.w	r6, [r4, #422]	; 0x1a6
 8008b44:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
 8008b48:	262b      	movs	r6, #43	; 0x2b
 8008b4a:	2221      	movs	r2, #33	; 0x21
 8008b4c:	f884 7198 	strb.w	r7, [r4, #408]	; 0x198
 8008b50:	f884 119a 	strb.w	r1, [r4, #410]	; 0x19a
 8008b54:	4fd8      	ldr	r7, [pc, #864]	; (8008eb8 <Argus_Cfg_GetDefaultConfiguration+0x890>)
 8008b56:	f884 11a7 	strb.w	r1, [r4, #423]	; 0x1a7
 8008b5a:	2103      	movs	r1, #3
 8008b5c:	f884 819e 	strb.w	r8, [r4, #414]	; 0x19e
 8008b60:	f000 001f 	and.w	r0, r0, #31
 8008b64:	f884 619b 	strb.w	r6, [r4, #411]	; 0x19b
 8008b68:	f884 219f 	strb.w	r2, [r4, #415]	; 0x19f
 8008b6c:	f8c4 71a1 	str.w	r7, [r4, #417]	; 0x1a1
 8008b70:	f884 11a8 	strb.w	r1, [r4, #424]	; 0x1a8
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 812c 	beq.w	8008dd2 <Argus_Cfg_GetDefaultConfiguration+0x7aa>
 8008b7a:	f884 11aa 	strb.w	r1, [r4, #426]	; 0x1aa
 8008b7e:	2320      	movs	r3, #32
 8008b80:	4318      	orrs	r0, r3
 8008b82:	f894 11b9 	ldrb.w	r1, [r4, #441]	; 0x1b9
 8008b86:	9b04      	ldr	r3, [sp, #16]
 8008b88:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
 8008b8c:	f020 001e 	bic.w	r0, r0, #30
 8008b90:	2300      	movs	r3, #0
 8008b92:	f040 0006 	orr.w	r0, r0, #6
 8008b96:	f021 0103 	bic.w	r1, r1, #3
 8008b9a:	22ff      	movs	r2, #255	; 0xff
 8008b9c:	2601      	movs	r6, #1
 8008b9e:	f884 01ab 	strb.w	r0, [r4, #427]	; 0x1ab
 8008ba2:	f884 11b9 	strb.w	r1, [r4, #441]	; 0x1b9
 8008ba6:	2004      	movs	r0, #4
 8008ba8:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
 8008bac:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
 8008bb0:	f884 31af 	strb.w	r3, [r4, #431]	; 0x1af
 8008bb4:	f884 31ba 	strb.w	r3, [r4, #442]	; 0x1ba
 8008bb8:	f884 31bc 	strb.w	r3, [r4, #444]	; 0x1bc
 8008bbc:	49bf      	ldr	r1, [pc, #764]	; (8008ebc <Argus_Cfg_GetDefaultConfiguration+0x894>)
 8008bbe:	f884 61b1 	strb.w	r6, [r4, #433]	; 0x1b1
 8008bc2:	f240 2366 	movw	r3, #614	; 0x266
 8008bc6:	2d05      	cmp	r5, #5
 8008bc8:	f884 21b2 	strb.w	r2, [r4, #434]	; 0x1b2
 8008bcc:	f884 21b3 	strb.w	r2, [r4, #435]	; 0x1b3
 8008bd0:	f884 21b5 	strb.w	r2, [r4, #437]	; 0x1b5
 8008bd4:	f884 21b6 	strb.w	r2, [r4, #438]	; 0x1b6
 8008bd8:	f884 01b7 	strb.w	r0, [r4, #439]	; 0x1b7
 8008bdc:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
 8008be0:	f8a4 3138 	strh.w	r3, [r4, #312]	; 0x138
 8008be4:	f000 814f 	beq.w	8008e86 <Argus_Cfg_GetDefaultConfiguration+0x85e>
 8008be8:	49b5      	ldr	r1, [pc, #724]	; (8008ec0 <Argus_Cfg_GetDefaultConfiguration+0x898>)
 8008bea:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 8008bee:	f649 4240 	movw	r2, #40000	; 0x9c40
 8008bf2:	2350      	movs	r3, #80	; 0x50
 8008bf4:	4285      	cmp	r5, r0
 8008bf6:	f44f 7193 	mov.w	r1, #294	; 0x126
 8008bfa:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
 8008bfe:	4ab1      	ldr	r2, [pc, #708]	; (8008ec4 <Argus_Cfg_GetDefaultConfiguration+0x89c>)
 8008c00:	f8a4 313a 	strh.w	r3, [r4, #314]	; 0x13a
 8008c04:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
 8008c08:	bf14      	ite	ne
 8008c0a:	23c0      	movne	r3, #192	; 0xc0
 8008c0c:	2380      	moveq	r3, #128	; 0x80
 8008c0e:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
 8008c12:	9901      	ldr	r1, [sp, #4]
 8008c14:	f8a4 3140 	strh.w	r3, [r4, #320]	; 0x140
 8008c18:	2064      	movs	r0, #100	; 0x64
 8008c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c1e:	f884 1204 	strb.w	r1, [r4, #516]	; 0x204
 8008c22:	49a9      	ldr	r1, [pc, #676]	; (8008ec8 <Argus_Cfg_GetDefaultConfiguration+0x8a0>)
 8008c24:	f8a4 0142 	strh.w	r0, [r4, #322]	; 0x142
 8008c28:	f8a4 3144 	strh.w	r3, [r4, #324]	; 0x144
 8008c2c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8008c30:	4ba6      	ldr	r3, [pc, #664]	; (8008ecc <Argus_Cfg_GetDefaultConfiguration+0x8a4>)
 8008c32:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
 8008c36:	2110      	movs	r1, #16
 8008c38:	f8a4 01c8 	strh.w	r0, [r4, #456]	; 0x1c8
 8008c3c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
 8008c40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c44:	4ba2      	ldr	r3, [pc, #648]	; (8008ed0 <Argus_Cfg_GetDefaultConfiguration+0x8a8>)
 8008c46:	f8a4 11d2 	strh.w	r1, [r4, #466]	; 0x1d2
 8008c4a:	49a2      	ldr	r1, [pc, #648]	; (8008ed4 <Argus_Cfg_GetDefaultConfiguration+0x8ac>)
 8008c4c:	4aa2      	ldr	r2, [pc, #648]	; (8008ed8 <Argus_Cfg_GetDefaultConfiguration+0x8b0>)
 8008c4e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
 8008c52:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
 8008c56:	20b3      	movs	r0, #179	; 0xb3
 8008c58:	2305      	movs	r3, #5
 8008c5a:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
 8008c5e:	499f      	ldr	r1, [pc, #636]	; (8008edc <Argus_Cfg_GetDefaultConfiguration+0x8b4>)
 8008c60:	f8c4 21c0 	str.w	r2, [r4, #448]	; 0x1c0
 8008c64:	f884 01f2 	strb.w	r0, [r4, #498]	; 0x1f2
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f240 4606 	movw	r6, #1030	; 0x406
 8008c6e:	f884 31f1 	strb.w	r3, [r4, #497]	; 0x1f1
 8008c72:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8008c76:	2003      	movs	r0, #3
 8008c78:	f8c4 11f4 	str.w	r1, [r4, #500]	; 0x1f4
 8008c7c:	4b98      	ldr	r3, [pc, #608]	; (8008ee0 <Argus_Cfg_GetDefaultConfiguration+0x8b8>)
 8008c7e:	f884 91f0 	strb.w	r9, [r4, #496]	; 0x1f0
 8008c82:	2133      	movs	r1, #51	; 0x33
 8008c84:	2d05      	cmp	r5, #5
 8008c86:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
 8008c8a:	f8a4 61f8 	strh.w	r6, [r4, #504]	; 0x1f8
 8008c8e:	f884 01fa 	strb.w	r0, [r4, #506]	; 0x1fa
 8008c92:	f884 1205 	strb.w	r1, [r4, #517]	; 0x205
 8008c96:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8008c9a:	f000 8107 	beq.w	8008eac <Argus_Cfg_GetDefaultConfiguration+0x884>
 8008c9e:	2306      	movs	r3, #6
 8008ca0:	2d04      	cmp	r5, #4
 8008ca2:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
 8008ca6:	f000 81e7 	beq.w	8009078 <Argus_Cfg_GetDefaultConfiguration+0xa50>
 8008caa:	2d03      	cmp	r5, #3
 8008cac:	f000 81bc 	beq.w	8009028 <Argus_Cfg_GetDefaultConfiguration+0xa00>
 8008cb0:	4b8c      	ldr	r3, [pc, #560]	; (8008ee4 <Argus_Cfg_GetDefaultConfiguration+0x8bc>)
 8008cb2:	4a8d      	ldr	r2, [pc, #564]	; (8008ee8 <Argus_Cfg_GetDefaultConfiguration+0x8c0>)
 8008cb4:	f8c4 21e8 	str.w	r2, [r4, #488]	; 0x1e8
 8008cb8:	4a8c      	ldr	r2, [pc, #560]	; (8008eec <Argus_Cfg_GetDefaultConfiguration+0x8c4>)
 8008cba:	9905      	ldr	r1, [sp, #20]
 8008cbc:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 8008cc0:	f8c4 21de 	str.w	r2, [r4, #478]	; 0x1de
 8008cc4:	4b8a      	ldr	r3, [pc, #552]	; (8008ef0 <Argus_Cfg_GetDefaultConfiguration+0x8c8>)
 8008cc6:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
 8008cca:	f102 4226 	add.w	r2, r2, #2785017856	; 0xa6000000
 8008cce:	f240 31c3 	movw	r1, #963	; 0x3c3
 8008cd2:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
 8008cd6:	f5a2 126f 	sub.w	r2, r2, #3915776	; 0x3bc000
 8008cda:	4b86      	ldr	r3, [pc, #536]	; (8008ef4 <Argus_Cfg_GetDefaultConfiguration+0x8cc>)
 8008cdc:	f8a4 11e6 	strh.w	r1, [r4, #486]	; 0x1e6
 8008ce0:	f2a2 6257 	subw	r2, r2, #1623	; 0x657
 8008ce4:	21cd      	movs	r1, #205	; 0xcd
 8008ce6:	f8c4 31e2 	str.w	r3, [r4, #482]	; 0x1e2
 8008cea:	2d04      	cmp	r5, #4
 8008cec:	f04f 0301 	mov.w	r3, #1
 8008cf0:	f884 11dc 	strb.w	r1, [r4, #476]	; 0x1dc
 8008cf4:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
 8008cf8:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
 8008cfc:	f000 8128 	beq.w	8008f50 <Argus_Cfg_GetDefaultConfiguration+0x928>
 8008d00:	2d03      	cmp	r5, #3
 8008d02:	f000 81b4 	beq.w	800906e <Argus_Cfg_GetDefaultConfiguration+0xa46>
 8008d06:	2303      	movs	r3, #3
 8008d08:	2d05      	cmp	r5, #5
 8008d0a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
 8008d0e:	f040 8177 	bne.w	8009000 <Argus_Cfg_GetDefaultConfiguration+0x9d8>
 8008d12:	221f      	movs	r2, #31
 8008d14:	4b78      	ldr	r3, [pc, #480]	; (8008ef8 <Argus_Cfg_GetDefaultConfiguration+0x8d0>)
 8008d16:	f884 210f 	strb.w	r2, [r4, #271]	; 0x10f
 8008d1a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8008d1e:	4a77      	ldr	r2, [pc, #476]	; (8008efc <Argus_Cfg_GetDefaultConfiguration+0x8d4>)
 8008d20:	4b77      	ldr	r3, [pc, #476]	; (8008f00 <Argus_Cfg_GetDefaultConfiguration+0x8d8>)
 8008d22:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8008d26:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8008d2a:	f240 3369 	movw	r3, #873	; 0x369
 8008d2e:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
 8008d38:	2600      	movs	r6, #0
 8008d3a:	2333      	movs	r3, #51	; 0x33
 8008d3c:	2171      	movs	r1, #113	; 0x71
 8008d3e:	f8a4 111e 	strh.w	r1, [r4, #286]	; 0x11e
 8008d42:	f504 7092 	add.w	r0, r4, #292	; 0x124
 8008d46:	f884 b122 	strb.w	fp, [r4, #290]	; 0x122
 8008d4a:	462a      	mov	r2, r5
 8008d4c:	f884 6121 	strb.w	r6, [r4, #289]	; 0x121
 8008d50:	f884 3123 	strb.w	r3, [r4, #291]	; 0x123
 8008d54:	2102      	movs	r1, #2
 8008d56:	f7ff fc01 	bl	800855c <Argus_GetDefaultPbaCfg.isra.0>
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	b007      	add	sp, #28
 8008d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d62:	f06f 00c4 	mvn.w	r0, #196	; 0xc4
 8008d66:	b007      	add	sp, #28
 8008d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6c:	b37d      	cbz	r5, 8008dce <Argus_Cfg_GetDefaultConfiguration+0x7a6>
 8008d6e:	2d02      	cmp	r5, #2
 8008d70:	d92b      	bls.n	8008dca <Argus_Cfg_GetDefaultConfiguration+0x7a2>
 8008d72:	2d04      	cmp	r5, #4
 8008d74:	d12b      	bne.n	8008dce <Argus_Cfg_GetDefaultConfiguration+0x7a6>
 8008d76:	4631      	mov	r1, r6
 8008d78:	f44f 7204 	mov.w	r2, #528	; 0x210
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f00e fccf 	bl	8017720 <memset>
 8008d82:	23ff      	movs	r3, #255	; 0xff
 8008d84:	2002      	movs	r0, #2
 8008d86:	f649 4140 	movw	r1, #40000	; 0x9c40
 8008d8a:	4a5e      	ldr	r2, [pc, #376]	; (8008f04 <Argus_Cfg_GetDefaultConfiguration+0x8dc>)
 8008d8c:	f8c4 6049 	str.w	r6, [r4, #73]	; 0x49
 8008d90:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 8008d94:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 8008d98:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8008d9c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8008da0:	7020      	strb	r0, [r4, #0]
 8008da2:	6061      	str	r1, [r4, #4]
 8008da4:	f8c4 204d 	str.w	r2, [r4, #77]	; 0x4d
 8008da8:	2603      	movs	r6, #3
 8008daa:	2300      	movs	r3, #0
 8008dac:	e478      	b.n	80086a0 <Argus_Cfg_GetDefaultConfiguration+0x78>
 8008dae:	4956      	ldr	r1, [pc, #344]	; (8008f08 <Argus_Cfg_GetDefaultConfiguration+0x8e0>)
 8008db0:	f8c4 1066 	str.w	r1, [r4, #102]	; 0x66
 8008db4:	f06f 00f0 	mvn.w	r0, #240	; 0xf0
 8008db8:	f04f 310f 	mov.w	r1, #252645135	; 0xf0f0f0f
 8008dbc:	f8c4 106a 	str.w	r1, [r4, #106]	; 0x6a
 8008dc0:	f8c4 106e 	str.w	r1, [r4, #110]	; 0x6e
 8008dc4:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
 8008dc8:	e4a9      	b.n	800871e <Argus_Cfg_GetDefaultConfiguration+0xf6>
 8008dca:	2601      	movs	r6, #1
 8008dcc:	e446      	b.n	800865c <Argus_Cfg_GetDefaultConfiguration+0x34>
 8008dce:	2602      	movs	r6, #2
 8008dd0:	e444      	b.n	800865c <Argus_Cfg_GetDefaultConfiguration+0x34>
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
 8008dd8:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8008ddc:	e6d0      	b.n	8008b80 <Argus_Cfg_GetDefaultConfiguration+0x558>
 8008dde:	2128      	movs	r1, #40	; 0x28
 8008de0:	f884 c033 	strb.w	ip, [r4, #51]	; 0x33
 8008de4:	9204      	str	r2, [sp, #16]
 8008de6:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8008dea:	f04f 0c1d 	mov.w	ip, #29
 8008dee:	e561      	b.n	80088b4 <Argus_Cfg_GetDefaultConfiguration+0x28c>
 8008df0:	f240 1201 	movw	r2, #257	; 0x101
 8008df4:	2d04      	cmp	r5, #4
 8008df6:	8122      	strh	r2, [r4, #8]
 8008df8:	f040 8194 	bne.w	8009124 <Argus_Cfg_GetDefaultConfiguration+0xafc>
 8008dfc:	f240 7201 	movw	r2, #1793	; 0x701
 8008e00:	8162      	strh	r2, [r4, #10]
 8008e02:	4a3f      	ldr	r2, [pc, #252]	; (8008f00 <Argus_Cfg_GetDefaultConfiguration+0x8d8>)
 8008e04:	4941      	ldr	r1, [pc, #260]	; (8008f0c <Argus_Cfg_GetDefaultConfiguration+0x8e4>)
 8008e06:	4842      	ldr	r0, [pc, #264]	; (8008f10 <Argus_Cfg_GetDefaultConfiguration+0x8e8>)
 8008e08:	6162      	str	r2, [r4, #20]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	6121      	str	r1, [r4, #16]
 8008e0e:	60e0      	str	r0, [r4, #12]
 8008e10:	9205      	str	r2, [sp, #20]
 8008e12:	f240 11c3 	movw	r1, #451	; 0x1c3
 8008e16:	e5dd      	b.n	80089d4 <Argus_Cfg_GetDefaultConfiguration+0x3ac>
 8008e18:	4a3e      	ldr	r2, [pc, #248]	; (8008f14 <Argus_Cfg_GetDefaultConfiguration+0x8ec>)
 8008e1a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
 8008e1e:	4a34      	ldr	r2, [pc, #208]	; (8008ef0 <Argus_Cfg_GetDefaultConfiguration+0x8c8>)
 8008e20:	4931      	ldr	r1, [pc, #196]	; (8008ee8 <Argus_Cfg_GetDefaultConfiguration+0x8c0>)
 8008e22:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
 8008e26:	4a31      	ldr	r2, [pc, #196]	; (8008eec <Argus_Cfg_GetDefaultConfiguration+0x8c4>)
 8008e28:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
 8008e2c:	f8c4 20da 	str.w	r2, [r4, #218]	; 0xda
 8008e30:	f240 31c3 	movw	r1, #963	; 0x3c3
 8008e34:	22cd      	movs	r2, #205	; 0xcd
 8008e36:	f8a4 10e2 	strh.w	r1, [r4, #226]	; 0xe2
 8008e3a:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
 8008e3e:	492d      	ldr	r1, [pc, #180]	; (8008ef4 <Argus_Cfg_GetDefaultConfiguration+0x8cc>)
 8008e40:	f8c4 10de 	str.w	r1, [r4, #222]	; 0xde
 8008e44:	f240 1201 	movw	r2, #257	; 0x101
 8008e48:	4933      	ldr	r1, [pc, #204]	; (8008f18 <Argus_Cfg_GetDefaultConfiguration+0x8f0>)
 8008e4a:	8122      	strh	r2, [r4, #8]
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
 8008e52:	9201      	str	r2, [sp, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	72a2      	strb	r2, [r4, #10]
 8008e58:	2207      	movs	r2, #7
 8008e5a:	72e2      	strb	r2, [r4, #11]
 8008e5c:	4a28      	ldr	r2, [pc, #160]	; (8008f00 <Argus_Cfg_GetDefaultConfiguration+0x8d8>)
 8008e5e:	482c      	ldr	r0, [pc, #176]	; (8008f10 <Argus_Cfg_GetDefaultConfiguration+0x8e8>)
 8008e60:	492a      	ldr	r1, [pc, #168]	; (8008f0c <Argus_Cfg_GetDefaultConfiguration+0x8e4>)
 8008e62:	6162      	str	r2, [r4, #20]
 8008e64:	2201      	movs	r2, #1
 8008e66:	60e0      	str	r0, [r4, #12]
 8008e68:	6121      	str	r1, [r4, #16]
 8008e6a:	9205      	str	r2, [sp, #20]
 8008e6c:	f240 3169 	movw	r1, #873	; 0x369
 8008e70:	e5b0      	b.n	80089d4 <Argus_Cfg_GetDefaultConfiguration+0x3ac>
 8008e72:	4610      	mov	r0, r2
 8008e74:	9201      	str	r2, [sp, #4]
 8008e76:	4929      	ldr	r1, [pc, #164]	; (8008f1c <Argus_Cfg_GetDefaultConfiguration+0x8f4>)
 8008e78:	4a29      	ldr	r2, [pc, #164]	; (8008f20 <Argus_Cfg_GetDefaultConfiguration+0x8f8>)
 8008e7a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 8008e7e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008e82:	4602      	mov	r2, r0
 8008e84:	e56b      	b.n	800895e <Argus_Cfg_GetDefaultConfiguration+0x336>
 8008e86:	2330      	movs	r3, #48	; 0x30
 8008e88:	4a0d      	ldr	r2, [pc, #52]	; (8008ec0 <Argus_Cfg_GetDefaultConfiguration+0x898>)
 8008e8a:	f8a4 313a 	strh.w	r3, [r4, #314]	; 0x13a
 8008e8e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008e92:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
 8008e96:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 8008e9a:	f44f 7293 	mov.w	r2, #294	; 0x126
 8008e9e:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <Argus_Cfg_GetDefaultConfiguration+0x89c>)
 8008ea0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8008ea4:	f8a4 2146 	strh.w	r2, [r4, #326]	; 0x146
 8008ea8:	23c0      	movs	r3, #192	; 0xc0
 8008eaa:	e6b2      	b.n	8008c12 <Argus_Cfg_GetDefaultConfiguration+0x5ea>
 8008eac:	230a      	movs	r3, #10
 8008eae:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	e6fd      	b.n	8008cb2 <Argus_Cfg_GetDefaultConfiguration+0x68a>
 8008eb6:	bf00      	nop
 8008eb8:	e97fff7f 	.word	0xe97fff7f
 8008ebc:	016e3600 	.word	0x016e3600
 8008ec0:	0108fd08 	.word	0x0108fd08
 8008ec4:	003201f4 	.word	0x003201f4
 8008ec8:	00022b85 	.word	0x00022b85
 8008ecc:	03070101 	.word	0x03070101
 8008ed0:	019000f0 	.word	0x019000f0
 8008ed4:	09600640 	.word	0x09600640
 8008ed8:	0043199a 	.word	0x0043199a
 8008edc:	0c80dac0 	.word	0x0c80dac0
 8008ee0:	00180030 	.word	0x00180030
 8008ee4:	fe01fd01 	.word	0xfe01fd01
 8008ee8:	005b8d80 	.word	0x005b8d80
 8008eec:	04911b58 	.word	0x04911b58
 8008ef0:	002dc6c0 	.word	0x002dc6c0
 8008ef4:	038d0443 	.word	0x038d0443
 8008ef8:	0dc01e00 	.word	0x0dc01e00
 8008efc:	01003e80 	.word	0x01003e80
 8008f00:	04000004 	.word	0x04000004
 8008f04:	20640000 	.word	0x20640000
 8008f08:	0f0f0fff 	.word	0x0f0f0fff
 8008f0c:	01003840 	.word	0x01003840
 8008f10:	0c801ae0 	.word	0x0c801ae0
 8008f14:	ff83ffd7 	.word	0xff83ffd7
 8008f18:	aa555502 	.word	0xaa555502
 8008f1c:	10053300 	.word	0x10053300
 8008f20:	00200040 	.word	0x00200040
 8008f24:	f0f0f0ff 	.word	0xf0f0f0ff
 8008f28:	2120      	movs	r1, #32
 8008f2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f2e:	f884 1192 	strb.w	r1, [r4, #402]	; 0x192
 8008f32:	e5e7      	b.n	8008b04 <Argus_Cfg_GetDefaultConfiguration+0x4dc>
 8008f34:	f894 2193 	ldrb.w	r2, [r4, #403]	; 0x193
 8008f38:	f884 0192 	strb.w	r0, [r4, #402]	; 0x192
 8008f3c:	f067 0107 	orn	r1, r7, #7
 8008f40:	2003      	movs	r0, #3
 8008f42:	f002 020f 	and.w	r2, r2, #15
 8008f46:	f884 018f 	strb.w	r0, [r4, #399]	; 0x18f
 8008f4a:	f884 1191 	strb.w	r1, [r4, #401]	; 0x191
 8008f4e:	e5d9      	b.n	8008b04 <Argus_Cfg_GetDefaultConfiguration+0x4dc>
 8008f50:	f240 7201 	movw	r2, #1793	; 0x701
 8008f54:	4b79      	ldr	r3, [pc, #484]	; (800913c <Argus_Cfg_GetDefaultConfiguration+0xb14>)
 8008f56:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
 8008f5a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8008f5e:	4a78      	ldr	r2, [pc, #480]	; (8009140 <Argus_Cfg_GetDefaultConfiguration+0xb18>)
 8008f60:	4b78      	ldr	r3, [pc, #480]	; (8009144 <Argus_Cfg_GetDefaultConfiguration+0xb1c>)
 8008f62:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8008f66:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8008f6a:	f240 13c3 	movw	r3, #451	; 0x1c3
 8008f6e:	e6de      	b.n	8008d2e <Argus_Cfg_GetDefaultConfiguration+0x706>
 8008f70:	2120      	movs	r1, #32
 8008f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f76:	f884 108e 	strb.w	r1, [r4, #142]	; 0x8e
 8008f7a:	2700      	movs	r7, #0
 8008f7c:	f7ff bbfd 	b.w	800877a <Argus_Cfg_GetDefaultConfiguration+0x152>
 8008f80:	f04f 31f0 	mov.w	r1, #4042322160	; 0xf0f0f0f0
 8008f84:	20f0      	movs	r0, #240	; 0xf0
 8008f86:	2d01      	cmp	r5, #1
 8008f88:	f8c4 1076 	str.w	r1, [r4, #118]	; 0x76
 8008f8c:	f8c4 107a 	str.w	r1, [r4, #122]	; 0x7a
 8008f90:	f8c4 107e 	str.w	r1, [r4, #126]	; 0x7e
 8008f94:	f884 0082 	strb.w	r0, [r4, #130]	; 0x82
 8008f98:	f040 80af 	bne.w	80090fa <Argus_Cfg_GetDefaultConfiguration+0xad2>
 8008f9c:	2104      	movs	r1, #4
 8008f9e:	2010      	movs	r0, #16
 8008fa0:	f884 1085 	strb.w	r1, [r4, #133]	; 0x85
 8008fa4:	4968      	ldr	r1, [pc, #416]	; (8009148 <Argus_Cfg_GetDefaultConfiguration+0xb20>)
 8008fa6:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
 8008faa:	2702      	movs	r7, #2
 8008fac:	2082      	movs	r0, #130	; 0x82
 8008fae:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	f884 7084 	strb.w	r7, [r4, #132]	; 0x84
 8008fb8:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
 8008fbc:	f884 108e 	strb.w	r1, [r4, #142]	; 0x8e
 8008fc0:	f7ff bbdb 	b.w	800877a <Argus_Cfg_GetDefaultConfiguration+0x152>
 8008fc4:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
 8008fc8:	230f      	movs	r3, #15
 8008fca:	21f0      	movs	r1, #240	; 0xf0
 8008fcc:	f04f 37f0 	mov.w	r7, #4042322160	; 0xf0f0f0f0
 8008fd0:	401a      	ands	r2, r3
 8008fd2:	f8c4 7056 	str.w	r7, [r4, #86]	; 0x56
 8008fd6:	f8c4 705a 	str.w	r7, [r4, #90]	; 0x5a
 8008fda:	f8c4 705e 	str.w	r7, [r4, #94]	; 0x5e
 8008fde:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
 8008fe2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8008fe6:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 8008fea:	461f      	mov	r7, r3
 8008fec:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
 8008ff0:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 8008ff4:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 8008ff8:	4608      	mov	r0, r1
 8008ffa:	462b      	mov	r3, r5
 8008ffc:	f7ff bb6b 	b.w	80086d6 <Argus_Cfg_GetDefaultConfiguration+0xae>
 8009000:	2310      	movs	r3, #16
 8009002:	4a4f      	ldr	r2, [pc, #316]	; (8009140 <Argus_Cfg_GetDefaultConfiguration+0xb18>)
 8009004:	484d      	ldr	r0, [pc, #308]	; (800913c <Argus_Cfg_GetDefaultConfiguration+0xb14>)
 8009006:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
 800900a:	4950      	ldr	r1, [pc, #320]	; (800914c <Argus_Cfg_GetDefaultConfiguration+0xb24>)
 800900c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8009010:	f240 13c3 	movw	r3, #451	; 0x1c3
 8009014:	f240 3269 	movw	r2, #873	; 0x369
 8009018:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
 800901c:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
 8009020:	2d00      	cmp	r5, #0
 8009022:	bf18      	it	ne
 8009024:	4613      	movne	r3, r2
 8009026:	e682      	b.n	8008d2e <Argus_Cfg_GetDefaultConfiguration+0x706>
 8009028:	9b05      	ldr	r3, [sp, #20]
 800902a:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 800902e:	4b48      	ldr	r3, [pc, #288]	; (8009150 <Argus_Cfg_GetDefaultConfiguration+0xb28>)
 8009030:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
 8009034:	4b47      	ldr	r3, [pc, #284]	; (8009154 <Argus_Cfg_GetDefaultConfiguration+0xb2c>)
 8009036:	f8c4 31de 	str.w	r3, [r4, #478]	; 0x1de
 800903a:	f103 4326 	add.w	r3, r3, #2785017856	; 0xa6000000
 800903e:	4946      	ldr	r1, [pc, #280]	; (8009158 <Argus_Cfg_GetDefaultConfiguration+0xb30>)
 8009040:	f884 210d 	strb.w	r2, [r4, #269]	; 0x10d
 8009044:	f5a3 136f 	sub.w	r3, r3, #3915776	; 0x3bc000
 8009048:	f240 32c3 	movw	r2, #963	; 0x3c3
 800904c:	4843      	ldr	r0, [pc, #268]	; (800915c <Argus_Cfg_GetDefaultConfiguration+0xb34>)
 800904e:	f8c4 11ec 	str.w	r1, [r4, #492]	; 0x1ec
 8009052:	f8a4 21e6 	strh.w	r2, [r4, #486]	; 0x1e6
 8009056:	4942      	ldr	r1, [pc, #264]	; (8009160 <Argus_Cfg_GetDefaultConfiguration+0xb38>)
 8009058:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
 800905c:	22cd      	movs	r2, #205	; 0xcd
 800905e:	f2a3 6356 	subw	r3, r3, #1622	; 0x656
 8009062:	f8c4 11e2 	str.w	r1, [r4, #482]	; 0x1e2
 8009066:	f884 21dc 	strb.w	r2, [r4, #476]	; 0x1dc
 800906a:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
 800906e:	2301      	movs	r3, #1
 8009070:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
 8009074:	2307      	movs	r3, #7
 8009076:	e7c4      	b.n	8009002 <Argus_Cfg_GetDefaultConfiguration+0x9da>
 8009078:	4b38      	ldr	r3, [pc, #224]	; (800915c <Argus_Cfg_GetDefaultConfiguration+0xb34>)
 800907a:	e61a      	b.n	8008cb2 <Argus_Cfg_GetDefaultConfiguration+0x68a>
 800907c:	4839      	ldr	r0, [pc, #228]	; (8009164 <Argus_Cfg_GetDefaultConfiguration+0xb3c>)
 800907e:	4a3a      	ldr	r2, [pc, #232]	; (8009168 <Argus_Cfg_GetDefaultConfiguration+0xb40>)
 8009080:	62e0      	str	r0, [r4, #44]	; 0x2c
 8009082:	2150      	movs	r1, #80	; 0x50
 8009084:	2008      	movs	r0, #8
 8009086:	86e1      	strh	r1, [r4, #54]	; 0x36
 8009088:	6462      	str	r2, [r4, #68]	; 0x44
 800908a:	f44f 7184 	mov.w	r1, #264	; 0x108
 800908e:	2266      	movs	r2, #102	; 0x66
 8009090:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
 8009094:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
 8009098:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
 800909c:	8661      	strh	r1, [r4, #50]	; 0x32
 800909e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 80090a2:	9504      	str	r5, [sp, #16]
 80090a4:	f06f 0c02 	mvn.w	ip, #2
 80090a8:	e404      	b.n	80088b4 <Argus_Cfg_GetDefaultConfiguration+0x28c>
 80090aa:	2202      	movs	r2, #2
 80090ac:	9201      	str	r2, [sp, #4]
 80090ae:	4a2b      	ldr	r2, [pc, #172]	; (800915c <Argus_Cfg_GetDefaultConfiguration+0xb34>)
 80090b0:	e455      	b.n	800895e <Argus_Cfg_GetDefaultConfiguration+0x336>
 80090b2:	f884 c0a6 	strb.w	ip, [r4, #166]	; 0xa6
 80090b6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80090ba:	f7ff bbb1 	b.w	8008820 <Argus_Cfg_GetDefaultConfiguration+0x1f8>
 80090be:	2d00      	cmp	r5, #0
 80090c0:	f47f aed4 	bne.w	8008e6c <Argus_Cfg_GetDefaultConfiguration+0x844>
 80090c4:	4a29      	ldr	r2, [pc, #164]	; (800916c <Argus_Cfg_GetDefaultConfiguration+0xb44>)
 80090c6:	83a5      	strh	r5, [r4, #28]
 80090c8:	61a2      	str	r2, [r4, #24]
 80090ca:	9503      	str	r5, [sp, #12]
 80090cc:	46ab      	mov	fp, r5
 80090ce:	e489      	b.n	80089e4 <Argus_Cfg_GetDefaultConfiguration+0x3bc>
 80090d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090d4:	2700      	movs	r7, #0
 80090d6:	f7ff bb50 	b.w	800877a <Argus_Cfg_GetDefaultConfiguration+0x152>
 80090da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090de:	e511      	b.n	8008b04 <Argus_Cfg_GetDefaultConfiguration+0x4dc>
 80090e0:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80090e4:	f8c4 2056 	str.w	r2, [r4, #86]	; 0x56
 80090e8:	f8c4 205a 	str.w	r2, [r4, #90]	; 0x5a
 80090ec:	f8c4 205e 	str.w	r2, [r4, #94]	; 0x5e
 80090f0:	f7ff badf 	b.w	80086b2 <Argus_Cfg_GetDefaultConfiguration+0x8a>
 80090f4:	f06f 00c6 	mvn.w	r0, #198	; 0xc6
 80090f8:	4770      	bx	lr
 80090fa:	2103      	movs	r1, #3
 80090fc:	2084      	movs	r0, #132	; 0x84
 80090fe:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
 8009102:	2110      	movs	r1, #16
 8009104:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
 8009108:	f884 1086 	strb.w	r1, [r4, #134]	; 0x86
 800910c:	4818      	ldr	r0, [pc, #96]	; (8009170 <Argus_Cfg_GetDefaultConfiguration+0xb48>)
 800910e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8009112:	2100      	movs	r1, #0
 8009114:	2d04      	cmp	r5, #4
 8009116:	f884 108d 	strb.w	r1, [r4, #141]	; 0x8d
 800911a:	f43f af29 	beq.w	8008f70 <Argus_Cfg_GetDefaultConfiguration+0x948>
 800911e:	213e      	movs	r1, #62	; 0x3e
 8009120:	f7ff bb20 	b.w	8008764 <Argus_Cfg_GetDefaultConfiguration+0x13c>
 8009124:	2d03      	cmp	r5, #3
 8009126:	f43f ae95 	beq.w	8008e54 <Argus_Cfg_GetDefaultConfiguration+0x82c>
 800912a:	2203      	movs	r2, #3
 800912c:	2d05      	cmp	r5, #5
 800912e:	72a2      	strb	r2, [r4, #10]
 8009130:	d101      	bne.n	8009136 <Argus_Cfg_GetDefaultConfiguration+0xb0e>
 8009132:	221f      	movs	r2, #31
 8009134:	e691      	b.n	8008e5a <Argus_Cfg_GetDefaultConfiguration+0x832>
 8009136:	2201      	movs	r2, #1
 8009138:	9205      	str	r2, [sp, #20]
 800913a:	e43e      	b.n	80089ba <Argus_Cfg_GetDefaultConfiguration+0x392>
 800913c:	0dc01e00 	.word	0x0dc01e00
 8009140:	01003e80 	.word	0x01003e80
 8009144:	04000009 	.word	0x04000009
 8009148:	010f51fe 	.word	0x010f51fe
 800914c:	04000004 	.word	0x04000004
 8009150:	005b8d80 	.word	0x005b8d80
 8009154:	04911b58 	.word	0x04911b58
 8009158:	002dc6c0 	.word	0x002dc6c0
 800915c:	ff83ffd7 	.word	0xff83ffd7
 8009160:	038d0443 	.word	0x038d0443
 8009164:	016e3600 	.word	0x016e3600
 8009168:	003201f4 	.word	0x003201f4
 800916c:	007101c3 	.word	0x007101c3
 8009170:	030f51fe 	.word	0x030f51fe

08009174 <Argus_Cfg_GetCurrentDefaultConfiguration>:
 8009174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009178:	4604      	mov	r4, r0
 800917a:	f8d0 0210 	ldr.w	r0, [r0, #528]	; 0x210
 800917e:	460e      	mov	r6, r1
 8009180:	f005 fffa 	bl	800f178 <Argus_Dev_GetChipVersion>
 8009184:	b188      	cbz	r0, 80091aa <Argus_Cfg_GetCurrentDefaultConfiguration+0x36>
 8009186:	4605      	mov	r5, r0
 8009188:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
 800918c:	f005 fff6 	bl	800f17c <Argus_Dev_GetLaserType>
 8009190:	4607      	mov	r7, r0
 8009192:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
 8009196:	f005 ffeb 	bl	800f170 <Argus_Dev_GetModule>
 800919a:	463b      	mov	r3, r7
 800919c:	462a      	mov	r2, r5
 800919e:	4601      	mov	r1, r0
 80091a0:	4630      	mov	r0, r6
 80091a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091a6:	f7ff ba3f 	b.w	8008628 <Argus_Cfg_GetDefaultConfiguration>
 80091aa:	f06f 0064 	mvn.w	r0, #100	; 0x64
 80091ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b2:	bf00      	nop

080091b4 <fp_exp24>:
 80091b4:	4a60      	ldr	r2, [pc, #384]	; (8009338 <fp_exp24+0x184>)
 80091b6:	4402      	add	r2, r0
 80091b8:	2a00      	cmp	r2, #0
 80091ba:	f2c0 80b7 	blt.w	800932c <fp_exp24+0x178>
 80091be:	2300      	movs	r3, #0
 80091c0:	4610      	mov	r0, r2
 80091c2:	4619      	mov	r1, r3
 80091c4:	4a5d      	ldr	r2, [pc, #372]	; (800933c <fp_exp24+0x188>)
 80091c6:	4402      	add	r2, r0
 80091c8:	2a00      	cmp	r2, #0
 80091ca:	bfb8      	it	lt
 80091cc:	460b      	movlt	r3, r1
 80091ce:	495c      	ldr	r1, [pc, #368]	; (8009340 <fp_exp24+0x18c>)
 80091d0:	bfb8      	it	lt
 80091d2:	4602      	movlt	r2, r0
 80091d4:	4411      	add	r1, r2
 80091d6:	2900      	cmp	r1, #0
 80091d8:	bfa8      	it	ge
 80091da:	460a      	movge	r2, r1
 80091dc:	4959      	ldr	r1, [pc, #356]	; (8009344 <fp_exp24+0x190>)
 80091de:	4411      	add	r1, r2
 80091e0:	bfa8      	it	ge
 80091e2:	009b      	lslge	r3, r3, #2
 80091e4:	2900      	cmp	r1, #0
 80091e6:	bfa8      	it	ge
 80091e8:	460a      	movge	r2, r1
 80091ea:	4957      	ldr	r1, [pc, #348]	; (8009348 <fp_exp24+0x194>)
 80091ec:	4411      	add	r1, r2
 80091ee:	bfa8      	it	ge
 80091f0:	005b      	lslge	r3, r3, #1
 80091f2:	2900      	cmp	r1, #0
 80091f4:	bfa8      	it	ge
 80091f6:	460a      	movge	r2, r1
 80091f8:	4954      	ldr	r1, [pc, #336]	; (800934c <fp_exp24+0x198>)
 80091fa:	4411      	add	r1, r2
 80091fc:	bfa8      	it	ge
 80091fe:	eb03 0353 	addge.w	r3, r3, r3, lsr #1
 8009202:	2900      	cmp	r1, #0
 8009204:	bfa8      	it	ge
 8009206:	460a      	movge	r2, r1
 8009208:	f5a2 11f1 	sub.w	r1, r2, #1974272	; 0x1e2000
 800920c:	f2a1 7107 	subw	r1, r1, #1799	; 0x707
 8009210:	bfa8      	it	ge
 8009212:	eb03 0393 	addge.w	r3, r3, r3, lsr #2
 8009216:	2900      	cmp	r1, #0
 8009218:	bfa8      	it	ge
 800921a:	460a      	movge	r2, r1
 800921c:	f5a2 2178 	sub.w	r1, r2, #1015808	; 0xf8000
 8009220:	f5a1 61a3 	sub.w	r1, r1, #1304	; 0x518
 8009224:	bfa8      	it	ge
 8009226:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 800922a:	2900      	cmp	r1, #0
 800922c:	bfa8      	it	ge
 800922e:	460a      	movge	r2, r1
 8009230:	f5a2 21fc 	sub.w	r1, r2, #516096	; 0x7e000
 8009234:	f1a1 01a7 	sub.w	r1, r1, #167	; 0xa7
 8009238:	bfa8      	it	ge
 800923a:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 800923e:	2900      	cmp	r1, #0
 8009240:	bfa8      	it	ge
 8009242:	460a      	movge	r2, r1
 8009244:	f5a2 317e 	sub.w	r1, r2, #260096	; 0x3f800
 8009248:	f1a1 0115 	sub.w	r1, r1, #21
 800924c:	bfa8      	it	ge
 800924e:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 8009252:	2900      	cmp	r1, #0
 8009254:	bfa8      	it	ge
 8009256:	460a      	movge	r2, r1
 8009258:	f5a2 31ff 	sub.w	r1, r2, #130560	; 0x1fe00
 800925c:	f1a1 0103 	sub.w	r1, r1, #3
 8009260:	bfa8      	it	ge
 8009262:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 8009266:	2900      	cmp	r1, #0
 8009268:	bfa8      	it	ge
 800926a:	460a      	movge	r2, r1
 800926c:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
 8009270:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 8009274:	bfa8      	it	ge
 8009276:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 800927a:	2900      	cmp	r1, #0
 800927c:	bfa8      	it	ge
 800927e:	460a      	movge	r2, r1
 8009280:	f5a2 41ff 	sub.w	r1, r2, #32640	; 0x7f80
 8009284:	f1a1 0160 	sub.w	r1, r1, #96	; 0x60
 8009288:	bfa8      	it	ge
 800928a:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 800928e:	2900      	cmp	r1, #0
 8009290:	bfa8      	it	ge
 8009292:	460a      	movge	r2, r1
 8009294:	f5a2 517f 	sub.w	r1, r2, #16320	; 0x3fc0
 8009298:	f1a1 0138 	sub.w	r1, r1, #56	; 0x38
 800929c:	bfa8      	it	ge
 800929e:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 80092a2:	2900      	cmp	r1, #0
 80092a4:	bfa8      	it	ge
 80092a6:	460a      	movge	r2, r1
 80092a8:	f5a2 51ff 	sub.w	r1, r2, #8160	; 0x1fe0
 80092ac:	f1a1 011e 	sub.w	r1, r1, #30
 80092b0:	bfa8      	it	ge
 80092b2:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 80092b6:	2900      	cmp	r1, #0
 80092b8:	bfa4      	itt	ge
 80092ba:	460a      	movge	r2, r1
 80092bc:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 80092c0:	04d0      	lsls	r0, r2, #19
 80092c2:	bf48      	it	mi
 80092c4:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 80092c8:	0511      	lsls	r1, r2, #20
 80092ca:	bf48      	it	mi
 80092cc:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 80092d0:	0550      	lsls	r0, r2, #21
 80092d2:	bf48      	it	mi
 80092d4:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 80092d8:	0591      	lsls	r1, r2, #22
 80092da:	bf48      	it	mi
 80092dc:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 80092e0:	05d0      	lsls	r0, r2, #23
 80092e2:	bf48      	it	mi
 80092e4:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 80092e8:	0611      	lsls	r1, r2, #24
 80092ea:	bf48      	it	mi
 80092ec:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 80092f0:	0650      	lsls	r0, r2, #25
 80092f2:	bf48      	it	mi
 80092f4:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 80092f8:	0691      	lsls	r1, r2, #26
 80092fa:	bf48      	it	mi
 80092fc:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 8009300:	06d0      	lsls	r0, r2, #27
 8009302:	bf48      	it	mi
 8009304:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 8009308:	0711      	lsls	r1, r2, #28
 800930a:	bf48      	it	mi
 800930c:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 8009310:	0750      	lsls	r0, r2, #29
 8009312:	bf48      	it	mi
 8009314:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 8009318:	0791      	lsls	r1, r2, #30
 800931a:	bf48      	it	mi
 800931c:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 8009320:	07d2      	lsls	r2, r2, #31
 8009322:	bf48      	it	mi
 8009324:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 8009328:	4618      	mov	r0, r3
 800932a:	4770      	bx	lr
 800932c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009330:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8009334:	e746      	b.n	80091c4 <fp_exp24+0x10>
 8009336:	bf00      	nop
 8009338:	fa746f40 	.word	0xfa746f40
 800933c:	fd3a37a0 	.word	0xfd3a37a0
 8009340:	fe9d1bd0 	.word	0xfe9d1bd0
 8009344:	ff4e8de8 	.word	0xff4e8de8
 8009348:	ff983370 	.word	0xff983370
 800934c:	ffc6e010 	.word	0xffc6e010

08009350 <SetIntegrationEnergy>:
 8009350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009352:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8009354:	f890 402b 	ldrb.w	r4, [r0, #43]	; 0x2b
 8009358:	7d2b      	ldrb	r3, [r5, #20]
 800935a:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 800935e:	7d6f      	ldrb	r7, [r5, #21]
 8009360:	714f      	strb	r7, [r1, #5]
 8009362:	42a3      	cmp	r3, r4
 8009364:	bf28      	it	cs
 8009366:	4623      	movcs	r3, r4
 8009368:	fa22 f303 	lsr.w	r3, r2, r3
 800936c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8009370:	2500      	movs	r5, #0
 8009372:	45e6      	cmp	lr, ip
 8009374:	f8a1 c000 	strh.w	ip, [r1]
 8009378:	710d      	strb	r5, [r1, #4]
 800937a:	d224      	bcs.n	80093c6 <SetIntegrationEnergy+0x76>
 800937c:	ebbc 0f93 	cmp.w	ip, r3, lsr #2
 8009380:	4666      	mov	r6, ip
 8009382:	d928      	bls.n	80093d6 <SetIntegrationEnergy+0x86>
 8009384:	ebbc 0f53 	cmp.w	ip, r3, lsr #1
 8009388:	d91a      	bls.n	80093c0 <SetIntegrationEnergy+0x70>
 800938a:	459c      	cmp	ip, r3
 800938c:	d919      	bls.n	80093c2 <SetIntegrationEnergy+0x72>
 800938e:	b27f      	sxtb	r7, r7
 8009390:	b263      	sxtb	r3, r4
 8009392:	429f      	cmp	r7, r3
 8009394:	dc11      	bgt.n	80093ba <SetIntegrationEnergy+0x6a>
 8009396:	40ea      	lsrs	r2, r5
 8009398:	fa06 f303 	lsl.w	r3, r6, r3
 800939c:	4293      	cmp	r3, r2
 800939e:	d90d      	bls.n	80093bc <SetIntegrationEnergy+0x6c>
 80093a0:	3c01      	subs	r4, #1
 80093a2:	b2e4      	uxtb	r4, r4
 80093a4:	e002      	b.n	80093ac <SetIntegrationEnergy+0x5c>
 80093a6:	4295      	cmp	r5, r2
 80093a8:	d908      	bls.n	80093bc <SetIntegrationEnergy+0x6c>
 80093aa:	461c      	mov	r4, r3
 80093ac:	b260      	sxtb	r0, r4
 80093ae:	1e63      	subs	r3, r4, #1
 80093b0:	4287      	cmp	r7, r0
 80093b2:	fa06 f500 	lsl.w	r5, r6, r0
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	ddf5      	ble.n	80093a6 <SetIntegrationEnergy+0x56>
 80093ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093bc:	714c      	strb	r4, [r1, #5]
 80093be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093c0:	2501      	movs	r5, #1
 80093c2:	710d      	strb	r5, [r1, #4]
 80093c4:	e7e3      	b.n	800938e <SetIntegrationEnergy+0x3e>
 80093c6:	8c06      	ldrh	r6, [r0, #32]
 80093c8:	4576      	cmp	r6, lr
 80093ca:	bf28      	it	cs
 80093cc:	4676      	movcs	r6, lr
 80093ce:	2503      	movs	r5, #3
 80093d0:	800e      	strh	r6, [r1, #0]
 80093d2:	710d      	strb	r5, [r1, #4]
 80093d4:	e7db      	b.n	800938e <SetIntegrationEnergy+0x3e>
 80093d6:	2502      	movs	r5, #2
 80093d8:	710d      	strb	r5, [r1, #4]
 80093da:	e7d8      	b.n	800938e <SetIntegrationEnergy+0x3e>

080093dc <Argus_Dca_Init>:
 80093dc:	b320      	cbz	r0, 8009428 <Argus_Dca_Init+0x4c>
 80093de:	b530      	push	{r4, r5, lr}
 80093e0:	226c      	movs	r2, #108	; 0x6c
 80093e2:	b085      	sub	sp, #20
 80093e4:	460d      	mov	r5, r1
 80093e6:	2100      	movs	r1, #0
 80093e8:	4604      	mov	r4, r0
 80093ea:	f00e f999 	bl	8017720 <memset>
 80093ee:	4b10      	ldr	r3, [pc, #64]	; (8009430 <Argus_Dca_Init+0x54>)
 80093f0:	66a5      	str	r5, [r4, #104]	; 0x68
 80093f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f6:	9201      	str	r2, [sp, #4]
 80093f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80093fc:	ad02      	add	r5, sp, #8
 80093fe:	2204      	movs	r2, #4
 8009400:	e885 0003 	stmia.w	r5, {r0, r1}
 8009404:	eb0d 0102 	add.w	r1, sp, r2
 8009408:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800940c:	f00e f97d 	bl	801770a <memcpy>
 8009410:	4629      	mov	r1, r5
 8009412:	2208      	movs	r2, #8
 8009414:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8009418:	f00e f977 	bl	801770a <memcpy>
 800941c:	4b05      	ldr	r3, [pc, #20]	; (8009434 <Argus_Dca_Init+0x58>)
 800941e:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 8009422:	2000      	movs	r0, #0
 8009424:	b005      	add	sp, #20
 8009426:	bd30      	pop	{r4, r5, pc}
 8009428:	f06f 0004 	mvn.w	r0, #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	08018b00 	.word	0x08018b00
 8009434:	0001ffff 	.word	0x0001ffff

08009438 <Argus_Dca_SetVoltageValues>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4604      	mov	r4, r0
 800943c:	4615      	mov	r5, r2
 800943e:	3040      	adds	r0, #64	; 0x40
 8009440:	2204      	movs	r2, #4
 8009442:	f00e f962 	bl	801770a <memcpy>
 8009446:	4629      	mov	r1, r5
 8009448:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800944c:	2208      	movs	r2, #8
 800944e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009452:	f00e b95a 	b.w	801770a <memcpy>
 8009456:	bf00      	nop

08009458 <Argus_Dca_GetCurrentValues>:
 8009458:	303c      	adds	r0, #60	; 0x3c
 800945a:	4770      	bx	lr

0800945c <Argus_Dca_GetIntDepth>:
 800945c:	8980      	ldrh	r0, [r0, #12]
 800945e:	4770      	bx	lr

08009460 <Argus_Dca_GetState>:
 8009460:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8009462:	f993 3000 	ldrsb.w	r3, [r3]
 8009466:	b1bb      	cbz	r3, 8009498 <Argus_Dca_GetState+0x38>
 8009468:	880b      	ldrh	r3, [r1, #0]
 800946a:	b430      	push	{r4, r5}
 800946c:	7c45      	ldrb	r5, [r0, #17]
 800946e:	7c04      	ldrb	r4, [r0, #16]
 8009470:	7cc2      	ldrb	r2, [r0, #19]
 8009472:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009476:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 800947a:	0324      	lsls	r4, r4, #12
 800947c:	f404 5440 	and.w	r4, r4, #12288	; 0x3000
 8009480:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009484:	4323      	orrs	r3, r4
 8009486:	0212      	lsls	r2, r2, #8
 8009488:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800948c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8009490:	4313      	orrs	r3, r2
 8009492:	800b      	strh	r3, [r1, #0]
 8009494:	bc30      	pop	{r4, r5}
 8009496:	4770      	bx	lr
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop

0800949c <Argus_Dca_UpdateCalibration>:
 800949c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80094a0:	4604      	mov	r4, r0
 80094a2:	b085      	sub	sp, #20
 80094a4:	f8d3 01d0 	ldr.w	r0, [r3, #464]	; 0x1d0
 80094a8:	f007 fa52 	bl	8010950 <Argus_Cal_GetCalibrationPtr>
 80094ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80094ae:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 80094b0:	8662      	strh	r2, [r4, #50]	; 0x32
 80094b2:	789b      	ldrb	r3, [r3, #2]
 80094b4:	fb02 f303 	mul.w	r3, r2, r3
 80094b8:	3380      	adds	r3, #128	; 0x80
 80094ba:	0a1b      	lsrs	r3, r3, #8
 80094bc:	86a3      	strh	r3, [r4, #52]	; 0x34
 80094be:	0313      	lsls	r3, r2, #12
 80094c0:	b172      	cbz	r2, 80094e0 <Argus_Dca_UpdateCalibration+0x44>
 80094c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80094ca:	da50      	bge.n	800956e <Argus_Dca_UpdateCalibration+0xd2>
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094d2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80094d6:	d3f9      	bcc.n	80094cc <Argus_Dca_UpdateCalibration+0x30>
 80094d8:	2a00      	cmp	r2, #0
 80094da:	d148      	bne.n	800956e <Argus_Dca_UpdateCalibration+0xd2>
 80094dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094e0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80094e2:	8623      	strh	r3, [r4, #48]	; 0x30
 80094e4:	f8d2 01d0 	ldr.w	r0, [r2, #464]	; 0x1d0
 80094e8:	4669      	mov	r1, sp
 80094ea:	f007 fa35 	bl	8010958 <Argus_Cal_GetGainValues>
 80094ee:	466e      	mov	r6, sp
 80094f0:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 80094f4:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 80094f8:	f856 3b04 	ldr.w	r3, [r6], #4
 80094fc:	b1ab      	cbz	r3, 800952a <Argus_Dca_UpdateCalibration+0x8e>
 80094fe:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8009502:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8009506:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800950a:	f483 3580 	eor.w	r5, r3, #65536	; 0x10000
 800950e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009512:	da17      	bge.n	8009544 <Argus_Dca_UpdateCalibration+0xa8>
 8009514:	0049      	lsls	r1, r1, #1
 8009516:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800951a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800951e:	d3f9      	bcc.n	8009514 <Argus_Dca_UpdateCalibration+0x78>
 8009520:	b982      	cbnz	r2, 8009544 <Argus_Dca_UpdateCalibration+0xa8>
 8009522:	43eb      	mvns	r3, r5
 8009524:	0fdb      	lsrs	r3, r3, #31
 8009526:	425b      	negs	r3, r3
 8009528:	b29b      	uxth	r3, r3
 800952a:	f827 3b02 	strh.w	r3, [r7], #2
 800952e:	45bc      	cmp	ip, r7
 8009530:	d1e2      	bne.n	80094f8 <Argus_Dca_UpdateCalibration+0x5c>
 8009532:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009534:	f993 0000 	ldrsb.w	r0, [r3]
 8009538:	bb58      	cbnz	r0, 8009592 <Argus_Dca_UpdateCalibration+0xf6>
 800953a:	f04f 33ff 	mov.w	r3, #4294967295
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	b005      	add	sp, #20
 8009542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009544:	2300      	movs	r3, #0
 8009546:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800954a:	e000      	b.n	800954e <Argus_Dca_UpdateCalibration+0xb2>
 800954c:	b150      	cbz	r0, 8009564 <Argus_Dca_UpdateCalibration+0xc8>
 800954e:	4288      	cmp	r0, r1
 8009550:	bf24      	itt	cs
 8009552:	1a40      	subcs	r0, r0, r1
 8009554:	4313      	orrcs	r3, r2
 8009556:	0852      	lsrs	r2, r2, #1
 8009558:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800955c:	d1f6      	bne.n	800954c <Argus_Dca_UpdateCalibration+0xb0>
 800955e:	4288      	cmp	r0, r1
 8009560:	bf28      	it	cs
 8009562:	3301      	addcs	r3, #1
 8009564:	2d00      	cmp	r5, #0
 8009566:	bfb8      	it	lt
 8009568:	425b      	neglt	r3, r3
 800956a:	b29b      	uxth	r3, r3
 800956c:	e7dd      	b.n	800952a <Argus_Dca_UpdateCalibration+0x8e>
 800956e:	2000      	movs	r0, #0
 8009570:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009574:	e000      	b.n	8009578 <Argus_Dca_UpdateCalibration+0xdc>
 8009576:	b151      	cbz	r1, 800958e <Argus_Dca_UpdateCalibration+0xf2>
 8009578:	428b      	cmp	r3, r1
 800957a:	bf9c      	itt	ls
 800957c:	1ac9      	subls	r1, r1, r3
 800957e:	4310      	orrls	r0, r2
 8009580:	0852      	lsrs	r2, r2, #1
 8009582:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009586:	d1f6      	bne.n	8009576 <Argus_Dca_UpdateCalibration+0xda>
 8009588:	428b      	cmp	r3, r1
 800958a:	d800      	bhi.n	800958e <Argus_Dca_UpdateCalibration+0xf2>
 800958c:	3001      	adds	r0, #1
 800958e:	b283      	uxth	r3, r0
 8009590:	e7a6      	b.n	80094e0 <Argus_Dca_UpdateCalibration+0x44>
 8009592:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009594:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 8009598:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800959c:	2b01      	cmp	r3, #1
 800959e:	d035      	beq.n	800960c <Argus_Dca_UpdateCalibration+0x170>
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d128      	bne.n	80095f6 <Argus_Dca_UpdateCalibration+0x15a>
 80095a4:	f892 5062 	ldrb.w	r5, [r2, #98]	; 0x62
 80095a8:	f3c5 0544 	ubfx	r5, r5, #1, #5
 80095ac:	68d3      	ldr	r3, [r2, #12]
 80095ae:	49a6      	ldr	r1, [pc, #664]	; (8009848 <Argus_Dca_UpdateCalibration+0x3ac>)
 80095b0:	f1a3 06fa 	sub.w	r6, r3, #250	; 0xfa
 80095b4:	428e      	cmp	r6, r1
 80095b6:	d81b      	bhi.n	80095f0 <Argus_Dca_UpdateCalibration+0x154>
 80095b8:	f8d0 6134 	ldr.w	r6, [r0, #308]	; 0x134
 80095bc:	6871      	ldr	r1, [r6, #4]
 80095be:	29f9      	cmp	r1, #249	; 0xf9
 80095c0:	d916      	bls.n	80095f0 <Argus_Dca_UpdateCalibration+0x154>
 80095c2:	f892 c07a 	ldrb.w	ip, [r2, #122]	; 0x7a
 80095c6:	f892 107b 	ldrb.w	r1, [r2, #123]	; 0x7b
 80095ca:	f892 7059 	ldrb.w	r7, [r2, #89]	; 0x59
 80095ce:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 80095d2:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 80095d6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80095da:	f3c1 1149 	ubfx	r1, r1, #5, #10
 80095de:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80095e2:	fb01 2202 	mla	r2, r1, r2, r2
 80095e6:	fb05 f502 	mul.w	r5, r5, r2
 80095ea:	f5b5 0ffa 	cmp.w	r5, #8192000	; 0x7d0000
 80095ee:	d911      	bls.n	8009614 <Argus_Dca_UpdateCalibration+0x178>
 80095f0:	2300      	movs	r3, #0
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	e004      	b.n	8009600 <Argus_Dca_UpdateCalibration+0x164>
 80095f6:	4895      	ldr	r0, [pc, #596]	; (800984c <Argus_Dca_UpdateCalibration+0x3b0>)
 80095f8:	f7f7 fc2a 	bl	8000e50 <print>
 80095fc:	2300      	movs	r3, #0
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	4893      	ldr	r0, [pc, #588]	; (8009850 <Argus_Dca_UpdateCalibration+0x3b4>)
 8009602:	f7f7 fc25 	bl	8000e50 <print>
 8009606:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800960a:	e799      	b.n	8009540 <Argus_Dca_UpdateCalibration+0xa4>
 800960c:	f892 5061 	ldrb.w	r5, [r2, #97]	; 0x61
 8009610:	08ed      	lsrs	r5, r5, #3
 8009612:	e7cb      	b.n	80095ac <Argus_Dca_UpdateCalibration+0x110>
 8009614:	42ab      	cmp	r3, r5
 8009616:	f080 810e 	bcs.w	8009836 <Argus_Dca_UpdateCalibration+0x39a>
 800961a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800961e:	005b      	lsls	r3, r3, #1
 8009620:	429d      	cmp	r5, r3
 8009622:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009626:	d8fa      	bhi.n	800961e <Argus_Dca_UpdateCalibration+0x182>
 8009628:	2a00      	cmp	r2, #0
 800962a:	f040 80e8 	bne.w	80097fe <Argus_Dca_UpdateCalibration+0x362>
 800962e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8009632:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8009636:	f8d0 01d0 	ldr.w	r0, [r0, #464]	; 0x1d0
 800963a:	f007 f989 	bl	8010950 <Argus_Cal_GetCalibrationPtr>
 800963e:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8009642:	fb07 f103 	mul.w	r1, r7, r3
 8009646:	fb05 f503 	mul.w	r5, r5, r3
 800964a:	eb05 4511 	add.w	r5, r5, r1, lsr #16
 800964e:	b289      	uxth	r1, r1
 8009650:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009654:	f511 4f80 	cmn.w	r1, #16384	; 0x4000
 8009658:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800965c:	ea4f 4545 	mov.w	r5, r5, lsl #17
 8009660:	f080 80c3 	bcs.w	80097ea <Argus_Dca_UpdateCalibration+0x34e>
 8009664:	f501 4080 	add.w	r0, r1, #16384	; 0x4000
 8009668:	0bc0      	lsrs	r0, r0, #15
 800966a:	4428      	add	r0, r5
 800966c:	6873      	ldr	r3, [r6, #4]
 800966e:	0c05      	lsrs	r5, r0, #16
 8009670:	fba3 1205 	umull	r1, r2, r3, r5
 8009674:	2a00      	cmp	r2, #0
 8009676:	f040 80b4 	bne.w	80097e2 <Argus_Dca_UpdateCalibration+0x346>
 800967a:	b29a      	uxth	r2, r3
 800967c:	b280      	uxth	r0, r0
 800967e:	fb02 f100 	mul.w	r1, r2, r0
 8009682:	0c1b      	lsrs	r3, r3, #16
 8009684:	fb02 f205 	mul.w	r2, r2, r5
 8009688:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800968c:	fb03 f000 	mul.w	r0, r3, r0
 8009690:	fa10 f082 	uxtah	r0, r0, r2
 8009694:	fb03 f305 	mul.w	r3, r3, r5
 8009698:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800969c:	0402      	lsls	r2, r0, #16
 800969e:	fa12 f181 	uxtah	r1, r2, r1
 80096a2:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 80096a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80096aa:	bf38      	it	cc
 80096ac:	f501 4100 	addcc.w	r1, r1, #32768	; 0x8000
 80096b0:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80096b4:	bf34      	ite	cc
 80096b6:	0c08      	lsrcc	r0, r1, #16
 80096b8:	f44f 3080 	movcs.w	r0, #65536	; 0x10000
 80096bc:	4418      	add	r0, r3
 80096be:	1c43      	adds	r3, r0, #1
 80096c0:	f000 808f 	beq.w	80097e2 <Argus_Dca_UpdateCalibration+0x346>
 80096c4:	6020      	str	r0, [r4, #0]
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d09a      	beq.n	8009600 <Argus_Dca_UpdateCalibration+0x164>
 80096ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80096cc:	f894 503f 	ldrb.w	r5, [r4, #63]	; 0x3f
 80096d0:	89d9      	ldrh	r1, [r3, #14]
 80096d2:	098b      	lsrs	r3, r1, #6
 80096d4:	bf08      	it	eq
 80096d6:	2301      	moveq	r3, #1
 80096d8:	2d00      	cmp	r5, #0
 80096da:	d156      	bne.n	800978a <Argus_Dca_UpdateCalibration+0x2ee>
 80096dc:	4283      	cmp	r3, r0
 80096de:	bf28      	it	cs
 80096e0:	4603      	movcs	r3, r0
 80096e2:	019a      	lsls	r2, r3, #6
 80096e4:	2001      	movs	r0, #1
 80096e6:	428a      	cmp	r2, r1
 80096e8:	d257      	bcs.n	800979a <Argus_Dca_UpdateCalibration+0x2fe>
 80096ea:	4285      	cmp	r5, r0
 80096ec:	b292      	uxth	r2, r2
 80096ee:	d906      	bls.n	80096fe <Argus_Dca_UpdateCalibration+0x262>
 80096f0:	4858      	ldr	r0, [pc, #352]	; (8009854 <Argus_Dca_UpdateCalibration+0x3b8>)
 80096f2:	f7f7 fbad 	bl	8000e50 <print>
 80096f6:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80096fa:	e721      	b.n	8009540 <Argus_Dca_UpdateCalibration+0xa4>
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	428a      	cmp	r2, r1
 8009700:	d24d      	bcs.n	800979e <Argus_Dca_UpdateCalibration+0x302>
 8009702:	8462      	strh	r2, [r4, #34]	; 0x22
 8009704:	0290      	lsls	r0, r2, #10
 8009706:	2a00      	cmp	r2, #0
 8009708:	d05e      	beq.n	80097c8 <Argus_Dca_UpdateCalibration+0x32c>
 800970a:	0289      	lsls	r1, r1, #10
 800970c:	ea80 75e0 	eor.w	r5, r0, r0, asr #31
 8009710:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8009714:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
 8009718:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 800971c:	42aa      	cmp	r2, r5
 800971e:	ea80 0001 	eor.w	r0, r0, r1
 8009722:	f240 8082 	bls.w	800982a <Argus_Dca_UpdateCalibration+0x38e>
 8009726:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800972a:	e001      	b.n	8009730 <Argus_Dca_UpdateCalibration+0x294>
 800972c:	461e      	mov	r6, r3
 800972e:	460d      	mov	r5, r1
 8009730:	0069      	lsls	r1, r5, #1
 8009732:	428a      	cmp	r2, r1
 8009734:	ea4f 0346 	mov.w	r3, r6, lsl #1
 8009738:	d8f8      	bhi.n	800972c <Argus_Dca_UpdateCalibration+0x290>
 800973a:	2b00      	cmp	r3, #0
 800973c:	d046      	beq.n	80097cc <Argus_Dca_UpdateCalibration+0x330>
 800973e:	2900      	cmp	r1, #0
 8009740:	db56      	blt.n	80097f0 <Argus_Dca_UpdateCalibration+0x354>
 8009742:	2000      	movs	r0, #0
 8009744:	e000      	b.n	8009748 <Argus_Dca_UpdateCalibration+0x2ac>
 8009746:	b152      	cbz	r2, 800975e <Argus_Dca_UpdateCalibration+0x2c2>
 8009748:	428a      	cmp	r2, r1
 800974a:	bf24      	itt	cs
 800974c:	1a52      	subcs	r2, r2, r1
 800974e:	4318      	orrcs	r0, r3
 8009750:	085b      	lsrs	r3, r3, #1
 8009752:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009756:	d1f6      	bne.n	8009746 <Argus_Dca_UpdateCalibration+0x2aa>
 8009758:	4291      	cmp	r1, r2
 800975a:	d800      	bhi.n	800975e <Argus_Dca_UpdateCalibration+0x2c2>
 800975c:	3001      	adds	r0, #1
 800975e:	b398      	cbz	r0, 80097c8 <Argus_Dca_UpdateCalibration+0x32c>
 8009760:	0843      	lsrs	r3, r0, #1
 8009762:	d05d      	beq.n	8009820 <Argus_Dca_UpdateCalibration+0x384>
 8009764:	2100      	movs	r1, #0
 8009766:	e000      	b.n	800976a <Argus_Dca_UpdateCalibration+0x2ce>
 8009768:	4611      	mov	r1, r2
 800976a:	085b      	lsrs	r3, r3, #1
 800976c:	f101 0201 	add.w	r2, r1, #1
 8009770:	d1fa      	bne.n	8009768 <Argus_Dca_UpdateCalibration+0x2cc>
 8009772:	fa20 f101 	lsr.w	r1, r0, r1
 8009776:	2903      	cmp	r1, #3
 8009778:	bf08      	it	eq
 800977a:	3201      	addeq	r2, #1
 800977c:	3a10      	subs	r2, #16
 800977e:	b2d2      	uxtb	r2, r2
 8009780:	2000      	movs	r0, #0
 8009782:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8009786:	b005      	add	sp, #20
 8009788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978a:	fb05 f203 	mul.w	r2, r5, r3
 800978e:	4282      	cmp	r2, r0
 8009790:	d80b      	bhi.n	80097aa <Argus_Dca_UpdateCalibration+0x30e>
 8009792:	019b      	lsls	r3, r3, #6
 8009794:	428b      	cmp	r3, r1
 8009796:	d3b1      	bcc.n	80096fc <Argus_Dca_UpdateCalibration+0x260>
 8009798:	4628      	mov	r0, r5
 800979a:	4285      	cmp	r5, r0
 800979c:	d8a8      	bhi.n	80096f0 <Argus_Dca_UpdateCalibration+0x254>
 800979e:	2000      	movs	r0, #0
 80097a0:	8461      	strh	r1, [r4, #34]	; 0x22
 80097a2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
 80097a6:	b005      	add	sp, #20
 80097a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097aa:	4285      	cmp	r5, r0
 80097ac:	bf88      	it	hi
 80097ae:	2240      	movhi	r2, #64	; 0x40
 80097b0:	d899      	bhi.n	80096e6 <Argus_Dca_UpdateCalibration+0x24a>
 80097b2:	fbb0 f2f5 	udiv	r2, r0, r5
 80097b6:	0192      	lsls	r2, r2, #6
 80097b8:	428a      	cmp	r2, r1
 80097ba:	d2f0      	bcs.n	800979e <Argus_Dca_UpdateCalibration+0x302>
 80097bc:	4628      	mov	r0, r5
 80097be:	e794      	b.n	80096ea <Argus_Dca_UpdateCalibration+0x24e>
 80097c0:	4295      	cmp	r5, r2
 80097c2:	bf98      	it	ls
 80097c4:	4618      	movls	r0, r3
 80097c6:	d9c9      	bls.n	800975c <Argus_Dca_UpdateCalibration+0x2c0>
 80097c8:	22f0      	movs	r2, #240	; 0xf0
 80097ca:	e7d9      	b.n	8009780 <Argus_Dca_UpdateCalibration+0x2e4>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	bfb5      	itete	lt
 80097d0:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
 80097d4:	f06f 4000 	mvnge.w	r0, #2147483648	; 0x80000000
 80097d8:	f04f 4380 	movlt.w	r3, #1073741824	; 0x40000000
 80097dc:	f06f 4340 	mvnge.w	r3, #3221225472	; 0xc0000000
 80097e0:	e7c0      	b.n	8009764 <Argus_Dca_UpdateCalibration+0x2c8>
 80097e2:	f06f 0001 	mvn.w	r0, #1
 80097e6:	6020      	str	r0, [r4, #0]
 80097e8:	e76f      	b.n	80096ca <Argus_Dca_UpdateCalibration+0x22e>
 80097ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80097ee:	e73c      	b.n	800966a <Argus_Dca_UpdateCalibration+0x1ce>
 80097f0:	f036 4300 	bics.w	r3, r6, #2147483648	; 0x80000000
 80097f4:	d0e4      	beq.n	80097c0 <Argus_Dca_UpdateCalibration+0x324>
 80097f6:	4629      	mov	r1, r5
 80097f8:	e7a3      	b.n	8009742 <Argus_Dca_UpdateCalibration+0x2a6>
 80097fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80097fe:	2100      	movs	r1, #0
 8009800:	e000      	b.n	8009804 <Argus_Dca_UpdateCalibration+0x368>
 8009802:	b155      	cbz	r5, 800981a <Argus_Dca_UpdateCalibration+0x37e>
 8009804:	42ab      	cmp	r3, r5
 8009806:	bf9c      	itt	ls
 8009808:	1aed      	subls	r5, r5, r3
 800980a:	4311      	orrls	r1, r2
 800980c:	0852      	lsrs	r2, r2, #1
 800980e:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8009812:	d1f6      	bne.n	8009802 <Argus_Dca_UpdateCalibration+0x366>
 8009814:	429d      	cmp	r5, r3
 8009816:	bf28      	it	cs
 8009818:	3101      	addcs	r1, #1
 800981a:	0c0d      	lsrs	r5, r1, #16
 800981c:	b28f      	uxth	r7, r1
 800981e:	e70a      	b.n	8009636 <Argus_Dca_UpdateCalibration+0x19a>
 8009820:	461a      	mov	r2, r3
 8009822:	f04f 31ff 	mov.w	r1, #4294967295
 8009826:	2001      	movs	r0, #1
 8009828:	e7a3      	b.n	8009772 <Argus_Dca_UpdateCalibration+0x2d6>
 800982a:	2a00      	cmp	r2, #0
 800982c:	d0cc      	beq.n	80097c8 <Argus_Dca_UpdateCalibration+0x32c>
 800982e:	4629      	mov	r1, r5
 8009830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009834:	e785      	b.n	8009742 <Argus_Dca_UpdateCalibration+0x2a6>
 8009836:	2d00      	cmp	r5, #0
 8009838:	d1df      	bne.n	80097fa <Argus_Dca_UpdateCalibration+0x35e>
 800983a:	f8d0 01d0 	ldr.w	r0, [r0, #464]	; 0x1d0
 800983e:	f007 f887 	bl	8010950 <Argus_Cal_GetCalibrationPtr>
 8009842:	4629      	mov	r1, r5
 8009844:	e70e      	b.n	8009664 <Argus_Dca_UpdateCalibration+0x1c8>
 8009846:	bf00      	nop
 8009848:	000185a6 	.word	0x000185a6
 800984c:	08019c04 	.word	0x08019c04
 8009850:	08019c34 	.word	0x08019c34
 8009854:	08019c64 	.word	0x08019c64

08009858 <Argus_Dca_CheckCfg>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	f990 6000 	ldrsb.w	r6, [r0]
 800985e:	1c73      	adds	r3, r6, #1
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b02      	cmp	r3, #2
 8009864:	f200 80d9 	bhi.w	8009a1a <Argus_Dca_CheckCfg+0x1c2>
 8009868:	798d      	ldrb	r5, [r1, #6]
 800986a:	790b      	ldrb	r3, [r1, #4]
 800986c:	1eaa      	subs	r2, r5, #2
 800986e:	2a7e      	cmp	r2, #126	; 0x7e
 8009870:	f200 80da 	bhi.w	8009a28 <Argus_Dca_CheckCfg+0x1d0>
 8009874:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8009878:	029b      	lsls	r3, r3, #10
 800987a:	d00d      	beq.n	8009898 <Argus_Dca_CheckCfg+0x40>
 800987c:	2b00      	cmp	r3, #0
 800987e:	bfb8      	it	lt
 8009880:	425b      	neglt	r3, r3
 8009882:	429d      	cmp	r5, r3
 8009884:	462a      	mov	r2, r5
 8009886:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800988a:	d92e      	bls.n	80098ea <Argus_Dca_CheckCfg+0x92>
 800988c:	005b      	lsls	r3, r3, #1
 800988e:	429d      	cmp	r5, r3
 8009890:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009894:	d8fa      	bhi.n	800988c <Argus_Dca_CheckCfg+0x34>
 8009896:	bb44      	cbnz	r4, 80098ea <Argus_Dca_CheckCfg+0x92>
 8009898:	2e01      	cmp	r6, #1
 800989a:	d02f      	beq.n	80098fc <Argus_Dca_CheckCfg+0xa4>
 800989c:	3601      	adds	r6, #1
 800989e:	f040 8093 	bne.w	80099c8 <Argus_Dca_CheckCfg+0x170>
 80098a2:	8943      	ldrh	r3, [r0, #10]
 80098a4:	3b01      	subs	r3, #1
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 80098ac:	4293      	cmp	r3, r2
 80098ae:	f200 80ae 	bhi.w	8009a0e <Argus_Dca_CheckCfg+0x1b6>
 80098b2:	8a03      	ldrh	r3, [r0, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 809e 	beq.w	80099f6 <Argus_Dca_CheckCfg+0x19e>
 80098ba:	f240 3285 	movw	r2, #901	; 0x385
 80098be:	4293      	cmp	r3, r2
 80098c0:	f200 8099 	bhi.w	80099f6 <Argus_Dca_CheckCfg+0x19e>
 80098c4:	7d83      	ldrb	r3, [r0, #22]
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	f200 80b5 	bhi.w	8009a36 <Argus_Dca_CheckCfg+0x1de>
 80098cc:	f891 308d 	ldrb.w	r3, [r1, #141]	; 0x8d
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d05d      	beq.n	8009990 <Argus_Dca_CheckCfg+0x138>
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	f000 8083 	beq.w	80099e0 <Argus_Dca_CheckCfg+0x188>
 80098da:	487a      	ldr	r0, [pc, #488]	; (8009ac4 <Argus_Dca_CheckCfg+0x26c>)
 80098dc:	f7f7 fab8 	bl	8000e50 <print>
 80098e0:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80098e4:	bd70      	pop	{r4, r5, r6, pc}
 80098e6:	2a00      	cmp	r2, #0
 80098e8:	d0d6      	beq.n	8009898 <Argus_Dca_CheckCfg+0x40>
 80098ea:	429a      	cmp	r2, r3
 80098ec:	bf28      	it	cs
 80098ee:	1ad2      	subcs	r2, r2, r3
 80098f0:	0864      	lsrs	r4, r4, #1
 80098f2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80098f6:	d1f6      	bne.n	80098e6 <Argus_Dca_CheckCfg+0x8e>
 80098f8:	2e01      	cmp	r6, #1
 80098fa:	d1cf      	bne.n	800989c <Argus_Dca_CheckCfg+0x44>
 80098fc:	7843      	ldrb	r3, [r0, #1]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d07f      	beq.n	8009a02 <Argus_Dca_CheckCfg+0x1aa>
 8009902:	7882      	ldrb	r2, [r0, #2]
 8009904:	4293      	cmp	r3, r2
 8009906:	d87c      	bhi.n	8009a02 <Argus_Dca_CheckCfg+0x1aa>
 8009908:	78c3      	ldrb	r3, [r0, #3]
 800990a:	429a      	cmp	r2, r3
 800990c:	d879      	bhi.n	8009a02 <Argus_Dca_CheckCfg+0x1aa>
 800990e:	2b21      	cmp	r3, #33	; 0x21
 8009910:	d877      	bhi.n	8009a02 <Argus_Dca_CheckCfg+0x1aa>
 8009912:	88c3      	ldrh	r3, [r0, #6]
 8009914:	2b3f      	cmp	r3, #63	; 0x3f
 8009916:	f240 80bb 	bls.w	8009a90 <Argus_Dca_CheckCfg+0x238>
 800991a:	8904      	ldrh	r4, [r0, #8]
 800991c:	42a3      	cmp	r3, r4
 800991e:	f200 80be 	bhi.w	8009a9e <Argus_Dca_CheckCfg+0x246>
 8009922:	8882      	ldrh	r2, [r0, #4]
 8009924:	2a00      	cmp	r2, #0
 8009926:	d151      	bne.n	80099cc <Argus_Dca_CheckCfg+0x174>
 8009928:	8983      	ldrh	r3, [r0, #12]
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 808a 	beq.w	8009a44 <Argus_Dca_CheckCfg+0x1ec>
 8009930:	89c2      	ldrh	r2, [r0, #14]
 8009932:	f64f 74c0 	movw	r4, #65472	; 0xffc0
 8009936:	42a2      	cmp	r2, r4
 8009938:	f200 808a 	bhi.w	8009a50 <Argus_Dca_CheckCfg+0x1f8>
 800993c:	4293      	cmp	r3, r2
 800993e:	f200 808d 	bhi.w	8009a5c <Argus_Dca_CheckCfg+0x204>
 8009942:	8944      	ldrh	r4, [r0, #10]
 8009944:	42a3      	cmp	r3, r4
 8009946:	d862      	bhi.n	8009a0e <Argus_Dca_CheckCfg+0x1b6>
 8009948:	42a2      	cmp	r2, r4
 800994a:	d360      	bcc.n	8009a0e <Argus_Dca_CheckCfg+0x1b6>
 800994c:	8a43      	ldrh	r3, [r0, #18]
 800994e:	2b00      	cmp	r3, #0
 8009950:	f000 808a 	beq.w	8009a68 <Argus_Dca_CheckCfg+0x210>
 8009954:	8a02      	ldrh	r2, [r0, #16]
 8009956:	4293      	cmp	r3, r2
 8009958:	d84d      	bhi.n	80099f6 <Argus_Dca_CheckCfg+0x19e>
 800995a:	f240 3385 	movw	r3, #901	; 0x385
 800995e:	429a      	cmp	r2, r3
 8009960:	d849      	bhi.n	80099f6 <Argus_Dca_CheckCfg+0x19e>
 8009962:	7d44      	ldrb	r4, [r0, #21]
 8009964:	2c03      	cmp	r4, #3
 8009966:	f200 8085 	bhi.w	8009a74 <Argus_Dca_CheckCfg+0x21c>
 800996a:	7d02      	ldrb	r2, [r0, #20]
 800996c:	2a03      	cmp	r2, #3
 800996e:	f200 8088 	bhi.w	8009a82 <Argus_Dca_CheckCfg+0x22a>
 8009972:	7d83      	ldrb	r3, [r0, #22]
 8009974:	2b03      	cmp	r3, #3
 8009976:	f200 8098 	bhi.w	8009aaa <Argus_Dca_CheckCfg+0x252>
 800997a:	429a      	cmp	r2, r3
 800997c:	d801      	bhi.n	8009982 <Argus_Dca_CheckCfg+0x12a>
 800997e:	4294      	cmp	r4, r2
 8009980:	d9a4      	bls.n	80098cc <Argus_Dca_CheckCfg+0x74>
 8009982:	4621      	mov	r1, r4
 8009984:	4850      	ldr	r0, [pc, #320]	; (8009ac8 <Argus_Dca_CheckCfg+0x270>)
 8009986:	f7f7 fa63 	bl	8000e50 <print>
 800998a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800998e:	bd70      	pop	{r4, r5, r6, pc}
 8009990:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
 8009994:	08d8      	lsrs	r0, r3, #3
 8009996:	f891 3059 	ldrb.w	r3, [r1, #89]	; 0x59
 800999a:	f891 507a 	ldrb.w	r5, [r1, #122]	; 0x7a
 800999e:	f891 407b 	ldrb.w	r4, [r1, #123]	; 0x7b
 80099a2:	f891 205a 	ldrb.w	r2, [r1, #90]	; 0x5a
 80099a6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80099aa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80099ae:	f3c4 1449 	ubfx	r4, r4, #5, #10
 80099b2:	f3c2 0309 	ubfx	r3, r2, #0, #10
 80099b6:	fb04 3303 	mla	r3, r4, r3, r3
 80099ba:	fb00 f303 	mul.w	r3, r0, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d07a      	beq.n	8009ab8 <Argus_Dca_CheckCfg+0x260>
 80099c2:	f5b3 0ffa 	cmp.w	r3, #8192000	; 0x7d0000
 80099c6:	d810      	bhi.n	80099ea <Argus_Dca_CheckCfg+0x192>
 80099c8:	2000      	movs	r0, #0
 80099ca:	bd70      	pop	{r4, r5, r6, pc}
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d801      	bhi.n	80099d4 <Argus_Dca_CheckCfg+0x17c>
 80099d0:	4294      	cmp	r4, r2
 80099d2:	d2a9      	bcs.n	8009928 <Argus_Dca_CheckCfg+0xd0>
 80099d4:	483d      	ldr	r0, [pc, #244]	; (8009acc <Argus_Dca_CheckCfg+0x274>)
 80099d6:	f7f7 fa3b 	bl	8000e50 <print>
 80099da:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80099de:	bd70      	pop	{r4, r5, r6, pc}
 80099e0:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
 80099e4:	f3c3 0044 	ubfx	r0, r3, #1, #5
 80099e8:	e7d5      	b.n	8009996 <Argus_Dca_CheckCfg+0x13e>
 80099ea:	4839      	ldr	r0, [pc, #228]	; (8009ad0 <Argus_Dca_CheckCfg+0x278>)
 80099ec:	f7f7 fa30 	bl	8000e50 <print>
 80099f0:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80099f4:	bd70      	pop	{r4, r5, r6, pc}
 80099f6:	4837      	ldr	r0, [pc, #220]	; (8009ad4 <Argus_Dca_CheckCfg+0x27c>)
 80099f8:	f7f7 fa2a 	bl	8000e50 <print>
 80099fc:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a00:	bd70      	pop	{r4, r5, r6, pc}
 8009a02:	4835      	ldr	r0, [pc, #212]	; (8009ad8 <Argus_Dca_CheckCfg+0x280>)
 8009a04:	f7f7 fa24 	bl	8000e50 <print>
 8009a08:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a0c:	bd70      	pop	{r4, r5, r6, pc}
 8009a0e:	4833      	ldr	r0, [pc, #204]	; (8009adc <Argus_Dca_CheckCfg+0x284>)
 8009a10:	f7f7 fa1e 	bl	8000e50 <print>
 8009a14:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a18:	bd70      	pop	{r4, r5, r6, pc}
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4830      	ldr	r0, [pc, #192]	; (8009ae0 <Argus_Dca_CheckCfg+0x288>)
 8009a1e:	f7f7 fa17 	bl	8000e50 <print>
 8009a22:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a26:	bd70      	pop	{r4, r5, r6, pc}
 8009a28:	4629      	mov	r1, r5
 8009a2a:	482e      	ldr	r0, [pc, #184]	; (8009ae4 <Argus_Dca_CheckCfg+0x28c>)
 8009a2c:	f7f7 fa10 	bl	8000e50 <print>
 8009a30:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a34:	bd70      	pop	{r4, r5, r6, pc}
 8009a36:	7d01      	ldrb	r1, [r0, #20]
 8009a38:	482b      	ldr	r0, [pc, #172]	; (8009ae8 <Argus_Dca_CheckCfg+0x290>)
 8009a3a:	f7f7 fa09 	bl	8000e50 <print>
 8009a3e:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a42:	bd70      	pop	{r4, r5, r6, pc}
 8009a44:	4829      	ldr	r0, [pc, #164]	; (8009aec <Argus_Dca_CheckCfg+0x294>)
 8009a46:	f7f7 fa03 	bl	8000e50 <print>
 8009a4a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	4827      	ldr	r0, [pc, #156]	; (8009af0 <Argus_Dca_CheckCfg+0x298>)
 8009a52:	f7f7 f9fd 	bl	8000e50 <print>
 8009a56:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	4825      	ldr	r0, [pc, #148]	; (8009af4 <Argus_Dca_CheckCfg+0x29c>)
 8009a5e:	f7f7 f9f7 	bl	8000e50 <print>
 8009a62:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a66:	bd70      	pop	{r4, r5, r6, pc}
 8009a68:	4823      	ldr	r0, [pc, #140]	; (8009af8 <Argus_Dca_CheckCfg+0x2a0>)
 8009a6a:	f7f7 f9f1 	bl	8000e50 <print>
 8009a6e:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a72:	bd70      	pop	{r4, r5, r6, pc}
 8009a74:	4621      	mov	r1, r4
 8009a76:	4821      	ldr	r0, [pc, #132]	; (8009afc <Argus_Dca_CheckCfg+0x2a4>)
 8009a78:	f7f7 f9ea 	bl	8000e50 <print>
 8009a7c:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a80:	bd70      	pop	{r4, r5, r6, pc}
 8009a82:	4611      	mov	r1, r2
 8009a84:	481e      	ldr	r0, [pc, #120]	; (8009b00 <Argus_Dca_CheckCfg+0x2a8>)
 8009a86:	f7f7 f9e3 	bl	8000e50 <print>
 8009a8a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}
 8009a90:	2104      	movs	r1, #4
 8009a92:	481c      	ldr	r0, [pc, #112]	; (8009b04 <Argus_Dca_CheckCfg+0x2ac>)
 8009a94:	f7f7 f9dc 	bl	8000e50 <print>
 8009a98:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
 8009a9e:	481a      	ldr	r0, [pc, #104]	; (8009b08 <Argus_Dca_CheckCfg+0x2b0>)
 8009aa0:	f7f7 f9d6 	bl	8000e50 <print>
 8009aa4:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009aa8:	bd70      	pop	{r4, r5, r6, pc}
 8009aaa:	4619      	mov	r1, r3
 8009aac:	4817      	ldr	r0, [pc, #92]	; (8009b0c <Argus_Dca_CheckCfg+0x2b4>)
 8009aae:	f7f7 f9cf 	bl	8000e50 <print>
 8009ab2:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	4815      	ldr	r0, [pc, #84]	; (8009b10 <Argus_Dca_CheckCfg+0x2b8>)
 8009aba:	f7f7 f9c9 	bl	8000e50 <print>
 8009abe:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	08019968 	.word	0x08019968
 8009ac8:	080198cc 	.word	0x080198cc
 8009acc:	08019598 	.word	0x08019598
 8009ad0:	08019a10 	.word	0x08019a10
 8009ad4:	08019790 	.word	0x08019790
 8009ad8:	08019460 	.word	0x08019460
 8009adc:	080196e4 	.word	0x080196e4
 8009ae0:	080193dc 	.word	0x080193dc
 8009ae4:	08019410 	.word	0x08019410
 8009ae8:	0801992c 	.word	0x0801992c
 8009aec:	08019608 	.word	0x08019608
 8009af0:	08019644 	.word	0x08019644
 8009af4:	08019680 	.word	0x08019680
 8009af8:	08019750 	.word	0x08019750
 8009afc:	0801980c 	.word	0x0801980c
 8009b00:	0801984c 	.word	0x0801984c
 8009b04:	080194f0 	.word	0x080194f0
 8009b08:	08019538 	.word	0x08019538
 8009b0c:	0801988c 	.word	0x0801988c
 8009b10:	080199a0 	.word	0x080199a0

08009b14 <Argus_Dca_PrepareCfg>:
 8009b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b18:	b082      	sub	sp, #8
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	f002 81fb 	beq.w	800bf16 <Argus_Dca_PrepareCfg+0x2402>
 8009b20:	2900      	cmp	r1, #0
 8009b22:	f002 81f8 	beq.w	800bf16 <Argus_Dca_PrepareCfg+0x2402>
 8009b26:	4604      	mov	r4, r0
 8009b28:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009b2a:	460d      	mov	r5, r1
 8009b2c:	f005 fb4e 	bl	800f1cc <Argus_Dev_GetCfg>
 8009b30:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
 8009b34:	e9c4 5217 	strd	r5, r2, [r4, #92]	; 0x5c
 8009b38:	f100 03d4 	add.w	r3, r0, #212	; 0xd4
 8009b3c:	6663      	str	r3, [r4, #100]	; 0x64
 8009b3e:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8009b42:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8009b46:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
 8009b4a:	400b      	ands	r3, r1
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	2bff      	cmp	r3, #255	; 0xff
 8009b50:	7982      	ldrb	r2, [r0, #6]
 8009b52:	f041 86a2 	bne.w	800b89a <Argus_Dca_PrepareCfg+0x1d86>
 8009b56:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009b5a:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 8009b5e:	f890 1055 	ldrb.w	r1, [r0, #85]	; 0x55
 8009b62:	4033      	ands	r3, r6
 8009b64:	400b      	ands	r3, r1
 8009b66:	2bff      	cmp	r3, #255	; 0xff
 8009b68:	f041 869a 	bne.w	800b8a0 <Argus_Dca_PrepareCfg+0x1d8c>
 8009b6c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8009b70:	f890 6033 	ldrb.w	r6, [r0, #51]	; 0x33
 8009b74:	f890 1054 	ldrb.w	r1, [r0, #84]	; 0x54
 8009b78:	4033      	ands	r3, r6
 8009b7a:	400b      	ands	r3, r1
 8009b7c:	2bff      	cmp	r3, #255	; 0xff
 8009b7e:	f041 8711 	bne.w	800b9a4 <Argus_Dca_PrepareCfg+0x1e90>
 8009b82:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009b86:	f890 6032 	ldrb.w	r6, [r0, #50]	; 0x32
 8009b8a:	f890 1053 	ldrb.w	r1, [r0, #83]	; 0x53
 8009b8e:	4033      	ands	r3, r6
 8009b90:	400b      	ands	r3, r1
 8009b92:	2bff      	cmp	r3, #255	; 0xff
 8009b94:	f041 8709 	bne.w	800b9aa <Argus_Dca_PrepareCfg+0x1e96>
 8009b98:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009b9c:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
 8009ba0:	f890 1052 	ldrb.w	r1, [r0, #82]	; 0x52
 8009ba4:	4033      	ands	r3, r6
 8009ba6:	400b      	ands	r3, r1
 8009ba8:	2bff      	cmp	r3, #255	; 0xff
 8009baa:	f041 8701 	bne.w	800b9b0 <Argus_Dca_PrepareCfg+0x1e9c>
 8009bae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009bb2:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 8009bb6:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
 8009bba:	4033      	ands	r3, r6
 8009bbc:	400b      	ands	r3, r1
 8009bbe:	2bff      	cmp	r3, #255	; 0xff
 8009bc0:	f041 8744 	bne.w	800ba4c <Argus_Dca_PrepareCfg+0x1f38>
 8009bc4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009bc8:	f890 602f 	ldrb.w	r6, [r0, #47]	; 0x2f
 8009bcc:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 8009bd0:	4033      	ands	r3, r6
 8009bd2:	400b      	ands	r3, r1
 8009bd4:	2bff      	cmp	r3, #255	; 0xff
 8009bd6:	f041 873c 	bne.w	800ba52 <Argus_Dca_PrepareCfg+0x1f3e>
 8009bda:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8009bde:	f890 602e 	ldrb.w	r6, [r0, #46]	; 0x2e
 8009be2:	f890 104f 	ldrb.w	r1, [r0, #79]	; 0x4f
 8009be6:	4033      	ands	r3, r6
 8009be8:	400b      	ands	r3, r1
 8009bea:	2bff      	cmp	r3, #255	; 0xff
 8009bec:	f041 87a1 	bne.w	800bb32 <Argus_Dca_PrepareCfg+0x201e>
 8009bf0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009bf4:	f890 602d 	ldrb.w	r6, [r0, #45]	; 0x2d
 8009bf8:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8009bfc:	4033      	ands	r3, r6
 8009bfe:	400b      	ands	r3, r1
 8009c00:	2bff      	cmp	r3, #255	; 0xff
 8009c02:	f041 87d5 	bne.w	800bbb0 <Argus_Dca_PrepareCfg+0x209c>
 8009c06:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009c0a:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8009c0e:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 8009c12:	4033      	ands	r3, r6
 8009c14:	400b      	ands	r3, r1
 8009c16:	2bff      	cmp	r3, #255	; 0xff
 8009c18:	f042 8162 	bne.w	800bee0 <Argus_Dca_PrepareCfg+0x23cc>
 8009c1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009c20:	f890 602b 	ldrb.w	r6, [r0, #43]	; 0x2b
 8009c24:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 8009c28:	4033      	ands	r3, r6
 8009c2a:	400b      	ands	r3, r1
 8009c2c:	2bff      	cmp	r3, #255	; 0xff
 8009c2e:	f042 815a 	bne.w	800bee6 <Argus_Dca_PrepareCfg+0x23d2>
 8009c32:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
 8009c36:	f890 602a 	ldrb.w	r6, [r0, #42]	; 0x2a
 8009c3a:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 8009c3e:	4033      	ands	r3, r6
 8009c40:	400b      	ands	r3, r1
 8009c42:	2bff      	cmp	r3, #255	; 0xff
 8009c44:	d13b      	bne.n	8009cbe <Argus_Dca_PrepareCfg+0x1aa>
 8009c46:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8009c4a:	f890 6029 	ldrb.w	r6, [r0, #41]	; 0x29
 8009c4e:	f890 104a 	ldrb.w	r1, [r0, #74]	; 0x4a
 8009c52:	4033      	ands	r3, r6
 8009c54:	400b      	ands	r3, r1
 8009c56:	2bff      	cmp	r3, #255	; 0xff
 8009c58:	f041 868e 	bne.w	800b978 <Argus_Dca_PrepareCfg+0x1e64>
 8009c5c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009c60:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 8009c64:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 8009c68:	4033      	ands	r3, r6
 8009c6a:	400b      	ands	r3, r1
 8009c6c:	2bff      	cmp	r3, #255	; 0xff
 8009c6e:	f042 8143 	bne.w	800bef8 <Argus_Dca_PrepareCfg+0x23e4>
 8009c72:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009c76:	f890 6027 	ldrb.w	r6, [r0, #39]	; 0x27
 8009c7a:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8009c7e:	4033      	ands	r3, r6
 8009c80:	400b      	ands	r3, r1
 8009c82:	2bff      	cmp	r3, #255	; 0xff
 8009c84:	f042 813b 	bne.w	800befe <Argus_Dca_PrepareCfg+0x23ea>
 8009c88:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8009c8c:	f890 6037 	ldrb.w	r6, [r0, #55]	; 0x37
 8009c90:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
 8009c94:	4033      	ands	r3, r6
 8009c96:	400b      	ands	r3, r1
 8009c98:	2bff      	cmp	r3, #255	; 0xff
 8009c9a:	bf18      	it	ne
 8009c9c:	2178      	movne	r1, #120	; 0x78
 8009c9e:	d10f      	bne.n	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 8009ca0:	2180      	movs	r1, #128	; 0x80
 8009ca2:	7903      	ldrb	r3, [r0, #4]
 8009ca4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8009ca8:	1a5b      	subs	r3, r3, r1
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	0299      	lsls	r1, r3, #10
 8009cae:	fbb3 f6f2 	udiv	r6, r3, r2
 8009cb2:	77a6      	strb	r6, [r4, #30]
 8009cb4:	b323      	cbz	r3, 8009d00 <Argus_Dca_PrepareCfg+0x1ec>
 8009cb6:	428a      	cmp	r2, r1
 8009cb8:	4613      	mov	r3, r2
 8009cba:	d90a      	bls.n	8009cd2 <Argus_Dca_PrepareCfg+0x1be>
 8009cbc:	e7fe      	b.n	8009cbc <Argus_Dca_PrepareCfg+0x1a8>
 8009cbe:	2158      	movs	r1, #88	; 0x58
 8009cc0:	085b      	lsrs	r3, r3, #1
 8009cc2:	d0ee      	beq.n	8009ca2 <Argus_Dca_PrepareCfg+0x18e>
 8009cc4:	07df      	lsls	r7, r3, #31
 8009cc6:	d5fb      	bpl.n	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 8009cc8:	3101      	adds	r1, #1
 8009cca:	085b      	lsrs	r3, r3, #1
 8009ccc:	b2c9      	uxtb	r1, r1
 8009cce:	d1f9      	bne.n	8009cc4 <Argus_Dca_PrepareCfg+0x1b0>
 8009cd0:	e7e7      	b.n	8009ca2 <Argus_Dca_PrepareCfg+0x18e>
 8009cd2:	2a00      	cmp	r2, #0
 8009cd4:	f002 8116 	beq.w	800bf04 <Argus_Dca_PrepareCfg+0x23f0>
 8009cd8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009cdc:	2200      	movs	r2, #0
 8009cde:	e002      	b.n	8009ce6 <Argus_Dca_PrepareCfg+0x1d2>
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f001 82ec 	beq.w	800b2be <Argus_Dca_PrepareCfg+0x17aa>
 8009ce6:	4299      	cmp	r1, r3
 8009ce8:	bf9c      	itt	ls
 8009cea:	1a5b      	subls	r3, r3, r1
 8009cec:	4302      	orrls	r2, r0
 8009cee:	0840      	lsrs	r0, r0, #1
 8009cf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009cf4:	d1f4      	bne.n	8009ce0 <Argus_Dca_PrepareCfg+0x1cc>
 8009cf6:	4299      	cmp	r1, r3
 8009cf8:	f201 82e1 	bhi.w	800b2be <Argus_Dca_PrepareCfg+0x17aa>
 8009cfc:	1c51      	adds	r1, r2, #1
 8009cfe:	b289      	uxth	r1, r1
 8009d00:	83a1      	strh	r1, [r4, #28]
 8009d02:	89ab      	ldrh	r3, [r5, #12]
 8009d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009d08:	b289      	uxth	r1, r1
 8009d0a:	2900      	cmp	r1, #0
 8009d0c:	f000 8484 	beq.w	800a618 <Argus_Dca_PrepareCfg+0xb04>
 8009d10:	89e8      	ldrh	r0, [r5, #14]
 8009d12:	81a9      	strh	r1, [r5, #12]
 8009d14:	f020 013f 	bic.w	r1, r0, #63	; 0x3f
 8009d18:	b289      	uxth	r1, r1
 8009d1a:	2900      	cmp	r1, #0
 8009d1c:	f000 846c 	beq.w	800a5f8 <Argus_Dca_PrepareCfg+0xae4>
 8009d20:	896e      	ldrh	r6, [r5, #10]
 8009d22:	81e9      	strh	r1, [r5, #14]
 8009d24:	f026 003f 	bic.w	r0, r6, #63	; 0x3f
 8009d28:	b280      	uxth	r0, r0
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	f000 8454 	beq.w	800a5d8 <Argus_Dca_PrepareCfg+0xac4>
 8009d30:	8168      	strh	r0, [r5, #10]
 8009d32:	8968      	ldrh	r0, [r5, #10]
 8009d34:	89eb      	ldrh	r3, [r5, #14]
 8009d36:	0282      	lsls	r2, r0, #10
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	f000 8645 	beq.w	800a9c8 <Argus_Dca_PrepareCfg+0xeb4>
 8009d3e:	029b      	lsls	r3, r3, #10
 8009d40:	4293      	cmp	r3, r2
 8009d42:	f240 8679 	bls.w	800aa38 <Argus_Dca_PrepareCfg+0xf24>
 8009d46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009d4a:	0052      	lsls	r2, r2, #1
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8009d52:	d8fa      	bhi.n	8009d4a <Argus_Dca_PrepareCfg+0x236>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	f040 8673 	bne.w	800aa40 <Argus_Dca_PrepareCfg+0xf2c>
 8009d5a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8009d5e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8009d62:	2000      	movs	r0, #0
 8009d64:	e000      	b.n	8009d68 <Argus_Dca_PrepareCfg+0x254>
 8009d66:	4618      	mov	r0, r3
 8009d68:	0852      	lsrs	r2, r2, #1
 8009d6a:	f100 0301 	add.w	r3, r0, #1
 8009d6e:	d1fa      	bne.n	8009d66 <Argus_Dca_PrepareCfg+0x252>
 8009d70:	40c6      	lsrs	r6, r0
 8009d72:	2e03      	cmp	r6, #3
 8009d74:	bf08      	it	eq
 8009d76:	3301      	addeq	r3, #1
 8009d78:	3b10      	subs	r3, #16
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	4602      	mov	r2, r0
 8009d80:	f361 020f 	bfi	r2, r1, #0, #16
 8009d84:	f361 421f 	bfi	r2, r1, #16, #16
 8009d88:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
 8009d8c:	77e3      	strb	r3, [r4, #31]
 8009d8e:	6222      	str	r2, [r4, #32]
 8009d90:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009d92:	f005 f875 	bl	800ee80 <Argus_Dev_GetFrameTime>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	f000 861d 	beq.w	800a9d6 <Argus_Dca_PrepareCfg+0xec2>
 8009d9c:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8009da0:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 8009da4:	f649 433f 	movw	r3, #39999	; 0x9c3f
 8009da8:	f480 461c 	eor.w	r6, r0, #39936	; 0x9c00
 8009dac:	4299      	cmp	r1, r3
 8009dae:	f086 0640 	eor.w	r6, r6, #64	; 0x40
 8009db2:	f300 8443 	bgt.w	800a63c <Argus_Dca_PrepareCfg+0xb28>
 8009db6:	461a      	mov	r2, r3
 8009db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009dbc:	0049      	lsls	r1, r1, #1
 8009dbe:	4291      	cmp	r1, r2
 8009dc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009dc4:	d9fa      	bls.n	8009dbc <Argus_Dca_PrepareCfg+0x2a8>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f040 843a 	bne.w	800a640 <Argus_Dca_PrepareCfg+0xb2c>
 8009dcc:	2e00      	cmp	r6, #0
 8009dce:	4a50      	ldr	r2, [pc, #320]	; (8009f10 <Argus_Dca_PrepareCfg+0x3fc>)
 8009dd0:	bfb4      	ite	lt
 8009dd2:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
 8009dd6:	f06f 4000 	mvnge.w	r0, #2147483648	; 0x80000000
 8009dda:	eb00 0350 	add.w	r3, r0, r0, lsr #1
 8009dde:	4601      	mov	r1, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bfa5      	ittet	ge
 8009de4:	f5a2 02cf 	subge.w	r2, r2, #6782976	; 0x678000
 8009de8:	f5a2 4299 	subge.w	r2, r2, #19584	; 0x4c80
 8009dec:	460b      	movlt	r3, r1
 8009dee:	3a10      	subge	r2, #16
 8009df0:	eb13 0193 	adds.w	r1, r3, r3, lsr #2
 8009df4:	bf5b      	ittet	pl
 8009df6:	f5a2 1264 	subpl.w	r2, r2, #3735552	; 0x390000
 8009dfa:	f5a2 52ff 	subpl.w	r2, r2, #8160	; 0x1fe0
 8009dfe:	4619      	movmi	r1, r3
 8009e00:	3a10      	subpl	r2, #16
 8009e02:	eb11 03d1 	adds.w	r3, r1, r1, lsr #3
 8009e06:	f101 8299 	bmi.w	800b33c <Argus_Dca_PrepareCfg+0x1828>
 8009e0a:	f5a2 12f1 	sub.w	r2, r2, #1974272	; 0x1e2000
 8009e0e:	f2a2 7207 	subw	r2, r2, #1799	; 0x707
 8009e12:	eb13 1113 	adds.w	r1, r3, r3, lsr #4
 8009e16:	d404      	bmi.n	8009e22 <Argus_Dca_PrepareCfg+0x30e>
 8009e18:	f5a2 2278 	sub.w	r2, r2, #1015808	; 0xf8000
 8009e1c:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 8009e20:	460b      	mov	r3, r1
 8009e22:	eb13 1153 	adds.w	r1, r3, r3, lsr #5
 8009e26:	d403      	bmi.n	8009e30 <Argus_Dca_PrepareCfg+0x31c>
 8009e28:	f5a2 22fc 	sub.w	r2, r2, #516096	; 0x7e000
 8009e2c:	3aa7      	subs	r2, #167	; 0xa7
 8009e2e:	460b      	mov	r3, r1
 8009e30:	eb13 1193 	adds.w	r1, r3, r3, lsr #6
 8009e34:	d403      	bmi.n	8009e3e <Argus_Dca_PrepareCfg+0x32a>
 8009e36:	f5a2 327e 	sub.w	r2, r2, #260096	; 0x3f800
 8009e3a:	3a15      	subs	r2, #21
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	eb13 11d3 	adds.w	r1, r3, r3, lsr #7
 8009e42:	d403      	bmi.n	8009e4c <Argus_Dca_PrepareCfg+0x338>
 8009e44:	f5a2 32ff 	sub.w	r2, r2, #130560	; 0x1fe00
 8009e48:	3a03      	subs	r2, #3
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	eb13 2113 	adds.w	r1, r3, r3, lsr #8
 8009e50:	d403      	bmi.n	8009e5a <Argus_Dca_PrepareCfg+0x346>
 8009e52:	f5a2 427f 	sub.w	r2, r2, #65280	; 0xff00
 8009e56:	3a80      	subs	r2, #128	; 0x80
 8009e58:	460b      	mov	r3, r1
 8009e5a:	eb13 2153 	adds.w	r1, r3, r3, lsr #9
 8009e5e:	d403      	bmi.n	8009e68 <Argus_Dca_PrepareCfg+0x354>
 8009e60:	f5a2 42ff 	sub.w	r2, r2, #32640	; 0x7f80
 8009e64:	3a60      	subs	r2, #96	; 0x60
 8009e66:	460b      	mov	r3, r1
 8009e68:	eb13 2193 	adds.w	r1, r3, r3, lsr #10
 8009e6c:	d403      	bmi.n	8009e76 <Argus_Dca_PrepareCfg+0x362>
 8009e6e:	f5a2 527f 	sub.w	r2, r2, #16320	; 0x3fc0
 8009e72:	3a38      	subs	r2, #56	; 0x38
 8009e74:	460b      	mov	r3, r1
 8009e76:	eb13 21d3 	adds.w	r1, r3, r3, lsr #11
 8009e7a:	d403      	bmi.n	8009e84 <Argus_Dca_PrepareCfg+0x370>
 8009e7c:	f5a2 52ff 	sub.w	r2, r2, #8160	; 0x1fe0
 8009e80:	3a1e      	subs	r2, #30
 8009e82:	460b      	mov	r3, r1
 8009e84:	f1c3 4300 	rsb	r3, r3, #2147483648	; 0x80000000
 8009e88:	09db      	lsrs	r3, r3, #7
 8009e8a:	1ad1      	subs	r1, r2, r3
 8009e8c:	f100 85f1 	bmi.w	800aa72 <Argus_Dca_PrepareCfg+0xf5e>
 8009e90:	f101 0380 	add.w	r3, r1, #128	; 0x80
 8009e94:	0a1b      	lsrs	r3, r3, #8
 8009e96:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8009e9a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009e9e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8009ea2:	f483 3300 	eor.w	r3, r3, #131072	; 0x20000
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	dd2a      	ble.n	8009f00 <Argus_Dca_PrepareCfg+0x3ec>
 8009eaa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009eae:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8009eb2:	0076      	lsls	r6, r6, #1
 8009eb4:	42b2      	cmp	r2, r6
 8009eb6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009eba:	d8fa      	bhi.n	8009eb2 <Argus_Dca_PrepareCfg+0x39e>
 8009ebc:	b371      	cbz	r1, 8009f1c <Argus_Dca_PrepareCfg+0x408>
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	e000      	b.n	8009ec4 <Argus_Dca_PrepareCfg+0x3b0>
 8009ec2:	b150      	cbz	r0, 8009eda <Argus_Dca_PrepareCfg+0x3c6>
 8009ec4:	42b0      	cmp	r0, r6
 8009ec6:	bf24      	itt	cs
 8009ec8:	1b80      	subcs	r0, r0, r6
 8009eca:	430a      	orrcs	r2, r1
 8009ecc:	0849      	lsrs	r1, r1, #1
 8009ece:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8009ed2:	d1f6      	bne.n	8009ec2 <Argus_Dca_PrepareCfg+0x3ae>
 8009ed4:	42b0      	cmp	r0, r6
 8009ed6:	bf28      	it	cs
 8009ed8:	3201      	addcs	r2, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	db16      	blt.n	8009f0c <Argus_Dca_PrepareCfg+0x3f8>
 8009ede:	2a00      	cmp	r2, #0
 8009ee0:	f000 83d7 	beq.w	800a692 <Argus_Dca_PrepareCfg+0xb7e>
 8009ee4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009ee8:	f001 854f 	beq.w	800b98a <Argus_Dca_PrepareCfg+0x1e76>
 8009eec:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <Argus_Dca_PrepareCfg+0x400>)
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	f301 823b 	bgt.w	800b36a <Argus_Dca_PrepareCfg+0x1856>
 8009ef4:	4b08      	ldr	r3, [pc, #32]	; (8009f18 <Argus_Dca_PrepareCfg+0x404>)
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	f280 871c 	bge.w	800ad34 <Argus_Dca_PrepareCfg+0x1220>
 8009efc:	2700      	movs	r7, #0
 8009efe:	e3c9      	b.n	800a694 <Argus_Dca_PrepareCfg+0xb80>
 8009f00:	2a00      	cmp	r2, #0
 8009f02:	f042 8020 	bne.w	800bf46 <Argus_Dca_PrepareCfg+0x2432>
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f280 83c3 	bge.w	800a692 <Argus_Dca_PrepareCfg+0xb7e>
 8009f0c:	4252      	negs	r2, r2
 8009f0e:	e7e6      	b.n	8009ede <Argus_Dca_PrepareCfg+0x3ca>
 8009f10:	0a65af68 	.word	0x0a65af68
 8009f14:	000b1721 	.word	0x000b1721
 8009f18:	fff4376c 	.word	0xfff4376c
 8009f1c:	43db      	mvns	r3, r3
 8009f1e:	0fdb      	lsrs	r3, r3, #31
 8009f20:	4258      	negs	r0, r3
 8009f22:	0c07      	lsrs	r7, r0, #16
 8009f24:	b280      	uxth	r0, r0
 8009f26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f28:	88d9      	ldrh	r1, [r3, #6]
 8009f2a:	fb00 f201 	mul.w	r2, r0, r1
 8009f2e:	fb07 f101 	mul.w	r1, r7, r1
 8009f32:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009f36:	040e      	lsls	r6, r1, #16
 8009f38:	fa16 f282 	uxtah	r2, r6, r2
 8009f3c:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8009f40:	ea4f 4611 	mov.w	r6, r1, lsr #16
 8009f44:	ea4f 4606 	mov.w	r6, r6, lsl #16
 8009f48:	f0c0 83ab 	bcc.w	800a6a2 <Argus_Dca_PrepareCfg+0xb8e>
 8009f4c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009f50:	889b      	ldrh	r3, [r3, #4]
 8009f52:	fb00 f003 	mul.w	r0, r0, r3
 8009f56:	fb07 f303 	mul.w	r3, r7, r3
 8009f5a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009f5e:	041a      	lsls	r2, r3, #16
 8009f60:	fa12 f080 	uxtah	r0, r2, r0
 8009f64:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8009f68:	bf38      	it	cc
 8009f6a:	f500 4000 	addcc.w	r0, r0, #32768	; 0x8000
 8009f6e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009f72:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8009f76:	bf34      	ite	cc
 8009f78:	0c00      	lsrcc	r0, r0, #16
 8009f7a:	f44f 3080 	movcs.w	r0, #65536	; 0x10000
 8009f7e:	4431      	add	r1, r6
 8009f80:	4403      	add	r3, r0
 8009f82:	2900      	cmp	r1, #0
 8009f84:	f000 8357 	beq.w	800a636 <Argus_Dca_PrepareCfg+0xb22>
 8009f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f8c:	4291      	cmp	r1, r2
 8009f8e:	bf28      	it	cs
 8009f90:	4611      	movcs	r1, r2
 8009f92:	b28a      	uxth	r2, r1
 8009f94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009f98:	4283      	cmp	r3, r0
 8009f9a:	bf28      	it	cs
 8009f9c:	4603      	movcs	r3, r0
 8009f9e:	428b      	cmp	r3, r1
 8009fa0:	8a68      	ldrh	r0, [r5, #18]
 8009fa2:	8522      	strh	r2, [r4, #40]	; 0x28
 8009fa4:	bf38      	it	cc
 8009fa6:	460b      	movcc	r3, r1
 8009fa8:	84e3      	strh	r3, [r4, #38]	; 0x26
 8009faa:	2800      	cmp	r0, #0
 8009fac:	f001 846c 	beq.w	800b888 <Argus_Dca_PrepareCfg+0x1d74>
 8009fb0:	4bca      	ldr	r3, [pc, #808]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 8009fb2:	0042      	lsls	r2, r0, #1
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	f240 84d1 	bls.w	800a95c <Argus_Dca_PrepareCfg+0xe48>
 8009fba:	f5a2 32e1 	sub.w	r2, r2, #115200	; 0x1c200
 8009fbe:	3a8f      	subs	r2, #143	; 0x8f
 8009fc0:	0052      	lsls	r2, r2, #1
 8009fc2:	bf18      	it	ne
 8009fc4:	f44f 4100 	movne.w	r1, #32768	; 0x8000
 8009fc8:	f001 84f5 	beq.w	800b9b6 <Argus_Dca_PrepareCfg+0x1ea2>
 8009fcc:	4bc3      	ldr	r3, [pc, #780]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 8009fce:	0052      	lsls	r2, r2, #1
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	f240 84d5 	bls.w	800a980 <Argus_Dca_PrepareCfg+0xe6c>
 8009fd6:	f5a2 32e1 	sub.w	r2, r2, #115200	; 0x1c200
 8009fda:	3a8f      	subs	r2, #143	; 0x8f
 8009fdc:	0052      	lsls	r2, r2, #1
 8009fde:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8009fe2:	f000 8092 	beq.w	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 8009fe6:	4bbd      	ldr	r3, [pc, #756]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	f240 84ce 	bls.w	800a98a <Argus_Dca_PrepareCfg+0xe76>
 8009fee:	f5a2 32e1 	sub.w	r2, r2, #115200	; 0x1c200
 8009ff2:	3a8f      	subs	r2, #143	; 0x8f
 8009ff4:	0052      	lsls	r2, r2, #1
 8009ff6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8009ffa:	f000 8086 	beq.w	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 8009ffe:	4bb7      	ldr	r3, [pc, #732]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a000:	429a      	cmp	r2, r3
 800a002:	f240 84c7 	bls.w	800a994 <Argus_Dca_PrepareCfg+0xe80>
 800a006:	f5a2 32e1 	sub.w	r2, r2, #115200	; 0x1c200
 800a00a:	3a8f      	subs	r2, #143	; 0x8f
 800a00c:	0052      	lsls	r2, r2, #1
 800a00e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800a012:	d07a      	beq.n	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 800a014:	4bb1      	ldr	r3, [pc, #708]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a016:	429a      	cmp	r2, r3
 800a018:	f240 84c1 	bls.w	800a99e <Argus_Dca_PrepareCfg+0xe8a>
 800a01c:	f5a2 33e1 	sub.w	r3, r2, #115200	; 0x1c200
 800a020:	3b8f      	subs	r3, #143	; 0x8f
 800a022:	005b      	lsls	r3, r3, #1
 800a024:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800a028:	d06f      	beq.n	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 800a02a:	4aac      	ldr	r2, [pc, #688]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	f240 865c 	bls.w	800acea <Argus_Dca_PrepareCfg+0x11d6>
 800a032:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a036:	3b8f      	subs	r3, #143	; 0x8f
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800a03e:	d064      	beq.n	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 800a040:	4aa6      	ldr	r2, [pc, #664]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a042:	4293      	cmp	r3, r2
 800a044:	f241 818b 	bls.w	800b35e <Argus_Dca_PrepareCfg+0x184a>
 800a048:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a04c:	3b8f      	subs	r3, #143	; 0x8f
 800a04e:	005b      	lsls	r3, r3, #1
 800a050:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800a054:	d059      	beq.n	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 800a056:	4aa1      	ldr	r2, [pc, #644]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	f241 8249 	bls.w	800b4f0 <Argus_Dca_PrepareCfg+0x19dc>
 800a05e:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a062:	3b8f      	subs	r3, #143	; 0x8f
 800a064:	005b      	lsls	r3, r3, #1
 800a066:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a06a:	d04e      	beq.n	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 800a06c:	4a9b      	ldr	r2, [pc, #620]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	f241 8404 	bls.w	800b87c <Argus_Dca_PrepareCfg+0x1d68>
 800a074:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a078:	3b8f      	subs	r3, #143	; 0x8f
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800a080:	d043      	beq.n	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 800a082:	4a96      	ldr	r2, [pc, #600]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a084:	4293      	cmp	r3, r2
 800a086:	f241 840e 	bls.w	800b8a6 <Argus_Dca_PrepareCfg+0x1d92>
 800a08a:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a08e:	3b8f      	subs	r3, #143	; 0x8f
 800a090:	005b      	lsls	r3, r3, #1
 800a092:	f041 0120 	orr.w	r1, r1, #32
 800a096:	d038      	beq.n	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 800a098:	4a90      	ldr	r2, [pc, #576]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	f241 84a7 	bls.w	800b9ee <Argus_Dca_PrepareCfg+0x1eda>
 800a0a0:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a0a4:	3b8f      	subs	r3, #143	; 0x8f
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	f041 0110 	orr.w	r1, r1, #16
 800a0ac:	d02d      	beq.n	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 800a0ae:	4a8b      	ldr	r2, [pc, #556]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	f241 8577 	bls.w	800bba4 <Argus_Dca_PrepareCfg+0x2090>
 800a0b6:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a0ba:	3b8f      	subs	r3, #143	; 0x8f
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	f041 0108 	orr.w	r1, r1, #8
 800a0c2:	d022      	beq.n	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 800a0c4:	4a85      	ldr	r2, [pc, #532]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	f241 8710 	bls.w	800beec <Argus_Dca_PrepareCfg+0x23d8>
 800a0cc:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a0d0:	3b8f      	subs	r3, #143	; 0x8f
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	f041 0104 	orr.w	r1, r1, #4
 800a0d8:	d017      	beq.n	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 800a0da:	4a80      	ldr	r2, [pc, #512]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	f241 844e 	bls.w	800b97e <Argus_Dca_PrepareCfg+0x1e6a>
 800a0e2:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a0e6:	3b8f      	subs	r3, #143	; 0x8f
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	f041 0102 	orr.w	r1, r1, #2
 800a0ee:	d00c      	beq.n	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 800a0f0:	4a7a      	ldr	r2, [pc, #488]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d904      	bls.n	800a100 <Argus_Dca_PrepareCfg+0x5ec>
 800a0f6:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a0fa:	3b8f      	subs	r3, #143	; 0x8f
 800a0fc:	f041 0101 	orr.w	r1, r1, #1
 800a100:	4a76      	ldr	r2, [pc, #472]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a102:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800a106:	d200      	bcs.n	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 800a108:	3101      	adds	r1, #1
 800a10a:	f101 0208 	add.w	r2, r1, #8
 800a10e:	8a2e      	ldrh	r6, [r5, #16]
 800a110:	f3c2 1207 	ubfx	r2, r2, #4, #8
 800a114:	f88d 2004 	strb.w	r2, [sp, #4]
 800a118:	2e00      	cmp	r6, #0
 800a11a:	f001 843b 	beq.w	800b994 <Argus_Dca_PrepareCfg+0x1e80>
 800a11e:	496f      	ldr	r1, [pc, #444]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a120:	0073      	lsls	r3, r6, #1
 800a122:	428b      	cmp	r3, r1
 800a124:	f240 83f7 	bls.w	800a916 <Argus_Dca_PrepareCfg+0xe02>
 800a128:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a12c:	3b8f      	subs	r3, #143	; 0x8f
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	bf18      	it	ne
 800a132:	f44f 4100 	movne.w	r1, #32768	; 0x8000
 800a136:	f000 82b8 	beq.w	800a6aa <Argus_Dca_PrepareCfg+0xb96>
 800a13a:	4868      	ldr	r0, [pc, #416]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	4283      	cmp	r3, r0
 800a140:	f240 83fb 	bls.w	800a93a <Argus_Dca_PrepareCfg+0xe26>
 800a144:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a148:	3b8f      	subs	r3, #143	; 0x8f
 800a14a:	005b      	lsls	r3, r3, #1
 800a14c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800a150:	f000 8092 	beq.w	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a154:	4861      	ldr	r0, [pc, #388]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a156:	4283      	cmp	r3, r0
 800a158:	f240 83f4 	bls.w	800a944 <Argus_Dca_PrepareCfg+0xe30>
 800a15c:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a160:	3b8f      	subs	r3, #143	; 0x8f
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800a168:	f000 8086 	beq.w	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a16c:	485b      	ldr	r0, [pc, #364]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a16e:	4283      	cmp	r3, r0
 800a170:	f240 83ed 	bls.w	800a94e <Argus_Dca_PrepareCfg+0xe3a>
 800a174:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a178:	3b8f      	subs	r3, #143	; 0x8f
 800a17a:	005b      	lsls	r3, r3, #1
 800a17c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800a180:	d07a      	beq.n	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a182:	4856      	ldr	r0, [pc, #344]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a184:	4283      	cmp	r3, r0
 800a186:	f240 83e7 	bls.w	800a958 <Argus_Dca_PrepareCfg+0xe44>
 800a18a:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a18e:	3b8f      	subs	r3, #143	; 0x8f
 800a190:	005b      	lsls	r3, r3, #1
 800a192:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800a196:	d06f      	beq.n	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a198:	4850      	ldr	r0, [pc, #320]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a19a:	4283      	cmp	r3, r0
 800a19c:	f240 85a2 	bls.w	800ace4 <Argus_Dca_PrepareCfg+0x11d0>
 800a1a0:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a1a4:	3b8f      	subs	r3, #143	; 0x8f
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800a1ac:	d064      	beq.n	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a1ae:	484b      	ldr	r0, [pc, #300]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a1b0:	4283      	cmp	r3, r0
 800a1b2:	f241 80d7 	bls.w	800b364 <Argus_Dca_PrepareCfg+0x1850>
 800a1b6:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a1ba:	3b8f      	subs	r3, #143	; 0x8f
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800a1c2:	d059      	beq.n	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a1c4:	4845      	ldr	r0, [pc, #276]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a1c6:	4283      	cmp	r3, r0
 800a1c8:	f241 818f 	bls.w	800b4ea <Argus_Dca_PrepareCfg+0x19d6>
 800a1cc:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a1d0:	3b8f      	subs	r3, #143	; 0x8f
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a1d8:	d04e      	beq.n	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a1da:	4840      	ldr	r0, [pc, #256]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a1dc:	4283      	cmp	r3, r0
 800a1de:	f241 8350 	bls.w	800b882 <Argus_Dca_PrepareCfg+0x1d6e>
 800a1e2:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a1e6:	3b8f      	subs	r3, #143	; 0x8f
 800a1e8:	005b      	lsls	r3, r3, #1
 800a1ea:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800a1ee:	d043      	beq.n	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a1f0:	483a      	ldr	r0, [pc, #232]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a1f2:	4283      	cmp	r3, r0
 800a1f4:	f241 835a 	bls.w	800b8ac <Argus_Dca_PrepareCfg+0x1d98>
 800a1f8:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a1fc:	3b8f      	subs	r3, #143	; 0x8f
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	f041 0120 	orr.w	r1, r1, #32
 800a204:	d038      	beq.n	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a206:	4835      	ldr	r0, [pc, #212]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a208:	4283      	cmp	r3, r0
 800a20a:	f241 83f3 	bls.w	800b9f4 <Argus_Dca_PrepareCfg+0x1ee0>
 800a20e:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a212:	3b8f      	subs	r3, #143	; 0x8f
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	f041 0110 	orr.w	r1, r1, #16
 800a21a:	d02d      	beq.n	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a21c:	482f      	ldr	r0, [pc, #188]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a21e:	4283      	cmp	r3, r0
 800a220:	f241 84c3 	bls.w	800bbaa <Argus_Dca_PrepareCfg+0x2096>
 800a224:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a228:	3b8f      	subs	r3, #143	; 0x8f
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	f041 0108 	orr.w	r1, r1, #8
 800a230:	d022      	beq.n	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a232:	482a      	ldr	r0, [pc, #168]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a234:	4283      	cmp	r3, r0
 800a236:	f241 865c 	bls.w	800bef2 <Argus_Dca_PrepareCfg+0x23de>
 800a23a:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a23e:	3b8f      	subs	r3, #143	; 0x8f
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	f041 0104 	orr.w	r1, r1, #4
 800a246:	d017      	beq.n	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a248:	4824      	ldr	r0, [pc, #144]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a24a:	4283      	cmp	r3, r0
 800a24c:	f241 839a 	bls.w	800b984 <Argus_Dca_PrepareCfg+0x1e70>
 800a250:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a254:	3b8f      	subs	r3, #143	; 0x8f
 800a256:	005b      	lsls	r3, r3, #1
 800a258:	f041 0102 	orr.w	r1, r1, #2
 800a25c:	d00c      	beq.n	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a25e:	481f      	ldr	r0, [pc, #124]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a260:	4283      	cmp	r3, r0
 800a262:	d904      	bls.n	800a26e <Argus_Dca_PrepareCfg+0x75a>
 800a264:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a268:	3b8f      	subs	r3, #143	; 0x8f
 800a26a:	f041 0101 	orr.w	r1, r1, #1
 800a26e:	481b      	ldr	r0, [pc, #108]	; (800a2dc <Argus_Dca_PrepareCfg+0x7c8>)
 800a270:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800a274:	d200      	bcs.n	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a276:	3101      	adds	r1, #1
 800a278:	f101 0308 	add.w	r3, r1, #8
 800a27c:	f3c3 1307 	ubfx	r3, r3, #4, #8
 800a280:	2b1f      	cmp	r3, #31
 800a282:	f88d 3007 	strb.w	r3, [sp, #7]
 800a286:	f240 8212 	bls.w	800a6ae <Argus_Dca_PrepareCfg+0xb9a>
 800a28a:	231f      	movs	r3, #31
 800a28c:	429a      	cmp	r2, r3
 800a28e:	f88d 3007 	strb.w	r3, [sp, #7]
 800a292:	f240 8423 	bls.w	800aadc <Argus_Dca_PrepareCfg+0xfc8>
 800a296:	f88d 3004 	strb.w	r3, [sp, #4]
 800a29a:	f24c 228f 	movw	r2, #49807	; 0xc28f
 800a29e:	fb02 f203 	mul.w	r2, r2, r3
 800a2a2:	b291      	uxth	r1, r2
 800a2a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2a8:	eb03 4212 	add.w	r2, r3, r2, lsr #16
 800a2ac:	eb01 4202 	add.w	r2, r1, r2, lsl #16
 800a2b0:	261f      	movs	r6, #31
 800a2b2:	f3c2 310f 	ubfx	r1, r2, #12, #16
 800a2b6:	f240 3069 	movw	r0, #873	; 0x369
 800a2ba:	4632      	mov	r2, r6
 800a2bc:	8229      	strh	r1, [r5, #16]
 800a2be:	8268      	strh	r0, [r5, #18]
 800a2c0:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800a2c4:	4291      	cmp	r1, r2
 800a2c6:	f000 8241 	beq.w	800a74c <Argus_Dca_PrepareCfg+0xc38>
 800a2ca:	0411      	lsls	r1, r2, #16
 800a2cc:	041b      	lsls	r3, r3, #16
 800a2ce:	428b      	cmp	r3, r1
 800a2d0:	460a      	mov	r2, r1
 800a2d2:	f240 83d4 	bls.w	800aa7e <Argus_Dca_PrepareCfg+0xf6a>
 800a2d6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a2da:	e001      	b.n	800a2e0 <Argus_Dca_PrepareCfg+0x7cc>
 800a2dc:	0001c28e 	.word	0x0001c28e
 800a2e0:	0052      	lsls	r2, r2, #1
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a2e8:	d8fa      	bhi.n	800a2e0 <Argus_Dca_PrepareCfg+0x7cc>
 800a2ea:	2900      	cmp	r1, #0
 800a2ec:	f040 83cc 	bne.w	800aa88 <Argus_Dca_PrepareCfg+0xf74>
 800a2f0:	4ad5      	ldr	r2, [pc, #852]	; (800a648 <Argus_Dca_PrepareCfg+0xb34>)
 800a2f2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800a2f6:	eb00 0350 	add.w	r3, r0, r0, lsr #1
 800a2fa:	4601      	mov	r1, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	bfa5      	ittet	ge
 800a300:	f5a2 02cf 	subge.w	r2, r2, #6782976	; 0x678000
 800a304:	f5a2 4299 	subge.w	r2, r2, #19584	; 0x4c80
 800a308:	460b      	movlt	r3, r1
 800a30a:	3a10      	subge	r2, #16
 800a30c:	eb13 0193 	adds.w	r1, r3, r3, lsr #2
 800a310:	bf5b      	ittet	pl
 800a312:	f5a2 1264 	subpl.w	r2, r2, #3735552	; 0x390000
 800a316:	f5a2 52ff 	subpl.w	r2, r2, #8160	; 0x1fe0
 800a31a:	4619      	movmi	r1, r3
 800a31c:	3a10      	subpl	r2, #16
 800a31e:	eb11 03d1 	adds.w	r3, r1, r1, lsr #3
 800a322:	f101 800e 	bmi.w	800b342 <Argus_Dca_PrepareCfg+0x182e>
 800a326:	f5a2 12f1 	sub.w	r2, r2, #1974272	; 0x1e2000
 800a32a:	f2a2 7207 	subw	r2, r2, #1799	; 0x707
 800a32e:	eb13 1113 	adds.w	r1, r3, r3, lsr #4
 800a332:	d404      	bmi.n	800a33e <Argus_Dca_PrepareCfg+0x82a>
 800a334:	f5a2 2278 	sub.w	r2, r2, #1015808	; 0xf8000
 800a338:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 800a33c:	460b      	mov	r3, r1
 800a33e:	eb13 1153 	adds.w	r1, r3, r3, lsr #5
 800a342:	d403      	bmi.n	800a34c <Argus_Dca_PrepareCfg+0x838>
 800a344:	f5a2 22fc 	sub.w	r2, r2, #516096	; 0x7e000
 800a348:	3aa7      	subs	r2, #167	; 0xa7
 800a34a:	460b      	mov	r3, r1
 800a34c:	eb13 1193 	adds.w	r1, r3, r3, lsr #6
 800a350:	d403      	bmi.n	800a35a <Argus_Dca_PrepareCfg+0x846>
 800a352:	f5a2 327e 	sub.w	r2, r2, #260096	; 0x3f800
 800a356:	3a15      	subs	r2, #21
 800a358:	460b      	mov	r3, r1
 800a35a:	eb13 11d3 	adds.w	r1, r3, r3, lsr #7
 800a35e:	d403      	bmi.n	800a368 <Argus_Dca_PrepareCfg+0x854>
 800a360:	f5a2 32ff 	sub.w	r2, r2, #130560	; 0x1fe00
 800a364:	3a03      	subs	r2, #3
 800a366:	460b      	mov	r3, r1
 800a368:	eb13 2113 	adds.w	r1, r3, r3, lsr #8
 800a36c:	d403      	bmi.n	800a376 <Argus_Dca_PrepareCfg+0x862>
 800a36e:	f5a2 427f 	sub.w	r2, r2, #65280	; 0xff00
 800a372:	3a80      	subs	r2, #128	; 0x80
 800a374:	460b      	mov	r3, r1
 800a376:	eb13 2153 	adds.w	r1, r3, r3, lsr #9
 800a37a:	d403      	bmi.n	800a384 <Argus_Dca_PrepareCfg+0x870>
 800a37c:	f5a2 42ff 	sub.w	r2, r2, #32640	; 0x7f80
 800a380:	3a60      	subs	r2, #96	; 0x60
 800a382:	460b      	mov	r3, r1
 800a384:	eb13 2193 	adds.w	r1, r3, r3, lsr #10
 800a388:	d403      	bmi.n	800a392 <Argus_Dca_PrepareCfg+0x87e>
 800a38a:	f5a2 527f 	sub.w	r2, r2, #16320	; 0x3fc0
 800a38e:	3a38      	subs	r2, #56	; 0x38
 800a390:	460b      	mov	r3, r1
 800a392:	eb13 21d3 	adds.w	r1, r3, r3, lsr #11
 800a396:	d403      	bmi.n	800a3a0 <Argus_Dca_PrepareCfg+0x88c>
 800a398:	f5a2 52ff 	sub.w	r2, r2, #8160	; 0x1fe0
 800a39c:	3a1e      	subs	r2, #30
 800a39e:	460b      	mov	r3, r1
 800a3a0:	f1c3 4300 	rsb	r3, r3, #2147483648	; 0x80000000
 800a3a4:	09db      	lsrs	r3, r3, #7
 800a3a6:	1ad1      	subs	r1, r2, r3
 800a3a8:	f100 8393 	bmi.w	800aad2 <Argus_Dca_PrepareCfg+0xfbe>
 800a3ac:	f101 0380 	add.w	r3, r1, #128	; 0x80
 800a3b0:	0a1b      	lsrs	r3, r3, #8
 800a3b2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800a3b6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800a3ba:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800a3be:	f483 3340 	eor.w	r3, r3, #196608	; 0x30000
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	f341 85b9 	ble.w	800bf3a <Argus_Dca_PrepareCfg+0x2426>
 800a3c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a3cc:	f44f 3540 	mov.w	r5, #196608	; 0x30000
 800a3d0:	006d      	lsls	r5, r5, #1
 800a3d2:	42aa      	cmp	r2, r5
 800a3d4:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800a3d8:	d8fa      	bhi.n	800a3d0 <Argus_Dca_PrepareCfg+0x8bc>
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	f000 8280 	beq.w	800a8e0 <Argus_Dca_PrepareCfg+0xdcc>
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	e000      	b.n	800a3e6 <Argus_Dca_PrepareCfg+0x8d2>
 800a3e4:	b151      	cbz	r1, 800a3fc <Argus_Dca_PrepareCfg+0x8e8>
 800a3e6:	42a9      	cmp	r1, r5
 800a3e8:	bf24      	itt	cs
 800a3ea:	1b49      	subcs	r1, r1, r5
 800a3ec:	4302      	orrcs	r2, r0
 800a3ee:	0840      	lsrs	r0, r0, #1
 800a3f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a3f4:	d1f6      	bne.n	800a3e4 <Argus_Dca_PrepareCfg+0x8d0>
 800a3f6:	42a9      	cmp	r1, r5
 800a3f8:	bf28      	it	cs
 800a3fa:	3201      	addcs	r2, #1
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	da00      	bge.n	800a402 <Argus_Dca_PrepareCfg+0x8ee>
 800a400:	4252      	negs	r2, r2
 800a402:	2a00      	cmp	r2, #0
 800a404:	f000 8352 	beq.w	800aaac <Argus_Dca_PrepareCfg+0xf98>
 800a408:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a40c:	f001 82dc 	beq.w	800b9c8 <Argus_Dca_PrepareCfg+0x1eb4>
 800a410:	4b8e      	ldr	r3, [pc, #568]	; (800a64c <Argus_Dca_PrepareCfg+0xb38>)
 800a412:	429a      	cmp	r2, r3
 800a414:	ea4f 0542 	mov.w	r5, r2, lsl #1
 800a418:	f301 8144 	bgt.w	800b6a4 <Argus_Dca_PrepareCfg+0x1b90>
 800a41c:	4b8c      	ldr	r3, [pc, #560]	; (800a650 <Argus_Dca_PrepareCfg+0xb3c>)
 800a41e:	429a      	cmp	r2, r3
 800a420:	f280 8569 	bge.w	800aef6 <Argus_Dca_PrepareCfg+0x13e2>
 800a424:	2300      	movs	r3, #0
 800a426:	f88d 3005 	strb.w	r3, [sp, #5]
 800a42a:	2d00      	cmp	r5, #0
 800a42c:	f000 8270 	beq.w	800a910 <Argus_Dca_PrepareCfg+0xdfc>
 800a430:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800a434:	f000 8788 	beq.w	800b348 <Argus_Dca_PrepareCfg+0x1834>
 800a438:	4b84      	ldr	r3, [pc, #528]	; (800a64c <Argus_Dca_PrepareCfg+0xb38>)
 800a43a:	429d      	cmp	r5, r3
 800a43c:	f300 8742 	bgt.w	800b2c4 <Argus_Dca_PrepareCfg+0x17b0>
 800a440:	4b83      	ldr	r3, [pc, #524]	; (800a650 <Argus_Dca_PrepareCfg+0xb3c>)
 800a442:	429d      	cmp	r5, r3
 800a444:	f2c0 8734 	blt.w	800b2b0 <Argus_Dca_PrepareCfg+0x179c>
 800a448:	2d00      	cmp	r5, #0
 800a44a:	f340 8364 	ble.w	800ab16 <Argus_Dca_PrepareCfg+0x1002>
 800a44e:	4a81      	ldr	r2, [pc, #516]	; (800a654 <Argus_Dca_PrepareCfg+0xb40>)
 800a450:	022b      	lsls	r3, r5, #8
 800a452:	4293      	cmp	r3, r2
 800a454:	f301 81f7 	bgt.w	800b846 <Argus_Dca_PrepareCfg+0x1d32>
 800a458:	497f      	ldr	r1, [pc, #508]	; (800a658 <Argus_Dca_PrepareCfg+0xb44>)
 800a45a:	4a80      	ldr	r2, [pc, #512]	; (800a65c <Argus_Dca_PrepareCfg+0xb48>)
 800a45c:	4419      	add	r1, r3
 800a45e:	2900      	cmp	r1, #0
 800a460:	bfb8      	it	lt
 800a462:	4619      	movlt	r1, r3
 800a464:	440a      	add	r2, r1
 800a466:	bfad      	iteet	ge
 800a468:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800a46c:	f04f 6380 	movlt.w	r3, #67108864	; 0x4000000
 800a470:	f04f 7080 	movlt.w	r0, #16777216	; 0x1000000
 800a474:	f04f 5080 	movge.w	r0, #268435456	; 0x10000000
 800a478:	2a00      	cmp	r2, #0
 800a47a:	bfb8      	it	lt
 800a47c:	460a      	movlt	r2, r1
 800a47e:	4978      	ldr	r1, [pc, #480]	; (800a660 <Argus_Dca_PrepareCfg+0xb4c>)
 800a480:	4411      	add	r1, r2
 800a482:	bfb8      	it	lt
 800a484:	4603      	movlt	r3, r0
 800a486:	2900      	cmp	r1, #0
 800a488:	bfa8      	it	ge
 800a48a:	460a      	movge	r2, r1
 800a48c:	4975      	ldr	r1, [pc, #468]	; (800a664 <Argus_Dca_PrepareCfg+0xb50>)
 800a48e:	4411      	add	r1, r2
 800a490:	bfa8      	it	ge
 800a492:	005b      	lslge	r3, r3, #1
 800a494:	2900      	cmp	r1, #0
 800a496:	bfa8      	it	ge
 800a498:	460a      	movge	r2, r1
 800a49a:	4973      	ldr	r1, [pc, #460]	; (800a668 <Argus_Dca_PrepareCfg+0xb54>)
 800a49c:	4411      	add	r1, r2
 800a49e:	bfa8      	it	ge
 800a4a0:	eb03 0353 	addge.w	r3, r3, r3, lsr #1
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	bfa8      	it	ge
 800a4a8:	460a      	movge	r2, r1
 800a4aa:	f5a2 11f1 	sub.w	r1, r2, #1974272	; 0x1e2000
 800a4ae:	f2a1 7107 	subw	r1, r1, #1799	; 0x707
 800a4b2:	bfa8      	it	ge
 800a4b4:	eb03 0393 	addge.w	r3, r3, r3, lsr #2
 800a4b8:	2900      	cmp	r1, #0
 800a4ba:	bfa8      	it	ge
 800a4bc:	460a      	movge	r2, r1
 800a4be:	f5a2 2178 	sub.w	r1, r2, #1015808	; 0xf8000
 800a4c2:	f5a1 61a3 	sub.w	r1, r1, #1304	; 0x518
 800a4c6:	bfa8      	it	ge
 800a4c8:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 800a4cc:	2900      	cmp	r1, #0
 800a4ce:	bfa8      	it	ge
 800a4d0:	460a      	movge	r2, r1
 800a4d2:	f5a2 21fc 	sub.w	r1, r2, #516096	; 0x7e000
 800a4d6:	f1a1 01a7 	sub.w	r1, r1, #167	; 0xa7
 800a4da:	bfa8      	it	ge
 800a4dc:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 800a4e0:	2900      	cmp	r1, #0
 800a4e2:	bfa8      	it	ge
 800a4e4:	460a      	movge	r2, r1
 800a4e6:	f5a2 317e 	sub.w	r1, r2, #260096	; 0x3f800
 800a4ea:	f1a1 0115 	sub.w	r1, r1, #21
 800a4ee:	bfa8      	it	ge
 800a4f0:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 800a4f4:	2900      	cmp	r1, #0
 800a4f6:	bfa8      	it	ge
 800a4f8:	460a      	movge	r2, r1
 800a4fa:	f5a2 31ff 	sub.w	r1, r2, #130560	; 0x1fe00
 800a4fe:	f1a1 0103 	sub.w	r1, r1, #3
 800a502:	bfa8      	it	ge
 800a504:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 800a508:	2900      	cmp	r1, #0
 800a50a:	bfa8      	it	ge
 800a50c:	460a      	movge	r2, r1
 800a50e:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
 800a512:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 800a516:	bfa8      	it	ge
 800a518:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 800a51c:	2900      	cmp	r1, #0
 800a51e:	bfa8      	it	ge
 800a520:	460a      	movge	r2, r1
 800a522:	f5a2 41ff 	sub.w	r1, r2, #32640	; 0x7f80
 800a526:	f1a1 0160 	sub.w	r1, r1, #96	; 0x60
 800a52a:	bfa8      	it	ge
 800a52c:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 800a530:	2900      	cmp	r1, #0
 800a532:	bfa8      	it	ge
 800a534:	460a      	movge	r2, r1
 800a536:	f5a2 517f 	sub.w	r1, r2, #16320	; 0x3fc0
 800a53a:	f1a1 0138 	sub.w	r1, r1, #56	; 0x38
 800a53e:	bfa8      	it	ge
 800a540:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 800a544:	2900      	cmp	r1, #0
 800a546:	bfa8      	it	ge
 800a548:	460a      	movge	r2, r1
 800a54a:	f5a2 51ff 	sub.w	r1, r2, #8160	; 0x1fe0
 800a54e:	f1a1 011e 	sub.w	r1, r1, #30
 800a552:	bfa8      	it	ge
 800a554:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 800a558:	2900      	cmp	r1, #0
 800a55a:	bfa4      	itt	ge
 800a55c:	460a      	movge	r2, r1
 800a55e:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 800a562:	04d7      	lsls	r7, r2, #19
 800a564:	bf48      	it	mi
 800a566:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 800a56a:	0515      	lsls	r5, r2, #20
 800a56c:	bf48      	it	mi
 800a56e:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 800a572:	0550      	lsls	r0, r2, #21
 800a574:	bf48      	it	mi
 800a576:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 800a57a:	0591      	lsls	r1, r2, #22
 800a57c:	bf48      	it	mi
 800a57e:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 800a582:	05d7      	lsls	r7, r2, #23
 800a584:	bf48      	it	mi
 800a586:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 800a58a:	0615      	lsls	r5, r2, #24
 800a58c:	bf48      	it	mi
 800a58e:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 800a592:	0650      	lsls	r0, r2, #25
 800a594:	bf48      	it	mi
 800a596:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 800a59a:	0691      	lsls	r1, r2, #26
 800a59c:	bf48      	it	mi
 800a59e:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 800a5a2:	06d7      	lsls	r7, r2, #27
 800a5a4:	bf48      	it	mi
 800a5a6:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 800a5aa:	0715      	lsls	r5, r2, #28
 800a5ac:	bf48      	it	mi
 800a5ae:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 800a5b2:	0750      	lsls	r0, r2, #29
 800a5b4:	bf48      	it	mi
 800a5b6:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 800a5ba:	0791      	lsls	r1, r2, #30
 800a5bc:	bf48      	it	mi
 800a5be:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 800a5c2:	07d7      	lsls	r7, r2, #31
 800a5c4:	bf48      	it	mi
 800a5c6:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 800a5ca:	f113 0f81 	cmn.w	r3, #129	; 0x81
 800a5ce:	f241 8113 	bls.w	800b7f8 <Argus_Dca_PrepareCfg+0x1ce4>
 800a5d2:	0636      	lsls	r6, r6, #24
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	e26d      	b.n	800aab4 <Argus_Dca_PrepareCfg+0xfa0>
 800a5d8:	7fa3      	ldrb	r3, [r4, #30]
 800a5da:	029a      	lsls	r2, r3, #10
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f43f aba7 	beq.w	8009d30 <Argus_Dca_PrepareCfg+0x21c>
 800a5e2:	fb03 f306 	mul.w	r3, r3, r6
 800a5e6:	3320      	adds	r3, #32
 800a5e8:	099b      	lsrs	r3, r3, #6
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	bf38      	it	cc
 800a5ee:	2301      	movcc	r3, #1
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	f081 8172 	bcs.w	800b8da <Argus_Dca_PrepareCfg+0x1dc6>
 800a5f6:	e7fe      	b.n	800a5f6 <Argus_Dca_PrepareCfg+0xae2>
 800a5f8:	7fa3      	ldrb	r3, [r4, #30]
 800a5fa:	029a      	lsls	r2, r3, #10
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f43f ab8f 	beq.w	8009d20 <Argus_Dca_PrepareCfg+0x20c>
 800a602:	fb03 f300 	mul.w	r3, r3, r0
 800a606:	3320      	adds	r3, #32
 800a608:	099b      	lsrs	r3, r3, #6
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	bf38      	it	cc
 800a60e:	2301      	movcc	r3, #1
 800a610:	429a      	cmp	r2, r3
 800a612:	f081 8169 	bcs.w	800b8e8 <Argus_Dca_PrepareCfg+0x1dd4>
 800a616:	e7fe      	b.n	800a616 <Argus_Dca_PrepareCfg+0xb02>
 800a618:	02b2      	lsls	r2, r6, #10
 800a61a:	2e00      	cmp	r6, #0
 800a61c:	f43f ab78 	beq.w	8009d10 <Argus_Dca_PrepareCfg+0x1fc>
 800a620:	fb06 f303 	mul.w	r3, r6, r3
 800a624:	3320      	adds	r3, #32
 800a626:	099b      	lsrs	r3, r3, #6
 800a628:	2b01      	cmp	r3, #1
 800a62a:	bf38      	it	cc
 800a62c:	2301      	movcc	r3, #1
 800a62e:	429a      	cmp	r2, r3
 800a630:	f081 8161 	bcs.w	800b8f6 <Argus_Dca_PrepareCfg+0x1de2>
 800a634:	e7fe      	b.n	800a634 <Argus_Dca_PrepareCfg+0xb20>
 800a636:	2101      	movs	r1, #1
 800a638:	460a      	mov	r2, r1
 800a63a:	e4ab      	b.n	8009f94 <Argus_Dca_PrepareCfg+0x480>
 800a63c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a640:	2000      	movs	r0, #0
 800a642:	f649 4240 	movw	r2, #40000	; 0x9c40
 800a646:	e012      	b.n	800a66e <Argus_Dca_PrepareCfg+0xb5a>
 800a648:	0a65af68 	.word	0x0a65af68
 800a64c:	000b1721 	.word	0x000b1721
 800a650:	fff4376c 	.word	0xfff4376c
 800a654:	058b90be 	.word	0x058b90be
 800a658:	fd3a37a0 	.word	0xfd3a37a0
 800a65c:	fe9d1bd0 	.word	0xfe9d1bd0
 800a660:	ff4e8de8 	.word	0xff4e8de8
 800a664:	ff983370 	.word	0xff983370
 800a668:	ffc6e010 	.word	0xffc6e010
 800a66c:	b152      	cbz	r2, 800a684 <Argus_Dca_PrepareCfg+0xb70>
 800a66e:	4291      	cmp	r1, r2
 800a670:	bf9c      	itt	ls
 800a672:	1a52      	subls	r2, r2, r1
 800a674:	4318      	orrls	r0, r3
 800a676:	085b      	lsrs	r3, r3, #1
 800a678:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a67c:	d1f6      	bne.n	800a66c <Argus_Dca_PrepareCfg+0xb58>
 800a67e:	4291      	cmp	r1, r2
 800a680:	bf98      	it	ls
 800a682:	3001      	addls	r0, #1
 800a684:	2e00      	cmp	r6, #0
 800a686:	bfb8      	it	lt
 800a688:	4240      	neglt	r0, r0
 800a68a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800a68e:	f040 8629 	bne.w	800b2e4 <Argus_Dca_PrepareCfg+0x17d0>
 800a692:	2701      	movs	r7, #1
 800a694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a696:	88da      	ldrh	r2, [r3, #6]
 800a698:	2000      	movs	r0, #0
 800a69a:	fb07 f202 	mul.w	r2, r7, r2
 800a69e:	0412      	lsls	r2, r2, #16
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 800a6a6:	0c09      	lsrs	r1, r1, #16
 800a6a8:	e452      	b.n	8009f50 <Argus_Dca_PrepareCfg+0x43c>
 800a6aa:	f88d 3007 	strb.w	r3, [sp, #7]
 800a6ae:	2a1f      	cmp	r2, #31
 800a6b0:	f240 8221 	bls.w	800aaf6 <Argus_Dca_PrepareCfg+0xfe2>
 800a6b4:	221f      	movs	r2, #31
 800a6b6:	f88d 2004 	strb.w	r2, [sp, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f47f aded 	bne.w	800a29a <Argus_Dca_PrepareCfg+0x786>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	f88d 3007 	strb.w	r3, [sp, #7]
 800a6c6:	211c      	movs	r1, #28
 800a6c8:	221f      	movs	r2, #31
 800a6ca:	f24c 268f 	movw	r6, #49807	; 0xc28f
 800a6ce:	fb06 f602 	mul.w	r6, r6, r2
 800a6d2:	b2b0      	uxth	r0, r6
 800a6d4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800a6d8:	eb02 4616 	add.w	r6, r2, r6, lsr #16
 800a6dc:	eb00 4006 	add.w	r0, r0, r6, lsl #16
 800a6e0:	0b00      	lsrs	r0, r0, #12
 800a6e2:	8229      	strh	r1, [r5, #16]
 800a6e4:	8268      	strh	r0, [r5, #18]
 800a6e6:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800a6ea:	4291      	cmp	r1, r2
 800a6ec:	4616      	mov	r6, r2
 800a6ee:	d02d      	beq.n	800a74c <Argus_Dca_PrepareCfg+0xc38>
 800a6f0:	0411      	lsls	r1, r2, #16
 800a6f2:	2a00      	cmp	r2, #0
 800a6f4:	f47f adea 	bne.w	800a2cc <Argus_Dca_PrepareCfg+0x7b8>
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	0418      	lsls	r0, r3, #16
 800a6fc:	4acb      	ldr	r2, [pc, #812]	; (800aa2c <Argus_Dca_PrepareCfg+0xf18>)
 800a6fe:	4bcc      	ldr	r3, [pc, #816]	; (800aa30 <Argus_Dca_PrepareCfg+0xf1c>)
 800a700:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800a704:	bf34      	ite	cc
 800a706:	0200      	lslcc	r0, r0, #8
 800a708:	461a      	movcs	r2, r3
 800a70a:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 800a70e:	d205      	bcs.n	800a71c <Argus_Dca_PrepareCfg+0xc08>
 800a710:	f1a2 7231 	sub.w	r2, r2, #46399488	; 0x2c40000
 800a714:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
 800a718:	3a60      	subs	r2, #96	; 0x60
 800a71a:	0100      	lsls	r0, r0, #4
 800a71c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 800a720:	d205      	bcs.n	800a72e <Argus_Dca_PrepareCfg+0xc1a>
 800a722:	f1a2 72b1 	sub.w	r2, r2, #23199744	; 0x1620000
 800a726:	f5a2 4264 	sub.w	r2, r2, #58368	; 0xe400
 800a72a:	3a30      	subs	r2, #48	; 0x30
 800a72c:	0080      	lsls	r0, r0, #2
 800a72e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a732:	f4bf ade0 	bcs.w	800a2f6 <Argus_Dca_PrepareCfg+0x7e2>
 800a736:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 800a73a:	0041      	lsls	r1, r0, #1
 800a73c:	f502 029d 	add.w	r2, r2, #5144576	; 0x4e8000
 800a740:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a744:	f602 52e8 	addw	r2, r2, #3560	; 0xde8
 800a748:	1843      	adds	r3, r0, r1
 800a74a:	e5d7      	b.n	800a2fc <Argus_Dca_PrepareCfg+0x7e8>
 800a74c:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 800a750:	4299      	cmp	r1, r3
 800a752:	d1cd      	bne.n	800a6f0 <Argus_Dca_PrepareCfg+0xbdc>
 800a754:	4620      	mov	r0, r4
 800a756:	f7fe fea1 	bl	800949c <Argus_Dca_UpdateCalibration>
 800a75a:	4605      	mov	r5, r0
 800a75c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a75e:	f8d4 805c 	ldr.w	r8, [r4, #92]	; 0x5c
 800a762:	f004 fd33 	bl	800f1cc <Argus_Dev_GetCfg>
 800a766:	4607      	mov	r7, r0
 800a768:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a76a:	f004 fb89 	bl	800ee80 <Argus_Dev_GetFrameTime>
 800a76e:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800a772:	f8b7 6098 	ldrh.w	r6, [r7, #152]	; 0x98
 800a776:	b123      	cbz	r3, 800a782 <Argus_Dca_PrepareCfg+0xc6e>
 800a778:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800a77c:	429e      	cmp	r6, r3
 800a77e:	bf38      	it	cc
 800a780:	461e      	movcc	r6, r3
 800a782:	f898 2017 	ldrb.w	r2, [r8, #23]
 800a786:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800a78a:	b292      	uxth	r2, r2
 800a78c:	b281      	uxth	r1, r0
 800a78e:	0c03      	lsrs	r3, r0, #16
 800a790:	fb02 f101 	mul.w	r1, r2, r1
 800a794:	fb02 f303 	mul.w	r3, r2, r3
 800a798:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800a79c:	b289      	uxth	r1, r1
 800a79e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a7a2:	f111 0f81 	cmn.w	r1, #129	; 0x81
 800a7a6:	bf98      	it	ls
 800a7a8:	3180      	addls	r1, #128	; 0x80
 800a7aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a7ae:	e9d4 7e17 	ldrd	r7, lr, [r4, #92]	; 0x5c
 800a7b2:	bf94      	ite	ls
 800a7b4:	0a09      	lsrls	r1, r1, #8
 800a7b6:	f04f 7180 	movhi.w	r1, #16777216	; 0x1000000
 800a7ba:	061b      	lsls	r3, r3, #24
 800a7bc:	1b80      	subs	r0, r0, r6
 800a7be:	440b      	add	r3, r1
 800a7c0:	4283      	cmp	r3, r0
 800a7c2:	f8b7 c00a 	ldrh.w	ip, [r7, #10]
 800a7c6:	7d3e      	ldrb	r6, [r7, #20]
 800a7c8:	f8a4 c014 	strh.w	ip, [r4, #20]
 800a7cc:	f04f 0200 	mov.w	r2, #0
 800a7d0:	bf28      	it	cs
 800a7d2:	4603      	movcs	r3, r0
 800a7d4:	2103      	movs	r1, #3
 800a7d6:	20ff      	movs	r0, #255	; 0xff
 800a7d8:	81a2      	strh	r2, [r4, #12]
 800a7da:	76a2      	strb	r2, [r4, #26]
 800a7dc:	7420      	strb	r0, [r4, #16]
 800a7de:	63a3      	str	r3, [r4, #56]	; 0x38
 800a7e0:	81e2      	strh	r2, [r4, #14]
 800a7e2:	7666      	strb	r6, [r4, #25]
 800a7e4:	7621      	strb	r1, [r4, #24]
 800a7e6:	f89e 1000 	ldrb.w	r1, [lr]
 800a7ea:	f997 2000 	ldrsb.w	r2, [r7]
 800a7ee:	2900      	cmp	r1, #0
 800a7f0:	d073      	beq.n	800a8da <Argus_Dca_PrepareCfg+0xdc6>
 800a7f2:	2a00      	cmp	r2, #0
 800a7f4:	dd10      	ble.n	800a818 <Argus_Dca_PrepareCfg+0xd04>
 800a7f6:	7d78      	ldrb	r0, [r7, #21]
 800a7f8:	f89e 1001 	ldrb.w	r1, [lr, #1]
 800a7fc:	1822      	adds	r2, r4, r0
 800a7fe:	19a3      	adds	r3, r4, r6
 800a800:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800a804:	f893 6040 	ldrb.w	r6, [r3, #64]	; 0x40
 800a808:	1853      	adds	r3, r2, r1
 800a80a:	429e      	cmp	r6, r3
 800a80c:	f300 8180 	bgt.w	800ab10 <Argus_Dca_PrepareCfg+0xffc>
 800a810:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800a812:	459c      	cmp	ip, r3
 800a814:	d900      	bls.n	800a818 <Argus_Dca_PrepareCfg+0xd04>
 800a816:	82a3      	strh	r3, [r4, #20]
 800a818:	2600      	movs	r6, #0
 800a81a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a81c:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
 800a820:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 800a824:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 800a828:	f7fd f8da 	bl	80079e0 <Argus_Eval_ResetShotNoiseAmplitudeEMA>
 800a82c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 800a830:	85e6      	strh	r6, [r4, #46]	; 0x2e
 800a832:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a834:	f004 fcca 	bl	800f1cc <Argus_Dev_GetCfg>
 800a838:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800a83a:	2f00      	cmp	r7, #0
 800a83c:	d04a      	beq.n	800a8d4 <Argus_Dca_PrepareCfg+0xdc0>
 800a83e:	e9d0 0324 	ldrd	r0, r3, [r0, #144]	; 0x90
 800a842:	8aa1      	ldrh	r1, [r4, #20]
 800a844:	0989      	lsrs	r1, r1, #6
 800a846:	bf18      	it	ne
 800a848:	434b      	mulne	r3, r1
 800a84a:	4403      	add	r3, r0
 800a84c:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800a850:	bf3a      	itte	cc
 800a852:	f503 5300 	addcc.w	r3, r3, #8192	; 0x2000
 800a856:	0b9b      	lsrcc	r3, r3, #14
 800a858:	f44f 2380 	movcs.w	r3, #262144	; 0x40000
 800a85c:	429f      	cmp	r7, r3
 800a85e:	d339      	bcc.n	800a8d4 <Argus_Dca_PrepareCfg+0xdc0>
 800a860:	fbb7 f7f3 	udiv	r7, r7, r3
 800a864:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800a868:	bf28      	it	cs
 800a86a:	f44f 6780 	movcs.w	r7, #1024	; 0x400
 800a86e:	b2b9      	uxth	r1, r7
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	82e1      	strh	r1, [r4, #22]
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	d029      	beq.n	800a8cc <Argus_Dca_PrepareCfg+0xdb8>
 800a878:	7e26      	ldrb	r6, [r4, #24]
 800a87a:	8aa0      	ldrh	r0, [r4, #20]
 800a87c:	19a1      	adds	r1, r4, r6
 800a87e:	0982      	lsrs	r2, r0, #6
 800a880:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 800a884:	bf08      	it	eq
 800a886:	2201      	moveq	r2, #1
 800a888:	2900      	cmp	r1, #0
 800a88a:	f000 8099 	beq.w	800a9c0 <Argus_Dca_PrepareCfg+0xeac>
 800a88e:	fb01 fe02 	mul.w	lr, r1, r2
 800a892:	468c      	mov	ip, r1
 800a894:	459e      	cmp	lr, r3
 800a896:	f240 8085 	bls.w	800a9a4 <Argus_Dca_PrepareCfg+0xe90>
 800a89a:	4563      	cmp	r3, ip
 800a89c:	f080 8133 	bcs.w	800ab06 <Argus_Dca_PrepareCfg+0xff2>
 800a8a0:	469c      	mov	ip, r3
 800a8a2:	2240      	movs	r2, #64	; 0x40
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	4282      	cmp	r2, r0
 800a8a8:	d200      	bcs.n	800a8ac <Argus_Dca_PrepareCfg+0xd98>
 800a8aa:	82a2      	strh	r2, [r4, #20]
 800a8ac:	429f      	cmp	r7, r3
 800a8ae:	bf88      	it	hi
 800a8b0:	82e3      	strhhi	r3, [r4, #22]
 800a8b2:	4561      	cmp	r1, ip
 800a8b4:	d90a      	bls.n	800a8cc <Argus_Dca_PrepareCfg+0xdb8>
 800a8b6:	b90e      	cbnz	r6, 800a8bc <Argus_Dca_PrepareCfg+0xda8>
 800a8b8:	e008      	b.n	800a8cc <Argus_Dca_PrepareCfg+0xdb8>
 800a8ba:	b136      	cbz	r6, 800a8ca <Argus_Dca_PrepareCfg+0xdb6>
 800a8bc:	3e01      	subs	r6, #1
 800a8be:	b2f6      	uxtb	r6, r6
 800a8c0:	19a3      	adds	r3, r4, r6
 800a8c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8c6:	4563      	cmp	r3, ip
 800a8c8:	d8f7      	bhi.n	800a8ba <Argus_Dca_PrepareCfg+0xda6>
 800a8ca:	7626      	strb	r6, [r4, #24]
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	b002      	add	sp, #8
 800a8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	460f      	mov	r7, r1
 800a8d8:	e7ca      	b.n	800a870 <Argus_Dca_PrepareCfg+0xd5c>
 800a8da:	2a00      	cmp	r2, #0
 800a8dc:	dc98      	bgt.n	800a810 <Argus_Dca_PrepareCfg+0xcfc>
 800a8de:	e79b      	b.n	800a818 <Argus_Dca_PrepareCfg+0xd04>
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f2c1 831c 	blt.w	800bf1e <Argus_Dca_PrepareCfg+0x240a>
 800a8e6:	ebc6 4206 	rsb	r2, r6, r6, lsl #16
 800a8ea:	eb02 4312 	add.w	r3, r2, r2, lsr #16
 800a8ee:	0419      	lsls	r1, r3, #16
 800a8f0:	0c1b      	lsrs	r3, r3, #16
 800a8f2:	fa11 f282 	uxtah	r2, r1, r2
 800a8f6:	041b      	lsls	r3, r3, #16
 800a8f8:	f06f 0501 	mvn.w	r5, #1
 800a8fc:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 800a900:	f0c1 8023 	bcc.w	800b94a <Argus_Dca_PrepareCfg+0x1e36>
 800a904:	b2db      	uxtb	r3, r3
 800a906:	f88d 3005 	strb.w	r3, [sp, #5]
 800a90a:	2d00      	cmp	r5, #0
 800a90c:	f47f ad90 	bne.w	800a430 <Argus_Dca_PrepareCfg+0x91c>
 800a910:	4628      	mov	r0, r5
 800a912:	0436      	lsls	r6, r6, #16
 800a914:	e0ce      	b.n	800aab4 <Argus_Dca_PrepareCfg+0xfa0>
 800a916:	00b3      	lsls	r3, r6, #2
 800a918:	428b      	cmp	r3, r1
 800a91a:	bf98      	it	ls
 800a91c:	2100      	movls	r1, #0
 800a91e:	f67f ac0c 	bls.w	800a13a <Argus_Dca_PrepareCfg+0x626>
 800a922:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
 800a926:	3b8f      	subs	r3, #143	; 0x8f
 800a928:	005b      	lsls	r3, r3, #1
 800a92a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a92e:	f43f aca3 	beq.w	800a278 <Argus_Dca_PrepareCfg+0x764>
 800a932:	4840      	ldr	r0, [pc, #256]	; (800aa34 <Argus_Dca_PrepareCfg+0xf20>)
 800a934:	4283      	cmp	r3, r0
 800a936:	f63f ac05 	bhi.w	800a144 <Argus_Dca_PrepareCfg+0x630>
 800a93a:	483e      	ldr	r0, [pc, #248]	; (800aa34 <Argus_Dca_PrepareCfg+0xf20>)
 800a93c:	005b      	lsls	r3, r3, #1
 800a93e:	4283      	cmp	r3, r0
 800a940:	f63f ac0c 	bhi.w	800a15c <Argus_Dca_PrepareCfg+0x648>
 800a944:	483b      	ldr	r0, [pc, #236]	; (800aa34 <Argus_Dca_PrepareCfg+0xf20>)
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	4283      	cmp	r3, r0
 800a94a:	f63f ac13 	bhi.w	800a174 <Argus_Dca_PrepareCfg+0x660>
 800a94e:	4839      	ldr	r0, [pc, #228]	; (800aa34 <Argus_Dca_PrepareCfg+0xf20>)
 800a950:	005b      	lsls	r3, r3, #1
 800a952:	4283      	cmp	r3, r0
 800a954:	f63f ac19 	bhi.w	800a18a <Argus_Dca_PrepareCfg+0x676>
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	e41d      	b.n	800a198 <Argus_Dca_PrepareCfg+0x684>
 800a95c:	0082      	lsls	r2, r0, #2
 800a95e:	429a      	cmp	r2, r3
 800a960:	bf98      	it	ls
 800a962:	2100      	movls	r1, #0
 800a964:	f67f ab32 	bls.w	8009fcc <Argus_Dca_PrepareCfg+0x4b8>
 800a968:	f5a2 32e1 	sub.w	r2, r2, #115200	; 0x1c200
 800a96c:	3a8f      	subs	r2, #143	; 0x8f
 800a96e:	0052      	lsls	r2, r2, #1
 800a970:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a974:	f43f abc9 	beq.w	800a10a <Argus_Dca_PrepareCfg+0x5f6>
 800a978:	4b2e      	ldr	r3, [pc, #184]	; (800aa34 <Argus_Dca_PrepareCfg+0xf20>)
 800a97a:	429a      	cmp	r2, r3
 800a97c:	f63f ab2b 	bhi.w	8009fd6 <Argus_Dca_PrepareCfg+0x4c2>
 800a980:	4b2c      	ldr	r3, [pc, #176]	; (800aa34 <Argus_Dca_PrepareCfg+0xf20>)
 800a982:	0052      	lsls	r2, r2, #1
 800a984:	429a      	cmp	r2, r3
 800a986:	f63f ab32 	bhi.w	8009fee <Argus_Dca_PrepareCfg+0x4da>
 800a98a:	4b2a      	ldr	r3, [pc, #168]	; (800aa34 <Argus_Dca_PrepareCfg+0xf20>)
 800a98c:	0052      	lsls	r2, r2, #1
 800a98e:	429a      	cmp	r2, r3
 800a990:	f63f ab39 	bhi.w	800a006 <Argus_Dca_PrepareCfg+0x4f2>
 800a994:	4b27      	ldr	r3, [pc, #156]	; (800aa34 <Argus_Dca_PrepareCfg+0xf20>)
 800a996:	0052      	lsls	r2, r2, #1
 800a998:	429a      	cmp	r2, r3
 800a99a:	f63f ab3f 	bhi.w	800a01c <Argus_Dca_PrepareCfg+0x508>
 800a99e:	0053      	lsls	r3, r2, #1
 800a9a0:	f7ff bb43 	b.w	800a02a <Argus_Dca_PrepareCfg+0x516>
 800a9a4:	fbb3 f3fe 	udiv	r3, r3, lr
 800a9a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9ac:	ea4f 1282 	mov.w	r2, r2, lsl #6
 800a9b0:	f67f af79 	bls.w	800a8a6 <Argus_Dca_PrepareCfg+0xd92>
 800a9b4:	4282      	cmp	r2, r0
 800a9b6:	f4bf af7c 	bcs.w	800a8b2 <Argus_Dca_PrepareCfg+0xd9e>
 800a9ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9be:	e774      	b.n	800a8aa <Argus_Dca_PrepareCfg+0xd96>
 800a9c0:	4696      	mov	lr, r2
 800a9c2:	f04f 0c01 	mov.w	ip, #1
 800a9c6:	e765      	b.n	800a894 <Argus_Dca_PrepareCfg+0xd80>
 800a9c8:	23f0      	movs	r3, #240	; 0xf0
 800a9ca:	f7ff b9d7 	b.w	8009d7c <Argus_Dca_PrepareCfg+0x268>
 800a9ce:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a9d2:	f081 82d9 	bcs.w	800bf88 <Argus_Dca_PrepareCfg+0x2474>
 800a9d6:	4a15      	ldr	r2, [pc, #84]	; (800aa2c <Argus_Dca_PrepareCfg+0xf18>)
 800a9d8:	4b15      	ldr	r3, [pc, #84]	; (800aa30 <Argus_Dca_PrepareCfg+0xf1c>)
 800a9da:	0400      	lsls	r0, r0, #16
 800a9dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800a9e0:	bf34      	ite	cc
 800a9e2:	0200      	lslcc	r0, r0, #8
 800a9e4:	461a      	movcs	r2, r3
 800a9e6:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 800a9ea:	d205      	bcs.n	800a9f8 <Argus_Dca_PrepareCfg+0xee4>
 800a9ec:	f1a2 7231 	sub.w	r2, r2, #46399488	; 0x2c40000
 800a9f0:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
 800a9f4:	3a60      	subs	r2, #96	; 0x60
 800a9f6:	0100      	lsls	r0, r0, #4
 800a9f8:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 800a9fc:	d205      	bcs.n	800aa0a <Argus_Dca_PrepareCfg+0xef6>
 800a9fe:	f1a2 72b1 	sub.w	r2, r2, #23199744	; 0x1620000
 800aa02:	f5a2 4264 	sub.w	r2, r2, #58368	; 0xe400
 800aa06:	3a30      	subs	r2, #48	; 0x30
 800aa08:	0080      	lsls	r0, r0, #2
 800aa0a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800aa0e:	f4bf a9e4 	bcs.w	8009dda <Argus_Dca_PrepareCfg+0x2c6>
 800aa12:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 800aa16:	0041      	lsls	r1, r0, #1
 800aa18:	f502 029d 	add.w	r2, r2, #5144576	; 0x4e8000
 800aa1c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800aa20:	f602 52e8 	addw	r2, r2, #3560	; 0xde8
 800aa24:	1843      	adds	r3, r0, r1
 800aa26:	f7ff b9db 	b.w	8009de0 <Argus_Dca_PrepareCfg+0x2cc>
 800aa2a:	bf00      	nop
 800aa2c:	f9c2fd29 	.word	0xf9c2fd29
 800aa30:	ff4e8de9 	.word	0xff4e8de9
 800aa34:	0001c28e 	.word	0x0001c28e
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d0c5      	beq.n	800a9c8 <Argus_Dca_PrepareCfg+0xeb4>
 800aa3c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800aa40:	2600      	movs	r6, #0
 800aa42:	e000      	b.n	800aa46 <Argus_Dca_PrepareCfg+0xf32>
 800aa44:	b153      	cbz	r3, 800aa5c <Argus_Dca_PrepareCfg+0xf48>
 800aa46:	4293      	cmp	r3, r2
 800aa48:	bf24      	itt	cs
 800aa4a:	1a9b      	subcs	r3, r3, r2
 800aa4c:	4306      	orrcs	r6, r0
 800aa4e:	0840      	lsrs	r0, r0, #1
 800aa50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa54:	d1f6      	bne.n	800aa44 <Argus_Dca_PrepareCfg+0xf30>
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d300      	bcc.n	800aa5c <Argus_Dca_PrepareCfg+0xf48>
 800aa5a:	3601      	adds	r6, #1
 800aa5c:	2e00      	cmp	r6, #0
 800aa5e:	d0b3      	beq.n	800a9c8 <Argus_Dca_PrepareCfg+0xeb4>
 800aa60:	0872      	lsrs	r2, r6, #1
 800aa62:	f47f a97e 	bne.w	8009d62 <Argus_Dca_PrepareCfg+0x24e>
 800aa66:	4613      	mov	r3, r2
 800aa68:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6c:	2601      	movs	r6, #1
 800aa6e:	f7ff b97f 	b.w	8009d70 <Argus_Dca_PrepareCfg+0x25c>
 800aa72:	1a9b      	subs	r3, r3, r2
 800aa74:	3380      	adds	r3, #128	; 0x80
 800aa76:	0a1b      	lsrs	r3, r3, #8
 800aa78:	425b      	negs	r3, r3
 800aa7a:	f7ff ba0c 	b.w	8009e96 <Argus_Dca_PrepareCfg+0x382>
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f43f ae3b 	beq.w	800a6fa <Argus_Dca_PrepareCfg+0xbe6>
 800aa84:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800aa88:	2000      	movs	r0, #0
 800aa8a:	e000      	b.n	800aa8e <Argus_Dca_PrepareCfg+0xf7a>
 800aa8c:	b153      	cbz	r3, 800aaa4 <Argus_Dca_PrepareCfg+0xf90>
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	bf24      	itt	cs
 800aa92:	1a9b      	subcs	r3, r3, r2
 800aa94:	4308      	orrcs	r0, r1
 800aa96:	0849      	lsrs	r1, r1, #1
 800aa98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa9c:	d1f6      	bne.n	800aa8c <Argus_Dca_PrepareCfg+0xf78>
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d300      	bcc.n	800aaa4 <Argus_Dca_PrepareCfg+0xf90>
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800aaa8:	f040 8122 	bne.w	800acf0 <Argus_Dca_PrepareCfg+0x11dc>
 800aaac:	f88d 6005 	strb.w	r6, [sp, #5]
 800aab0:	2000      	movs	r0, #0
 800aab2:	0436      	lsls	r6, r6, #16
 800aab4:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 800aab8:	4430      	add	r0, r6
 800aaba:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800aabe:	2204      	movs	r2, #4
 800aac0:	eb0d 0102 	add.w	r1, sp, r2
 800aac4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800aac8:	f88d 3006 	strb.w	r3, [sp, #6]
 800aacc:	f00c fe1d 	bl	801770a <memcpy>
 800aad0:	e640      	b.n	800a754 <Argus_Dca_PrepareCfg+0xc40>
 800aad2:	1a9b      	subs	r3, r3, r2
 800aad4:	3380      	adds	r3, #128	; 0x80
 800aad6:	0a1b      	lsrs	r3, r3, #8
 800aad8:	425b      	negs	r3, r3
 800aada:	e46a      	b.n	800a3b2 <Argus_Dca_PrepareCfg+0x89e>
 800aadc:	f240 3169 	movw	r1, #873	; 0x369
 800aae0:	2a00      	cmp	r2, #0
 800aae2:	f47f adf2 	bne.w	800a6ca <Argus_Dca_PrepareCfg+0xbb6>
 800aae6:	2001      	movs	r0, #1
 800aae8:	4602      	mov	r2, r0
 800aaea:	f88d 0004 	strb.w	r0, [sp, #4]
 800aaee:	4606      	mov	r6, r0
 800aaf0:	201c      	movs	r0, #28
 800aaf2:	f7ff bbe3 	b.w	800a2bc <Argus_Dca_PrepareCfg+0x7a8>
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f041 8237 	bne.w	800bf6a <Argus_Dca_PrepareCfg+0x2456>
 800aafc:	2301      	movs	r3, #1
 800aafe:	f88d 3007 	strb.w	r3, [sp, #7]
 800ab02:	211c      	movs	r1, #28
 800ab04:	e7ec      	b.n	800aae0 <Argus_Dca_PrepareCfg+0xfcc>
 800ab06:	fbb3 f2fc 	udiv	r2, r3, ip
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	0192      	lsls	r2, r2, #6
 800ab0e:	e6ca      	b.n	800a8a6 <Argus_Dca_PrepareCfg+0xd92>
 800ab10:	7660      	strb	r0, [r4, #25]
 800ab12:	76a1      	strb	r1, [r4, #26]
 800ab14:	e67c      	b.n	800a810 <Argus_Dca_PrepareCfg+0xcfc>
 800ab16:	426d      	negs	r5, r5
 800ab18:	4a7d      	ldr	r2, [pc, #500]	; (800ad10 <Argus_Dca_PrepareCfg+0x11fc>)
 800ab1a:	022b      	lsls	r3, r5, #8
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	f300 85db 	bgt.w	800b6d8 <Argus_Dca_PrepareCfg+0x1bc4>
 800ab22:	497c      	ldr	r1, [pc, #496]	; (800ad14 <Argus_Dca_PrepareCfg+0x1200>)
 800ab24:	4a7c      	ldr	r2, [pc, #496]	; (800ad18 <Argus_Dca_PrepareCfg+0x1204>)
 800ab26:	4419      	add	r1, r3
 800ab28:	2900      	cmp	r1, #0
 800ab2a:	bfb8      	it	lt
 800ab2c:	4619      	movlt	r1, r3
 800ab2e:	440a      	add	r2, r1
 800ab30:	bfad      	iteet	ge
 800ab32:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800ab36:	f04f 6380 	movlt.w	r3, #67108864	; 0x4000000
 800ab3a:	f04f 7080 	movlt.w	r0, #16777216	; 0x1000000
 800ab3e:	f04f 5080 	movge.w	r0, #268435456	; 0x10000000
 800ab42:	2a00      	cmp	r2, #0
 800ab44:	bfb8      	it	lt
 800ab46:	460a      	movlt	r2, r1
 800ab48:	4974      	ldr	r1, [pc, #464]	; (800ad1c <Argus_Dca_PrepareCfg+0x1208>)
 800ab4a:	4411      	add	r1, r2
 800ab4c:	bfb8      	it	lt
 800ab4e:	4603      	movlt	r3, r0
 800ab50:	2900      	cmp	r1, #0
 800ab52:	bfa8      	it	ge
 800ab54:	460a      	movge	r2, r1
 800ab56:	4972      	ldr	r1, [pc, #456]	; (800ad20 <Argus_Dca_PrepareCfg+0x120c>)
 800ab58:	4411      	add	r1, r2
 800ab5a:	bfa8      	it	ge
 800ab5c:	005b      	lslge	r3, r3, #1
 800ab5e:	2900      	cmp	r1, #0
 800ab60:	bfa8      	it	ge
 800ab62:	460a      	movge	r2, r1
 800ab64:	496f      	ldr	r1, [pc, #444]	; (800ad24 <Argus_Dca_PrepareCfg+0x1210>)
 800ab66:	4411      	add	r1, r2
 800ab68:	bfa8      	it	ge
 800ab6a:	eb03 0353 	addge.w	r3, r3, r3, lsr #1
 800ab6e:	2900      	cmp	r1, #0
 800ab70:	bfa8      	it	ge
 800ab72:	460a      	movge	r2, r1
 800ab74:	f5a2 11f1 	sub.w	r1, r2, #1974272	; 0x1e2000
 800ab78:	f2a1 7107 	subw	r1, r1, #1799	; 0x707
 800ab7c:	bfa8      	it	ge
 800ab7e:	eb03 0393 	addge.w	r3, r3, r3, lsr #2
 800ab82:	2900      	cmp	r1, #0
 800ab84:	bfa8      	it	ge
 800ab86:	460a      	movge	r2, r1
 800ab88:	f5a2 2178 	sub.w	r1, r2, #1015808	; 0xf8000
 800ab8c:	f5a1 61a3 	sub.w	r1, r1, #1304	; 0x518
 800ab90:	bfa8      	it	ge
 800ab92:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 800ab96:	2900      	cmp	r1, #0
 800ab98:	bfa8      	it	ge
 800ab9a:	460a      	movge	r2, r1
 800ab9c:	f5a2 21fc 	sub.w	r1, r2, #516096	; 0x7e000
 800aba0:	f1a1 01a7 	sub.w	r1, r1, #167	; 0xa7
 800aba4:	bfa8      	it	ge
 800aba6:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 800abaa:	2900      	cmp	r1, #0
 800abac:	bfa8      	it	ge
 800abae:	460a      	movge	r2, r1
 800abb0:	f5a2 317e 	sub.w	r1, r2, #260096	; 0x3f800
 800abb4:	f1a1 0115 	sub.w	r1, r1, #21
 800abb8:	bfa8      	it	ge
 800abba:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 800abbe:	2900      	cmp	r1, #0
 800abc0:	bfa8      	it	ge
 800abc2:	460a      	movge	r2, r1
 800abc4:	f5a2 31ff 	sub.w	r1, r2, #130560	; 0x1fe00
 800abc8:	f1a1 0103 	sub.w	r1, r1, #3
 800abcc:	bfa8      	it	ge
 800abce:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 800abd2:	2900      	cmp	r1, #0
 800abd4:	bfa8      	it	ge
 800abd6:	460a      	movge	r2, r1
 800abd8:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
 800abdc:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 800abe0:	bfa8      	it	ge
 800abe2:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 800abe6:	2900      	cmp	r1, #0
 800abe8:	bfa8      	it	ge
 800abea:	460a      	movge	r2, r1
 800abec:	f5a2 41ff 	sub.w	r1, r2, #32640	; 0x7f80
 800abf0:	f1a1 0160 	sub.w	r1, r1, #96	; 0x60
 800abf4:	bfa8      	it	ge
 800abf6:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 800abfa:	2900      	cmp	r1, #0
 800abfc:	bfa8      	it	ge
 800abfe:	460a      	movge	r2, r1
 800ac00:	f5a2 517f 	sub.w	r1, r2, #16320	; 0x3fc0
 800ac04:	f1a1 0138 	sub.w	r1, r1, #56	; 0x38
 800ac08:	bfa8      	it	ge
 800ac0a:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 800ac0e:	2900      	cmp	r1, #0
 800ac10:	bfa8      	it	ge
 800ac12:	460a      	movge	r2, r1
 800ac14:	f5a2 51ff 	sub.w	r1, r2, #8160	; 0x1fe0
 800ac18:	f1a1 011e 	sub.w	r1, r1, #30
 800ac1c:	bfa8      	it	ge
 800ac1e:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 800ac22:	2900      	cmp	r1, #0
 800ac24:	bfa4      	itt	ge
 800ac26:	460a      	movge	r2, r1
 800ac28:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 800ac2c:	04d5      	lsls	r5, r2, #19
 800ac2e:	bf48      	it	mi
 800ac30:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 800ac34:	0510      	lsls	r0, r2, #20
 800ac36:	bf48      	it	mi
 800ac38:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 800ac3c:	0551      	lsls	r1, r2, #21
 800ac3e:	bf48      	it	mi
 800ac40:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 800ac44:	0597      	lsls	r7, r2, #22
 800ac46:	bf48      	it	mi
 800ac48:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 800ac4c:	05d5      	lsls	r5, r2, #23
 800ac4e:	bf48      	it	mi
 800ac50:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 800ac54:	0610      	lsls	r0, r2, #24
 800ac56:	bf48      	it	mi
 800ac58:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 800ac5c:	0651      	lsls	r1, r2, #25
 800ac5e:	bf48      	it	mi
 800ac60:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 800ac64:	0697      	lsls	r7, r2, #26
 800ac66:	bf48      	it	mi
 800ac68:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 800ac6c:	06d5      	lsls	r5, r2, #27
 800ac6e:	bf48      	it	mi
 800ac70:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 800ac74:	0710      	lsls	r0, r2, #28
 800ac76:	bf48      	it	mi
 800ac78:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 800ac7c:	0751      	lsls	r1, r2, #29
 800ac7e:	bf48      	it	mi
 800ac80:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 800ac84:	0797      	lsls	r7, r2, #30
 800ac86:	bf48      	it	mi
 800ac88:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 800ac8c:	07d5      	lsls	r5, r2, #31
 800ac8e:	bf48      	it	mi
 800ac90:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 800ac94:	1c58      	adds	r0, r3, #1
 800ac96:	f040 8649 	bne.w	800b92c <Argus_Dca_PrepareCfg+0x1e18>
 800ac9a:	4d23      	ldr	r5, [pc, #140]	; (800ad28 <Argus_Dca_PrepareCfg+0x1214>)
 800ac9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aca0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aca4:	2000      	movs	r0, #0
 800aca6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800acaa:	e000      	b.n	800acae <Argus_Dca_PrepareCfg+0x119a>
 800acac:	b151      	cbz	r1, 800acc4 <Argus_Dca_PrepareCfg+0x11b0>
 800acae:	4299      	cmp	r1, r3
 800acb0:	bf24      	itt	cs
 800acb2:	1ac9      	subcs	r1, r1, r3
 800acb4:	4310      	orrcs	r0, r2
 800acb6:	0852      	lsrs	r2, r2, #1
 800acb8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800acbc:	d1f6      	bne.n	800acac <Argus_Dca_PrepareCfg+0x1198>
 800acbe:	4299      	cmp	r1, r3
 800acc0:	bf28      	it	cs
 800acc2:	3001      	addcs	r0, #1
 800acc4:	2d00      	cmp	r5, #0
 800acc6:	bfb8      	it	lt
 800acc8:	4240      	neglt	r0, r0
 800acca:	b282      	uxth	r2, r0
 800accc:	fb06 f202 	mul.w	r2, r6, r2
 800acd0:	0c13      	lsrs	r3, r2, #16
 800acd2:	0c00      	lsrs	r0, r0, #16
 800acd4:	fb06 3600 	mla	r6, r6, r0, r3
 800acd8:	0c33      	lsrs	r3, r6, #16
 800acda:	0431      	lsls	r1, r6, #16
 800acdc:	fa11 f682 	uxtah	r6, r1, r2
 800ace0:	041b      	lsls	r3, r3, #16
 800ace2:	e2f8      	b.n	800b2d6 <Argus_Dca_PrepareCfg+0x17c2>
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	f7ff ba62 	b.w	800a1ae <Argus_Dca_PrepareCfg+0x69a>
 800acea:	005b      	lsls	r3, r3, #1
 800acec:	f7ff b9a8 	b.w	800a040 <Argus_Dca_PrepareCfg+0x52c>
 800acf0:	4b0e      	ldr	r3, [pc, #56]	; (800ad2c <Argus_Dca_PrepareCfg+0x1218>)
 800acf2:	4298      	cmp	r0, r3
 800acf4:	f001 8118 	beq.w	800bf28 <Argus_Dca_PrepareCfg+0x2414>
 800acf8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800acfc:	f240 85d9 	bls.w	800b8b2 <Argus_Dca_PrepareCfg+0x1d9e>
 800ad00:	1c45      	adds	r5, r0, #1
 800ad02:	f000 82d7 	beq.w	800b2b4 <Argus_Dca_PrepareCfg+0x17a0>
 800ad06:	3001      	adds	r0, #1
 800ad08:	0840      	lsrs	r0, r0, #1
 800ad0a:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <Argus_Dca_PrepareCfg+0x121c>)
 800ad0c:	e50f      	b.n	800a72e <Argus_Dca_PrepareCfg+0xc1a>
 800ad0e:	bf00      	nop
 800ad10:	058b90be 	.word	0x058b90be
 800ad14:	fd3a37a0 	.word	0xfd3a37a0
 800ad18:	fe9d1bd0 	.word	0xfe9d1bd0
 800ad1c:	ff4e8de8 	.word	0xff4e8de8
 800ad20:	ff983370 	.word	0xff983370
 800ad24:	ffc6e010 	.word	0xffc6e010
 800ad28:	80800000 	.word	0x80800000
 800ad2c:	0002b7e1 	.word	0x0002b7e1
 800ad30:	0b172180 	.word	0x0b172180
 800ad34:	2a00      	cmp	r2, #0
 800ad36:	f300 811f 	bgt.w	800af78 <Argus_Dca_PrepareCfg+0x1464>
 800ad3a:	4252      	negs	r2, r2
 800ad3c:	4b87      	ldr	r3, [pc, #540]	; (800af5c <Argus_Dca_PrepareCfg+0x1448>)
 800ad3e:	0211      	lsls	r1, r2, #8
 800ad40:	4299      	cmp	r1, r3
 800ad42:	f300 8317 	bgt.w	800b374 <Argus_Dca_PrepareCfg+0x1860>
 800ad46:	4a86      	ldr	r2, [pc, #536]	; (800af60 <Argus_Dca_PrepareCfg+0x144c>)
 800ad48:	4b86      	ldr	r3, [pc, #536]	; (800af64 <Argus_Dca_PrepareCfg+0x1450>)
 800ad4a:	440a      	add	r2, r1
 800ad4c:	2a00      	cmp	r2, #0
 800ad4e:	bfb8      	it	lt
 800ad50:	460a      	movlt	r2, r1
 800ad52:	4413      	add	r3, r2
 800ad54:	bfad      	iteet	ge
 800ad56:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
 800ad5a:	f04f 6180 	movlt.w	r1, #67108864	; 0x4000000
 800ad5e:	f04f 7080 	movlt.w	r0, #16777216	; 0x1000000
 800ad62:	f04f 5080 	movge.w	r0, #268435456	; 0x10000000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	bfb8      	it	lt
 800ad6a:	4613      	movlt	r3, r2
 800ad6c:	4a7e      	ldr	r2, [pc, #504]	; (800af68 <Argus_Dca_PrepareCfg+0x1454>)
 800ad6e:	441a      	add	r2, r3
 800ad70:	bfb8      	it	lt
 800ad72:	4601      	movlt	r1, r0
 800ad74:	2a00      	cmp	r2, #0
 800ad76:	bfa8      	it	ge
 800ad78:	4613      	movge	r3, r2
 800ad7a:	4a7c      	ldr	r2, [pc, #496]	; (800af6c <Argus_Dca_PrepareCfg+0x1458>)
 800ad7c:	441a      	add	r2, r3
 800ad7e:	bfa8      	it	ge
 800ad80:	0049      	lslge	r1, r1, #1
 800ad82:	2a00      	cmp	r2, #0
 800ad84:	bfa8      	it	ge
 800ad86:	4613      	movge	r3, r2
 800ad88:	4a79      	ldr	r2, [pc, #484]	; (800af70 <Argus_Dca_PrepareCfg+0x145c>)
 800ad8a:	441a      	add	r2, r3
 800ad8c:	bfa8      	it	ge
 800ad8e:	eb01 0151 	addge.w	r1, r1, r1, lsr #1
 800ad92:	2a00      	cmp	r2, #0
 800ad94:	bfa8      	it	ge
 800ad96:	4613      	movge	r3, r2
 800ad98:	f5a3 12f1 	sub.w	r2, r3, #1974272	; 0x1e2000
 800ad9c:	f2a2 7207 	subw	r2, r2, #1799	; 0x707
 800ada0:	bfa8      	it	ge
 800ada2:	eb01 0191 	addge.w	r1, r1, r1, lsr #2
 800ada6:	2a00      	cmp	r2, #0
 800ada8:	bfa8      	it	ge
 800adaa:	4613      	movge	r3, r2
 800adac:	f5a3 2278 	sub.w	r2, r3, #1015808	; 0xf8000
 800adb0:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 800adb4:	bfa8      	it	ge
 800adb6:	eb01 01d1 	addge.w	r1, r1, r1, lsr #3
 800adba:	2a00      	cmp	r2, #0
 800adbc:	bfa8      	it	ge
 800adbe:	4613      	movge	r3, r2
 800adc0:	f5a3 22fc 	sub.w	r2, r3, #516096	; 0x7e000
 800adc4:	f1a2 02a7 	sub.w	r2, r2, #167	; 0xa7
 800adc8:	bfa8      	it	ge
 800adca:	eb01 1111 	addge.w	r1, r1, r1, lsr #4
 800adce:	2a00      	cmp	r2, #0
 800add0:	bfa8      	it	ge
 800add2:	4613      	movge	r3, r2
 800add4:	f5a3 327e 	sub.w	r2, r3, #260096	; 0x3f800
 800add8:	f1a2 0215 	sub.w	r2, r2, #21
 800addc:	bfa8      	it	ge
 800adde:	eb01 1151 	addge.w	r1, r1, r1, lsr #5
 800ade2:	2a00      	cmp	r2, #0
 800ade4:	bfa8      	it	ge
 800ade6:	4613      	movge	r3, r2
 800ade8:	f5a3 32ff 	sub.w	r2, r3, #130560	; 0x1fe00
 800adec:	f1a2 0203 	sub.w	r2, r2, #3
 800adf0:	bfa8      	it	ge
 800adf2:	eb01 1191 	addge.w	r1, r1, r1, lsr #6
 800adf6:	2a00      	cmp	r2, #0
 800adf8:	bfa8      	it	ge
 800adfa:	4613      	movge	r3, r2
 800adfc:	f5a3 427f 	sub.w	r2, r3, #65280	; 0xff00
 800ae00:	f1a2 0280 	sub.w	r2, r2, #128	; 0x80
 800ae04:	bfa8      	it	ge
 800ae06:	eb01 11d1 	addge.w	r1, r1, r1, lsr #7
 800ae0a:	2a00      	cmp	r2, #0
 800ae0c:	bfa8      	it	ge
 800ae0e:	4613      	movge	r3, r2
 800ae10:	f5a3 42ff 	sub.w	r2, r3, #32640	; 0x7f80
 800ae14:	f1a2 0260 	sub.w	r2, r2, #96	; 0x60
 800ae18:	bfa8      	it	ge
 800ae1a:	eb01 2111 	addge.w	r1, r1, r1, lsr #8
 800ae1e:	2a00      	cmp	r2, #0
 800ae20:	bfa8      	it	ge
 800ae22:	4613      	movge	r3, r2
 800ae24:	f5a3 527f 	sub.w	r2, r3, #16320	; 0x3fc0
 800ae28:	f1a2 0238 	sub.w	r2, r2, #56	; 0x38
 800ae2c:	bfa8      	it	ge
 800ae2e:	eb01 2151 	addge.w	r1, r1, r1, lsr #9
 800ae32:	2a00      	cmp	r2, #0
 800ae34:	bfa8      	it	ge
 800ae36:	4613      	movge	r3, r2
 800ae38:	f5a3 52ff 	sub.w	r2, r3, #8160	; 0x1fe0
 800ae3c:	f1a2 021e 	sub.w	r2, r2, #30
 800ae40:	bfa8      	it	ge
 800ae42:	eb01 2191 	addge.w	r1, r1, r1, lsr #10
 800ae46:	2a00      	cmp	r2, #0
 800ae48:	bfa4      	itt	ge
 800ae4a:	4613      	movge	r3, r2
 800ae4c:	eb01 21d1 	addge.w	r1, r1, r1, lsr #11
 800ae50:	04da      	lsls	r2, r3, #19
 800ae52:	bf48      	it	mi
 800ae54:	eb01 3111 	addmi.w	r1, r1, r1, lsr #12
 800ae58:	051f      	lsls	r7, r3, #20
 800ae5a:	bf48      	it	mi
 800ae5c:	eb01 3151 	addmi.w	r1, r1, r1, lsr #13
 800ae60:	055e      	lsls	r6, r3, #21
 800ae62:	bf48      	it	mi
 800ae64:	eb01 3191 	addmi.w	r1, r1, r1, lsr #14
 800ae68:	0598      	lsls	r0, r3, #22
 800ae6a:	bf48      	it	mi
 800ae6c:	eb01 31d1 	addmi.w	r1, r1, r1, lsr #15
 800ae70:	05da      	lsls	r2, r3, #23
 800ae72:	bf48      	it	mi
 800ae74:	eb01 4111 	addmi.w	r1, r1, r1, lsr #16
 800ae78:	061f      	lsls	r7, r3, #24
 800ae7a:	bf48      	it	mi
 800ae7c:	eb01 4151 	addmi.w	r1, r1, r1, lsr #17
 800ae80:	065e      	lsls	r6, r3, #25
 800ae82:	bf48      	it	mi
 800ae84:	eb01 4191 	addmi.w	r1, r1, r1, lsr #18
 800ae88:	0698      	lsls	r0, r3, #26
 800ae8a:	bf48      	it	mi
 800ae8c:	eb01 41d1 	addmi.w	r1, r1, r1, lsr #19
 800ae90:	06da      	lsls	r2, r3, #27
 800ae92:	bf48      	it	mi
 800ae94:	eb01 5111 	addmi.w	r1, r1, r1, lsr #20
 800ae98:	071f      	lsls	r7, r3, #28
 800ae9a:	bf48      	it	mi
 800ae9c:	eb01 5151 	addmi.w	r1, r1, r1, lsr #21
 800aea0:	075e      	lsls	r6, r3, #29
 800aea2:	bf48      	it	mi
 800aea4:	eb01 5191 	addmi.w	r1, r1, r1, lsr #22
 800aea8:	0798      	lsls	r0, r3, #30
 800aeaa:	bf48      	it	mi
 800aeac:	eb01 51d1 	addmi.w	r1, r1, r1, lsr #23
 800aeb0:	07da      	lsls	r2, r3, #31
 800aeb2:	bf48      	it	mi
 800aeb4:	eb01 6111 	addmi.w	r1, r1, r1, lsr #24
 800aeb8:	1c4b      	adds	r3, r1, #1
 800aeba:	f040 8504 	bne.w	800b8c6 <Argus_Dca_PrepareCfg+0x1db2>
 800aebe:	482d      	ldr	r0, [pc, #180]	; (800af74 <Argus_Dca_PrepareCfg+0x1460>)
 800aec0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aec4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aec8:	2300      	movs	r3, #0
 800aeca:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800aece:	e000      	b.n	800aed2 <Argus_Dca_PrepareCfg+0x13be>
 800aed0:	b151      	cbz	r1, 800aee8 <Argus_Dca_PrepareCfg+0x13d4>
 800aed2:	42b1      	cmp	r1, r6
 800aed4:	bf24      	itt	cs
 800aed6:	1b89      	subcs	r1, r1, r6
 800aed8:	4313      	orrcs	r3, r2
 800aeda:	0852      	lsrs	r2, r2, #1
 800aedc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aee0:	d1f6      	bne.n	800aed0 <Argus_Dca_PrepareCfg+0x13bc>
 800aee2:	42b1      	cmp	r1, r6
 800aee4:	bf28      	it	cs
 800aee6:	3301      	addcs	r3, #1
 800aee8:	2800      	cmp	r0, #0
 800aeea:	bfb8      	it	lt
 800aeec:	425b      	neglt	r3, r3
 800aeee:	b298      	uxth	r0, r3
 800aef0:	0c1f      	lsrs	r7, r3, #16
 800aef2:	f7ff b818 	b.w	8009f26 <Argus_Dca_PrepareCfg+0x412>
 800aef6:	2a00      	cmp	r2, #0
 800aef8:	f300 8106 	bgt.w	800b108 <Argus_Dca_PrepareCfg+0x15f4>
 800aefc:	4252      	negs	r2, r2
 800aefe:	4b17      	ldr	r3, [pc, #92]	; (800af5c <Argus_Dca_PrepareCfg+0x1448>)
 800af00:	0210      	lsls	r0, r2, #8
 800af02:	4298      	cmp	r0, r3
 800af04:	f300 8430 	bgt.w	800b768 <Argus_Dca_PrepareCfg+0x1c54>
 800af08:	f7fe f954 	bl	80091b4 <fp_exp24>
 800af0c:	1c42      	adds	r2, r0, #1
 800af0e:	f040 8517 	bne.w	800b940 <Argus_Dca_PrepareCfg+0x1e2c>
 800af12:	4f18      	ldr	r7, [pc, #96]	; (800af74 <Argus_Dca_PrepareCfg+0x1460>)
 800af14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800af1c:	2000      	movs	r0, #0
 800af1e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800af22:	e000      	b.n	800af26 <Argus_Dca_PrepareCfg+0x1412>
 800af24:	b151      	cbz	r1, 800af3c <Argus_Dca_PrepareCfg+0x1428>
 800af26:	4299      	cmp	r1, r3
 800af28:	bf24      	itt	cs
 800af2a:	1ac9      	subcs	r1, r1, r3
 800af2c:	4310      	orrcs	r0, r2
 800af2e:	0852      	lsrs	r2, r2, #1
 800af30:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800af34:	d1f6      	bne.n	800af24 <Argus_Dca_PrepareCfg+0x1410>
 800af36:	4299      	cmp	r1, r3
 800af38:	bf28      	it	cs
 800af3a:	3001      	addcs	r0, #1
 800af3c:	2f00      	cmp	r7, #0
 800af3e:	bfb8      	it	lt
 800af40:	4240      	neglt	r0, r0
 800af42:	b282      	uxth	r2, r0
 800af44:	fb06 f202 	mul.w	r2, r6, r2
 800af48:	0c03      	lsrs	r3, r0, #16
 800af4a:	0c10      	lsrs	r0, r2, #16
 800af4c:	fb06 0303 	mla	r3, r6, r3, r0
 800af50:	0419      	lsls	r1, r3, #16
 800af52:	0c1b      	lsrs	r3, r3, #16
 800af54:	fa11 f282 	uxtah	r2, r1, r2
 800af58:	041b      	lsls	r3, r3, #16
 800af5a:	e4cf      	b.n	800a8fc <Argus_Dca_PrepareCfg+0xde8>
 800af5c:	058b90be 	.word	0x058b90be
 800af60:	fd3a37a0 	.word	0xfd3a37a0
 800af64:	fe9d1bd0 	.word	0xfe9d1bd0
 800af68:	ff4e8de8 	.word	0xff4e8de8
 800af6c:	ff983370 	.word	0xff983370
 800af70:	ffc6e010 	.word	0xffc6e010
 800af74:	80800000 	.word	0x80800000
 800af78:	49e0      	ldr	r1, [pc, #896]	; (800b2fc <Argus_Dca_PrepareCfg+0x17e8>)
 800af7a:	0213      	lsls	r3, r2, #8
 800af7c:	428b      	cmp	r3, r1
 800af7e:	f300 82bf 	bgt.w	800b500 <Argus_Dca_PrepareCfg+0x19ec>
 800af82:	49df      	ldr	r1, [pc, #892]	; (800b300 <Argus_Dca_PrepareCfg+0x17ec>)
 800af84:	4adf      	ldr	r2, [pc, #892]	; (800b304 <Argus_Dca_PrepareCfg+0x17f0>)
 800af86:	4419      	add	r1, r3
 800af88:	2900      	cmp	r1, #0
 800af8a:	bfa8      	it	ge
 800af8c:	460b      	movge	r3, r1
 800af8e:	441a      	add	r2, r3
 800af90:	bfad      	iteet	ge
 800af92:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
 800af96:	f04f 6080 	movlt.w	r0, #67108864	; 0x4000000
 800af9a:	f04f 7180 	movlt.w	r1, #16777216	; 0x1000000
 800af9e:	f04f 5180 	movge.w	r1, #268435456	; 0x10000000
 800afa2:	2a00      	cmp	r2, #0
 800afa4:	bfb8      	it	lt
 800afa6:	461a      	movlt	r2, r3
 800afa8:	4bd7      	ldr	r3, [pc, #860]	; (800b308 <Argus_Dca_PrepareCfg+0x17f4>)
 800afaa:	4413      	add	r3, r2
 800afac:	bfb8      	it	lt
 800afae:	4608      	movlt	r0, r1
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	bfa8      	it	ge
 800afb4:	461a      	movge	r2, r3
 800afb6:	4bd5      	ldr	r3, [pc, #852]	; (800b30c <Argus_Dca_PrepareCfg+0x17f8>)
 800afb8:	4413      	add	r3, r2
 800afba:	bfa8      	it	ge
 800afbc:	0040      	lslge	r0, r0, #1
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	bfa8      	it	ge
 800afc2:	461a      	movge	r2, r3
 800afc4:	4bd2      	ldr	r3, [pc, #840]	; (800b310 <Argus_Dca_PrepareCfg+0x17fc>)
 800afc6:	4413      	add	r3, r2
 800afc8:	bfa8      	it	ge
 800afca:	eb00 0050 	addge.w	r0, r0, r0, lsr #1
 800afce:	2b00      	cmp	r3, #0
 800afd0:	bfa8      	it	ge
 800afd2:	461a      	movge	r2, r3
 800afd4:	f5a2 13f1 	sub.w	r3, r2, #1974272	; 0x1e2000
 800afd8:	f2a3 7307 	subw	r3, r3, #1799	; 0x707
 800afdc:	bfa8      	it	ge
 800afde:	eb00 0090 	addge.w	r0, r0, r0, lsr #2
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	bfa8      	it	ge
 800afe6:	461a      	movge	r2, r3
 800afe8:	f5a2 2378 	sub.w	r3, r2, #1015808	; 0xf8000
 800afec:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800aff0:	bfa8      	it	ge
 800aff2:	eb00 00d0 	addge.w	r0, r0, r0, lsr #3
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	bfa8      	it	ge
 800affa:	461a      	movge	r2, r3
 800affc:	f5a2 23fc 	sub.w	r3, r2, #516096	; 0x7e000
 800b000:	f1a3 03a7 	sub.w	r3, r3, #167	; 0xa7
 800b004:	bfa8      	it	ge
 800b006:	eb00 1010 	addge.w	r0, r0, r0, lsr #4
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	bfa8      	it	ge
 800b00e:	461a      	movge	r2, r3
 800b010:	f5a2 337e 	sub.w	r3, r2, #260096	; 0x3f800
 800b014:	f1a3 0315 	sub.w	r3, r3, #21
 800b018:	bfa8      	it	ge
 800b01a:	eb00 1050 	addge.w	r0, r0, r0, lsr #5
 800b01e:	2b00      	cmp	r3, #0
 800b020:	bfa8      	it	ge
 800b022:	461a      	movge	r2, r3
 800b024:	f5a2 33ff 	sub.w	r3, r2, #130560	; 0x1fe00
 800b028:	f1a3 0303 	sub.w	r3, r3, #3
 800b02c:	bfa8      	it	ge
 800b02e:	eb00 1090 	addge.w	r0, r0, r0, lsr #6
 800b032:	2b00      	cmp	r3, #0
 800b034:	bfa8      	it	ge
 800b036:	461a      	movge	r2, r3
 800b038:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
 800b03c:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800b040:	bfa8      	it	ge
 800b042:	eb00 10d0 	addge.w	r0, r0, r0, lsr #7
 800b046:	2b00      	cmp	r3, #0
 800b048:	bfa8      	it	ge
 800b04a:	461a      	movge	r2, r3
 800b04c:	f5a2 43ff 	sub.w	r3, r2, #32640	; 0x7f80
 800b050:	f1a3 0360 	sub.w	r3, r3, #96	; 0x60
 800b054:	bfa8      	it	ge
 800b056:	eb00 2010 	addge.w	r0, r0, r0, lsr #8
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	bfa8      	it	ge
 800b05e:	461a      	movge	r2, r3
 800b060:	f5a2 537f 	sub.w	r3, r2, #16320	; 0x3fc0
 800b064:	f1a3 0338 	sub.w	r3, r3, #56	; 0x38
 800b068:	bfa8      	it	ge
 800b06a:	eb00 2050 	addge.w	r0, r0, r0, lsr #9
 800b06e:	2b00      	cmp	r3, #0
 800b070:	bfa8      	it	ge
 800b072:	461a      	movge	r2, r3
 800b074:	f5a2 53ff 	sub.w	r3, r2, #8160	; 0x1fe0
 800b078:	f1a3 031e 	sub.w	r3, r3, #30
 800b07c:	bfa8      	it	ge
 800b07e:	eb00 2090 	addge.w	r0, r0, r0, lsr #10
 800b082:	2b00      	cmp	r3, #0
 800b084:	bfa4      	itt	ge
 800b086:	461a      	movge	r2, r3
 800b088:	eb00 20d0 	addge.w	r0, r0, r0, lsr #11
 800b08c:	04d1      	lsls	r1, r2, #19
 800b08e:	bf48      	it	mi
 800b090:	eb00 3010 	addmi.w	r0, r0, r0, lsr #12
 800b094:	0513      	lsls	r3, r2, #20
 800b096:	bf48      	it	mi
 800b098:	eb00 3050 	addmi.w	r0, r0, r0, lsr #13
 800b09c:	0557      	lsls	r7, r2, #21
 800b09e:	bf48      	it	mi
 800b0a0:	eb00 3090 	addmi.w	r0, r0, r0, lsr #14
 800b0a4:	0596      	lsls	r6, r2, #22
 800b0a6:	bf48      	it	mi
 800b0a8:	eb00 30d0 	addmi.w	r0, r0, r0, lsr #15
 800b0ac:	05d1      	lsls	r1, r2, #23
 800b0ae:	bf48      	it	mi
 800b0b0:	eb00 4010 	addmi.w	r0, r0, r0, lsr #16
 800b0b4:	0613      	lsls	r3, r2, #24
 800b0b6:	bf48      	it	mi
 800b0b8:	eb00 4050 	addmi.w	r0, r0, r0, lsr #17
 800b0bc:	0657      	lsls	r7, r2, #25
 800b0be:	bf48      	it	mi
 800b0c0:	eb00 4090 	addmi.w	r0, r0, r0, lsr #18
 800b0c4:	0696      	lsls	r6, r2, #26
 800b0c6:	bf48      	it	mi
 800b0c8:	eb00 40d0 	addmi.w	r0, r0, r0, lsr #19
 800b0cc:	06d1      	lsls	r1, r2, #27
 800b0ce:	bf48      	it	mi
 800b0d0:	eb00 5010 	addmi.w	r0, r0, r0, lsr #20
 800b0d4:	0713      	lsls	r3, r2, #28
 800b0d6:	bf48      	it	mi
 800b0d8:	eb00 5050 	addmi.w	r0, r0, r0, lsr #21
 800b0dc:	0757      	lsls	r7, r2, #29
 800b0de:	bf48      	it	mi
 800b0e0:	eb00 5090 	addmi.w	r0, r0, r0, lsr #22
 800b0e4:	0796      	lsls	r6, r2, #30
 800b0e6:	bf48      	it	mi
 800b0e8:	eb00 50d0 	addmi.w	r0, r0, r0, lsr #23
 800b0ec:	07d1      	lsls	r1, r2, #31
 800b0ee:	bf48      	it	mi
 800b0f0:	eb00 6010 	addmi.w	r0, r0, r0, lsr #24
 800b0f4:	f110 0f81 	cmn.w	r0, #129	; 0x81
 800b0f8:	f200 81fd 	bhi.w	800b4f6 <Argus_Dca_PrepareCfg+0x19e2>
 800b0fc:	3080      	adds	r0, #128	; 0x80
 800b0fe:	0e07      	lsrs	r7, r0, #24
 800b100:	f3c0 200f 	ubfx	r0, r0, #8, #16
 800b104:	f7fe bf0f 	b.w	8009f26 <Argus_Dca_PrepareCfg+0x412>
 800b108:	4b7c      	ldr	r3, [pc, #496]	; (800b2fc <Argus_Dca_PrepareCfg+0x17e8>)
 800b10a:	0211      	lsls	r1, r2, #8
 800b10c:	4299      	cmp	r1, r3
 800b10e:	f300 8380 	bgt.w	800b812 <Argus_Dca_PrepareCfg+0x1cfe>
 800b112:	4a7b      	ldr	r2, [pc, #492]	; (800b300 <Argus_Dca_PrepareCfg+0x17ec>)
 800b114:	4b7b      	ldr	r3, [pc, #492]	; (800b304 <Argus_Dca_PrepareCfg+0x17f0>)
 800b116:	440a      	add	r2, r1
 800b118:	2a00      	cmp	r2, #0
 800b11a:	bfa8      	it	ge
 800b11c:	4611      	movge	r1, r2
 800b11e:	440b      	add	r3, r1
 800b120:	bfad      	iteet	ge
 800b122:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
 800b126:	f04f 6280 	movlt.w	r2, #67108864	; 0x4000000
 800b12a:	f04f 7080 	movlt.w	r0, #16777216	; 0x1000000
 800b12e:	f04f 5080 	movge.w	r0, #268435456	; 0x10000000
 800b132:	2b00      	cmp	r3, #0
 800b134:	bfb8      	it	lt
 800b136:	460b      	movlt	r3, r1
 800b138:	4973      	ldr	r1, [pc, #460]	; (800b308 <Argus_Dca_PrepareCfg+0x17f4>)
 800b13a:	4419      	add	r1, r3
 800b13c:	bfb8      	it	lt
 800b13e:	4602      	movlt	r2, r0
 800b140:	2900      	cmp	r1, #0
 800b142:	bfa8      	it	ge
 800b144:	460b      	movge	r3, r1
 800b146:	4971      	ldr	r1, [pc, #452]	; (800b30c <Argus_Dca_PrepareCfg+0x17f8>)
 800b148:	4419      	add	r1, r3
 800b14a:	bfa8      	it	ge
 800b14c:	0052      	lslge	r2, r2, #1
 800b14e:	2900      	cmp	r1, #0
 800b150:	bfa8      	it	ge
 800b152:	460b      	movge	r3, r1
 800b154:	496e      	ldr	r1, [pc, #440]	; (800b310 <Argus_Dca_PrepareCfg+0x17fc>)
 800b156:	4419      	add	r1, r3
 800b158:	bfa8      	it	ge
 800b15a:	eb02 0252 	addge.w	r2, r2, r2, lsr #1
 800b15e:	2900      	cmp	r1, #0
 800b160:	bfa8      	it	ge
 800b162:	460b      	movge	r3, r1
 800b164:	f5a3 11f1 	sub.w	r1, r3, #1974272	; 0x1e2000
 800b168:	f2a1 7107 	subw	r1, r1, #1799	; 0x707
 800b16c:	bfa8      	it	ge
 800b16e:	eb02 0292 	addge.w	r2, r2, r2, lsr #2
 800b172:	2900      	cmp	r1, #0
 800b174:	bfa8      	it	ge
 800b176:	460b      	movge	r3, r1
 800b178:	f5a3 2178 	sub.w	r1, r3, #1015808	; 0xf8000
 800b17c:	f5a1 61a3 	sub.w	r1, r1, #1304	; 0x518
 800b180:	bfa8      	it	ge
 800b182:	eb02 02d2 	addge.w	r2, r2, r2, lsr #3
 800b186:	2900      	cmp	r1, #0
 800b188:	bfa8      	it	ge
 800b18a:	460b      	movge	r3, r1
 800b18c:	f5a3 21fc 	sub.w	r1, r3, #516096	; 0x7e000
 800b190:	f1a1 01a7 	sub.w	r1, r1, #167	; 0xa7
 800b194:	bfa8      	it	ge
 800b196:	eb02 1212 	addge.w	r2, r2, r2, lsr #4
 800b19a:	2900      	cmp	r1, #0
 800b19c:	bfa8      	it	ge
 800b19e:	460b      	movge	r3, r1
 800b1a0:	f5a3 317e 	sub.w	r1, r3, #260096	; 0x3f800
 800b1a4:	f1a1 0115 	sub.w	r1, r1, #21
 800b1a8:	bfa8      	it	ge
 800b1aa:	eb02 1252 	addge.w	r2, r2, r2, lsr #5
 800b1ae:	2900      	cmp	r1, #0
 800b1b0:	bfa8      	it	ge
 800b1b2:	460b      	movge	r3, r1
 800b1b4:	f5a3 31ff 	sub.w	r1, r3, #130560	; 0x1fe00
 800b1b8:	f1a1 0103 	sub.w	r1, r1, #3
 800b1bc:	bfa8      	it	ge
 800b1be:	eb02 1292 	addge.w	r2, r2, r2, lsr #6
 800b1c2:	2900      	cmp	r1, #0
 800b1c4:	bfa8      	it	ge
 800b1c6:	460b      	movge	r3, r1
 800b1c8:	f5a3 417f 	sub.w	r1, r3, #65280	; 0xff00
 800b1cc:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 800b1d0:	bfa8      	it	ge
 800b1d2:	eb02 12d2 	addge.w	r2, r2, r2, lsr #7
 800b1d6:	2900      	cmp	r1, #0
 800b1d8:	bfa8      	it	ge
 800b1da:	460b      	movge	r3, r1
 800b1dc:	f5a3 41ff 	sub.w	r1, r3, #32640	; 0x7f80
 800b1e0:	f1a1 0160 	sub.w	r1, r1, #96	; 0x60
 800b1e4:	bfa8      	it	ge
 800b1e6:	eb02 2212 	addge.w	r2, r2, r2, lsr #8
 800b1ea:	2900      	cmp	r1, #0
 800b1ec:	bfa8      	it	ge
 800b1ee:	460b      	movge	r3, r1
 800b1f0:	f5a3 517f 	sub.w	r1, r3, #16320	; 0x3fc0
 800b1f4:	f1a1 0138 	sub.w	r1, r1, #56	; 0x38
 800b1f8:	bfa8      	it	ge
 800b1fa:	eb02 2252 	addge.w	r2, r2, r2, lsr #9
 800b1fe:	2900      	cmp	r1, #0
 800b200:	bfa8      	it	ge
 800b202:	460b      	movge	r3, r1
 800b204:	f5a3 51ff 	sub.w	r1, r3, #8160	; 0x1fe0
 800b208:	f1a1 011e 	sub.w	r1, r1, #30
 800b20c:	bfa8      	it	ge
 800b20e:	eb02 2292 	addge.w	r2, r2, r2, lsr #10
 800b212:	2900      	cmp	r1, #0
 800b214:	bfa4      	itt	ge
 800b216:	460b      	movge	r3, r1
 800b218:	eb02 22d2 	addge.w	r2, r2, r2, lsr #11
 800b21c:	04d9      	lsls	r1, r3, #19
 800b21e:	bf48      	it	mi
 800b220:	eb02 3212 	addmi.w	r2, r2, r2, lsr #12
 800b224:	051f      	lsls	r7, r3, #20
 800b226:	bf48      	it	mi
 800b228:	eb02 3252 	addmi.w	r2, r2, r2, lsr #13
 800b22c:	0559      	lsls	r1, r3, #21
 800b22e:	bf48      	it	mi
 800b230:	eb02 3292 	addmi.w	r2, r2, r2, lsr #14
 800b234:	059f      	lsls	r7, r3, #22
 800b236:	bf48      	it	mi
 800b238:	eb02 32d2 	addmi.w	r2, r2, r2, lsr #15
 800b23c:	05d9      	lsls	r1, r3, #23
 800b23e:	bf48      	it	mi
 800b240:	eb02 4212 	addmi.w	r2, r2, r2, lsr #16
 800b244:	061f      	lsls	r7, r3, #24
 800b246:	bf48      	it	mi
 800b248:	eb02 4252 	addmi.w	r2, r2, r2, lsr #17
 800b24c:	0659      	lsls	r1, r3, #25
 800b24e:	bf48      	it	mi
 800b250:	eb02 4292 	addmi.w	r2, r2, r2, lsr #18
 800b254:	069f      	lsls	r7, r3, #26
 800b256:	bf48      	it	mi
 800b258:	eb02 42d2 	addmi.w	r2, r2, r2, lsr #19
 800b25c:	06d9      	lsls	r1, r3, #27
 800b25e:	bf48      	it	mi
 800b260:	eb02 5212 	addmi.w	r2, r2, r2, lsr #20
 800b264:	071f      	lsls	r7, r3, #28
 800b266:	bf48      	it	mi
 800b268:	eb02 5252 	addmi.w	r2, r2, r2, lsr #21
 800b26c:	0759      	lsls	r1, r3, #29
 800b26e:	bf48      	it	mi
 800b270:	eb02 5292 	addmi.w	r2, r2, r2, lsr #22
 800b274:	079f      	lsls	r7, r3, #30
 800b276:	bf48      	it	mi
 800b278:	eb02 52d2 	addmi.w	r2, r2, r2, lsr #23
 800b27c:	07d9      	lsls	r1, r3, #31
 800b27e:	bf48      	it	mi
 800b280:	eb02 6212 	addmi.w	r2, r2, r2, lsr #24
 800b284:	f112 0f81 	cmn.w	r2, #129	; 0x81
 800b288:	f63f a8cc 	bhi.w	800a424 <Argus_Dca_PrepareCfg+0x910>
 800b28c:	3280      	adds	r2, #128	; 0x80
 800b28e:	f3c2 230f 	ubfx	r3, r2, #8, #16
 800b292:	fb06 f303 	mul.w	r3, r6, r3
 800b296:	0c19      	lsrs	r1, r3, #16
 800b298:	0e12      	lsrs	r2, r2, #24
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	fb06 1202 	mla	r2, r6, r2, r1
 800b2a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b2a4:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800b2a8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800b2ac:	f7ff b8bb 	b.w	800a426 <Argus_Dca_PrepareCfg+0x912>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e404      	b.n	800aabe <Argus_Dca_PrepareCfg+0xfaa>
 800b2b4:	4a17      	ldr	r2, [pc, #92]	; (800b314 <Argus_Dca_PrepareCfg+0x1800>)
 800b2b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2ba:	f7ff b838 	b.w	800a32e <Argus_Dca_PrepareCfg+0x81a>
 800b2be:	b291      	uxth	r1, r2
 800b2c0:	f7fe bd1e 	b.w	8009d00 <Argus_Dca_PrepareCfg+0x1ec>
 800b2c4:	ebc6 4606 	rsb	r6, r6, r6, lsl #16
 800b2c8:	eb06 4316 	add.w	r3, r6, r6, lsr #16
 800b2cc:	041a      	lsls	r2, r3, #16
 800b2ce:	0c1b      	lsrs	r3, r3, #16
 800b2d0:	fa12 f686 	uxtah	r6, r2, r6
 800b2d4:	041b      	lsls	r3, r3, #16
 800b2d6:	f516 4f00 	cmn.w	r6, #32768	; 0x8000
 800b2da:	f0c0 832c 	bcc.w	800b936 <Argus_Dca_PrepareCfg+0x1e22>
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	f7ff bbed 	b.w	800aabe <Argus_Dca_PrepareCfg+0xfaa>
 800b2e4:	4b0c      	ldr	r3, [pc, #48]	; (800b318 <Argus_Dca_PrepareCfg+0x1804>)
 800b2e6:	4298      	cmp	r0, r3
 800b2e8:	d118      	bne.n	800b31c <Argus_Dca_PrepareCfg+0x1808>
 800b2ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b2ee:	4601      	mov	r1, r0
 800b2f0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800b2f4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800b2f8:	f7fe bde1 	b.w	8009ebe <Argus_Dca_PrepareCfg+0x3aa>
 800b2fc:	058b90be 	.word	0x058b90be
 800b300:	fd3a37a0 	.word	0xfd3a37a0
 800b304:	fe9d1bd0 	.word	0xfe9d1bd0
 800b308:	ff4e8de8 	.word	0xff4e8de8
 800b30c:	ff983370 	.word	0xff983370
 800b310:	ffc6e010 	.word	0xffc6e010
 800b314:	0b172180 	.word	0x0b172180
 800b318:	0002b7e1 	.word	0x0002b7e1
 800b31c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800b320:	f67f ab55 	bls.w	800a9ce <Argus_Dca_PrepareCfg+0xeba>
 800b324:	1c46      	adds	r6, r0, #1
 800b326:	d004      	beq.n	800b332 <Argus_Dca_PrepareCfg+0x181e>
 800b328:	3001      	adds	r0, #1
 800b32a:	0840      	lsrs	r0, r0, #1
 800b32c:	4ae3      	ldr	r2, [pc, #908]	; (800b6bc <Argus_Dca_PrepareCfg+0x1ba8>)
 800b32e:	f7ff bb6c 	b.w	800aa0a <Argus_Dca_PrepareCfg+0xef6>
 800b332:	4ae2      	ldr	r2, [pc, #904]	; (800b6bc <Argus_Dca_PrepareCfg+0x1ba8>)
 800b334:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b338:	f7fe bd6b 	b.w	8009e12 <Argus_Dca_PrepareCfg+0x2fe>
 800b33c:	460b      	mov	r3, r1
 800b33e:	f7fe bd68 	b.w	8009e12 <Argus_Dca_PrepareCfg+0x2fe>
 800b342:	460b      	mov	r3, r1
 800b344:	f7fe bff3 	b.w	800a32e <Argus_Dca_PrepareCfg+0x81a>
 800b348:	f24b 70e1 	movw	r0, #47073	; 0xb7e1
 800b34c:	fb00 f206 	mul.w	r2, r0, r6
 800b350:	0076      	lsls	r6, r6, #1
 800b352:	eb06 4612 	add.w	r6, r6, r2, lsr #16
 800b356:	0436      	lsls	r6, r6, #16
 800b358:	b290      	uxth	r0, r2
 800b35a:	f7ff bbab 	b.w	800aab4 <Argus_Dca_PrepareCfg+0xfa0>
 800b35e:	005b      	lsls	r3, r3, #1
 800b360:	f7fe be79 	b.w	800a056 <Argus_Dca_PrepareCfg+0x542>
 800b364:	005b      	lsls	r3, r3, #1
 800b366:	f7fe bf2d 	b.w	800a1c4 <Argus_Dca_PrepareCfg+0x6b0>
 800b36a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b36e:	4607      	mov	r7, r0
 800b370:	f7fe bdd9 	b.w	8009f26 <Argus_Dca_PrepareCfg+0x412>
 800b374:	49d2      	ldr	r1, [pc, #840]	; (800b6c0 <Argus_Dca_PrepareCfg+0x1bac>)
 800b376:	01d2      	lsls	r2, r2, #7
 800b378:	4411      	add	r1, r2
 800b37a:	2900      	cmp	r1, #0
 800b37c:	f2c0 82eb 	blt.w	800b956 <Argus_Dca_PrepareCfg+0x1e42>
 800b380:	2300      	movs	r3, #0
 800b382:	4ad0      	ldr	r2, [pc, #832]	; (800b6c4 <Argus_Dca_PrepareCfg+0x1bb0>)
 800b384:	440a      	add	r2, r1
 800b386:	2a00      	cmp	r2, #0
 800b388:	bfa8      	it	ge
 800b38a:	4611      	movge	r1, r2
 800b38c:	4ace      	ldr	r2, [pc, #824]	; (800b6c8 <Argus_Dca_PrepareCfg+0x1bb4>)
 800b38e:	440a      	add	r2, r1
 800b390:	bfa8      	it	ge
 800b392:	005b      	lslge	r3, r3, #1
 800b394:	2a00      	cmp	r2, #0
 800b396:	bfa8      	it	ge
 800b398:	4611      	movge	r1, r2
 800b39a:	4acc      	ldr	r2, [pc, #816]	; (800b6cc <Argus_Dca_PrepareCfg+0x1bb8>)
 800b39c:	440a      	add	r2, r1
 800b39e:	bfa8      	it	ge
 800b3a0:	eb03 0353 	addge.w	r3, r3, r3, lsr #1
 800b3a4:	2a00      	cmp	r2, #0
 800b3a6:	bfa8      	it	ge
 800b3a8:	4611      	movge	r1, r2
 800b3aa:	f5a1 12f1 	sub.w	r2, r1, #1974272	; 0x1e2000
 800b3ae:	f2a2 7207 	subw	r2, r2, #1799	; 0x707
 800b3b2:	bfa8      	it	ge
 800b3b4:	eb03 0393 	addge.w	r3, r3, r3, lsr #2
 800b3b8:	2a00      	cmp	r2, #0
 800b3ba:	bfa8      	it	ge
 800b3bc:	4611      	movge	r1, r2
 800b3be:	f5a1 2278 	sub.w	r2, r1, #1015808	; 0xf8000
 800b3c2:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 800b3c6:	bfa8      	it	ge
 800b3c8:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 800b3cc:	2a00      	cmp	r2, #0
 800b3ce:	bfa8      	it	ge
 800b3d0:	4611      	movge	r1, r2
 800b3d2:	f5a1 22fc 	sub.w	r2, r1, #516096	; 0x7e000
 800b3d6:	f1a2 02a7 	sub.w	r2, r2, #167	; 0xa7
 800b3da:	bfa8      	it	ge
 800b3dc:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 800b3e0:	2a00      	cmp	r2, #0
 800b3e2:	bfa8      	it	ge
 800b3e4:	4611      	movge	r1, r2
 800b3e6:	f5a1 327e 	sub.w	r2, r1, #260096	; 0x3f800
 800b3ea:	f1a2 0215 	sub.w	r2, r2, #21
 800b3ee:	bfa8      	it	ge
 800b3f0:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 800b3f4:	2a00      	cmp	r2, #0
 800b3f6:	bfa8      	it	ge
 800b3f8:	4611      	movge	r1, r2
 800b3fa:	f5a1 32ff 	sub.w	r2, r1, #130560	; 0x1fe00
 800b3fe:	f1a2 0203 	sub.w	r2, r2, #3
 800b402:	bfa8      	it	ge
 800b404:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 800b408:	2a00      	cmp	r2, #0
 800b40a:	bfa8      	it	ge
 800b40c:	4611      	movge	r1, r2
 800b40e:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
 800b412:	f1a2 0280 	sub.w	r2, r2, #128	; 0x80
 800b416:	bfa8      	it	ge
 800b418:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 800b41c:	2a00      	cmp	r2, #0
 800b41e:	bfa8      	it	ge
 800b420:	4611      	movge	r1, r2
 800b422:	f5a1 42ff 	sub.w	r2, r1, #32640	; 0x7f80
 800b426:	f1a2 0260 	sub.w	r2, r2, #96	; 0x60
 800b42a:	bfa8      	it	ge
 800b42c:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 800b430:	2a00      	cmp	r2, #0
 800b432:	bfa8      	it	ge
 800b434:	4611      	movge	r1, r2
 800b436:	f5a1 527f 	sub.w	r2, r1, #16320	; 0x3fc0
 800b43a:	f1a2 0238 	sub.w	r2, r2, #56	; 0x38
 800b43e:	bfa8      	it	ge
 800b440:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 800b444:	2a00      	cmp	r2, #0
 800b446:	bfa8      	it	ge
 800b448:	4611      	movge	r1, r2
 800b44a:	f5a1 52ff 	sub.w	r2, r1, #8160	; 0x1fe0
 800b44e:	f1a2 021e 	sub.w	r2, r2, #30
 800b452:	bfa8      	it	ge
 800b454:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 800b458:	2a00      	cmp	r2, #0
 800b45a:	bfa4      	itt	ge
 800b45c:	4611      	movge	r1, r2
 800b45e:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 800b462:	04cf      	lsls	r7, r1, #19
 800b464:	bf48      	it	mi
 800b466:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 800b46a:	050e      	lsls	r6, r1, #20
 800b46c:	bf48      	it	mi
 800b46e:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 800b472:	0548      	lsls	r0, r1, #21
 800b474:	bf48      	it	mi
 800b476:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 800b47a:	058a      	lsls	r2, r1, #22
 800b47c:	bf48      	it	mi
 800b47e:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 800b482:	05cf      	lsls	r7, r1, #23
 800b484:	bf48      	it	mi
 800b486:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 800b48a:	060e      	lsls	r6, r1, #24
 800b48c:	bf48      	it	mi
 800b48e:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 800b492:	0648      	lsls	r0, r1, #25
 800b494:	bf48      	it	mi
 800b496:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 800b49a:	068a      	lsls	r2, r1, #26
 800b49c:	bf48      	it	mi
 800b49e:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 800b4a2:	06cf      	lsls	r7, r1, #27
 800b4a4:	bf48      	it	mi
 800b4a6:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 800b4aa:	070e      	lsls	r6, r1, #28
 800b4ac:	bf48      	it	mi
 800b4ae:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 800b4b2:	0748      	lsls	r0, r1, #29
 800b4b4:	bf48      	it	mi
 800b4b6:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 800b4ba:	078a      	lsls	r2, r1, #30
 800b4bc:	bf48      	it	mi
 800b4be:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 800b4c2:	07cf      	lsls	r7, r1, #31
 800b4c4:	bf48      	it	mi
 800b4c6:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 800b4ca:	1c5e      	adds	r6, r3, #1
 800b4cc:	f000 8334 	beq.w	800bb38 <Argus_Dca_PrepareCfg+0x2024>
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	085b      	lsrs	r3, r3, #1
 800b4d4:	f040 8291 	bne.w	800b9fa <Argus_Dca_PrepareCfg+0x1ee6>
 800b4d8:	461a      	mov	r2, r3
 800b4da:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b4de:	0c10      	lsrs	r0, r2, #16
 800b4e0:	4403      	add	r3, r0
 800b4e2:	0c1f      	lsrs	r7, r3, #16
 800b4e4:	b298      	uxth	r0, r3
 800b4e6:	f7fe bd1e 	b.w	8009f26 <Argus_Dca_PrepareCfg+0x412>
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	f7fe be75 	b.w	800a1da <Argus_Dca_PrepareCfg+0x6c6>
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	f7fe bdbb 	b.w	800a06c <Argus_Dca_PrepareCfg+0x558>
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	f44f 7780 	mov.w	r7, #256	; 0x100
 800b4fc:	f7fe bd13 	b.w	8009f26 <Argus_Dca_PrepareCfg+0x412>
 800b500:	4b73      	ldr	r3, [pc, #460]	; (800b6d0 <Argus_Dca_PrepareCfg+0x1bbc>)
 800b502:	4974      	ldr	r1, [pc, #464]	; (800b6d4 <Argus_Dca_PrepareCfg+0x1bc0>)
 800b504:	01d2      	lsls	r2, r2, #7
 800b506:	4413      	add	r3, r2
 800b508:	2b00      	cmp	r3, #0
 800b50a:	bfa8      	it	ge
 800b50c:	461a      	movge	r2, r3
 800b50e:	4411      	add	r1, r2
 800b510:	bfad      	iteet	ge
 800b512:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800b516:	f04f 6380 	movlt.w	r3, #67108864	; 0x4000000
 800b51a:	f04f 7080 	movlt.w	r0, #16777216	; 0x1000000
 800b51e:	f04f 5080 	movge.w	r0, #268435456	; 0x10000000
 800b522:	2900      	cmp	r1, #0
 800b524:	bfb8      	it	lt
 800b526:	4611      	movlt	r1, r2
 800b528:	4a66      	ldr	r2, [pc, #408]	; (800b6c4 <Argus_Dca_PrepareCfg+0x1bb0>)
 800b52a:	440a      	add	r2, r1
 800b52c:	bfb8      	it	lt
 800b52e:	4603      	movlt	r3, r0
 800b530:	2a00      	cmp	r2, #0
 800b532:	bfa8      	it	ge
 800b534:	4611      	movge	r1, r2
 800b536:	4a64      	ldr	r2, [pc, #400]	; (800b6c8 <Argus_Dca_PrepareCfg+0x1bb4>)
 800b538:	440a      	add	r2, r1
 800b53a:	bfa8      	it	ge
 800b53c:	005b      	lslge	r3, r3, #1
 800b53e:	2a00      	cmp	r2, #0
 800b540:	bfa8      	it	ge
 800b542:	4611      	movge	r1, r2
 800b544:	4a61      	ldr	r2, [pc, #388]	; (800b6cc <Argus_Dca_PrepareCfg+0x1bb8>)
 800b546:	440a      	add	r2, r1
 800b548:	bfa8      	it	ge
 800b54a:	eb03 0353 	addge.w	r3, r3, r3, lsr #1
 800b54e:	2a00      	cmp	r2, #0
 800b550:	bfa8      	it	ge
 800b552:	4611      	movge	r1, r2
 800b554:	f5a1 12f1 	sub.w	r2, r1, #1974272	; 0x1e2000
 800b558:	f2a2 7207 	subw	r2, r2, #1799	; 0x707
 800b55c:	bfa8      	it	ge
 800b55e:	eb03 0393 	addge.w	r3, r3, r3, lsr #2
 800b562:	2a00      	cmp	r2, #0
 800b564:	bfa8      	it	ge
 800b566:	4611      	movge	r1, r2
 800b568:	f5a1 2278 	sub.w	r2, r1, #1015808	; 0xf8000
 800b56c:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 800b570:	bfa8      	it	ge
 800b572:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 800b576:	2a00      	cmp	r2, #0
 800b578:	bfa8      	it	ge
 800b57a:	4611      	movge	r1, r2
 800b57c:	f5a1 22fc 	sub.w	r2, r1, #516096	; 0x7e000
 800b580:	f1a2 02a7 	sub.w	r2, r2, #167	; 0xa7
 800b584:	bfa8      	it	ge
 800b586:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 800b58a:	2a00      	cmp	r2, #0
 800b58c:	bfa8      	it	ge
 800b58e:	4611      	movge	r1, r2
 800b590:	f5a1 327e 	sub.w	r2, r1, #260096	; 0x3f800
 800b594:	f1a2 0215 	sub.w	r2, r2, #21
 800b598:	bfa8      	it	ge
 800b59a:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 800b59e:	2a00      	cmp	r2, #0
 800b5a0:	bfa8      	it	ge
 800b5a2:	4611      	movge	r1, r2
 800b5a4:	f5a1 32ff 	sub.w	r2, r1, #130560	; 0x1fe00
 800b5a8:	f1a2 0203 	sub.w	r2, r2, #3
 800b5ac:	bfa8      	it	ge
 800b5ae:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 800b5b2:	2a00      	cmp	r2, #0
 800b5b4:	bfa8      	it	ge
 800b5b6:	4611      	movge	r1, r2
 800b5b8:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
 800b5bc:	f1a2 0280 	sub.w	r2, r2, #128	; 0x80
 800b5c0:	bfa8      	it	ge
 800b5c2:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 800b5c6:	2a00      	cmp	r2, #0
 800b5c8:	bfa8      	it	ge
 800b5ca:	4611      	movge	r1, r2
 800b5cc:	f5a1 42ff 	sub.w	r2, r1, #32640	; 0x7f80
 800b5d0:	f1a2 0260 	sub.w	r2, r2, #96	; 0x60
 800b5d4:	bfa8      	it	ge
 800b5d6:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 800b5da:	2a00      	cmp	r2, #0
 800b5dc:	bfa8      	it	ge
 800b5de:	4611      	movge	r1, r2
 800b5e0:	f5a1 527f 	sub.w	r2, r1, #16320	; 0x3fc0
 800b5e4:	f1a2 0238 	sub.w	r2, r2, #56	; 0x38
 800b5e8:	bfa8      	it	ge
 800b5ea:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 800b5ee:	2a00      	cmp	r2, #0
 800b5f0:	bfa8      	it	ge
 800b5f2:	4611      	movge	r1, r2
 800b5f4:	f5a1 52ff 	sub.w	r2, r1, #8160	; 0x1fe0
 800b5f8:	f1a2 021e 	sub.w	r2, r2, #30
 800b5fc:	bfa8      	it	ge
 800b5fe:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 800b602:	2a00      	cmp	r2, #0
 800b604:	bfa4      	itt	ge
 800b606:	4611      	movge	r1, r2
 800b608:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 800b60c:	04ca      	lsls	r2, r1, #19
 800b60e:	bf48      	it	mi
 800b610:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 800b614:	050f      	lsls	r7, r1, #20
 800b616:	bf48      	it	mi
 800b618:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 800b61c:	054e      	lsls	r6, r1, #21
 800b61e:	bf48      	it	mi
 800b620:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 800b624:	0588      	lsls	r0, r1, #22
 800b626:	bf48      	it	mi
 800b628:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 800b62c:	05ca      	lsls	r2, r1, #23
 800b62e:	bf48      	it	mi
 800b630:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 800b634:	060f      	lsls	r7, r1, #24
 800b636:	bf48      	it	mi
 800b638:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 800b63c:	064e      	lsls	r6, r1, #25
 800b63e:	bf48      	it	mi
 800b640:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 800b644:	0688      	lsls	r0, r1, #26
 800b646:	bf48      	it	mi
 800b648:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 800b64c:	06ca      	lsls	r2, r1, #27
 800b64e:	bf48      	it	mi
 800b650:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 800b654:	070f      	lsls	r7, r1, #28
 800b656:	bf48      	it	mi
 800b658:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 800b65c:	074e      	lsls	r6, r1, #29
 800b65e:	bf48      	it	mi
 800b660:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 800b664:	0788      	lsls	r0, r1, #30
 800b666:	bf48      	it	mi
 800b668:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 800b66c:	07c9      	lsls	r1, r1, #31
 800b66e:	bf48      	it	mi
 800b670:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 800b674:	0c1a      	lsrs	r2, r3, #16
 800b676:	b29b      	uxth	r3, r3
 800b678:	fb03 f103 	mul.w	r1, r3, r3
 800b67c:	fb03 f302 	mul.w	r3, r3, r2
 800b680:	eb03 4011 	add.w	r0, r3, r1, lsr #16
 800b684:	fa13 f380 	uxtah	r3, r3, r0
 800b688:	041e      	lsls	r6, r3, #16
 800b68a:	fb02 f202 	mul.w	r2, r2, r2
 800b68e:	fa16 f181 	uxtah	r1, r6, r1
 800b692:	eb02 4010 	add.w	r0, r2, r0, lsr #16
 800b696:	2900      	cmp	r1, #0
 800b698:	eb00 4313 	add.w	r3, r0, r3, lsr #16
 800b69c:	f6bf af21 	bge.w	800b4e2 <Argus_Dca_PrepareCfg+0x19ce>
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	e71e      	b.n	800b4e2 <Argus_Dca_PrepareCfg+0x19ce>
 800b6a4:	ebc6 4206 	rsb	r2, r6, r6, lsl #16
 800b6a8:	eb02 4312 	add.w	r3, r2, r2, lsr #16
 800b6ac:	0419      	lsls	r1, r3, #16
 800b6ae:	0c1b      	lsrs	r3, r3, #16
 800b6b0:	fa11 f282 	uxtah	r2, r1, r2
 800b6b4:	041b      	lsls	r3, r3, #16
 800b6b6:	f7ff b921 	b.w	800a8fc <Argus_Dca_PrepareCfg+0xde8>
 800b6ba:	bf00      	nop
 800b6bc:	0b172180 	.word	0x0b172180
 800b6c0:	fa746f40 	.word	0xfa746f40
 800b6c4:	ff4e8de8 	.word	0xff4e8de8
 800b6c8:	ff983370 	.word	0xff983370
 800b6cc:	ffc6e010 	.word	0xffc6e010
 800b6d0:	fd3a37a0 	.word	0xfd3a37a0
 800b6d4:	fe9d1bd0 	.word	0xfe9d1bd0
 800b6d8:	01e8      	lsls	r0, r5, #7
 800b6da:	f7fd fd6b 	bl	80091b4 <fp_exp24>
 800b6de:	1c41      	adds	r1, r0, #1
 800b6e0:	f040 811a 	bne.w	800b918 <Argus_Dca_PrepareCfg+0x1e04>
 800b6e4:	4ddc      	ldr	r5, [pc, #880]	; (800ba58 <Argus_Dca_PrepareCfg+0x1f44>)
 800b6e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800b6f4:	e000      	b.n	800b6f8 <Argus_Dca_PrepareCfg+0x1be4>
 800b6f6:	b151      	cbz	r1, 800b70e <Argus_Dca_PrepareCfg+0x1bfa>
 800b6f8:	428b      	cmp	r3, r1
 800b6fa:	bf9c      	itt	ls
 800b6fc:	1ac9      	subls	r1, r1, r3
 800b6fe:	4310      	orrls	r0, r2
 800b700:	0852      	lsrs	r2, r2, #1
 800b702:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b706:	d1f6      	bne.n	800b6f6 <Argus_Dca_PrepareCfg+0x1be2>
 800b708:	428b      	cmp	r3, r1
 800b70a:	bf98      	it	ls
 800b70c:	3001      	addls	r0, #1
 800b70e:	2d00      	cmp	r5, #0
 800b710:	bfb8      	it	lt
 800b712:	4240      	neglt	r0, r0
 800b714:	b282      	uxth	r2, r0
 800b716:	0c00      	lsrs	r0, r0, #16
 800b718:	fb02 f302 	mul.w	r3, r2, r2
 800b71c:	fb00 f202 	mul.w	r2, r0, r2
 800b720:	eb02 4513 	add.w	r5, r2, r3, lsr #16
 800b724:	fa12 f185 	uxtah	r1, r2, r5
 800b728:	fb00 f000 	mul.w	r0, r0, r0
 800b72c:	eb00 4215 	add.w	r2, r0, r5, lsr #16
 800b730:	0408      	lsls	r0, r1, #16
 800b732:	fa10 f383 	uxtah	r3, r0, r3
 800b736:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b73a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b73e:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800b742:	bf28      	it	cs
 800b744:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 800b748:	f0c0 80eb 	bcc.w	800b922 <Argus_Dca_PrepareCfg+0x1e0e>
 800b74c:	4413      	add	r3, r2
 800b74e:	b29a      	uxth	r2, r3
 800b750:	fb06 f202 	mul.w	r2, r6, r2
 800b754:	0c1b      	lsrs	r3, r3, #16
 800b756:	0c11      	lsrs	r1, r2, #16
 800b758:	fb06 1603 	mla	r6, r6, r3, r1
 800b75c:	0c33      	lsrs	r3, r6, #16
 800b75e:	0431      	lsls	r1, r6, #16
 800b760:	fa11 f682 	uxtah	r6, r1, r2
 800b764:	041b      	lsls	r3, r3, #16
 800b766:	e5b6      	b.n	800b2d6 <Argus_Dca_PrepareCfg+0x17c2>
 800b768:	01d0      	lsls	r0, r2, #7
 800b76a:	f7fd fd23 	bl	80091b4 <fp_exp24>
 800b76e:	1c43      	adds	r3, r0, #1
 800b770:	f040 80c8 	bne.w	800b904 <Argus_Dca_PrepareCfg+0x1df0>
 800b774:	4fb8      	ldr	r7, [pc, #736]	; (800ba58 <Argus_Dca_PrepareCfg+0x1f44>)
 800b776:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b77a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b77e:	2000      	movs	r0, #0
 800b780:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800b784:	e000      	b.n	800b788 <Argus_Dca_PrepareCfg+0x1c74>
 800b786:	b151      	cbz	r1, 800b79e <Argus_Dca_PrepareCfg+0x1c8a>
 800b788:	428b      	cmp	r3, r1
 800b78a:	bf9c      	itt	ls
 800b78c:	1ac9      	subls	r1, r1, r3
 800b78e:	4310      	orrls	r0, r2
 800b790:	0852      	lsrs	r2, r2, #1
 800b792:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b796:	d1f6      	bne.n	800b786 <Argus_Dca_PrepareCfg+0x1c72>
 800b798:	428b      	cmp	r3, r1
 800b79a:	bf98      	it	ls
 800b79c:	3001      	addls	r0, #1
 800b79e:	2f00      	cmp	r7, #0
 800b7a0:	bfb8      	it	lt
 800b7a2:	4240      	neglt	r0, r0
 800b7a4:	0c03      	lsrs	r3, r0, #16
 800b7a6:	b280      	uxth	r0, r0
 800b7a8:	fb00 f200 	mul.w	r2, r0, r0
 800b7ac:	fb00 f003 	mul.w	r0, r0, r3
 800b7b0:	eb00 4112 	add.w	r1, r0, r2, lsr #16
 800b7b4:	fa10 f081 	uxtah	r0, r0, r1
 800b7b8:	0c09      	lsrs	r1, r1, #16
 800b7ba:	fb03 1303 	mla	r3, r3, r3, r1
 800b7be:	0401      	lsls	r1, r0, #16
 800b7c0:	fa11 f282 	uxtah	r2, r1, r2
 800b7c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b7c8:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 800b7cc:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800b7d0:	bf28      	it	cs
 800b7d2:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
 800b7d6:	f0c0 809a 	bcc.w	800b90e <Argus_Dca_PrepareCfg+0x1dfa>
 800b7da:	4413      	add	r3, r2
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	fb06 f202 	mul.w	r2, r6, r2
 800b7e2:	0c11      	lsrs	r1, r2, #16
 800b7e4:	0c1b      	lsrs	r3, r3, #16
 800b7e6:	fb06 1303 	mla	r3, r6, r3, r1
 800b7ea:	0419      	lsls	r1, r3, #16
 800b7ec:	0c1b      	lsrs	r3, r3, #16
 800b7ee:	fa11 f282 	uxtah	r2, r1, r2
 800b7f2:	041b      	lsls	r3, r3, #16
 800b7f4:	f7ff b882 	b.w	800a8fc <Argus_Dca_PrepareCfg+0xde8>
 800b7f8:	3380      	adds	r3, #128	; 0x80
 800b7fa:	f3c3 200f 	ubfx	r0, r3, #8, #16
 800b7fe:	fb06 f200 	mul.w	r2, r6, r0
 800b802:	0e1b      	lsrs	r3, r3, #24
 800b804:	0c11      	lsrs	r1, r2, #16
 800b806:	fb06 1603 	mla	r6, r6, r3, r1
 800b80a:	0436      	lsls	r6, r6, #16
 800b80c:	b290      	uxth	r0, r2
 800b80e:	f7ff b951 	b.w	800aab4 <Argus_Dca_PrepareCfg+0xfa0>
 800b812:	01d0      	lsls	r0, r2, #7
 800b814:	f7fd fcce 	bl	80091b4 <fp_exp24>
 800b818:	0c03      	lsrs	r3, r0, #16
 800b81a:	b280      	uxth	r0, r0
 800b81c:	fb00 f200 	mul.w	r2, r0, r0
 800b820:	fb00 f003 	mul.w	r0, r0, r3
 800b824:	eb00 4112 	add.w	r1, r0, r2, lsr #16
 800b828:	fa10 f081 	uxtah	r0, r0, r1
 800b82c:	0407      	lsls	r7, r0, #16
 800b82e:	fb03 f303 	mul.w	r3, r3, r3
 800b832:	fa17 f282 	uxtah	r2, r7, r2
 800b836:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800b83a:	2a00      	cmp	r2, #0
 800b83c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b840:	dacc      	bge.n	800b7dc <Argus_Dca_PrepareCfg+0x1cc8>
 800b842:	3301      	adds	r3, #1
 800b844:	e7ca      	b.n	800b7dc <Argus_Dca_PrepareCfg+0x1cc8>
 800b846:	01e8      	lsls	r0, r5, #7
 800b848:	f7fd fcb4 	bl	80091b4 <fp_exp24>
 800b84c:	0c03      	lsrs	r3, r0, #16
 800b84e:	b280      	uxth	r0, r0
 800b850:	fb00 f200 	mul.w	r2, r0, r0
 800b854:	fb00 f003 	mul.w	r0, r0, r3
 800b858:	eb00 4112 	add.w	r1, r0, r2, lsr #16
 800b85c:	fa10 f081 	uxtah	r0, r0, r1
 800b860:	0405      	lsls	r5, r0, #16
 800b862:	fb03 f303 	mul.w	r3, r3, r3
 800b866:	fa15 f282 	uxtah	r2, r5, r2
 800b86a:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800b86e:	2a00      	cmp	r2, #0
 800b870:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b874:	f6bf af6b 	bge.w	800b74e <Argus_Dca_PrepareCfg+0x1c3a>
 800b878:	3301      	adds	r3, #1
 800b87a:	e768      	b.n	800b74e <Argus_Dca_PrepareCfg+0x1c3a>
 800b87c:	005b      	lsls	r3, r3, #1
 800b87e:	f7fe bc00 	b.w	800a082 <Argus_Dca_PrepareCfg+0x56e>
 800b882:	005b      	lsls	r3, r3, #1
 800b884:	f7fe bcb4 	b.w	800a1f0 <Argus_Dca_PrepareCfg+0x6dc>
 800b888:	8a2e      	ldrh	r6, [r5, #16]
 800b88a:	f88d 0004 	strb.w	r0, [sp, #4]
 800b88e:	2e00      	cmp	r6, #0
 800b890:	f000 8097 	beq.w	800b9c2 <Argus_Dca_PrepareCfg+0x1eae>
 800b894:	4602      	mov	r2, r0
 800b896:	f7fe bc42 	b.w	800a11e <Argus_Dca_PrepareCfg+0x60a>
 800b89a:	2100      	movs	r1, #0
 800b89c:	f7fe ba10 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800b8a0:	2108      	movs	r1, #8
 800b8a2:	f7fe ba0d 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	f7fe bbf6 	b.w	800a098 <Argus_Dca_PrepareCfg+0x584>
 800b8ac:	005b      	lsls	r3, r3, #1
 800b8ae:	f7fe bcaa 	b.w	800a206 <Argus_Dca_PrepareCfg+0x6f2>
 800b8b2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b8b6:	bf38      	it	cc
 800b8b8:	4603      	movcc	r3, r0
 800b8ba:	f4fe af1e 	bcc.w	800a6fa <Argus_Dca_PrepareCfg+0xbe6>
 800b8be:	4a67      	ldr	r2, [pc, #412]	; (800ba5c <Argus_Dca_PrepareCfg+0x1f48>)
 800b8c0:	4b67      	ldr	r3, [pc, #412]	; (800ba60 <Argus_Dca_PrepareCfg+0x1f4c>)
 800b8c2:	f7fe bf1d 	b.w	800a700 <Argus_Dca_PrepareCfg+0xbec>
 800b8c6:	3101      	adds	r1, #1
 800b8c8:	084e      	lsrs	r6, r1, #1
 800b8ca:	f040 80a9 	bne.w	800ba20 <Argus_Dca_PrepareCfg+0x1f0c>
 800b8ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8d0:	4632      	mov	r2, r6
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	4637      	mov	r7, r6
 800b8d6:	f7fe bee4 	b.w	800a6a2 <Argus_Dca_PrepareCfg+0xb8e>
 800b8da:	f040 816c 	bne.w	800bbb6 <Argus_Dca_PrepareCfg+0x20a2>
 800b8de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b8e2:	b280      	uxth	r0, r0
 800b8e4:	f7fe ba24 	b.w	8009d30 <Argus_Dca_PrepareCfg+0x21c>
 800b8e8:	f040 81f0 	bne.w	800bccc <Argus_Dca_PrepareCfg+0x21b8>
 800b8ec:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b8f0:	b289      	uxth	r1, r1
 800b8f2:	f7fe ba15 	b.w	8009d20 <Argus_Dca_PrepareCfg+0x20c>
 800b8f6:	f040 826e 	bne.w	800bdd6 <Argus_Dca_PrepareCfg+0x22c2>
 800b8fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b8fe:	b289      	uxth	r1, r1
 800b900:	f7fe ba06 	b.w	8009d10 <Argus_Dca_PrepareCfg+0x1fc>
 800b904:	1c43      	adds	r3, r0, #1
 800b906:	085b      	lsrs	r3, r3, #1
 800b908:	f040 8100 	bne.w	800bb0c <Argus_Dca_PrepareCfg+0x1ff8>
 800b90c:	461a      	mov	r2, r3
 800b90e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b912:	0c12      	lsrs	r2, r2, #16
 800b914:	4413      	add	r3, r2
 800b916:	e761      	b.n	800b7dc <Argus_Dca_PrepareCfg+0x1cc8>
 800b918:	1c43      	adds	r3, r0, #1
 800b91a:	085b      	lsrs	r3, r3, #1
 800b91c:	f040 80c6 	bne.w	800baac <Argus_Dca_PrepareCfg+0x1f98>
 800b920:	461a      	mov	r2, r3
 800b922:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b926:	0c1b      	lsrs	r3, r3, #16
 800b928:	4413      	add	r3, r2
 800b92a:	e710      	b.n	800b74e <Argus_Dca_PrepareCfg+0x1c3a>
 800b92c:	3301      	adds	r3, #1
 800b92e:	085b      	lsrs	r3, r3, #1
 800b930:	f040 80a0 	bne.w	800ba74 <Argus_Dca_PrepareCfg+0x1f60>
 800b934:	461e      	mov	r6, r3
 800b936:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
 800b93a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 800b93e:	e4ce      	b.n	800b2de <Argus_Dca_PrepareCfg+0x17ca>
 800b940:	1c43      	adds	r3, r0, #1
 800b942:	085b      	lsrs	r3, r3, #1
 800b944:	f040 80c5 	bne.w	800bad2 <Argus_Dca_PrepareCfg+0x1fbe>
 800b948:	461a      	mov	r2, r3
 800b94a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b94e:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b952:	f7fe bfd7 	b.w	800a904 <Argus_Dca_PrepareCfg+0xdf0>
 800b956:	4843      	ldr	r0, [pc, #268]	; (800ba64 <Argus_Dca_PrepareCfg+0x1f50>)
 800b958:	4410      	add	r0, r2
 800b95a:	2800      	cmp	r0, #0
 800b95c:	f2c0 82ff 	blt.w	800bf5e <Argus_Dca_PrepareCfg+0x244a>
 800b960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b968:	493f      	ldr	r1, [pc, #252]	; (800ba68 <Argus_Dca_PrepareCfg+0x1f54>)
 800b96a:	4401      	add	r1, r0
 800b96c:	2900      	cmp	r1, #0
 800b96e:	f6bf ad08 	bge.w	800b382 <Argus_Dca_PrepareCfg+0x186e>
 800b972:	4613      	mov	r3, r2
 800b974:	4601      	mov	r1, r0
 800b976:	e504      	b.n	800b382 <Argus_Dca_PrepareCfg+0x186e>
 800b978:	2160      	movs	r1, #96	; 0x60
 800b97a:	f7fe b9a1 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800b97e:	005b      	lsls	r3, r3, #1
 800b980:	f7fe bbb6 	b.w	800a0f0 <Argus_Dca_PrepareCfg+0x5dc>
 800b984:	005b      	lsls	r3, r3, #1
 800b986:	f7fe bc6a 	b.w	800a25e <Argus_Dca_PrepareCfg+0x74a>
 800b98a:	f24b 70e1 	movw	r0, #47073	; 0xb7e1
 800b98e:	2702      	movs	r7, #2
 800b990:	f7fe bac9 	b.w	8009f26 <Argus_Dca_PrepareCfg+0x412>
 800b994:	2a1f      	cmp	r2, #31
 800b996:	f67f a8b1 	bls.w	800aafc <Argus_Dca_PrepareCfg+0xfe8>
 800b99a:	231f      	movs	r3, #31
 800b99c:	f88d 3004 	strb.w	r3, [sp, #4]
 800b9a0:	f7fe be8e 	b.w	800a6c0 <Argus_Dca_PrepareCfg+0xbac>
 800b9a4:	2110      	movs	r1, #16
 800b9a6:	f7fe b98b 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800b9aa:	2118      	movs	r1, #24
 800b9ac:	f7fe b988 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800b9b0:	2120      	movs	r1, #32
 800b9b2:	f7fe b985 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800b9b6:	8a2e      	ldrh	r6, [r5, #16]
 800b9b8:	f88d 2004 	strb.w	r2, [sp, #4]
 800b9bc:	2e00      	cmp	r6, #0
 800b9be:	f47e abae 	bne.w	800a11e <Argus_Dca_PrepareCfg+0x60a>
 800b9c2:	4632      	mov	r2, r6
 800b9c4:	f7ff b89a 	b.w	800aafc <Argus_Dca_PrepareCfg+0xfe8>
 800b9c8:	f24b 72e1 	movw	r2, #47073	; 0xb7e1
 800b9cc:	fb02 f106 	mul.w	r1, r2, r6
 800b9d0:	b28b      	uxth	r3, r1
 800b9d2:	0072      	lsls	r2, r6, #1
 800b9d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b9d8:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9dc:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800b9e0:	0c1b      	lsrs	r3, r3, #16
 800b9e2:	f88d 3005 	strb.w	r3, [sp, #5]
 800b9e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9ea:	f7fe bd35 	b.w	800a458 <Argus_Dca_PrepareCfg+0x944>
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	f7fe bb5d 	b.w	800a0ae <Argus_Dca_PrepareCfg+0x59a>
 800b9f4:	005b      	lsls	r3, r3, #1
 800b9f6:	f7fe bc11 	b.w	800a21c <Argus_Dca_PrepareCfg+0x708>
 800b9fa:	491c      	ldr	r1, [pc, #112]	; (800ba6c <Argus_Dca_PrepareCfg+0x1f58>)
 800b9fc:	428b      	cmp	r3, r1
 800b9fe:	f483 0600 	eor.w	r6, r3, #8388608	; 0x800000
 800ba02:	f300 809c 	bgt.w	800bb3e <Argus_Dca_PrepareCfg+0x202a>
 800ba06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	428b      	cmp	r3, r1
 800ba0e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ba12:	d9fa      	bls.n	800ba0a <Argus_Dca_PrepareCfg+0x1ef6>
 800ba14:	2a00      	cmp	r2, #0
 800ba16:	f040 8094 	bne.w	800bb42 <Argus_Dca_PrepareCfg+0x202e>
 800ba1a:	4b15      	ldr	r3, [pc, #84]	; (800ba70 <Argus_Dca_PrepareCfg+0x1f5c>)
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	e55c      	b.n	800b4da <Argus_Dca_PrepareCfg+0x19c6>
 800ba20:	4b12      	ldr	r3, [pc, #72]	; (800ba6c <Argus_Dca_PrepareCfg+0x1f58>)
 800ba22:	429e      	cmp	r6, r3
 800ba24:	f486 0000 	eor.w	r0, r6, #8388608	; 0x800000
 800ba28:	f73f aa4c 	bgt.w	800aec4 <Argus_Dca_PrepareCfg+0x13b0>
 800ba2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ba30:	0076      	lsls	r6, r6, #1
 800ba32:	429e      	cmp	r6, r3
 800ba34:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ba38:	d9fa      	bls.n	800ba30 <Argus_Dca_PrepareCfg+0x1f1c>
 800ba3a:	2a00      	cmp	r2, #0
 800ba3c:	f47f aa44 	bne.w	800aec8 <Argus_Dca_PrepareCfg+0x13b4>
 800ba40:	f647 77ff 	movw	r7, #32767	; 0x7fff
 800ba44:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ba48:	f7fe ba6d 	b.w	8009f26 <Argus_Dca_PrepareCfg+0x412>
 800ba4c:	2128      	movs	r1, #40	; 0x28
 800ba4e:	f7fe b937 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800ba52:	2130      	movs	r1, #48	; 0x30
 800ba54:	f7fe b934 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800ba58:	80800000 	.word	0x80800000
 800ba5c:	04da1ea8 	.word	0x04da1ea8
 800ba60:	0a65af68 	.word	0x0a65af68
 800ba64:	fd3a37a0 	.word	0xfd3a37a0
 800ba68:	fe9d1bd0 	.word	0xfe9d1bd0
 800ba6c:	007fffff 	.word	0x007fffff
 800ba70:	ffff0000 	.word	0xffff0000
 800ba74:	4992      	ldr	r1, [pc, #584]	; (800bcc0 <Argus_Dca_PrepareCfg+0x21ac>)
 800ba76:	428b      	cmp	r3, r1
 800ba78:	f483 0500 	eor.w	r5, r3, #8388608	; 0x800000
 800ba7c:	f73f a910 	bgt.w	800aca0 <Argus_Dca_PrepareCfg+0x118c>
 800ba80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	428b      	cmp	r3, r1
 800ba88:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ba8c:	d9fa      	bls.n	800ba84 <Argus_Dca_PrepareCfg+0x1f70>
 800ba8e:	2a00      	cmp	r2, #0
 800ba90:	f47f a908 	bne.w	800aca4 <Argus_Dca_PrepareCfg+0x1190>
 800ba94:	ebc6 4206 	rsb	r2, r6, r6, lsl #16
 800ba98:	ebc6 33c6 	rsb	r3, r6, r6, lsl #15
 800ba9c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800baa0:	041e      	lsls	r6, r3, #16
 800baa2:	0c1b      	lsrs	r3, r3, #16
 800baa4:	fa16 f682 	uxtah	r6, r6, r2
 800baa8:	041b      	lsls	r3, r3, #16
 800baaa:	e414      	b.n	800b2d6 <Argus_Dca_PrepareCfg+0x17c2>
 800baac:	4984      	ldr	r1, [pc, #528]	; (800bcc0 <Argus_Dca_PrepareCfg+0x21ac>)
 800baae:	428b      	cmp	r3, r1
 800bab0:	f483 0500 	eor.w	r5, r3, #8388608	; 0x800000
 800bab4:	f73f ae19 	bgt.w	800b6ea <Argus_Dca_PrepareCfg+0x1bd6>
 800bab8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800babc:	005b      	lsls	r3, r3, #1
 800babe:	428b      	cmp	r3, r1
 800bac0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bac4:	d9fa      	bls.n	800babc <Argus_Dca_PrepareCfg+0x1fa8>
 800bac6:	2a00      	cmp	r2, #0
 800bac8:	f47f ae11 	bne.w	800b6ee <Argus_Dca_PrepareCfg+0x1bda>
 800bacc:	4a7d      	ldr	r2, [pc, #500]	; (800bcc4 <Argus_Dca_PrepareCfg+0x21b0>)
 800bace:	2301      	movs	r3, #1
 800bad0:	e727      	b.n	800b922 <Argus_Dca_PrepareCfg+0x1e0e>
 800bad2:	497b      	ldr	r1, [pc, #492]	; (800bcc0 <Argus_Dca_PrepareCfg+0x21ac>)
 800bad4:	428b      	cmp	r3, r1
 800bad6:	f483 0700 	eor.w	r7, r3, #8388608	; 0x800000
 800bada:	f73f aa1d 	bgt.w	800af18 <Argus_Dca_PrepareCfg+0x1404>
 800bade:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bae2:	005b      	lsls	r3, r3, #1
 800bae4:	428b      	cmp	r3, r1
 800bae6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800baea:	d9fa      	bls.n	800bae2 <Argus_Dca_PrepareCfg+0x1fce>
 800baec:	2a00      	cmp	r2, #0
 800baee:	f47f aa15 	bne.w	800af1c <Argus_Dca_PrepareCfg+0x1408>
 800baf2:	ebc6 4206 	rsb	r2, r6, r6, lsl #16
 800baf6:	ebc6 33c6 	rsb	r3, r6, r6, lsl #15
 800bafa:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bafe:	0419      	lsls	r1, r3, #16
 800bb00:	0c1b      	lsrs	r3, r3, #16
 800bb02:	fa11 f282 	uxtah	r2, r1, r2
 800bb06:	041b      	lsls	r3, r3, #16
 800bb08:	f7fe bef8 	b.w	800a8fc <Argus_Dca_PrepareCfg+0xde8>
 800bb0c:	496c      	ldr	r1, [pc, #432]	; (800bcc0 <Argus_Dca_PrepareCfg+0x21ac>)
 800bb0e:	428b      	cmp	r3, r1
 800bb10:	f483 0700 	eor.w	r7, r3, #8388608	; 0x800000
 800bb14:	f73f ae31 	bgt.w	800b77a <Argus_Dca_PrepareCfg+0x1c66>
 800bb18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bb1c:	005b      	lsls	r3, r3, #1
 800bb1e:	428b      	cmp	r3, r1
 800bb20:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bb24:	d9fa      	bls.n	800bb1c <Argus_Dca_PrepareCfg+0x2008>
 800bb26:	2a00      	cmp	r2, #0
 800bb28:	f47f ae29 	bne.w	800b77e <Argus_Dca_PrepareCfg+0x1c6a>
 800bb2c:	4b65      	ldr	r3, [pc, #404]	; (800bcc4 <Argus_Dca_PrepareCfg+0x21b0>)
 800bb2e:	2201      	movs	r2, #1
 800bb30:	e6ed      	b.n	800b90e <Argus_Dca_PrepareCfg+0x1dfa>
 800bb32:	2138      	movs	r1, #56	; 0x38
 800bb34:	f7fe b8c4 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800bb38:	4e63      	ldr	r6, [pc, #396]	; (800bcc8 <Argus_Dca_PrepareCfg+0x21b4>)
 800bb3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bb42:	2000      	movs	r0, #0
 800bb44:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800bb48:	e000      	b.n	800bb4c <Argus_Dca_PrepareCfg+0x2038>
 800bb4a:	b151      	cbz	r1, 800bb62 <Argus_Dca_PrepareCfg+0x204e>
 800bb4c:	428b      	cmp	r3, r1
 800bb4e:	bf9c      	itt	ls
 800bb50:	1ac9      	subls	r1, r1, r3
 800bb52:	4310      	orrls	r0, r2
 800bb54:	0852      	lsrs	r2, r2, #1
 800bb56:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bb5a:	d1f6      	bne.n	800bb4a <Argus_Dca_PrepareCfg+0x2036>
 800bb5c:	4299      	cmp	r1, r3
 800bb5e:	bf28      	it	cs
 800bb60:	3001      	addcs	r0, #1
 800bb62:	2e00      	cmp	r6, #0
 800bb64:	bfb8      	it	lt
 800bb66:	4240      	neglt	r0, r0
 800bb68:	b282      	uxth	r2, r0
 800bb6a:	0c00      	lsrs	r0, r0, #16
 800bb6c:	fb00 f302 	mul.w	r3, r0, r2
 800bb70:	fb02 f202 	mul.w	r2, r2, r2
 800bb74:	eb03 4612 	add.w	r6, r3, r2, lsr #16
 800bb78:	fa13 f186 	uxtah	r1, r3, r6
 800bb7c:	fb00 f000 	mul.w	r0, r0, r0
 800bb80:	eb00 4316 	add.w	r3, r0, r6, lsr #16
 800bb84:	0408      	lsls	r0, r1, #16
 800bb86:	fa10 f282 	uxtah	r2, r0, r2
 800bb8a:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800bb8e:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 800bb92:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800bb96:	bf28      	it	cs
 800bb98:	f44f 3080 	movcs.w	r0, #65536	; 0x10000
 800bb9c:	f4ff ac9d 	bcc.w	800b4da <Argus_Dca_PrepareCfg+0x19c6>
 800bba0:	4403      	add	r3, r0
 800bba2:	e49e      	b.n	800b4e2 <Argus_Dca_PrepareCfg+0x19ce>
 800bba4:	005b      	lsls	r3, r3, #1
 800bba6:	f7fe ba8d 	b.w	800a0c4 <Argus_Dca_PrepareCfg+0x5b0>
 800bbaa:	005b      	lsls	r3, r3, #1
 800bbac:	f7fe bb41 	b.w	800a232 <Argus_Dca_PrepareCfg+0x71e>
 800bbb0:	2140      	movs	r1, #64	; 0x40
 800bbb2:	f7fe b885 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800bbb6:	005e      	lsls	r6, r3, #1
 800bbb8:	42b2      	cmp	r2, r6
 800bbba:	f200 81a6 	bhi.w	800bf0a <Argus_Dca_PrepareCfg+0x23f6>
 800bbbe:	1ab3      	subs	r3, r6, r2
 800bbc0:	005b      	lsls	r3, r3, #1
 800bbc2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bbc6:	f43f ae8c 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	bf9c      	itt	ls
 800bbce:	1a9b      	subls	r3, r3, r2
 800bbd0:	f440 4080 	orrls.w	r0, r0, #16384	; 0x4000
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	f43f ae84 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	bf9c      	itt	ls
 800bbde:	1a9b      	subls	r3, r3, r2
 800bbe0:	f440 5000 	orrls.w	r0, r0, #8192	; 0x2000
 800bbe4:	005b      	lsls	r3, r3, #1
 800bbe6:	f43f ae7c 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bbea:	429a      	cmp	r2, r3
 800bbec:	bf9c      	itt	ls
 800bbee:	1a9b      	subls	r3, r3, r2
 800bbf0:	f440 5080 	orrls.w	r0, r0, #4096	; 0x1000
 800bbf4:	005b      	lsls	r3, r3, #1
 800bbf6:	f43f ae74 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	bf9c      	itt	ls
 800bbfe:	1a9b      	subls	r3, r3, r2
 800bc00:	f440 6000 	orrls.w	r0, r0, #2048	; 0x800
 800bc04:	005b      	lsls	r3, r3, #1
 800bc06:	f43f ae6c 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	bf9c      	itt	ls
 800bc0e:	1a9b      	subls	r3, r3, r2
 800bc10:	f440 6080 	orrls.w	r0, r0, #1024	; 0x400
 800bc14:	005b      	lsls	r3, r3, #1
 800bc16:	f43f ae64 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	bf9c      	itt	ls
 800bc1e:	1a9b      	subls	r3, r3, r2
 800bc20:	f440 7000 	orrls.w	r0, r0, #512	; 0x200
 800bc24:	005b      	lsls	r3, r3, #1
 800bc26:	f43f ae5c 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	bf9c      	itt	ls
 800bc2e:	1a9b      	subls	r3, r3, r2
 800bc30:	f440 7080 	orrls.w	r0, r0, #256	; 0x100
 800bc34:	005b      	lsls	r3, r3, #1
 800bc36:	f43f ae54 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	bf9c      	itt	ls
 800bc3e:	1a9b      	subls	r3, r3, r2
 800bc40:	f040 0080 	orrls.w	r0, r0, #128	; 0x80
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	f43f ae4c 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	bf9c      	itt	ls
 800bc4e:	1a9b      	subls	r3, r3, r2
 800bc50:	f040 0040 	orrls.w	r0, r0, #64	; 0x40
 800bc54:	005b      	lsls	r3, r3, #1
 800bc56:	f43f ae44 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	bf9c      	itt	ls
 800bc5e:	1a9b      	subls	r3, r3, r2
 800bc60:	f040 0020 	orrls.w	r0, r0, #32
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	f43f ae3c 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	bf9c      	itt	ls
 800bc6e:	1a9b      	subls	r3, r3, r2
 800bc70:	f040 0010 	orrls.w	r0, r0, #16
 800bc74:	005b      	lsls	r3, r3, #1
 800bc76:	f43f ae34 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	bf9c      	itt	ls
 800bc7e:	1a9b      	subls	r3, r3, r2
 800bc80:	f040 0008 	orrls.w	r0, r0, #8
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	f43f ae2c 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	bf9c      	itt	ls
 800bc8e:	1a9b      	subls	r3, r3, r2
 800bc90:	f040 0004 	orrls.w	r0, r0, #4
 800bc94:	005b      	lsls	r3, r3, #1
 800bc96:	f43f ae24 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	bf9c      	itt	ls
 800bc9e:	1a9b      	subls	r3, r3, r2
 800bca0:	f040 0002 	orrls.w	r0, r0, #2
 800bca4:	005b      	lsls	r3, r3, #1
 800bca6:	f43f ae1c 	beq.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	bf9c      	itt	ls
 800bcae:	1a9b      	subls	r3, r3, r2
 800bcb0:	f040 0001 	orrls.w	r0, r0, #1
 800bcb4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800bcb8:	f63f ae13 	bhi.w	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	e610      	b.n	800b8e2 <Argus_Dca_PrepareCfg+0x1dce>
 800bcc0:	007fffff 	.word	0x007fffff
 800bcc4:	ffff0000 	.word	0xffff0000
 800bcc8:	80800000 	.word	0x80800000
 800bccc:	0058      	lsls	r0, r3, #1
 800bcce:	4282      	cmp	r2, r0
 800bcd0:	f200 811d 	bhi.w	800bf0e <Argus_Dca_PrepareCfg+0x23fa>
 800bcd4:	1a83      	subs	r3, r0, r2
 800bcd6:	005b      	lsls	r3, r3, #1
 800bcd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bcdc:	f43f ae08 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bce0:	429a      	cmp	r2, r3
 800bce2:	bf9c      	itt	ls
 800bce4:	1a9b      	subls	r3, r3, r2
 800bce6:	f441 4180 	orrls.w	r1, r1, #16384	; 0x4000
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	f43f ae00 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	bf9c      	itt	ls
 800bcf4:	1a9b      	subls	r3, r3, r2
 800bcf6:	f441 5100 	orrls.w	r1, r1, #8192	; 0x2000
 800bcfa:	005b      	lsls	r3, r3, #1
 800bcfc:	f43f adf8 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bd00:	429a      	cmp	r2, r3
 800bd02:	bf9c      	itt	ls
 800bd04:	1a9b      	subls	r3, r3, r2
 800bd06:	f441 5180 	orrls.w	r1, r1, #4096	; 0x1000
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	f43f adf0 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bd10:	429a      	cmp	r2, r3
 800bd12:	bf9c      	itt	ls
 800bd14:	1a9b      	subls	r3, r3, r2
 800bd16:	f441 6100 	orrls.w	r1, r1, #2048	; 0x800
 800bd1a:	005b      	lsls	r3, r3, #1
 800bd1c:	f43f ade8 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bd20:	429a      	cmp	r2, r3
 800bd22:	bf9c      	itt	ls
 800bd24:	1a9b      	subls	r3, r3, r2
 800bd26:	f441 6180 	orrls.w	r1, r1, #1024	; 0x400
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	f43f ade0 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bd30:	429a      	cmp	r2, r3
 800bd32:	bf9c      	itt	ls
 800bd34:	1a9b      	subls	r3, r3, r2
 800bd36:	f441 7100 	orrls.w	r1, r1, #512	; 0x200
 800bd3a:	005b      	lsls	r3, r3, #1
 800bd3c:	f43f add8 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bd40:	429a      	cmp	r2, r3
 800bd42:	bf9c      	itt	ls
 800bd44:	1a9b      	subls	r3, r3, r2
 800bd46:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
 800bd4a:	005b      	lsls	r3, r3, #1
 800bd4c:	f43f add0 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bd50:	429a      	cmp	r2, r3
 800bd52:	bf9c      	itt	ls
 800bd54:	1a9b      	subls	r3, r3, r2
 800bd56:	f041 0180 	orrls.w	r1, r1, #128	; 0x80
 800bd5a:	005b      	lsls	r3, r3, #1
 800bd5c:	f43f adc8 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bd60:	429a      	cmp	r2, r3
 800bd62:	bf9c      	itt	ls
 800bd64:	1a9b      	subls	r3, r3, r2
 800bd66:	f041 0140 	orrls.w	r1, r1, #64	; 0x40
 800bd6a:	005b      	lsls	r3, r3, #1
 800bd6c:	f43f adc0 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bd70:	429a      	cmp	r2, r3
 800bd72:	bf9c      	itt	ls
 800bd74:	1a9b      	subls	r3, r3, r2
 800bd76:	f041 0120 	orrls.w	r1, r1, #32
 800bd7a:	005b      	lsls	r3, r3, #1
 800bd7c:	f43f adb8 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bd80:	429a      	cmp	r2, r3
 800bd82:	bf9c      	itt	ls
 800bd84:	1a9b      	subls	r3, r3, r2
 800bd86:	f041 0110 	orrls.w	r1, r1, #16
 800bd8a:	005b      	lsls	r3, r3, #1
 800bd8c:	f43f adb0 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bd90:	429a      	cmp	r2, r3
 800bd92:	bf9c      	itt	ls
 800bd94:	1a9b      	subls	r3, r3, r2
 800bd96:	f041 0108 	orrls.w	r1, r1, #8
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	f43f ada8 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bda0:	429a      	cmp	r2, r3
 800bda2:	bf9c      	itt	ls
 800bda4:	1a9b      	subls	r3, r3, r2
 800bda6:	f041 0104 	orrls.w	r1, r1, #4
 800bdaa:	005b      	lsls	r3, r3, #1
 800bdac:	f43f ada0 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	bf9c      	itt	ls
 800bdb4:	1a9b      	subls	r3, r3, r2
 800bdb6:	f041 0102 	orrls.w	r1, r1, #2
 800bdba:	005b      	lsls	r3, r3, #1
 800bdbc:	f43f ad98 	beq.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	bf9c      	itt	ls
 800bdc4:	1a9b      	subls	r3, r3, r2
 800bdc6:	f041 0101 	orrls.w	r1, r1, #1
 800bdca:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800bdce:	f63f ad8f 	bhi.w	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bdd2:	3101      	adds	r1, #1
 800bdd4:	e58c      	b.n	800b8f0 <Argus_Dca_PrepareCfg+0x1ddc>
 800bdd6:	0058      	lsls	r0, r3, #1
 800bdd8:	4282      	cmp	r2, r0
 800bdda:	f200 809a 	bhi.w	800bf12 <Argus_Dca_PrepareCfg+0x23fe>
 800bdde:	1a83      	subs	r3, r0, r2
 800bde0:	005b      	lsls	r3, r3, #1
 800bde2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bde6:	f43f ad8a 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800bdea:	429a      	cmp	r2, r3
 800bdec:	bf9c      	itt	ls
 800bdee:	1a9b      	subls	r3, r3, r2
 800bdf0:	f441 4180 	orrls.w	r1, r1, #16384	; 0x4000
 800bdf4:	005b      	lsls	r3, r3, #1
 800bdf6:	f43f ad82 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	bf9c      	itt	ls
 800bdfe:	1a9b      	subls	r3, r3, r2
 800be00:	f441 5100 	orrls.w	r1, r1, #8192	; 0x2000
 800be04:	005b      	lsls	r3, r3, #1
 800be06:	f43f ad7a 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800be0a:	429a      	cmp	r2, r3
 800be0c:	bf9c      	itt	ls
 800be0e:	1a9b      	subls	r3, r3, r2
 800be10:	f441 5180 	orrls.w	r1, r1, #4096	; 0x1000
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	f43f ad72 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800be1a:	429a      	cmp	r2, r3
 800be1c:	bf9c      	itt	ls
 800be1e:	1a9b      	subls	r3, r3, r2
 800be20:	f441 6100 	orrls.w	r1, r1, #2048	; 0x800
 800be24:	005b      	lsls	r3, r3, #1
 800be26:	f43f ad6a 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800be2a:	429a      	cmp	r2, r3
 800be2c:	bf9c      	itt	ls
 800be2e:	1a9b      	subls	r3, r3, r2
 800be30:	f441 6180 	orrls.w	r1, r1, #1024	; 0x400
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	f43f ad62 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800be3a:	429a      	cmp	r2, r3
 800be3c:	bf9c      	itt	ls
 800be3e:	1a9b      	subls	r3, r3, r2
 800be40:	f441 7100 	orrls.w	r1, r1, #512	; 0x200
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	f43f ad5a 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800be4a:	429a      	cmp	r2, r3
 800be4c:	bf9c      	itt	ls
 800be4e:	1a9b      	subls	r3, r3, r2
 800be50:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	f43f ad52 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800be5a:	429a      	cmp	r2, r3
 800be5c:	bf9c      	itt	ls
 800be5e:	1a9b      	subls	r3, r3, r2
 800be60:	f041 0180 	orrls.w	r1, r1, #128	; 0x80
 800be64:	005b      	lsls	r3, r3, #1
 800be66:	f43f ad4a 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800be6a:	429a      	cmp	r2, r3
 800be6c:	bf9c      	itt	ls
 800be6e:	1a9b      	subls	r3, r3, r2
 800be70:	f041 0140 	orrls.w	r1, r1, #64	; 0x40
 800be74:	005b      	lsls	r3, r3, #1
 800be76:	f43f ad42 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800be7a:	429a      	cmp	r2, r3
 800be7c:	bf9c      	itt	ls
 800be7e:	1a9b      	subls	r3, r3, r2
 800be80:	f041 0120 	orrls.w	r1, r1, #32
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	f43f ad3a 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800be8a:	429a      	cmp	r2, r3
 800be8c:	bf9c      	itt	ls
 800be8e:	1a9b      	subls	r3, r3, r2
 800be90:	f041 0110 	orrls.w	r1, r1, #16
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	f43f ad32 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800be9a:	429a      	cmp	r2, r3
 800be9c:	bf9c      	itt	ls
 800be9e:	1a9b      	subls	r3, r3, r2
 800bea0:	f041 0108 	orrls.w	r1, r1, #8
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	f43f ad2a 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800beaa:	429a      	cmp	r2, r3
 800beac:	bf9c      	itt	ls
 800beae:	1a9b      	subls	r3, r3, r2
 800beb0:	f041 0104 	orrls.w	r1, r1, #4
 800beb4:	005b      	lsls	r3, r3, #1
 800beb6:	f43f ad22 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800beba:	429a      	cmp	r2, r3
 800bebc:	bf9c      	itt	ls
 800bebe:	1a9b      	subls	r3, r3, r2
 800bec0:	f041 0102 	orrls.w	r1, r1, #2
 800bec4:	005b      	lsls	r3, r3, #1
 800bec6:	f43f ad1a 	beq.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800beca:	429a      	cmp	r2, r3
 800becc:	bf9c      	itt	ls
 800bece:	1a9b      	subls	r3, r3, r2
 800bed0:	f041 0101 	orrls.w	r1, r1, #1
 800bed4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800bed8:	f63f ad11 	bhi.w	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800bedc:	3101      	adds	r1, #1
 800bede:	e50e      	b.n	800b8fe <Argus_Dca_PrepareCfg+0x1dea>
 800bee0:	2148      	movs	r1, #72	; 0x48
 800bee2:	f7fd beed 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800bee6:	2150      	movs	r1, #80	; 0x50
 800bee8:	f7fd beea 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800beec:	005b      	lsls	r3, r3, #1
 800beee:	f7fe b8f4 	b.w	800a0da <Argus_Dca_PrepareCfg+0x5c6>
 800bef2:	005b      	lsls	r3, r3, #1
 800bef4:	f7fe b9a8 	b.w	800a248 <Argus_Dca_PrepareCfg+0x734>
 800bef8:	2168      	movs	r1, #104	; 0x68
 800befa:	f7fd bee1 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800befe:	2170      	movs	r1, #112	; 0x70
 800bf00:	f7fd bede 	b.w	8009cc0 <Argus_Dca_PrepareCfg+0x1ac>
 800bf04:	4611      	mov	r1, r2
 800bf06:	f7fd befb 	b.w	8009d00 <Argus_Dca_PrepareCfg+0x1ec>
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	e65d      	b.n	800bbca <Argus_Dca_PrepareCfg+0x20b6>
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	e6e6      	b.n	800bce0 <Argus_Dca_PrepareCfg+0x21cc>
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	e769      	b.n	800bdea <Argus_Dca_PrepareCfg+0x22d6>
 800bf16:	f06f 0504 	mvn.w	r5, #4
 800bf1a:	f7fe bcd7 	b.w	800a8cc <Argus_Dca_PrepareCfg+0xdb8>
 800bf1e:	f88d 0005 	strb.w	r0, [sp, #5]
 800bf22:	0436      	lsls	r6, r6, #16
 800bf24:	f7fe bdc6 	b.w	800aab4 <Argus_Dca_PrepareCfg+0xfa0>
 800bf28:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bf2c:	4601      	mov	r1, r0
 800bf2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bf32:	f44f 3540 	mov.w	r5, #196608	; 0x30000
 800bf36:	f7fe ba53 	b.w	800a3e0 <Argus_Dca_PrepareCfg+0x8cc>
 800bf3a:	b952      	cbnz	r2, 800bf52 <Argus_Dca_PrepareCfg+0x243e>
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f6fe aa5f 	blt.w	800a400 <Argus_Dca_PrepareCfg+0x8ec>
 800bf42:	f7fe bdb3 	b.w	800aaac <Argus_Dca_PrepareCfg+0xf98>
 800bf46:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800bf4a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800bf4e:	f7fd bfb6 	b.w	8009ebe <Argus_Dca_PrepareCfg+0x3aa>
 800bf52:	f44f 3540 	mov.w	r5, #196608	; 0x30000
 800bf56:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bf5a:	f7fe ba41 	b.w	800a3e0 <Argus_Dca_PrepareCfg+0x8cc>
 800bf5e:	4610      	mov	r0, r2
 800bf60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bf64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf68:	e4fe      	b.n	800b968 <Argus_Dca_PrepareCfg+0x1e54>
 800bf6a:	f24c 218f 	movw	r1, #49807	; 0xc28f
 800bf6e:	fb01 f103 	mul.w	r1, r1, r3
 800bf72:	b288      	uxth	r0, r1
 800bf74:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800bf78:	eb03 4111 	add.w	r1, r3, r1, lsr #16
 800bf7c:	eb00 4101 	add.w	r1, r0, r1, lsl #16
 800bf80:	f3c1 310f 	ubfx	r1, r1, #12, #16
 800bf84:	f7fe bdac 	b.w	800aae0 <Argus_Dca_PrepareCfg+0xfcc>
 800bf88:	4a01      	ldr	r2, [pc, #4]	; (800bf90 <Argus_Dca_PrepareCfg+0x247c>)
 800bf8a:	4b02      	ldr	r3, [pc, #8]	; (800bf94 <Argus_Dca_PrepareCfg+0x2480>)
 800bf8c:	f7fe bd26 	b.w	800a9dc <Argus_Dca_PrepareCfg+0xec8>
 800bf90:	04da1ea8 	.word	0x04da1ea8
 800bf94:	0a65af68 	.word	0x0a65af68

0800bf98 <Argus_Dca_Apply>:
 800bf98:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800bf9a:	f993 3000 	ldrsb.w	r3, [r3]
 800bf9e:	b903      	cbnz	r3, 800bfa2 <Argus_Dca_Apply+0xa>
 800bfa0:	4770      	bx	lr
 800bfa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa6:	8983      	ldrh	r3, [r0, #12]
 800bfa8:	8a82      	ldrh	r2, [r0, #20]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	4604      	mov	r4, r0
 800bfae:	b083      	sub	sp, #12
 800bfb0:	460d      	mov	r5, r1
 800bfb2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800bfb4:	f000 80bb 	beq.w	800c12e <Argus_Dca_Apply+0x196>
 800bfb8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 800bfbc:	89a1      	ldrh	r1, [r4, #12]
 800bfbe:	0053      	lsls	r3, r2, #1
 800bfc0:	0989      	lsrs	r1, r1, #6
 800bfc2:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800bfc6:	f003 077e 	and.w	r7, r3, #126	; 0x7e
 800bfca:	f008 087e 	and.w	r8, r8, #126	; 0x7e
 800bfce:	bf08      	it	eq
 800bfd0:	2101      	moveq	r1, #1
 800bfd2:	89a3      	ldrh	r3, [r4, #12]
 800bfd4:	0992      	lsrs	r2, r2, #6
 800bfd6:	bf08      	it	eq
 800bfd8:	2201      	moveq	r2, #1
 800bfda:	f1b8 0f00 	cmp.w	r8, #0
 800bfde:	bf08      	it	eq
 800bfe0:	f04f 0880 	moveq.w	r8, #128	; 0x80
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	2f00      	cmp	r7, #0
 800bfe8:	4616      	mov	r6, r2
 800bfea:	bf08      	it	eq
 800bfec:	2780      	moveq	r7, #128	; 0x80
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f000 80f1 	beq.w	800c1d6 <Argus_Dca_Apply+0x23e>
 800bff4:	4291      	cmp	r1, r2
 800bff6:	f040 80ef 	bne.w	800c1d8 <Argus_Dca_Apply+0x240>
 800bffa:	4547      	cmp	r7, r8
 800bffc:	f8d0 6130 	ldr.w	r6, [r0, #304]	; 0x130
 800c000:	f000 8097 	beq.w	800c132 <Argus_Dca_Apply+0x19a>
 800c004:	2f80      	cmp	r7, #128	; 0x80
 800c006:	f000 8187 	beq.w	800c318 <Argus_Dca_Apply+0x380>
 800c00a:	f896 8006 	ldrb.w	r8, [r6, #6]
 800c00e:	f894 a01e 	ldrb.w	sl, [r4, #30]
 800c012:	fb1a fa08 	smulbb	sl, sl, r8
 800c016:	fa5f fa8a 	uxtb.w	sl, sl
 800c01a:	ea4f 59c8 	mov.w	r9, r8, lsl #23
 800c01e:	f1b8 0f00 	cmp.w	r8, #0
 800c022:	f000 8157 	beq.w	800c2d4 <Argus_Dca_Apply+0x33c>
 800c026:	fb07 f70a 	mul.w	r7, r7, sl
 800c02a:	454f      	cmp	r7, r9
 800c02c:	4649      	mov	r1, r9
 800c02e:	f240 8153 	bls.w	800c2d8 <Argus_Dca_Apply+0x340>
 800c032:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c036:	0049      	lsls	r1, r1, #1
 800c038:	428f      	cmp	r7, r1
 800c03a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c03e:	d8fa      	bhi.n	800c036 <Argus_Dca_Apply+0x9e>
 800c040:	2a00      	cmp	r2, #0
 800c042:	f040 814d 	bne.w	800c2e0 <Argus_Dca_Apply+0x348>
 800c046:	ebc8 73c8 	rsb	r3, r8, r8, lsl #31
 800c04a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c04e:	7937      	ldrb	r7, [r6, #4]
 800c050:	ebaa 0a03 	sub.w	sl, sl, r3
 800c054:	4457      	add	r7, sl
 800c056:	f105 0b0a 	add.w	fp, r5, #10
 800c05a:	b27b      	sxtb	r3, r7
 800c05c:	4658      	mov	r0, fp
 800c05e:	2210      	movs	r2, #16
 800c060:	f106 0126 	add.w	r1, r6, #38	; 0x26
 800c064:	9301      	str	r3, [sp, #4]
 800c066:	f00b fb50 	bl	801770a <memcpy>
 800c06a:	9b01      	ldr	r3, [sp, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f300 811b 	bgt.w	800c2a8 <Argus_Dca_Apply+0x310>
 800c072:	d00c      	beq.n	800c08e <Argus_Dca_Apply+0xf6>
 800c074:	f103 0087 	add.w	r0, r3, #135	; 0x87
 800c078:	10c0      	asrs	r0, r0, #3
 800c07a:	f1c0 0210 	rsb	r2, r0, #16
 800c07e:	21ff      	movs	r1, #255	; 0xff
 800c080:	4458      	add	r0, fp
 800c082:	9301      	str	r3, [sp, #4]
 800c084:	f00b fb4c 	bl	8017720 <memset>
 800c088:	077b      	lsls	r3, r7, #29
 800c08a:	f040 8160 	bne.w	800c34e <Argus_Dca_Apply+0x3b6>
 800c08e:	f996 2005 	ldrsb.w	r2, [r6, #5]
 800c092:	79f3      	ldrb	r3, [r6, #7]
 800c094:	eb0a 0702 	add.w	r7, sl, r2
 800c098:	b11b      	cbz	r3, 800c0a2 <Argus_Dca_Apply+0x10a>
 800c09a:	f1b9 0f01 	cmp.w	r9, #1
 800c09e:	f000 8164 	beq.w	800c36a <Argus_Dca_Apply+0x3d2>
 800c0a2:	f105 091b 	add.w	r9, r5, #27
 800c0a6:	4648      	mov	r0, r9
 800c0a8:	fa4f f887 	sxtb.w	r8, r7
 800c0ac:	2210      	movs	r2, #16
 800c0ae:	f106 0137 	add.w	r1, r6, #55	; 0x37
 800c0b2:	f00b fb2a 	bl	801770a <memcpy>
 800c0b6:	f1b8 0f00 	cmp.w	r8, #0
 800c0ba:	f300 80b7 	bgt.w	800c22c <Argus_Dca_Apply+0x294>
 800c0be:	f280 8123 	bge.w	800c308 <Argus_Dca_Apply+0x370>
 800c0c2:	f108 0b87 	add.w	fp, r8, #135	; 0x87
 800c0c6:	ea4f 0beb 	mov.w	fp, fp, asr #3
 800c0ca:	f1cb 0a10 	rsb	sl, fp, #16
 800c0ce:	4652      	mov	r2, sl
 800c0d0:	eb09 000b 	add.w	r0, r9, fp
 800c0d4:	21ff      	movs	r1, #255	; 0xff
 800c0d6:	f00b fb23 	bl	8017720 <memset>
 800c0da:	f017 0707 	ands.w	r7, r7, #7
 800c0de:	f108 0880 	add.w	r8, r8, #128	; 0x80
 800c0e2:	f040 8128 	bne.w	800c336 <Argus_Dca_Apply+0x39e>
 800c0e6:	f105 092b 	add.w	r9, r5, #43	; 0x2b
 800c0ea:	f106 0147 	add.w	r1, r6, #71	; 0x47
 800c0ee:	4648      	mov	r0, r9
 800c0f0:	2210      	movs	r2, #16
 800c0f2:	f00b fb0a 	bl	801770a <memcpy>
 800c0f6:	4652      	mov	r2, sl
 800c0f8:	eb09 000b 	add.w	r0, r9, fp
 800c0fc:	21ff      	movs	r1, #255	; 0xff
 800c0fe:	f00b fb0f 	bl	8017720 <memset>
 800c102:	b15f      	cbz	r7, 800c11c <Argus_Dca_Apply+0x184>
 800c104:	ea4f 02e8 	mov.w	r2, r8, asr #3
 800c108:	23ff      	movs	r3, #255	; 0xff
 800c10a:	f819 1002 	ldrb.w	r1, [r9, r2]
 800c10e:	f008 0807 	and.w	r8, r8, #7
 800c112:	fa23 f308 	lsr.w	r3, r3, r8
 800c116:	430b      	orrs	r3, r1
 800c118:	f809 3002 	strb.w	r3, [r9, r2]
 800c11c:	2104      	movs	r1, #4
 800c11e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c120:	f003 f864 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800c124:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c126:	2106      	movs	r1, #6
 800c128:	f003 f860 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800c12c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c12e:	f8d0 6130 	ldr.w	r6, [r0, #304]	; 0x130
 800c132:	7e23      	ldrb	r3, [r4, #24]
 800c134:	f896 208d 	ldrb.w	r2, [r6, #141]	; 0x8d
 800c138:	4423      	add	r3, r4
 800c13a:	2a01      	cmp	r2, #1
 800c13c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c140:	d068      	beq.n	800c214 <Argus_Dca_Apply+0x27c>
 800c142:	2a02      	cmp	r2, #2
 800c144:	d057      	beq.n	800c1f6 <Argus_Dca_Apply+0x25e>
 800c146:	b113      	cbz	r3, 800c14e <Argus_Dca_Apply+0x1b6>
 800c148:	210c      	movs	r1, #12
 800c14a:	f003 f84f 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800c14e:	7e61      	ldrb	r1, [r4, #25]
 800c150:	7ea6      	ldrb	r6, [r4, #26]
 800c152:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
 800c156:	4421      	add	r1, r4
 800c158:	f002 003f 	and.w	r0, r2, #63	; 0x3f
 800c15c:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800c160:	4433      	add	r3, r6
 800c162:	b2db      	uxtb	r3, r3
 800c164:	4283      	cmp	r3, r0
 800c166:	d00a      	beq.n	800c17e <Argus_Dca_Apply+0x1e6>
 800c168:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800c16c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c170:	4313      	orrs	r3, r2
 800c172:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 800c176:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c178:	210a      	movs	r1, #10
 800c17a:	f003 f837 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800c17e:	f895 105e 	ldrb.w	r1, [r5, #94]	; 0x5e
 800c182:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
 800c186:	8ae2      	ldrh	r2, [r4, #22]
 800c188:	ea40 2301 	orr.w	r3, r0, r1, lsl #8
 800c18c:	f3c3 1349 	ubfx	r3, r3, #5, #10
 800c190:	3301      	adds	r3, #1
 800c192:	4293      	cmp	r3, r2
 800c194:	d011      	beq.n	800c1ba <Argus_Dca_Apply+0x222>
 800c196:	3a01      	subs	r2, #1
 800c198:	0152      	lsls	r2, r2, #5
 800c19a:	f000 001f 	and.w	r0, r0, #31
 800c19e:	f3c2 2306 	ubfx	r3, r2, #8, #7
 800c1a2:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800c1a6:	4302      	orrs	r2, r0
 800c1a8:	4319      	orrs	r1, r3
 800c1aa:	f885 105e 	strb.w	r1, [r5, #94]	; 0x5e
 800c1ae:	f885 205f 	strb.w	r2, [r5, #95]	; 0x5f
 800c1b2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c1b4:	211c      	movs	r1, #28
 800c1b6:	f003 f819 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800c1ba:	f7f4 fa31 	bl	8000620 <IRQ_LOCK>
 800c1be:	f104 0314 	add.w	r3, r4, #20
 800c1c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c1c6:	340c      	adds	r4, #12
 800c1c8:	e884 0003 	stmia.w	r4, {r0, r1}
 800c1cc:	b003      	add	sp, #12
 800c1ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d2:	f7f4 ba03 	b.w	80005dc <IRQ_UNLOCK>
 800c1d6:	4698      	mov	r8, r3
 800c1d8:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800c1dc:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
 800c1e0:	f023 0303 	bic.w	r3, r3, #3
 800c1e4:	ea43 2316 	orr.w	r3, r3, r6, lsr #8
 800c1e8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 800c1ec:	2108      	movs	r1, #8
 800c1ee:	f002 fffd 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800c1f2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c1f4:	e701      	b.n	800bffa <Argus_Dca_Apply+0x62>
 800c1f6:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
 800c1fa:	f3c2 0144 	ubfx	r1, r2, #1, #5
 800c1fe:	4299      	cmp	r1, r3
 800c200:	d0a5      	beq.n	800c14e <Argus_Dca_Apply+0x1b6>
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c208:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800c20c:	4313      	orrs	r3, r2
 800c20e:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 800c212:	e799      	b.n	800c148 <Argus_Dca_Apply+0x1b0>
 800c214:	f895 2045 	ldrb.w	r2, [r5, #69]	; 0x45
 800c218:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 800c21c:	d097      	beq.n	800c14e <Argus_Dca_Apply+0x1b6>
 800c21e:	f002 0207 	and.w	r2, r2, #7
 800c222:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
 800c226:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 800c22a:	e78d      	b.n	800c148 <Argus_Dca_Apply+0x1b0>
 800c22c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 800c230:	fa4f fb8a 	sxtb.w	fp, sl
 800c234:	21ff      	movs	r1, #255	; 0xff
 800c236:	465a      	mov	r2, fp
 800c238:	4648      	mov	r0, r9
 800c23a:	f00b fa71 	bl	8017720 <memset>
 800c23e:	f017 0107 	ands.w	r1, r7, #7
 800c242:	d007      	beq.n	800c254 <Argus_Dca_Apply+0x2bc>
 800c244:	f819 300b 	ldrb.w	r3, [r9, fp]
 800c248:	22ff      	movs	r2, #255	; 0xff
 800c24a:	40ca      	lsrs	r2, r1
 800c24c:	ea63 0302 	orn	r3, r3, r2
 800c250:	f809 300b 	strb.w	r3, [r9, fp]
 800c254:	f105 092b 	add.w	r9, r5, #43	; 0x2b
 800c258:	f106 0147 	add.w	r1, r6, #71	; 0x47
 800c25c:	2210      	movs	r2, #16
 800c25e:	fa4f fa8a 	sxtb.w	sl, sl
 800c262:	4648      	mov	r0, r9
 800c264:	f00b fa51 	bl	801770a <memcpy>
 800c268:	b2ff      	uxtb	r7, r7
 800c26a:	21ff      	movs	r1, #255	; 0xff
 800c26c:	4652      	mov	r2, sl
 800c26e:	4648      	mov	r0, r9
 800c270:	f00b fa56 	bl	8017720 <memset>
 800c274:	f017 0107 	ands.w	r1, r7, #7
 800c278:	d007      	beq.n	800c28a <Argus_Dca_Apply+0x2f2>
 800c27a:	f819 300a 	ldrb.w	r3, [r9, sl]
 800c27e:	22ff      	movs	r2, #255	; 0xff
 800c280:	40ca      	lsrs	r2, r1
 800c282:	ea63 0302 	orn	r3, r3, r2
 800c286:	f809 300a 	strb.w	r3, [r9, sl]
 800c28a:	f1b8 0f00 	cmp.w	r8, #0
 800c28e:	f6bf af45 	bge.w	800c11c <Argus_Dca_Apply+0x184>
 800c292:	f108 0b87 	add.w	fp, r8, #135	; 0x87
 800c296:	ea4f 0beb 	mov.w	fp, fp, asr #3
 800c29a:	f007 0707 	and.w	r7, r7, #7
 800c29e:	f108 0880 	add.w	r8, r8, #128	; 0x80
 800c2a2:	f1cb 0a10 	rsb	sl, fp, #16
 800c2a6:	e726      	b.n	800c0f6 <Argus_Dca_Apply+0x15e>
 800c2a8:	10db      	asrs	r3, r3, #3
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	21ff      	movs	r1, #255	; 0xff
 800c2ae:	4658      	mov	r0, fp
 800c2b0:	9301      	str	r3, [sp, #4]
 800c2b2:	f00b fa35 	bl	8017720 <memset>
 800c2b6:	f017 0707 	ands.w	r7, r7, #7
 800c2ba:	f43f aee8 	beq.w	800c08e <Argus_Dca_Apply+0xf6>
 800c2be:	9b01      	ldr	r3, [sp, #4]
 800c2c0:	21ff      	movs	r1, #255	; 0xff
 800c2c2:	f81b 2003 	ldrb.w	r2, [fp, r3]
 800c2c6:	fa21 f707 	lsr.w	r7, r1, r7
 800c2ca:	ea62 0207 	orn	r2, r2, r7
 800c2ce:	f80b 2003 	strb.w	r2, [fp, r3]
 800c2d2:	e6dc      	b.n	800c08e <Argus_Dca_Apply+0xf6>
 800c2d4:	464b      	mov	r3, r9
 800c2d6:	e6ba      	b.n	800c04e <Argus_Dca_Apply+0xb6>
 800c2d8:	2f00      	cmp	r7, #0
 800c2da:	d056      	beq.n	800c38a <Argus_Dca_Apply+0x3f2>
 800c2dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c2e0:	f04f 0900 	mov.w	r9, #0
 800c2e4:	e000      	b.n	800c2e8 <Argus_Dca_Apply+0x350>
 800c2e6:	b167      	cbz	r7, 800c302 <Argus_Dca_Apply+0x36a>
 800c2e8:	42b9      	cmp	r1, r7
 800c2ea:	bf9c      	itt	ls
 800c2ec:	1a7f      	subls	r7, r7, r1
 800c2ee:	ea49 0902 	orrls.w	r9, r9, r2
 800c2f2:	0852      	lsrs	r2, r2, #1
 800c2f4:	ea4f 0747 	mov.w	r7, r7, lsl #1
 800c2f8:	d1f5      	bne.n	800c2e6 <Argus_Dca_Apply+0x34e>
 800c2fa:	42b9      	cmp	r1, r7
 800c2fc:	d801      	bhi.n	800c302 <Argus_Dca_Apply+0x36a>
 800c2fe:	f109 0901 	add.w	r9, r9, #1
 800c302:	fb09 f308 	mul.w	r3, r9, r8
 800c306:	e6a2      	b.n	800c04e <Argus_Dca_Apply+0xb6>
 800c308:	f106 0147 	add.w	r1, r6, #71	; 0x47
 800c30c:	2210      	movs	r2, #16
 800c30e:	f105 002b 	add.w	r0, r5, #43	; 0x2b
 800c312:	f00b f9fa 	bl	801770a <memcpy>
 800c316:	e701      	b.n	800c11c <Argus_Dca_Apply+0x184>
 800c318:	f106 0125 	add.w	r1, r6, #37	; 0x25
 800c31c:	2211      	movs	r2, #17
 800c31e:	f105 0009 	add.w	r0, r5, #9
 800c322:	f00b f9f2 	bl	801770a <memcpy>
 800c326:	f106 0136 	add.w	r1, r6, #54	; 0x36
 800c32a:	2221      	movs	r2, #33	; 0x21
 800c32c:	f105 001a 	add.w	r0, r5, #26
 800c330:	f00b f9eb 	bl	801770a <memcpy>
 800c334:	e6f2      	b.n	800c11c <Argus_Dca_Apply+0x184>
 800c336:	ea4f 02e8 	mov.w	r2, r8, asr #3
 800c33a:	f008 0007 	and.w	r0, r8, #7
 800c33e:	f819 1002 	ldrb.w	r1, [r9, r2]
 800c342:	23ff      	movs	r3, #255	; 0xff
 800c344:	40c3      	lsrs	r3, r0
 800c346:	430b      	orrs	r3, r1
 800c348:	f809 3002 	strb.w	r3, [r9, r2]
 800c34c:	e6cb      	b.n	800c0e6 <Argus_Dca_Apply+0x14e>
 800c34e:	9b01      	ldr	r3, [sp, #4]
 800c350:	3380      	adds	r3, #128	; 0x80
 800c352:	10d9      	asrs	r1, r3, #3
 800c354:	22ff      	movs	r2, #255	; 0xff
 800c356:	f81b 0001 	ldrb.w	r0, [fp, r1]
 800c35a:	f003 0307 	and.w	r3, r3, #7
 800c35e:	fa22 f303 	lsr.w	r3, r2, r3
 800c362:	4303      	orrs	r3, r0
 800c364:	f80b 3001 	strb.w	r3, [fp, r1]
 800c368:	e691      	b.n	800c08e <Argus_Dca_Apply+0xf6>
 800c36a:	7933      	ldrb	r3, [r6, #4]
 800c36c:	1a9a      	subs	r2, r3, r2
 800c36e:	4590      	cmp	r8, r2
 800c370:	4453      	add	r3, sl
 800c372:	f73f ae96 	bgt.w	800c0a2 <Argus_Dca_Apply+0x10a>
 800c376:	eb08 0207 	add.w	r2, r8, r7
 800c37a:	1a9b      	subs	r3, r3, r2
 800c37c:	e000      	b.n	800c380 <Argus_Dca_Apply+0x3e8>
 800c37e:	4442      	add	r2, r8
 800c380:	ebb3 0308 	subs.w	r3, r3, r8
 800c384:	4617      	mov	r7, r2
 800c386:	dafa      	bge.n	800c37e <Argus_Dca_Apply+0x3e6>
 800c388:	e68b      	b.n	800c0a2 <Argus_Dca_Apply+0x10a>
 800c38a:	46b9      	mov	r9, r7
 800c38c:	e7b9      	b.n	800c302 <Argus_Dca_Apply+0x36a>
 800c38e:	bf00      	nop

0800c390 <Argus_Dca_RecoverLaserFailure>:
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4604      	mov	r4, r0
 800c394:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800c396:	f002 faf9 	bl	800e98c <Argus_Dev_GetStatus>
 800c39a:	f110 0f71 	cmn.w	r0, #113	; 0x71
 800c39e:	d002      	beq.n	800c3a6 <Argus_Dca_RecoverLaserFailure+0x16>
 800c3a0:	2501      	movs	r5, #1
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	bd38      	pop	{r3, r4, r5, pc}
 800c3a6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c3a8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c3ac:	8a99      	ldrh	r1, [r3, #20]
 800c3ae:	b179      	cbz	r1, 800c3d0 <Argus_Dca_RecoverLaserFailure+0x40>
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	1d20      	adds	r0, r4, #4
 800c3b4:	f7f9 f9a4 	bl	8005700 <Time_CheckTimeoutMSec>
 800c3b8:	b150      	cbz	r0, 800c3d0 <Argus_Dca_RecoverLaserFailure+0x40>
 800c3ba:	4629      	mov	r1, r5
 800c3bc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c3be:	f002 fad1 	bl	800e964 <Argus_Dev_ClearStatus>
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	b920      	cbnz	r0, 800c3d0 <Argus_Dca_RecoverLaserFailure+0x40>
 800c3c6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c3c8:	f002 ff04 	bl	800f1d4 <Argus_Dev_InvalidateAllRegisters>
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	bd38      	pop	{r3, r4, r5, pc}
 800c3d0:	f06f 0570 	mvn.w	r5, #112	; 0x70
 800c3d4:	e7e5      	b.n	800c3a2 <Argus_Dca_RecoverLaserFailure+0x12>
 800c3d6:	bf00      	nop

0800c3d8 <Argus_Dca_Evaluate>:
 800c3d8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800c3da:	f993 3000 	ldrsb.w	r3, [r3]
 800c3de:	b903      	cbnz	r3, 800c3e2 <Argus_Dca_Evaluate+0xa>
 800c3e0:	4770      	bx	lr
 800c3e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	b08b      	sub	sp, #44	; 0x2c
 800c3ea:	460d      	mov	r5, r1
 800c3ec:	f7f4 f918 	bl	8000620 <IRQ_LOCK>
 800c3f0:	f104 030c 	add.w	r3, r4, #12
 800c3f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3f8:	ab06      	add	r3, sp, #24
 800c3fa:	e883 0003 	stmia.w	r3, {r0, r1}
 800c3fe:	f104 0714 	add.w	r7, r4, #20
 800c402:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c406:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800c40a:	9301      	str	r3, [sp, #4]
 800c40c:	ae08      	add	r6, sp, #32
 800c40e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	f8bd b018 	ldrh.w	fp, [sp, #24]
 800c418:	f89d a01d 	ldrb.w	sl, [sp, #29]
 800c41c:	f99d 801e 	ldrsb.w	r8, [sp, #30]
 800c420:	e886 0003 	stmia.w	r6, {r0, r1}
 800c424:	f7f4 f8da 	bl	80005dc <IRQ_UNLOCK>
 800c428:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c42a:	f993 3000 	ldrsb.w	r3, [r3]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	dd33      	ble.n	800c49a <Argus_Dca_Evaluate+0xc2>
 800c432:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c434:	f8d3 9130 	ldr.w	r9, [r3, #304]	; 0x130
 800c438:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 800c43c:	b36b      	cbz	r3, 800c49a <Argus_Dca_Evaluate+0xc2>
 800c43e:	8aaa      	ldrh	r2, [r5, #20]
 800c440:	f895 1238 	ldrb.w	r1, [r5, #568]	; 0x238
 800c444:	9203      	str	r2, [sp, #12]
 800c446:	2a40      	cmp	r2, #64	; 0x40
 800c448:	bf38      	it	cc
 800c44a:	2240      	movcc	r2, #64	; 0x40
 800c44c:	fb03 fc02 	mul.w	ip, r3, r2
 800c450:	68a0      	ldr	r0, [r4, #8]
 800c452:	9002      	str	r0, [sp, #8]
 800c454:	07cb      	lsls	r3, r1, #31
 800c456:	f3cc 2c8f 	ubfx	ip, ip, #10, #16
 800c45a:	f140 814c 	bpl.w	800c6f6 <Argus_Dca_Evaluate+0x31e>
 800c45e:	2100      	movs	r1, #0
 800c460:	f505 730f 	add.w	r3, r5, #572	; 0x23c
 800c464:	f505 7e6f 	add.w	lr, r5, #956	; 0x3bc
 800c468:	e007      	b.n	800c47a <Argus_Dca_Evaluate+0xa2>
 800c46a:	f012 0f02 	tst.w	r2, #2
 800c46e:	bf18      	it	ne
 800c470:	2101      	movne	r1, #1
 800c472:	330c      	adds	r3, #12
 800c474:	4573      	cmp	r3, lr
 800c476:	f000 8159 	beq.w	800c72c <Argus_Dca_Evaluate+0x354>
 800c47a:	7a1a      	ldrb	r2, [r3, #8]
 800c47c:	07d0      	lsls	r0, r2, #31
 800c47e:	d4f8      	bmi.n	800c472 <Argus_Dca_Evaluate+0x9a>
 800c480:	88d8      	ldrh	r0, [r3, #6]
 800c482:	4560      	cmp	r0, ip
 800c484:	d9f1      	bls.n	800c46a <Argus_Dca_Evaluate+0x92>
 800c486:	9b02      	ldr	r3, [sp, #8]
 800c488:	b90b      	cbnz	r3, 800c48e <Argus_Dca_Evaluate+0xb6>
 800c48a:	6863      	ldr	r3, [r4, #4]
 800c48c:	b12b      	cbz	r3, 800c49a <Argus_Dca_Evaluate+0xc2>
 800c48e:	48c4      	ldr	r0, [pc, #784]	; (800c7a0 <Argus_Dca_Evaluate+0x3c8>)
 800c490:	f7f4 fcde 	bl	8000e50 <print>
 800c494:	2300      	movs	r3, #0
 800c496:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800c49a:	f8b5 33cc 	ldrh.w	r3, [r5, #972]	; 0x3cc
 800c49e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d003      	beq.n	800c4ae <Argus_Dca_Evaluate+0xd6>
 800c4a6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c4a8:	8891      	ldrh	r1, [r2, #4]
 800c4aa:	4299      	cmp	r1, r3
 800c4ac:	d327      	bcc.n	800c4fe <Argus_Dca_Evaluate+0x126>
 800c4ae:	682b      	ldr	r3, [r5, #0]
 800c4b0:	1d9a      	adds	r2, r3, #6
 800c4b2:	d045      	beq.n	800c540 <Argus_Dca_Evaluate+0x168>
 800c4b4:	3372      	adds	r3, #114	; 0x72
 800c4b6:	f000 8125 	beq.w	800c704 <Argus_Dca_Evaluate+0x32c>
 800c4ba:	f8b5 33c8 	ldrh.w	r3, [r5, #968]	; 0x3c8
 800c4be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d04a      	beq.n	800c55c <Argus_Dca_Evaluate+0x184>
 800c4c6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c4c8:	7812      	ldrb	r2, [r2, #0]
 800c4ca:	2a00      	cmp	r2, #0
 800c4cc:	d046      	beq.n	800c55c <Argus_Dca_Evaluate+0x184>
 800c4ce:	eb04 014a 	add.w	r1, r4, sl, lsl #1
 800c4d2:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800c4d4:	f8b1 2044 	ldrh.w	r2, [r1, #68]	; 0x44
 800c4d8:	fb08 f000 	mul.w	r0, r8, r0
 800c4dc:	1ad2      	subs	r2, r2, r3
 800c4de:	fa00 f282 	sxtah	r2, r0, r2
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	f340 8120 	ble.w	800c728 <Argus_Dca_Evaluate+0x350>
 800c4e8:	f8b1 104c 	ldrh.w	r1, [r1, #76]	; 0x4c
 800c4ec:	b292      	uxth	r2, r2
 800c4ee:	fb01 f202 	mul.w	r2, r1, r2
 800c4f2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800c4f6:	0c12      	lsrs	r2, r2, #16
 800c4f8:	f8a5 23ce 	strh.w	r2, [r5, #974]	; 0x3ce
 800c4fc:	e032      	b.n	800c564 <Argus_Dca_Evaluate+0x18c>
 800c4fe:	f04f 0900 	mov.w	r9, #0
 800c502:	7813      	ldrb	r3, [r2, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	f000 8153 	beq.w	800c7b0 <Argus_Dca_Evaluate+0x3d8>
 800c50a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c50c:	f993 3000 	ldrsb.w	r3, [r3]
 800c510:	2b00      	cmp	r3, #0
 800c512:	f340 814d 	ble.w	800c7b0 <Argus_Dca_Evaluate+0x3d8>
 800c516:	2300      	movs	r3, #0
 800c518:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800c51c:	7853      	ldrb	r3, [r2, #1]
 800c51e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800c522:	8bab      	ldrh	r3, [r5, #28]
 800c524:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c526:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c52a:	83ab      	strh	r3, [r5, #28]
 800c52c:	2132      	movs	r1, #50	; 0x32
 800c52e:	f002 fe5d 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800c532:	f119 0f71 	cmn.w	r9, #113	; 0x71
 800c536:	f000 8128 	beq.w	800c78a <Argus_Dca_Evaluate+0x3b2>
 800c53a:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 800c53e:	602b      	str	r3, [r5, #0]
 800c540:	f7f4 f86e 	bl	8000620 <IRQ_LOCK>
 800c544:	89e3      	ldrh	r3, [r4, #14]
 800c546:	b29b      	uxth	r3, r3
 800c548:	b11b      	cbz	r3, 800c552 <Argus_Dca_Evaluate+0x17a>
 800c54a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c54e:	e887 0003 	stmia.w	r7, {r0, r1}
 800c552:	f7f4 f843 	bl	80005dc <IRQ_UNLOCK>
 800c556:	b00b      	add	sp, #44	; 0x2c
 800c558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c55c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c560:	f8a5 23ce 	strh.w	r2, [r5, #974]	; 0x3ce
 800c564:	8aaa      	ldrh	r2, [r5, #20]
 800c566:	455a      	cmp	r2, fp
 800c568:	d1ea      	bne.n	800c540 <Argus_Dca_Evaluate+0x168>
 800c56a:	8baa      	ldrh	r2, [r5, #28]
 800c56c:	ebba 3f92 	cmp.w	sl, r2, lsr #14
 800c570:	d1e6      	bne.n	800c540 <Argus_Dca_Evaluate+0x168>
 800c572:	9800      	ldr	r0, [sp, #0]
 800c574:	f3c2 3101 	ubfx	r1, r2, #12, #2
 800c578:	4288      	cmp	r0, r1
 800c57a:	d1e1      	bne.n	800c540 <Argus_Dca_Evaluate+0x168>
 800c57c:	8ae9      	ldrh	r1, [r5, #22]
 800c57e:	9801      	ldr	r0, [sp, #4]
 800c580:	4281      	cmp	r1, r0
 800c582:	d1dd      	bne.n	800c540 <Argus_Dca_Evaluate+0x168>
 800c584:	eb04 010a 	add.w	r1, r4, sl
 800c588:	7ea8      	ldrb	r0, [r5, #26]
 800c58a:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
 800c58e:	eb01 0c08 	add.w	ip, r1, r8
 800c592:	4584      	cmp	ip, r0
 800c594:	d1d4      	bne.n	800c540 <Argus_Dca_Evaluate+0x168>
 800c596:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800c59a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800c59c:	9001      	str	r0, [sp, #4]
 800c59e:	4563      	cmp	r3, ip
 800c5a0:	f000 81c9 	beq.w	800c936 <Argus_Dca_Evaluate+0x55e>
 800c5a4:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
 800c5a8:	f899 0000 	ldrb.w	r0, [r9]
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	f000 81c2 	beq.w	800c936 <Argus_Dca_Evaluate+0x55e>
 800c5b2:	eb04 004a 	add.w	r0, r4, sl, lsl #1
 800c5b6:	fa5f fe88 	uxtb.w	lr, r8
 800c5ba:	f8b0 c044 	ldrh.w	ip, [r0, #68]	; 0x44
 800c5be:	9801      	ldr	r0, [sp, #4]
 800c5c0:	4471      	add	r1, lr
 800c5c2:	f990 0000 	ldrsb.w	r0, [r0]
 800c5c6:	9102      	str	r1, [sp, #8]
 800c5c8:	eba3 0c0c 	sub.w	ip, r3, ip
 800c5cc:	9005      	str	r0, [sp, #20]
 800c5ce:	fa0f f18c 	sxth.w	r1, ip
 800c5d2:	eb09 004a 	add.w	r0, r9, sl, lsl #1
 800c5d6:	9104      	str	r1, [sp, #16]
 800c5d8:	f99d 1008 	ldrsb.w	r1, [sp, #8]
 800c5dc:	9102      	str	r1, [sp, #8]
 800c5de:	8981      	ldrh	r1, [r0, #12]
 800c5e0:	9805      	ldr	r0, [sp, #20]
 800c5e2:	9103      	str	r1, [sp, #12]
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	f340 81ab 	ble.w	800c940 <Argus_Dca_Evaluate+0x568>
 800c5ea:	9802      	ldr	r0, [sp, #8]
 800c5ec:	f994 102c 	ldrsb.w	r1, [r4, #44]	; 0x2c
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	4281      	cmp	r1, r0
 800c5f4:	f300 8243 	bgt.w	800ca7e <Argus_Dca_Evaluate+0x6a6>
 800c5f8:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800c5fa:	f8b9 c006 	ldrh.w	ip, [r9, #6]
 800c5fe:	1ac0      	subs	r0, r0, r3
 800c600:	4560      	cmp	r0, ip
 800c602:	f340 823c 	ble.w	800ca7e <Argus_Dca_Evaluate+0x6a6>
 800c606:	2100      	movs	r1, #0
 800c608:	f042 0220 	orr.w	r2, r2, #32
 800c60c:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
 800c610:	f899 1001 	ldrb.w	r1, [r9, #1]
 800c614:	83aa      	strh	r2, [r5, #28]
 800c616:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
 800c61a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c61e:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 800c622:	f99d 0026 	ldrsb.w	r0, [sp, #38]	; 0x26
 800c626:	4421      	add	r1, r4
 800c628:	f891 c040 	ldrb.w	ip, [r1, #64]	; 0x40
 800c62c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800c62e:	eb00 010c 	add.w	r1, r0, ip
 800c632:	4291      	cmp	r1, r2
 800c634:	bfc8      	it	gt
 800c636:	eba2 020c 	subgt.w	r2, r2, ip
 800c63a:	9b02      	ldr	r3, [sp, #8]
 800c63c:	bfc8      	it	gt
 800c63e:	f88d 2026 	strbgt.w	r2, [sp, #38]	; 0x26
 800c642:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800c646:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c64a:	f8d4 c064 	ldr.w	ip, [r4, #100]	; 0x64
 800c64e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800c652:	f89c 3000 	ldrb.w	r3, [ip]
 800c656:	f8b4 9022 	ldrh.w	r9, [r4, #34]	; 0x22
 800c65a:	f8a4 9020 	strh.w	r9, [r4, #32]
 800c65e:	2b02      	cmp	r3, #2
 800c660:	f000 81d4 	beq.w	800ca0c <Argus_Dca_Evaluate+0x634>
 800c664:	2b01      	cmp	r3, #1
 800c666:	f000 81b4 	beq.w	800c9d2 <Argus_Dca_Evaluate+0x5fa>
 800c66a:	9b01      	ldr	r3, [sp, #4]
 800c66c:	f993 3000 	ldrsb.w	r3, [r3]
 800c670:	2b00      	cmp	r3, #0
 800c672:	f77f af65 	ble.w	800c540 <Argus_Dca_Evaluate+0x168>
 800c676:	f04f 0900 	mov.w	r9, #0
 800c67a:	f505 72c0 	add.w	r2, r5, #384	; 0x180
 800c67e:	46c8      	mov	r8, r9
 800c680:	e02d      	b.n	800c6de <Argus_Dca_Evaluate+0x306>
 800c682:	f8b5 3242 	ldrh.w	r3, [r5, #578]	; 0x242
 800c686:	4598      	cmp	r8, r3
 800c688:	bfb8      	it	lt
 800c68a:	4698      	movlt	r8, r3
 800c68c:	f895 3250 	ldrb.w	r3, [r5, #592]	; 0x250
 800c690:	f013 0f11 	tst.w	r3, #17
 800c694:	d107      	bne.n	800c6a6 <Argus_Dca_Evaluate+0x2ce>
 800c696:	0798      	lsls	r0, r3, #30
 800c698:	f100 808e 	bmi.w	800c7b8 <Argus_Dca_Evaluate+0x3e0>
 800c69c:	f8b5 324e 	ldrh.w	r3, [r5, #590]	; 0x24e
 800c6a0:	4598      	cmp	r8, r3
 800c6a2:	bfb8      	it	lt
 800c6a4:	4698      	movlt	r8, r3
 800c6a6:	f895 325c 	ldrb.w	r3, [r5, #604]	; 0x25c
 800c6aa:	f013 0f11 	tst.w	r3, #17
 800c6ae:	d107      	bne.n	800c6c0 <Argus_Dca_Evaluate+0x2e8>
 800c6b0:	0799      	lsls	r1, r3, #30
 800c6b2:	f100 8086 	bmi.w	800c7c2 <Argus_Dca_Evaluate+0x3ea>
 800c6b6:	f8b5 325a 	ldrh.w	r3, [r5, #602]	; 0x25a
 800c6ba:	4598      	cmp	r8, r3
 800c6bc:	bfb8      	it	lt
 800c6be:	4698      	movlt	r8, r3
 800c6c0:	f895 3268 	ldrb.w	r3, [r5, #616]	; 0x268
 800c6c4:	f013 0f11 	tst.w	r3, #17
 800c6c8:	d106      	bne.n	800c6d8 <Argus_Dca_Evaluate+0x300>
 800c6ca:	079b      	lsls	r3, r3, #30
 800c6cc:	d47e      	bmi.n	800c7cc <Argus_Dca_Evaluate+0x3f4>
 800c6ce:	f8b5 3266 	ldrh.w	r3, [r5, #614]	; 0x266
 800c6d2:	4598      	cmp	r8, r3
 800c6d4:	bfb8      	it	lt
 800c6d6:	4698      	movlt	r8, r3
 800c6d8:	3530      	adds	r5, #48	; 0x30
 800c6da:	4295      	cmp	r5, r2
 800c6dc:	d07b      	beq.n	800c7d6 <Argus_Dca_Evaluate+0x3fe>
 800c6de:	f895 3244 	ldrb.w	r3, [r5, #580]	; 0x244
 800c6e2:	f013 0f11 	tst.w	r3, #17
 800c6e6:	d1d1      	bne.n	800c68c <Argus_Dca_Evaluate+0x2b4>
 800c6e8:	079b      	lsls	r3, r3, #30
 800c6ea:	d5ca      	bpl.n	800c682 <Argus_Dca_Evaluate+0x2aa>
 800c6ec:	f109 0901 	add.w	r9, r9, #1
 800c6f0:	fa5f f989 	uxtb.w	r9, r9
 800c6f4:	e7ca      	b.n	800c68c <Argus_Dca_Evaluate+0x2b4>
 800c6f6:	f8b5 3236 	ldrh.w	r3, [r5, #566]	; 0x236
 800c6fa:	4563      	cmp	r3, ip
 800c6fc:	d841      	bhi.n	800c782 <Argus_Dca_Evaluate+0x3aa>
 800c6fe:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800c702:	e6ad      	b.n	800c460 <Argus_Dca_Evaluate+0x88>
 800c704:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c706:	781a      	ldrb	r2, [r3, #0]
 800c708:	2a00      	cmp	r2, #0
 800c70a:	f43f af19 	beq.w	800c540 <Argus_Dca_Evaluate+0x168>
 800c70e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800c710:	f992 2000 	ldrsb.w	r2, [r2]
 800c714:	2a00      	cmp	r2, #0
 800c716:	f77f af13 	ble.w	800c540 <Argus_Dca_Evaluate+0x168>
 800c71a:	2200      	movs	r2, #0
 800c71c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 800c720:	785b      	ldrb	r3, [r3, #1]
 800c722:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800c726:	e70b      	b.n	800c540 <Argus_Dca_Evaluate+0x168>
 800c728:	2200      	movs	r2, #0
 800c72a:	e6e5      	b.n	800c4f8 <Argus_Dca_Evaluate+0x120>
 800c72c:	8c23      	ldrh	r3, [r4, #32]
 800c72e:	9a03      	ldr	r2, [sp, #12]
 800c730:	4293      	cmp	r3, r2
 800c732:	d00d      	beq.n	800c750 <Argus_Dca_Evaluate+0x378>
 800c734:	9b02      	ldr	r3, [sp, #8]
 800c736:	b9ab      	cbnz	r3, 800c764 <Argus_Dca_Evaluate+0x38c>
 800c738:	6863      	ldr	r3, [r4, #4]
 800c73a:	b99b      	cbnz	r3, 800c764 <Argus_Dca_Evaluate+0x38c>
 800c73c:	2900      	cmp	r1, #0
 800c73e:	f43f aeac 	beq.w	800c49a <Argus_Dca_Evaluate+0xc2>
 800c742:	4818      	ldr	r0, [pc, #96]	; (800c7a4 <Argus_Dca_Evaluate+0x3cc>)
 800c744:	f7f4 fb84 	bl	8000e50 <print>
 800c748:	1d20      	adds	r0, r4, #4
 800c74a:	f7f8 fe97 	bl	800547c <Time_GetNow>
 800c74e:	e6a4      	b.n	800c49a <Argus_Dca_Evaluate+0xc2>
 800c750:	8bab      	ldrh	r3, [r5, #28]
 800c752:	f3c3 3301 	ubfx	r3, r3, #12, #2
 800c756:	2b03      	cmp	r3, #3
 800c758:	d1ec      	bne.n	800c734 <Argus_Dca_Evaluate+0x35c>
 800c75a:	9b02      	ldr	r3, [sp, #8]
 800c75c:	b913      	cbnz	r3, 800c764 <Argus_Dca_Evaluate+0x38c>
 800c75e:	6863      	ldr	r3, [r4, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d0ee      	beq.n	800c742 <Argus_Dca_Evaluate+0x36a>
 800c764:	1d23      	adds	r3, r4, #4
 800c766:	4618      	mov	r0, r3
 800c768:	f8b9 1012 	ldrh.w	r1, [r9, #18]
 800c76c:	9302      	str	r3, [sp, #8]
 800c76e:	f7f8 ffc7 	bl	8005700 <Time_CheckTimeoutMSec>
 800c772:	9b02      	ldr	r3, [sp, #8]
 800c774:	2800      	cmp	r0, #0
 800c776:	f040 80bd 	bne.w	800c8f4 <Argus_Dca_Evaluate+0x51c>
 800c77a:	480b      	ldr	r0, [pc, #44]	; (800c7a8 <Argus_Dca_Evaluate+0x3d0>)
 800c77c:	f7f4 fb68 	bl	8000e50 <print>
 800c780:	e68b      	b.n	800c49a <Argus_Dca_Evaluate+0xc2>
 800c782:	2800      	cmp	r0, #0
 800c784:	f47f ae83 	bne.w	800c48e <Argus_Dca_Evaluate+0xb6>
 800c788:	e67f      	b.n	800c48a <Argus_Dca_Evaluate+0xb2>
 800c78a:	f8c5 9000 	str.w	r9, [r5]
 800c78e:	4807      	ldr	r0, [pc, #28]	; (800c7ac <Argus_Dca_Evaluate+0x3d4>)
 800c790:	f7f4 fb5e 	bl	8000e50 <print>
 800c794:	682b      	ldr	r3, [r5, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	f47f aed2 	bne.w	800c540 <Argus_Dca_Evaluate+0x168>
 800c79c:	e68d      	b.n	800c4ba <Argus_Dca_Evaluate+0xe2>
 800c79e:	bf00      	nop
 800c7a0:	08019a80 	.word	0x08019a80
 800c7a4:	08019ad8 	.word	0x08019ad8
 800c7a8:	08019aa8 	.word	0x08019aa8
 800c7ac:	08019b10 	.word	0x08019b10
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800c7b6:	e6b4      	b.n	800c522 <Argus_Dca_Evaluate+0x14a>
 800c7b8:	f109 0901 	add.w	r9, r9, #1
 800c7bc:	fa5f f989 	uxtb.w	r9, r9
 800c7c0:	e771      	b.n	800c6a6 <Argus_Dca_Evaluate+0x2ce>
 800c7c2:	f109 0901 	add.w	r9, r9, #1
 800c7c6:	fa5f f989 	uxtb.w	r9, r9
 800c7ca:	e779      	b.n	800c6c0 <Argus_Dca_Evaluate+0x2e8>
 800c7cc:	f109 0901 	add.w	r9, r9, #1
 800c7d0:	fa5f f989 	uxtb.w	r9, r9
 800c7d4:	e780      	b.n	800c6d8 <Argus_Dca_Evaluate+0x300>
 800c7d6:	9b00      	ldr	r3, [sp, #0]
 800c7d8:	fa0b f203 	lsl.w	r2, fp, r3
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4620      	mov	r0, r4
 800c7e0:	fa02 f20a 	lsl.w	r2, r2, sl
 800c7e4:	f7fc fdb4 	bl	8009350 <SetIntegrationEnergy>
 800c7e8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800c7ea:	78c3      	ldrb	r3, [r0, #3]
 800c7ec:	4599      	cmp	r9, r3
 800c7ee:	4649      	mov	r1, r9
 800c7f0:	f0c0 80f9 	bcc.w	800c9e6 <Argus_Dca_Evaluate+0x60e>
 800c7f4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c7f8:	8981      	ldrh	r1, [r0, #12]
 800c7fa:	b923      	cbnz	r3, 800c806 <Argus_Dca_Evaluate+0x42e>
 800c7fc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800c800:	428a      	cmp	r2, r1
 800c802:	f000 82e9 	beq.w	800cdd8 <Argus_Dca_Evaluate+0xa00>
 800c806:	7d03      	ldrb	r3, [r0, #20]
 800c808:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800c80c:	2000      	movs	r0, #0
 800c80e:	f8ad 1020 	strh.w	r1, [sp, #32]
 800c812:	460a      	mov	r2, r1
 800c814:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
 800c818:	455a      	cmp	r2, fp
 800c81a:	d007      	beq.n	800c82c <Argus_Dca_Evaluate+0x454>
 800c81c:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 800c820:	b289      	uxth	r1, r1
 800c822:	2900      	cmp	r1, #0
 800c824:	f000 80ae 	beq.w	800c984 <Argus_Dca_Evaluate+0x5ac>
 800c828:	f8ad 1020 	strh.w	r1, [sp, #32]
 800c82c:	2b03      	cmp	r3, #3
 800c82e:	bf08      	it	eq
 800c830:	2300      	moveq	r3, #0
 800c832:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c834:	bf08      	it	eq
 800c836:	f88d 3026 	strbeq.w	r3, [sp, #38]	; 0x26
 800c83a:	f002 fcc7 	bl	800f1cc <Argus_Dev_GetCfg>
 800c83e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c840:	2900      	cmp	r1, #0
 800c842:	d055      	beq.n	800c8f0 <Argus_Dca_Evaluate+0x518>
 800c844:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c848:	e9d0 2524 	ldrd	r2, r5, [r0, #144]	; 0x90
 800c84c:	099b      	lsrs	r3, r3, #6
 800c84e:	bf08      	it	eq
 800c850:	2301      	moveq	r3, #1
 800c852:	fb05 2303 	mla	r3, r5, r3, r2
 800c856:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800c85a:	bf3a      	itte	cc
 800c85c:	f503 5300 	addcc.w	r3, r3, #8192	; 0x2000
 800c860:	0b9b      	lsrcc	r3, r3, #14
 800c862:	f44f 2380 	movcs.w	r3, #262144	; 0x40000
 800c866:	4299      	cmp	r1, r3
 800c868:	d342      	bcc.n	800c8f0 <Argus_Dca_Evaluate+0x518>
 800c86a:	fbb1 f1f3 	udiv	r1, r1, r3
 800c86e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c872:	bf28      	it	cs
 800c874:	f44f 6180 	movcs.w	r1, #1024	; 0x400
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800c87e:	1c58      	adds	r0, r3, #1
 800c880:	f43f ae5e 	beq.w	800c540 <Argus_Dca_Evaluate+0x168>
 800c884:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 800c888:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 800c88c:	18a5      	adds	r5, r4, r2
 800c88e:	ea5f 1098 	movs.w	r0, r8, lsr #6
 800c892:	f895 e03c 	ldrb.w	lr, [r5, #60]	; 0x3c
 800c896:	bf14      	ite	ne
 800c898:	4684      	movne	ip, r0
 800c89a:	f04f 0c01 	moveq.w	ip, #1
 800c89e:	f1be 0f00 	cmp.w	lr, #0
 800c8a2:	bf14      	ite	ne
 800c8a4:	4675      	movne	r5, lr
 800c8a6:	2501      	moveq	r5, #1
 800c8a8:	fb0c f905 	mul.w	r9, ip, r5
 800c8ac:	454b      	cmp	r3, r9
 800c8ae:	4660      	mov	r0, ip
 800c8b0:	d25d      	bcs.n	800c96e <Argus_Dca_Evaluate+0x596>
 800c8b2:	42ab      	cmp	r3, r5
 800c8b4:	d356      	bcc.n	800c964 <Argus_Dca_Evaluate+0x58c>
 800c8b6:	fbb3 fcf5 	udiv	ip, r3, r5
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	ea4f 108c 	mov.w	r0, ip, lsl #6
 800c8c0:	4540      	cmp	r0, r8
 800c8c2:	d201      	bcs.n	800c8c8 <Argus_Dca_Evaluate+0x4f0>
 800c8c4:	f8ad 0020 	strh.w	r0, [sp, #32]
 800c8c8:	4299      	cmp	r1, r3
 800c8ca:	bf88      	it	hi
 800c8cc:	f8ad 3022 	strhhi.w	r3, [sp, #34]	; 0x22
 800c8d0:	45ae      	cmp	lr, r5
 800c8d2:	f67f ae35 	bls.w	800c540 <Argus_Dca_Evaluate+0x168>
 800c8d6:	b90a      	cbnz	r2, 800c8dc <Argus_Dca_Evaluate+0x504>
 800c8d8:	e632      	b.n	800c540 <Argus_Dca_Evaluate+0x168>
 800c8da:	b132      	cbz	r2, 800c8ea <Argus_Dca_Evaluate+0x512>
 800c8dc:	3a01      	subs	r2, #1
 800c8de:	b2d2      	uxtb	r2, r2
 800c8e0:	18a3      	adds	r3, r4, r2
 800c8e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8e6:	42ab      	cmp	r3, r5
 800c8e8:	d8f7      	bhi.n	800c8da <Argus_Dca_Evaluate+0x502>
 800c8ea:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800c8ee:	e627      	b.n	800c540 <Argus_Dca_Evaluate+0x168>
 800c8f0:	2101      	movs	r1, #1
 800c8f2:	e7c1      	b.n	800c878 <Argus_Dca_Evaluate+0x4a0>
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7f8 fdc1 	bl	800547c <Time_GetNow>
 800c8fa:	f06f 0170 	mvn.w	r1, #112	; 0x70
 800c8fe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c900:	f002 f82e 	bl	800e960 <Argus_Dev_SetError>
 800c904:	f8b5 33cc 	ldrh.w	r3, [r5, #972]	; 0x3cc
 800c908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d007      	beq.n	800c920 <Argus_Dca_Evaluate+0x548>
 800c910:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c912:	8891      	ldrh	r1, [r2, #4]
 800c914:	4299      	cmp	r1, r3
 800c916:	bf38      	it	cc
 800c918:	f06f 0970 	mvncc.w	r9, #112	; 0x70
 800c91c:	f4ff adf1 	bcc.w	800c502 <Argus_Dca_Evaluate+0x12a>
 800c920:	f06f 0370 	mvn.w	r3, #112	; 0x70
 800c924:	602b      	str	r3, [r5, #0]
 800c926:	48c0      	ldr	r0, [pc, #768]	; (800cc28 <Argus_Dca_Evaluate+0x850>)
 800c928:	f7f4 fa92 	bl	8000e50 <print>
 800c92c:	682b      	ldr	r3, [r5, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	f47f ae06 	bne.w	800c540 <Argus_Dca_Evaluate+0x168>
 800c934:	e5c1      	b.n	800c4ba <Argus_Dca_Evaluate+0xe2>
 800c936:	9b01      	ldr	r3, [sp, #4]
 800c938:	7d9b      	ldrb	r3, [r3, #22]
 800c93a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
 800c93e:	e682      	b.n	800c646 <Argus_Dca_Evaluate+0x26e>
 800c940:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 800c944:	428a      	cmp	r2, r1
 800c946:	f340 81a0 	ble.w	800cc8a <Argus_Dca_Evaluate+0x8b2>
 800c94a:	f118 0f3e 	cmn.w	r8, #62	; 0x3e
 800c94e:	f2c0 8091 	blt.w	800ca74 <Argus_Dca_Evaluate+0x69c>
 800c952:	f10e 38ff 	add.w	r8, lr, #4294967295
 800c956:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800c95a:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 800c95e:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c962:	e65e      	b.n	800c622 <Argus_Dca_Evaluate+0x24a>
 800c964:	f04f 0c01 	mov.w	ip, #1
 800c968:	461d      	mov	r5, r3
 800c96a:	4663      	mov	r3, ip
 800c96c:	e7a6      	b.n	800c8bc <Argus_Dca_Evaluate+0x4e4>
 800c96e:	fbb3 f3f9 	udiv	r3, r3, r9
 800c972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c976:	d9a1      	bls.n	800c8bc <Argus_Dca_Evaluate+0x4e4>
 800c978:	0180      	lsls	r0, r0, #6
 800c97a:	4540      	cmp	r0, r8
 800c97c:	d2a8      	bcs.n	800c8d0 <Argus_Dca_Evaluate+0x4f8>
 800c97e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c982:	e79f      	b.n	800c8c4 <Argus_Dca_Evaluate+0x4ec>
 800c984:	7fa1      	ldrb	r1, [r4, #30]
 800c986:	0288      	lsls	r0, r1, #10
 800c988:	b301      	cbz	r1, 800c9cc <Argus_Dca_Evaluate+0x5f4>
 800c98a:	fb01 f202 	mul.w	r2, r1, r2
 800c98e:	3220      	adds	r2, #32
 800c990:	0992      	lsrs	r2, r2, #6
 800c992:	2a01      	cmp	r2, #1
 800c994:	4605      	mov	r5, r0
 800c996:	bf38      	it	cc
 800c998:	2201      	movcc	r2, #1
 800c99a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c99e:	e001      	b.n	800c9a4 <Argus_Dca_Evaluate+0x5cc>
 800c9a0:	0040      	lsls	r0, r0, #1
 800c9a2:	2500      	movs	r5, #0
 800c9a4:	42aa      	cmp	r2, r5
 800c9a6:	d8fb      	bhi.n	800c9a0 <Argus_Dca_Evaluate+0x5c8>
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	f000 826b 	beq.w	800ce84 <Argus_Dca_Evaluate+0xaac>
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	e000      	b.n	800c9b4 <Argus_Dca_Evaluate+0x5dc>
 800c9b2:	b152      	cbz	r2, 800c9ca <Argus_Dca_Evaluate+0x5f2>
 800c9b4:	42aa      	cmp	r2, r5
 800c9b6:	bf24      	itt	cs
 800c9b8:	1b52      	subcs	r2, r2, r5
 800c9ba:	4301      	orrcs	r1, r0
 800c9bc:	0840      	lsrs	r0, r0, #1
 800c9be:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c9c2:	d1f6      	bne.n	800c9b2 <Argus_Dca_Evaluate+0x5da>
 800c9c4:	4295      	cmp	r5, r2
 800c9c6:	d800      	bhi.n	800c9ca <Argus_Dca_Evaluate+0x5f2>
 800c9c8:	3101      	adds	r1, #1
 800c9ca:	4608      	mov	r0, r1
 800c9cc:	f8ad 0020 	strh.w	r0, [sp, #32]
 800c9d0:	e72c      	b.n	800c82c <Argus_Dca_Evaluate+0x454>
 800c9d2:	9b01      	ldr	r3, [sp, #4]
 800c9d4:	895b      	ldrh	r3, [r3, #10]
 800c9d6:	4599      	cmp	r9, r3
 800c9d8:	f67f ae47 	bls.w	800c66a <Argus_Dca_Evaluate+0x292>
 800c9dc:	7fe2      	ldrb	r2, [r4, #31]
 800c9de:	8423      	strh	r3, [r4, #32]
 800c9e0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 800c9e4:	e641      	b.n	800c66a <Argus_Dca_Evaluate+0x292>
 800c9e6:	7885      	ldrb	r5, [r0, #2]
 800c9e8:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800c9ec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800c9f0:	45a9      	cmp	r9, r5
 800c9f2:	f0c0 80a2 	bcc.w	800cb3a <Argus_Dca_Evaluate+0x762>
 800c9f6:	7d01      	ldrb	r1, [r0, #20]
 800c9f8:	4299      	cmp	r1, r3
 800c9fa:	d376      	bcc.n	800caea <Argus_Dca_Evaluate+0x712>
 800c9fc:	8981      	ldrh	r1, [r0, #12]
 800c9fe:	4291      	cmp	r1, r2
 800ca00:	f080 8120 	bcs.w	800cc44 <Argus_Dca_Evaluate+0x86c>
 800ca04:	0852      	lsrs	r2, r2, #1
 800ca06:	f8ad 2020 	strh.w	r2, [sp, #32]
 800ca0a:	e705      	b.n	800c818 <Argus_Dca_Evaluate+0x440>
 800ca0c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d06f      	beq.n	800caf4 <Argus_Dca_Evaluate+0x71c>
 800ca14:	f8b5 23ce 	ldrh.w	r2, [r5, #974]	; 0x3ce
 800ca18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ca1c:	428a      	cmp	r2, r1
 800ca1e:	d069      	beq.n	800caf4 <Argus_Dca_Evaluate+0x71c>
 800ca20:	fb03 f302 	mul.w	r3, r3, r2
 800ca24:	019b      	lsls	r3, r3, #6
 800ca26:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800ca2a:	9a01      	ldr	r2, [sp, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	89d2      	ldrh	r2, [r2, #14]
 800ca30:	f340 810f 	ble.w	800cc52 <Argus_Dca_Evaluate+0x87a>
 800ca34:	4618      	mov	r0, r3
 800ca36:	2100      	movs	r1, #0
 800ca38:	e000      	b.n	800ca3c <Argus_Dca_Evaluate+0x664>
 800ca3a:	3101      	adds	r1, #1
 800ca3c:	0840      	lsrs	r0, r0, #1
 800ca3e:	d1fc      	bne.n	800ca3a <Argus_Dca_Evaluate+0x662>
 800ca40:	f101 3eff 	add.w	lr, r1, #4294967295
 800ca44:	fa23 f30e 	lsr.w	r3, r3, lr
 800ca48:	2b03      	cmp	r3, #3
 800ca4a:	bf14      	ite	ne
 800ca4c:	460b      	movne	r3, r1
 800ca4e:	1c4b      	addeq	r3, r1, #1
 800ca50:	f1c3 0310 	rsb	r3, r3, #16
 800ca54:	9901      	ldr	r1, [sp, #4]
 800ca56:	b25b      	sxtb	r3, r3
 800ca58:	469e      	mov	lr, r3
 800ca5a:	8949      	ldrh	r1, [r1, #10]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f000 8188 	beq.w	800cd72 <Argus_Dca_Evaluate+0x99a>
 800ca62:	2b1f      	cmp	r3, #31
 800ca64:	f200 810d 	bhi.w	800cc82 <Argus_Dca_Evaluate+0x8aa>
 800ca68:	f103 38ff 	add.w	r8, r3, #4294967295
 800ca6c:	2001      	movs	r0, #1
 800ca6e:	fa00 f008 	lsl.w	r0, r0, r8
 800ca72:	e0f5      	b.n	800cc60 <Argus_Dca_Evaluate+0x888>
 800ca74:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 800ca78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca7c:	e5d1      	b.n	800c622 <Argus_Dca_Evaluate+0x24a>
 800ca7e:	9802      	ldr	r0, [sp, #8]
 800ca80:	4288      	cmp	r0, r1
 800ca82:	f340 8083 	ble.w	800cb8c <Argus_Dca_Evaluate+0x7b4>
 800ca86:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800ca88:	9005      	str	r0, [sp, #20]
 800ca8a:	9802      	ldr	r0, [sp, #8]
 800ca8c:	f8b4 c034 	ldrh.w	ip, [r4, #52]	; 0x34
 800ca90:	1a41      	subs	r1, r0, r1
 800ca92:	9805      	ldr	r0, [sp, #20]
 800ca94:	fb0c f101 	mul.w	r1, ip, r1
 800ca98:	1a18      	subs	r0, r3, r0
 800ca9a:	4288      	cmp	r0, r1
 800ca9c:	f2c0 8084 	blt.w	800cba8 <Argus_Dca_Evaluate+0x7d0>
 800caa0:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 800caa4:	428a      	cmp	r2, r1
 800caa6:	f340 817e 	ble.w	800cda6 <Argus_Dca_Evaluate+0x9ce>
 800caaa:	f1ba 0f03 	cmp.w	sl, #3
 800caae:	f000 816f 	beq.w	800cd90 <Argus_Dca_Evaluate+0x9b8>
 800cab2:	44d1      	add	r9, sl
 800cab4:	f899 2008 	ldrb.w	r2, [r9, #8]
 800cab8:	4590      	cmp	r8, r2
 800caba:	f280 8169 	bge.w	800cd90 <Argus_Dca_Evaluate+0x9b8>
 800cabe:	9a01      	ldr	r2, [sp, #4]
 800cac0:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 800cac4:	7d92      	ldrb	r2, [r2, #22]
 800cac6:	4552      	cmp	r2, sl
 800cac8:	bf84      	itt	hi
 800caca:	f10a 0201 	addhi.w	r2, sl, #1
 800cace:	b2d2      	uxtbhi	r2, r2
 800cad0:	f10e 38ff 	add.w	r8, lr, #4294967295
 800cad4:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
 800cad8:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800cadc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cae0:	e59f      	b.n	800c622 <Argus_Dca_Evaluate+0x24a>
 800cae2:	7d01      	ldrb	r1, [r0, #20]
 800cae4:	4299      	cmp	r1, r3
 800cae6:	f4bf ae97 	bcs.w	800c818 <Argus_Dca_Evaluate+0x440>
 800caea:	3b01      	subs	r3, #1
 800caec:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	e691      	b.n	800c818 <Argus_Dca_Evaluate+0x440>
 800caf4:	9b01      	ldr	r3, [sp, #4]
 800caf6:	8959      	ldrh	r1, [r3, #10]
 800caf8:	8aab      	ldrh	r3, [r5, #20]
 800cafa:	428b      	cmp	r3, r1
 800cafc:	d372      	bcc.n	800cbe4 <Argus_Dca_Evaluate+0x80c>
 800cafe:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d063      	beq.n	800cbce <Argus_Dca_Evaluate+0x7f6>
 800cb06:	3b01      	subs	r3, #1
 800cb08:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 800cb0c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800cb10:	9901      	ldr	r1, [sp, #4]
 800cb12:	89ca      	ldrh	r2, [r1, #14]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d054      	beq.n	800cbc2 <Argus_Dca_Evaluate+0x7ea>
 800cb18:	2b1f      	cmp	r3, #31
 800cb1a:	d94d      	bls.n	800cbb8 <Argus_Dca_Evaluate+0x7e0>
 800cb1c:	894b      	ldrh	r3, [r1, #10]
 800cb1e:	7fe2      	ldrb	r2, [r4, #31]
 800cb20:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800cb24:	461a      	mov	r2, r3
 800cb26:	8c23      	ldrh	r3, [r4, #32]
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	f67f ad9e 	bls.w	800c66a <Argus_Dca_Evaluate+0x292>
 800cb2e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800cb32:	8422      	strh	r2, [r4, #32]
 800cb34:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800cb38:	e597      	b.n	800c66a <Argus_Dca_Evaluate+0x292>
 800cb3a:	7845      	ldrb	r5, [r0, #1]
 800cb3c:	45a9      	cmp	r9, r5
 800cb3e:	f080 8190 	bcs.w	800ce62 <Argus_Dca_Evaluate+0xa8a>
 800cb42:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800cb46:	fa1f f888 	uxth.w	r8, r8
 800cb4a:	45e0      	cmp	r8, ip
 800cb4c:	f200 8189 	bhi.w	800ce62 <Argus_Dca_Evaluate+0xa8a>
 800cb50:	2900      	cmp	r1, #0
 800cb52:	d1c6      	bne.n	800cae2 <Argus_Dca_Evaluate+0x70a>
 800cb54:	8885      	ldrh	r5, [r0, #4]
 800cb56:	45a8      	cmp	r8, r5
 800cb58:	d8c3      	bhi.n	800cae2 <Argus_Dca_Evaluate+0x70a>
 800cb5a:	f8b0 e006 	ldrh.w	lr, [r0, #6]
 800cb5e:	45c6      	cmp	lr, r8
 800cb60:	f240 80f4 	bls.w	800cd4c <Argus_Dca_Evaluate+0x974>
 800cb64:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
 800cb68:	f8b4 e020 	ldrh.w	lr, [r4, #32]
 800cb6c:	2d02      	cmp	r5, #2
 800cb6e:	f240 809f 	bls.w	800ccb0 <Argus_Dca_Evaluate+0x8d8>
 800cb72:	4596      	cmp	lr, r2
 800cb74:	f200 809c 	bhi.w	800ccb0 <Argus_Dca_Evaluate+0x8d8>
 800cb78:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 800cb7c:	4299      	cmp	r1, r3
 800cb7e:	f67f ae4b 	bls.w	800c818 <Argus_Dca_Evaluate+0x440>
 800cb82:	3301      	adds	r3, #1
 800cb84:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	e645      	b.n	800c818 <Argus_Dca_Evaluate+0x440>
 800cb8c:	da88      	bge.n	800caa0 <Argus_Dca_Evaluate+0x6c8>
 800cb8e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800cb90:	9005      	str	r0, [sp, #20]
 800cb92:	9802      	ldr	r0, [sp, #8]
 800cb94:	f8b4 c034 	ldrh.w	ip, [r4, #52]	; 0x34
 800cb98:	1a09      	subs	r1, r1, r0
 800cb9a:	9805      	ldr	r0, [sp, #20]
 800cb9c:	fb0c f101 	mul.w	r1, ip, r1
 800cba0:	1ac0      	subs	r0, r0, r3
 800cba2:	4288      	cmp	r0, r1
 800cba4:	f6bf af7c 	bge.w	800caa0 <Argus_Dca_Evaluate+0x6c8>
 800cba8:	f1ba 0f00 	cmp.w	sl, #0
 800cbac:	d12b      	bne.n	800cc06 <Argus_Dca_Evaluate+0x82e>
 800cbae:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
 800cbb2:	f042 0220 	orr.w	r2, r2, #32
 800cbb6:	e52b      	b.n	800c610 <Argus_Dca_Evaluate+0x238>
 800cbb8:	1e58      	subs	r0, r3, #1
 800cbba:	2101      	movs	r1, #1
 800cbbc:	4081      	lsls	r1, r0
 800cbbe:	440a      	add	r2, r1
 800cbc0:	40da      	lsrs	r2, r3
 800cbc2:	9b01      	ldr	r3, [sp, #4]
 800cbc4:	895b      	ldrh	r3, [r3, #10]
 800cbc6:	b292      	uxth	r2, r2
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d8ac      	bhi.n	800cb26 <Argus_Dca_Evaluate+0x74e>
 800cbcc:	e7a7      	b.n	800cb1e <Argus_Dca_Evaluate+0x746>
 800cbce:	f8b5 23d0 	ldrh.w	r2, [r5, #976]	; 0x3d0
 800cbd2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800cbd4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800cbd8:	4291      	cmp	r1, r2
 800cbda:	d929      	bls.n	800cc30 <Argus_Dca_Evaluate+0x858>
 800cbdc:	bb33      	cbnz	r3, 800cc2c <Argus_Dca_Evaluate+0x854>
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	89da      	ldrh	r2, [r3, #14]
 800cbe2:	e7ee      	b.n	800cbc2 <Argus_Dca_Evaluate+0x7ea>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 800cbea:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800cbee:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800cbf0:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
 800cbf4:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 800cbf8:	f7fa fef2 	bl	80079e0 <Argus_Eval_ResetShotNoiseAmplitudeEMA>
 800cbfc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800cbfe:	9301      	str	r3, [sp, #4]
 800cc00:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800cc04:	e784      	b.n	800cb10 <Argus_Dca_Evaluate+0x738>
 800cc06:	9a01      	ldr	r2, [sp, #4]
 800cc08:	7d52      	ldrb	r2, [r2, #21]
 800cc0a:	4552      	cmp	r2, sl
 800cc0c:	d202      	bcs.n	800cc14 <Argus_Dca_Evaluate+0x83c>
 800cc0e:	f10a 32ff 	add.w	r2, sl, #4294967295
 800cc12:	b2d2      	uxtb	r2, r2
 800cc14:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
 800cc18:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800cc1c:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 800cc20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc24:	e4fd      	b.n	800c622 <Argus_Dca_Evaluate+0x24a>
 800cc26:	bf00      	nop
 800cc28:	08019ba4 	.word	0x08019ba4
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	e7da      	b.n	800cbe6 <Argus_Dca_Evaluate+0x80e>
 800cc30:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800cc32:	4291      	cmp	r1, r2
 800cc34:	f4bf af6c 	bcs.w	800cb10 <Argus_Dca_Evaluate+0x738>
 800cc38:	7fe2      	ldrb	r2, [r4, #31]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	f67f af68 	bls.w	800cb10 <Argus_Dca_Evaluate+0x738>
 800cc40:	3301      	adds	r3, #1
 800cc42:	e7d0      	b.n	800cbe6 <Argus_Dca_Evaluate+0x80e>
 800cc44:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 800cc48:	b1b1      	cbz	r1, 800cc78 <Argus_Dca_Evaluate+0x8a0>
 800cc4a:	3901      	subs	r1, #1
 800cc4c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800cc50:	e5e2      	b.n	800c818 <Argus_Dca_Evaluate+0x440>
 800cc52:	9b01      	ldr	r3, [sp, #4]
 800cc54:	f04f 0e10 	mov.w	lr, #16
 800cc58:	8959      	ldrh	r1, [r3, #10]
 800cc5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cc5e:	4673      	mov	r3, lr
 800cc60:	4402      	add	r2, r0
 800cc62:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc66:	b292      	uxth	r2, r2
 800cc68:	428a      	cmp	r2, r1
 800cc6a:	d90a      	bls.n	800cc82 <Argus_Dca_Evaluate+0x8aa>
 800cc6c:	4591      	cmp	r9, r2
 800cc6e:	bf84      	itt	hi
 800cc70:	f88d 3027 	strbhi.w	r3, [sp, #39]	; 0x27
 800cc74:	8422      	strhhi	r2, [r4, #32]
 800cc76:	e73f      	b.n	800caf8 <Argus_Dca_Evaluate+0x720>
 800cc78:	7d41      	ldrb	r1, [r0, #21]
 800cc7a:	4299      	cmp	r1, r3
 800cc7c:	f4bf adcc 	bcs.w	800c818 <Argus_Dca_Evaluate+0x440>
 800cc80:	e733      	b.n	800caea <Argus_Dca_Evaluate+0x712>
 800cc82:	f994 301f 	ldrsb.w	r3, [r4, #31]
 800cc86:	460a      	mov	r2, r1
 800cc88:	e7f0      	b.n	800cc6c <Argus_Dca_Evaluate+0x894>
 800cc8a:	9a03      	ldr	r2, [sp, #12]
 800cc8c:	9904      	ldr	r1, [sp, #16]
 800cc8e:	4252      	negs	r2, r2
 800cc90:	4291      	cmp	r1, r2
 800cc92:	f6bf aeef 	bge.w	800ca74 <Argus_Dca_Evaluate+0x69c>
 800cc96:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 800cc9a:	f73f aeeb 	bgt.w	800ca74 <Argus_Dca_Evaluate+0x69c>
 800cc9e:	f10e 0801 	add.w	r8, lr, #1
 800cca2:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 800cca6:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ccaa:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800ccae:	e4b8      	b.n	800c622 <Argus_Dca_Evaluate+0x24a>
 800ccb0:	7d00      	ldrb	r0, [r0, #20]
 800ccb2:	f1b8 0f02 	cmp.w	r8, #2
 800ccb6:	fa02 f505 	lsl.w	r5, r2, r5
 800ccba:	bf38      	it	cc
 800ccbc:	f04f 0802 	movcc.w	r8, #2
 800ccc0:	fa0e f200 	lsl.w	r2, lr, r0
 800ccc4:	fa05 f303 	lsl.w	r3, r5, r3
 800ccc8:	ea4f 300c 	mov.w	r0, ip, lsl #12
 800cccc:	00d2      	lsls	r2, r2, #3
 800ccce:	ea4f 3508 	mov.w	r5, r8, lsl #12
 800ccd2:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800ccd6:	e002      	b.n	800ccde <Argus_Dca_Evaluate+0x906>
 800ccd8:	006d      	lsls	r5, r5, #1
 800ccda:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800ccde:	42a8      	cmp	r0, r5
 800cce0:	d8fa      	bhi.n	800ccd8 <Argus_Dca_Evaluate+0x900>
 800cce2:	f1bc 0f00 	cmp.w	ip, #0
 800cce6:	f040 8098 	bne.w	800ce1a <Argus_Dca_Evaluate+0xa42>
 800ccea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ccee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ccf2:	b288      	uxth	r0, r1
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	fb00 f503 	mul.w	r5, r0, r3
 800ccfa:	0c09      	lsrs	r1, r1, #16
 800ccfc:	fb00 f00e 	mul.w	r0, r0, lr
 800cd00:	eb00 4c15 	add.w	ip, r0, r5, lsr #16
 800cd04:	fb01 f303 	mul.w	r3, r1, r3
 800cd08:	fa13 f08c 	uxtah	r0, r3, ip
 800cd0c:	fb01 f30e 	mul.w	r3, r1, lr
 800cd10:	0401      	lsls	r1, r0, #16
 800cd12:	fa11 f185 	uxtah	r1, r1, r5
 800cd16:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 800cd1a:	eb03 431c 	add.w	r3, r3, ip, lsr #16
 800cd1e:	bf38      	it	cc
 800cd20:	f501 4100 	addcc.w	r1, r1, #32768	; 0x8000
 800cd24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cd28:	bf34      	ite	cc
 800cd2a:	0c09      	lsrcc	r1, r1, #16
 800cd2c:	f44f 3180 	movcs.w	r1, #65536	; 0x10000
 800cd30:	041b      	lsls	r3, r3, #16
 800cd32:	440b      	add	r3, r1
 800cd34:	429a      	cmp	r2, r3
 800cd36:	bf28      	it	cs
 800cd38:	461a      	movcs	r2, r3
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f7fc fb07 	bl	8009350 <SetIntegrationEnergy>
 800cd42:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800cd46:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800cd4a:	e565      	b.n	800c818 <Argus_Dca_Evaluate+0x440>
 800cd4c:	45a8      	cmp	r8, r5
 800cd4e:	f4bf ad63 	bcs.w	800c818 <Argus_Dca_Evaluate+0x440>
 800cd52:	7d01      	ldrb	r1, [r0, #20]
 800cd54:	4299      	cmp	r1, r3
 800cd56:	d904      	bls.n	800cd62 <Argus_Dca_Evaluate+0x98a>
 800cd58:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 800cd5c:	4299      	cmp	r1, r3
 800cd5e:	f63f af10 	bhi.w	800cb82 <Argus_Dca_Evaluate+0x7aa>
 800cd62:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 800cd66:	2902      	cmp	r1, #2
 800cd68:	d805      	bhi.n	800cd76 <Argus_Dca_Evaluate+0x99e>
 800cd6a:	3101      	adds	r1, #1
 800cd6c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800cd70:	e552      	b.n	800c818 <Argus_Dca_Evaluate+0x440>
 800cd72:	4603      	mov	r3, r0
 800cd74:	e777      	b.n	800cc66 <Argus_Dca_Evaluate+0x88e>
 800cd76:	8c21      	ldrh	r1, [r4, #32]
 800cd78:	4291      	cmp	r1, r2
 800cd7a:	f67f ad4d 	bls.w	800c818 <Argus_Dca_Evaluate+0x440>
 800cd7e:	2a3f      	cmp	r2, #63	; 0x3f
 800cd80:	bf94      	ite	ls
 800cd82:	8ba1      	ldrhls	r1, [r4, #28]
 800cd84:	2140      	movhi	r1, #64	; 0x40
 800cd86:	440a      	add	r2, r1
 800cd88:	f8ad 2020 	strh.w	r2, [sp, #32]
 800cd8c:	b292      	uxth	r2, r2
 800cd8e:	e543      	b.n	800c818 <Argus_Dca_Evaluate+0x440>
 800cd90:	f10e 38ff 	add.w	r8, lr, #4294967295
 800cd94:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800cd98:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
 800cd9c:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 800cda0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cda4:	e43d      	b.n	800c622 <Argus_Dca_Evaluate+0x24a>
 800cda6:	9a03      	ldr	r2, [sp, #12]
 800cda8:	9904      	ldr	r1, [sp, #16]
 800cdaa:	4252      	negs	r2, r2
 800cdac:	4291      	cmp	r1, r2
 800cdae:	da24      	bge.n	800cdfa <Argus_Dca_Evaluate+0xa22>
 800cdb0:	f1ba 0f03 	cmp.w	sl, #3
 800cdb4:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 800cdb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cdbc:	d010      	beq.n	800cde0 <Argus_Dca_Evaluate+0xa08>
 800cdbe:	1860      	adds	r0, r4, r1
 800cdc0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800cdc4:	4440      	add	r0, r8
 800cdc6:	4290      	cmp	r0, r2
 800cdc8:	da0a      	bge.n	800cde0 <Argus_Dca_Evaluate+0xa08>
 800cdca:	f10e 0801 	add.w	r8, lr, #1
 800cdce:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800cdd2:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
 800cdd6:	e424      	b.n	800c622 <Argus_Dca_Evaluate+0x24a>
 800cdd8:	7d43      	ldrb	r3, [r0, #21]
 800cdda:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800cdde:	e51b      	b.n	800c818 <Argus_Dca_Evaluate+0x440>
 800cde0:	9801      	ldr	r0, [sp, #4]
 800cde2:	7d40      	ldrb	r0, [r0, #21]
 800cde4:	4550      	cmp	r0, sl
 800cde6:	d22a      	bcs.n	800ce3e <Argus_Dca_Evaluate+0xa66>
 800cde8:	f10e 0801 	add.w	r8, lr, #1
 800cdec:	f10a 30ff 	add.w	r0, sl, #4294967295
 800cdf0:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800cdf4:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
 800cdf8:	e413      	b.n	800c622 <Argus_Dca_Evaluate+0x24a>
 800cdfa:	f1ba 0f02 	cmp.w	sl, #2
 800cdfe:	d826      	bhi.n	800ce4e <Argus_Dca_Evaluate+0xa76>
 800ce00:	44d1      	add	r9, sl
 800ce02:	f899 2008 	ldrb.w	r2, [r9, #8]
 800ce06:	4590      	cmp	r8, r2
 800ce08:	da21      	bge.n	800ce4e <Argus_Dca_Evaluate+0xa76>
 800ce0a:	9a01      	ldr	r2, [sp, #4]
 800ce0c:	7d92      	ldrb	r2, [r2, #22]
 800ce0e:	4552      	cmp	r2, sl
 800ce10:	bf84      	itt	hi
 800ce12:	f10a 0201 	addhi.w	r2, sl, #1
 800ce16:	b2d2      	uxtbhi	r2, r2
 800ce18:	e6fc      	b.n	800cc14 <Argus_Dca_Evaluate+0x83c>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	f43f af67 	beq.w	800ccee <Argus_Dca_Evaluate+0x916>
 800ce20:	4285      	cmp	r5, r0
 800ce22:	bf9c      	itt	ls
 800ce24:	1b40      	subls	r0, r0, r5
 800ce26:	ea41 010c 	orrls.w	r1, r1, ip
 800ce2a:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
 800ce2e:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800ce32:	d1f2      	bne.n	800ce1a <Argus_Dca_Evaluate+0xa42>
 800ce34:	4285      	cmp	r5, r0
 800ce36:	f63f af5a 	bhi.w	800ccee <Argus_Dca_Evaluate+0x916>
 800ce3a:	3101      	adds	r1, #1
 800ce3c:	e757      	b.n	800ccee <Argus_Dca_Evaluate+0x916>
 800ce3e:	f10e 38ff 	add.w	r8, lr, #4294967295
 800ce42:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800ce46:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
 800ce4a:	f7ff bbea 	b.w	800c622 <Argus_Dca_Evaluate+0x24a>
 800ce4e:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
 800ce52:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800ce56:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 800ce5a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce5e:	f7ff bbe0 	b.w	800c622 <Argus_Dca_Evaluate+0x24a>
 800ce62:	7d01      	ldrb	r1, [r0, #20]
 800ce64:	4299      	cmp	r1, r3
 800ce66:	f4ff ae40 	bcc.w	800caea <Argus_Dca_Evaluate+0x712>
 800ce6a:	8981      	ldrh	r1, [r0, #12]
 800ce6c:	4291      	cmp	r1, r2
 800ce6e:	f4bf aee9 	bcs.w	800cc44 <Argus_Dca_Evaluate+0x86c>
 800ce72:	2a40      	cmp	r2, #64	; 0x40
 800ce74:	bf94      	ite	ls
 800ce76:	8ba1      	ldrhls	r1, [r4, #28]
 800ce78:	2140      	movhi	r1, #64	; 0x40
 800ce7a:	1a52      	subs	r2, r2, r1
 800ce7c:	f8ad 2020 	strh.w	r2, [sp, #32]
 800ce80:	b292      	uxth	r2, r2
 800ce82:	e4c9      	b.n	800c818 <Argus_Dca_Evaluate+0x440>
 800ce84:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800ce88:	e5a0      	b.n	800c9cc <Argus_Dca_Evaluate+0x5f4>
 800ce8a:	bf00      	nop

0800ce8c <GetStatusCallback>:
 800ce8c:	6008      	str	r0, [r1, #0]
 800ce8e:	4770      	bx	lr

0800ce90 <FinishIntegration>:
 800ce90:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 800ce94:	b113      	cbz	r3, 800ce9c <FinishIntegration+0xc>
 800ce96:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
 800ce9a:	4718      	bx	r3
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop

0800cea0 <FinishDetuneClock>:
 800cea0:	2800      	cmp	r0, #0
 800cea2:	da08      	bge.n	800ceb6 <FinishDetuneClock+0x16>
 800cea4:	f891 310a 	ldrb.w	r3, [r1, #266]	; 0x10a
 800cea8:	4a06      	ldr	r2, [pc, #24]	; (800cec4 <FinishDetuneClock+0x24>)
 800ceaa:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 800ceae:	f043 0302 	orr.w	r3, r3, #2
 800ceb2:	f881 310a 	strb.w	r3, [r1, #266]	; 0x10a
 800ceb6:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 800ceba:	b113      	cbz	r3, 800cec2 <FinishDetuneClock+0x22>
 800cebc:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
 800cec0:	4718      	bx	r3
 800cec2:	4770      	bx	lr
 800cec4:	0033dffe 	.word	0x0033dffe

0800cec8 <ChargePumpRamp>:
 800cec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cecc:	1e07      	subs	r7, r0, #0
 800cece:	b082      	sub	sp, #8
 800ced0:	460c      	mov	r4, r1
 800ced2:	db09      	blt.n	800cee8 <ChargePumpRamp+0x20>
 800ced4:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
 800ced8:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800cedc:	f005 7500 	and.w	r5, r5, #33554432	; 0x2000000
 800cee0:	f003 0320 	and.w	r3, r3, #32
 800cee4:	432b      	orrs	r3, r5
 800cee6:	d105      	bne.n	800cef4 <ChargePumpRamp+0x2c>
 800cee8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800ceec:	b002      	add	sp, #8
 800ceee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cef2:	4718      	bx	r3
 800cef4:	f891 2095 	ldrb.w	r2, [r1, #149]	; 0x95
 800cef8:	f8d1 3130 	ldr.w	r3, [r1, #304]	; 0x130
 800cefc:	f002 083f 	and.w	r8, r2, #63	; 0x3f
 800cf00:	f1b8 0f09 	cmp.w	r8, #9
 800cf04:	f504 768a 	add.w	r6, r4, #276	; 0x114
 800cf08:	bf94      	ite	ls
 800cf0a:	8b19      	ldrhls	r1, [r3, #24]
 800cf0c:	8b59      	ldrhhi	r1, [r3, #26]
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f7f8 fb8a 	bl	8005628 <Time_CheckTimeoutUSec>
 800cf14:	b310      	cbz	r0, 800cf5c <ChargePumpRamp+0x94>
 800cf16:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
 800cf1a:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800cf1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cf22:	f3c2 1383 	ubfx	r3, r2, #6, #4
 800cf26:	b35d      	cbz	r5, 800cf80 <ChargePumpRamp+0xb8>
 800cf28:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800cf2c:	f042 0220 	orr.w	r2, r2, #32
 800cf30:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800cf34:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800cf38:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800cf3c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800cf40:	2500      	movs	r5, #0
 800cf42:	019a      	lsls	r2, r3, #6
 800cf44:	f021 0303 	bic.w	r3, r1, #3
 800cf48:	4315      	orrs	r5, r2
 800cf4a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 800cf4e:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
 800cf52:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 800cf56:	4630      	mov	r0, r6
 800cf58:	f7f8 fa90 	bl	800547c <Time_GetNow>
 800cf5c:	4621      	mov	r1, r4
 800cf5e:	230a      	movs	r3, #10
 800cf60:	f801 3f92 	strb.w	r3, [r1, #146]!
 800cf64:	4b1d      	ldr	r3, [pc, #116]	; (800cfdc <ChargePumpRamp+0x114>)
 800cf66:	2200      	movs	r2, #0
 800cf68:	e9cd 3400 	strd	r3, r4, [sp]
 800cf6c:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800cf70:	2305      	movs	r3, #5
 800cf72:	f009 fe9d 	bl	8016cb0 <ADS_Transfer>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	db12      	blt.n	800cfa0 <ChargePumpRamp+0xd8>
 800cf7a:	b002      	add	sp, #8
 800cf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf80:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 800cf84:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 800cf88:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800cf8c:	f3c0 1083 	ubfx	r0, r0, #6, #4
 800cf90:	4283      	cmp	r3, r0
 800cf92:	d00c      	beq.n	800cfae <ChargePumpRamp+0xe6>
 800cf94:	f1b8 0f00 	cmp.w	r8, #0
 800cf98:	bf08      	it	eq
 800cf9a:	4603      	moveq	r3, r0
 800cf9c:	e7d1      	b.n	800cf42 <ChargePumpRamp+0x7a>
 800cf9e:	4638      	mov	r0, r7
 800cfa0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800cfa4:	4621      	mov	r1, r4
 800cfa6:	b002      	add	sp, #8
 800cfa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfac:	4718      	bx	r3
 800cfae:	f002 003f 	and.w	r0, r2, #63	; 0x3f
 800cfb2:	4540      	cmp	r0, r8
 800cfb4:	d0f3      	beq.n	800cf9e <ChargePumpRamp+0xd6>
 800cfb6:	4580      	cmp	r8, r0
 800cfb8:	db07      	blt.n	800cfca <ChargePumpRamp+0x102>
 800cfba:	b160      	cbz	r0, 800cfd6 <ChargePumpRamp+0x10e>
 800cfbc:	f108 32ff 	add.w	r2, r8, #4294967295
 800cfc0:	4282      	cmp	r2, r0
 800cfc2:	bfb8      	it	lt
 800cfc4:	4602      	movlt	r2, r0
 800cfc6:	b255      	sxtb	r5, r2
 800cfc8:	e7bb      	b.n	800cf42 <ChargePumpRamp+0x7a>
 800cfca:	f108 0201 	add.w	r2, r8, #1
 800cfce:	4282      	cmp	r2, r0
 800cfd0:	bfa8      	it	ge
 800cfd2:	4602      	movge	r2, r0
 800cfd4:	e7f7      	b.n	800cfc6 <ChargePumpRamp+0xfe>
 800cfd6:	462a      	mov	r2, r5
 800cfd8:	e7f2      	b.n	800cfc0 <ChargePumpRamp+0xf8>
 800cfda:	bf00      	nop
 800cfdc:	0800cec9 	.word	0x0800cec9

0800cfe0 <ApplyClockFrequency>:
 800cfe0:	f8b0 2108 	ldrh.w	r2, [r0, #264]	; 0x108
 800cfe4:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800cfe8:	b570      	push	{r4, r5, r6, lr}
 800cfea:	0794      	lsls	r4, r2, #30
 800cfec:	4606      	mov	r6, r0
 800cfee:	d53a      	bpl.n	800d066 <ApplyClockFrequency+0x86>
 800cff0:	f893 10a8 	ldrb.w	r1, [r3, #168]	; 0xa8
 800cff4:	0750      	lsls	r0, r2, #29
 800cff6:	bf4b      	itete	mi
 800cff8:	eb03 0341 	addmi.w	r3, r3, r1, lsl #1
 800cffc:	3157      	addpl	r1, #87	; 0x57
 800cffe:	f8b3 50b2 	ldrhmi.w	r5, [r3, #178]	; 0xb2
 800d002:	f833 5011 	ldrhpl.w	r5, [r3, r1, lsl #1]
 800d006:	0613      	lsls	r3, r2, #24
 800d008:	d53a      	bpl.n	800d080 <ApplyClockFrequency+0xa0>
 800d00a:	f8d6 01d0 	ldr.w	r0, [r6, #464]	; 0x1d0
 800d00e:	f007 f857 	bl	80140c0 <Argus_Cal_GetTemperature>
 800d012:	4604      	mov	r4, r0
 800d014:	f8d6 01d0 	ldr.w	r0, [r6, #464]	; 0x1d0
 800d018:	f003 fc9a 	bl	8010950 <Argus_Cal_GetCalibrationPtr>
 800d01c:	7903      	ldrb	r3, [r0, #4]
 800d01e:	f5a4 10f0 	sub.w	r0, r4, #1966080	; 0x1e0000
 800d022:	fb05 f303 	mul.w	r3, r5, r3
 800d026:	12c0      	asrs	r0, r0, #11
 800d028:	fb00 f003 	mul.w	r0, r0, r3
 800d02c:	2800      	cmp	r0, #0
 800d02e:	db22      	blt.n	800d076 <ApplyClockFrequency+0x96>
 800d030:	f500 0080 	add.w	r0, r0, #4194304	; 0x400000
 800d034:	0dc0      	lsrs	r0, r0, #23
 800d036:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
 800d03a:	f896 2063 	ldrb.w	r2, [r6, #99]	; 0x63
 800d03e:	1a28      	subs	r0, r5, r0
 800d040:	b280      	uxth	r0, r0
 800d042:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800d046:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
 800d04a:	d00a      	beq.n	800d062 <ApplyClockFrequency+0x82>
 800d04c:	0140      	lsls	r0, r0, #5
 800d04e:	f003 031f 	and.w	r3, r3, #31
 800d052:	4303      	orrs	r3, r0
 800d054:	0a00      	lsrs	r0, r0, #8
 800d056:	f886 0063 	strb.w	r0, [r6, #99]	; 0x63
 800d05a:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
 800d05e:	2001      	movs	r0, #1
 800d060:	bd70      	pop	{r4, r5, r6, pc}
 800d062:	2000      	movs	r0, #0
 800d064:	bd70      	pop	{r4, r5, r6, pc}
 800d066:	f893 0073 	ldrb.w	r0, [r3, #115]	; 0x73
 800d06a:	f893 5074 	ldrb.w	r5, [r3, #116]	; 0x74
 800d06e:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 800d072:	096d      	lsrs	r5, r5, #5
 800d074:	e7c9      	b.n	800d00a <ApplyClockFrequency+0x2a>
 800d076:	f5c0 0080 	rsb	r0, r0, #4194304	; 0x400000
 800d07a:	0dc0      	lsrs	r0, r0, #23
 800d07c:	4240      	negs	r0, r0
 800d07e:	e7da      	b.n	800d036 <ApplyClockFrequency+0x56>
 800d080:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
 800d084:	4806      	ldr	r0, [pc, #24]	; (800d0a0 <ApplyClockFrequency+0xc0>)
 800d086:	1c59      	adds	r1, r3, #1
 800d088:	f001 0103 	and.w	r1, r1, #3
 800d08c:	f023 0303 	bic.w	r3, r3, #3
 800d090:	4319      	orrs	r1, r3
 800d092:	f886 1064 	strb.w	r1, [r6, #100]	; 0x64
 800d096:	f001 0103 	and.w	r1, r1, #3
 800d09a:	f7f3 fed9 	bl	8000e50 <print>
 800d09e:	e7b4      	b.n	800d00a <ApplyClockFrequency+0x2a>
 800d0a0:	08019ccc 	.word	0x08019ccc

0800d0a4 <FinishStartIntegration>:
 800d0a4:	b570      	push	{r4, r5, r6, lr}
 800d0a6:	1e05      	subs	r5, r0, #0
 800d0a8:	460c      	mov	r4, r1
 800d0aa:	db11      	blt.n	800d0d0 <FinishStartIntegration+0x2c>
 800d0ac:	f891 2099 	ldrb.w	r2, [r1, #153]	; 0x99
 800d0b0:	f8b1 3108 	ldrh.w	r3, [r1, #264]	; 0x108
 800d0b4:	0651      	lsls	r1, r2, #25
 800d0b6:	bf56      	itet	pl
 800d0b8:	f023 0380 	bicpl.w	r3, r3, #128	; 0x80
 800d0bc:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800d0c0:	b29b      	uxthpl	r3, r3
 800d0c2:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 800d0c6:	0693      	lsls	r3, r2, #26
 800d0c8:	bf48      	it	mi
 800d0ca:	2000      	movmi	r0, #0
 800d0cc:	d51c      	bpl.n	800d108 <FinishStartIntegration+0x64>
 800d0ce:	bd70      	pop	{r4, r5, r6, pc}
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	4820      	ldr	r0, [pc, #128]	; (800d154 <FinishStartIntegration+0xb0>)
 800d0d4:	f7f3 febc 	bl	8000e50 <print>
 800d0d8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800d0dc:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
 800d0e0:	f8d4 610c 	ldr.w	r6, [r4, #268]	; 0x10c
 800d0e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0ec:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800d0f0:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 800d0f4:	b136      	cbz	r6, 800d104 <FinishStartIntegration+0x60>
 800d0f6:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	4633      	mov	r3, r6
 800d0fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d102:	4718      	bx	r3
 800d104:	4628      	mov	r0, r5
 800d106:	bd70      	pop	{r4, r5, r6, pc}
 800d108:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800d10c:	4912      	ldr	r1, [pc, #72]	; (800d158 <FinishStartIntegration+0xb4>)
 800d10e:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
 800d112:	f022 0201 	bic.w	r2, r2, #1
 800d116:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800d11a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800d11e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800d122:	f043 0302 	orr.w	r3, r3, #2
 800d126:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800d12a:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
 800d12e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800d132:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800d136:	f009 f98d 	bl	8016454 <ADS_Abort>
 800d13a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800d13e:	b133      	cbz	r3, 800d14e <FinishStartIntegration+0xaa>
 800d140:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800d144:	f06f 0071 	mvn.w	r0, #113	; 0x71
 800d148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d14c:	4718      	bx	r3
 800d14e:	f06f 0071 	mvn.w	r0, #113	; 0x71
 800d152:	bd70      	pop	{r4, r5, r6, pc}
 800d154:	0801aaf0 	.word	0x0801aaf0
 800d158:	0033dffe 	.word	0x0033dffe

0800d15c <EnableEEPROM>:
 800d15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d15e:	4605      	mov	r5, r0
 800d160:	b085      	sub	sp, #20
 800d162:	2400      	movs	r4, #0
 800d164:	f100 0159 	add.w	r1, r0, #89	; 0x59
 800d168:	2203      	movs	r2, #3
 800d16a:	a803      	add	r0, sp, #12
 800d16c:	f88d 400e 	strb.w	r4, [sp, #14]
 800d170:	f8ad 400c 	strh.w	r4, [sp, #12]
 800d174:	f00a fac9 	bl	801770a <memcpy>
 800d178:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 800d17c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d180:	9401      	str	r4, [sp, #4]
 800d182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d18a:	9400      	str	r4, [sp, #0]
 800d18c:	f023 0320 	bic.w	r3, r3, #32
 800d190:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
 800d194:	f505 779c 	add.w	r7, r5, #312	; 0x138
 800d198:	aa03      	add	r2, sp, #12
 800d19a:	2612      	movs	r6, #18
 800d19c:	f88d 300e 	strb.w	r3, [sp, #14]
 800d1a0:	4638      	mov	r0, r7
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	2303      	movs	r3, #3
 800d1a6:	f88d 600c 	strb.w	r6, [sp, #12]
 800d1aa:	f009 fd81 	bl	8016cb0 <ADS_Transfer>
 800d1ae:	1e06      	subs	r6, r0, #0
 800d1b0:	db0b      	blt.n	800d1ca <EnableEEPROM+0x6e>
 800d1b2:	4638      	mov	r0, r7
 800d1b4:	2164      	movs	r1, #100	; 0x64
 800d1b6:	f009 fcc1 	bl	8016b3c <ADS_AwaitIdle>
 800d1ba:	1e06      	subs	r6, r0, #0
 800d1bc:	db08      	blt.n	800d1d0 <EnableEEPROM+0x74>
 800d1be:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d1c2:	069b      	lsls	r3, r3, #26
 800d1c4:	bf48      	it	mi
 800d1c6:	4626      	movmi	r6, r4
 800d1c8:	d507      	bpl.n	800d1da <EnableEEPROM+0x7e>
 800d1ca:	4630      	mov	r0, r6
 800d1cc:	b005      	add	sp, #20
 800d1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1d0:	4631      	mov	r1, r6
 800d1d2:	480e      	ldr	r0, [pc, #56]	; (800d20c <EnableEEPROM+0xb0>)
 800d1d4:	f7f3 fe3c 	bl	8000e50 <print>
 800d1d8:	e7f7      	b.n	800d1ca <EnableEEPROM+0x6e>
 800d1da:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 800d1de:	490c      	ldr	r1, [pc, #48]	; (800d210 <EnableEEPROM+0xb4>)
 800d1e0:	f895 310a 	ldrb.w	r3, [r5, #266]	; 0x10a
 800d1e4:	f022 0201 	bic.w	r2, r2, #1
 800d1e8:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
 800d1ec:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
 800d1f0:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 800d1f4:	f043 0302 	orr.w	r3, r3, #2
 800d1f8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800d1fc:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
 800d200:	f885 310a 	strb.w	r3, [r5, #266]	; 0x10a
 800d204:	f06f 0671 	mvn.w	r6, #113	; 0x71
 800d208:	e7df      	b.n	800d1ca <EnableEEPROM+0x6e>
 800d20a:	bf00      	nop
 800d20c:	0801aab8 	.word	0x0801aab8
 800d210:	0033dffe 	.word	0x0033dffe

0800d214 <DisableClock2>:
 800d214:	b530      	push	{r4, r5, lr}
 800d216:	1e03      	subs	r3, r0, #0
 800d218:	b083      	sub	sp, #12
 800d21a:	db17      	blt.n	800d24c <DisableClock2+0x38>
 800d21c:	f891 3098 	ldrb.w	r3, [r1, #152]	; 0x98
 800d220:	4a28      	ldr	r2, [pc, #160]	; (800d2c4 <DisableClock2+0xb0>)
 800d222:	9101      	str	r1, [sp, #4]
 800d224:	460c      	mov	r4, r1
 800d226:	f023 0311 	bic.w	r3, r3, #17
 800d22a:	2010      	movs	r0, #16
 800d22c:	f881 3098 	strb.w	r3, [r1, #152]	; 0x98
 800d230:	f801 0f97 	strb.w	r0, [r1, #151]!
 800d234:	2302      	movs	r3, #2
 800d236:	9200      	str	r2, [sp, #0]
 800d238:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800d23c:	2200      	movs	r2, #0
 800d23e:	f009 fd37 	bl	8016cb0 <ADS_Transfer>
 800d242:	1e03      	subs	r3, r0, #0
 800d244:	db22      	blt.n	800d28c <DisableClock2+0x78>
 800d246:	4618      	mov	r0, r3
 800d248:	b003      	add	sp, #12
 800d24a:	bd30      	pop	{r4, r5, pc}
 800d24c:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 800d250:	4d1d      	ldr	r5, [pc, #116]	; (800d2c8 <DisableClock2+0xb4>)
 800d252:	f891 210a 	ldrb.w	r2, [r1, #266]	; 0x10a
 800d256:	f024 0401 	bic.w	r4, r4, #1
 800d25a:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
 800d25e:	f8c1 5080 	str.w	r5, [r1, #128]	; 0x80
 800d262:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 800d266:	f8d1 510c 	ldr.w	r5, [r1, #268]	; 0x10c
 800d26a:	f024 0401 	bic.w	r4, r4, #1
 800d26e:	f042 0202 	orr.w	r2, r2, #2
 800d272:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
 800d276:	f881 210a 	strb.w	r2, [r1, #266]	; 0x10a
 800d27a:	2d00      	cmp	r5, #0
 800d27c:	d0e3      	beq.n	800d246 <DisableClock2+0x32>
 800d27e:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
 800d282:	462b      	mov	r3, r5
 800d284:	b003      	add	sp, #12
 800d286:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d28a:	4718      	bx	r3
 800d28c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800d290:	4d0d      	ldr	r5, [pc, #52]	; (800d2c8 <DisableClock2+0xb4>)
 800d292:	f894 210a 	ldrb.w	r2, [r4, #266]	; 0x10a
 800d296:	f021 0101 	bic.w	r1, r1, #1
 800d29a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800d29e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800d2a2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800d2a6:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800d2aa:	f021 0101 	bic.w	r1, r1, #1
 800d2ae:	f042 0202 	orr.w	r2, r2, #2
 800d2b2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800d2b6:	f884 210a 	strb.w	r2, [r4, #266]	; 0x10a
 800d2ba:	2d00      	cmp	r5, #0
 800d2bc:	d0c3      	beq.n	800d246 <DisableClock2+0x32>
 800d2be:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800d2c2:	e7de      	b.n	800d282 <DisableClock2+0x6e>
 800d2c4:	0800e231 	.word	0x0800e231
 800d2c8:	0033dffe 	.word	0x0033dffe

0800d2cc <WriteBlockEnable2>:
 800d2cc:	b530      	push	{r4, r5, lr}
 800d2ce:	1e02      	subs	r2, r0, #0
 800d2d0:	b083      	sub	sp, #12
 800d2d2:	f891 310a 	ldrb.w	r3, [r1, #266]	; 0x10a
 800d2d6:	db24      	blt.n	800d322 <WriteBlockEnable2+0x56>
 800d2d8:	f891 2098 	ldrb.w	r2, [r1, #152]	; 0x98
 800d2dc:	06d0      	lsls	r0, r2, #27
 800d2de:	d41b      	bmi.n	800d318 <WriteBlockEnable2+0x4c>
 800d2e0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800d2e4:	460c      	mov	r4, r1
 800d2e6:	482c      	ldr	r0, [pc, #176]	; (800d398 <WriteBlockEnable2+0xcc>)
 800d2e8:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
 800d2ec:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
 800d2f0:	f104 0297 	add.w	r2, r4, #151	; 0x97
 800d2f4:	2510      	movs	r5, #16
 800d2f6:	9401      	str	r4, [sp, #4]
 800d2f8:	2302      	movs	r3, #2
 800d2fa:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
 800d2fe:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
 800d302:	4611      	mov	r1, r2
 800d304:	9000      	str	r0, [sp, #0]
 800d306:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800d30a:	f009 fcd1 	bl	8016cb0 <ADS_Transfer>
 800d30e:	1e03      	subs	r3, r0, #0
 800d310:	db24      	blt.n	800d35c <WriteBlockEnable2+0x90>
 800d312:	4618      	mov	r0, r3
 800d314:	b003      	add	sp, #12
 800d316:	bd30      	pop	{r4, r5, pc}
 800d318:	07d2      	lsls	r2, r2, #31
 800d31a:	d4e1      	bmi.n	800d2e0 <WriteBlockEnable2+0x14>
 800d31c:	f043 0310 	orr.w	r3, r3, #16
 800d320:	e7e0      	b.n	800d2e4 <WriteBlockEnable2+0x18>
 800d322:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 800d326:	4d1d      	ldr	r5, [pc, #116]	; (800d39c <WriteBlockEnable2+0xd0>)
 800d328:	f024 0401 	bic.w	r4, r4, #1
 800d32c:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
 800d330:	f8c1 5080 	str.w	r5, [r1, #128]	; 0x80
 800d334:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 800d338:	f8d1 510c 	ldr.w	r5, [r1, #268]	; 0x10c
 800d33c:	f043 0302 	orr.w	r3, r3, #2
 800d340:	f024 0401 	bic.w	r4, r4, #1
 800d344:	f881 310a 	strb.w	r3, [r1, #266]	; 0x10a
 800d348:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
 800d34c:	b315      	cbz	r5, 800d394 <WriteBlockEnable2+0xc8>
 800d34e:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
 800d352:	462b      	mov	r3, r5
 800d354:	b003      	add	sp, #12
 800d356:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d35a:	4718      	bx	r3
 800d35c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800d360:	4d0e      	ldr	r5, [pc, #56]	; (800d39c <WriteBlockEnable2+0xd0>)
 800d362:	f894 210a 	ldrb.w	r2, [r4, #266]	; 0x10a
 800d366:	f021 0101 	bic.w	r1, r1, #1
 800d36a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800d36e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800d372:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800d376:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800d37a:	f021 0101 	bic.w	r1, r1, #1
 800d37e:	f042 0202 	orr.w	r2, r2, #2
 800d382:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800d386:	f884 210a 	strb.w	r2, [r4, #266]	; 0x10a
 800d38a:	2d00      	cmp	r5, #0
 800d38c:	d0c1      	beq.n	800d312 <WriteBlockEnable2+0x46>
 800d38e:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800d392:	e7de      	b.n	800d352 <WriteBlockEnable2+0x86>
 800d394:	4613      	mov	r3, r2
 800d396:	e7bc      	b.n	800d312 <WriteBlockEnable2+0x46>
 800d398:	0800e029 	.word	0x0800e029
 800d39c:	0033dffe 	.word	0x0033dffe

0800d3a0 <WriteRegisterConfiguration>:
 800d3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a4:	1e06      	subs	r6, r0, #0
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	460c      	mov	r4, r1
 800d3aa:	f2c0 8328 	blt.w	800d9fe <WriteRegisterConfiguration+0x65e>
 800d3ae:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
 800d3b2:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 800d3b6:	f040 822a 	bne.w	800d80e <WriteRegisterConfiguration+0x46e>
 800d3ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d3be:	4fee      	ldr	r7, [pc, #952]	; (800d778 <WriteRegisterConfiguration+0x3d8>)
 800d3c0:	079b      	lsls	r3, r3, #30
 800d3c2:	f04f 0097 	mov.w	r0, #151	; 0x97
 800d3c6:	f04f 0809 	mov.w	r8, #9
 800d3ca:	f100 823b 	bmi.w	800d844 <WriteRegisterConfiguration+0x4a4>
 800d3ce:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d3d2:	0698      	lsls	r0, r3, #26
 800d3d4:	f100 824c 	bmi.w	800d870 <WriteRegisterConfiguration+0x4d0>
 800d3d8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d3dc:	0659      	lsls	r1, r3, #25
 800d3de:	f100 8260 	bmi.w	800d8a2 <WriteRegisterConfiguration+0x502>
 800d3e2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d3e6:	061a      	lsls	r2, r3, #24
 800d3e8:	f100 8274 	bmi.w	800d8d4 <WriteRegisterConfiguration+0x534>
 800d3ec:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d3f0:	045b      	lsls	r3, r3, #17
 800d3f2:	f100 8288 	bmi.w	800d906 <WriteRegisterConfiguration+0x566>
 800d3f6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d3fa:	0418      	lsls	r0, r3, #16
 800d3fc:	f100 829c 	bmi.w	800d938 <WriteRegisterConfiguration+0x598>
 800d400:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d404:	03d9      	lsls	r1, r3, #15
 800d406:	f100 82b0 	bmi.w	800d96a <WriteRegisterConfiguration+0x5ca>
 800d40a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d40e:	039a      	lsls	r2, r3, #14
 800d410:	f100 82c4 	bmi.w	800d99c <WriteRegisterConfiguration+0x5fc>
 800d414:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d418:	02db      	lsls	r3, r3, #11
 800d41a:	f100 81e4 	bmi.w	800d7e6 <WriteRegisterConfiguration+0x446>
 800d41e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d422:	0298      	lsls	r0, r3, #10
 800d424:	f100 81cb 	bmi.w	800d7be <WriteRegisterConfiguration+0x41e>
 800d428:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d42c:	0759      	lsls	r1, r3, #29
 800d42e:	d57f      	bpl.n	800d530 <WriteRegisterConfiguration+0x190>
 800d430:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d434:	071a      	lsls	r2, r3, #28
 800d436:	d404      	bmi.n	800d442 <WriteRegisterConfiguration+0xa2>
 800d438:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d43c:	06db      	lsls	r3, r3, #27
 800d43e:	f140 82ca 	bpl.w	800d9d6 <WriteRegisterConfiguration+0x636>
 800d442:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800d446:	f012 0303 	ands.w	r3, r2, #3
 800d44a:	f040 82bb 	bne.w	800d9c4 <WriteRegisterConfiguration+0x624>
 800d44e:	7da0      	ldrb	r0, [r4, #22]
 800d450:	f894 c015 	ldrb.w	ip, [r4, #21]
 800d454:	1963      	adds	r3, r4, r5
 800d456:	0841      	lsrs	r1, r0, #1
 800d458:	ea41 11cc 	orr.w	r1, r1, ip, lsl #7
 800d45c:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
 800d460:	7de1      	ldrb	r1, [r4, #23]
 800d462:	01c0      	lsls	r0, r0, #7
 800d464:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 800d468:	f883 0099 	strb.w	r0, [r3, #153]	; 0x99
 800d46c:	7e20      	ldrb	r0, [r4, #24]
 800d46e:	01c9      	lsls	r1, r1, #7
 800d470:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 800d474:	f883 109a 	strb.w	r1, [r3, #154]	; 0x9a
 800d478:	7e61      	ldrb	r1, [r4, #25]
 800d47a:	01c0      	lsls	r0, r0, #7
 800d47c:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 800d480:	f883 009b 	strb.w	r0, [r3, #155]	; 0x9b
 800d484:	7ea0      	ldrb	r0, [r4, #26]
 800d486:	01c9      	lsls	r1, r1, #7
 800d488:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 800d48c:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
 800d490:	7ee1      	ldrb	r1, [r4, #27]
 800d492:	01c0      	lsls	r0, r0, #7
 800d494:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 800d498:	f883 009d 	strb.w	r0, [r3, #157]	; 0x9d
 800d49c:	7f20      	ldrb	r0, [r4, #28]
 800d49e:	01c9      	lsls	r1, r1, #7
 800d4a0:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 800d4a4:	f883 109e 	strb.w	r1, [r3, #158]	; 0x9e
 800d4a8:	7f61      	ldrb	r1, [r4, #29]
 800d4aa:	01c0      	lsls	r0, r0, #7
 800d4ac:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 800d4b0:	f883 009f 	strb.w	r0, [r3, #159]	; 0x9f
 800d4b4:	7fa0      	ldrb	r0, [r4, #30]
 800d4b6:	01c9      	lsls	r1, r1, #7
 800d4b8:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 800d4bc:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
 800d4c0:	7fe1      	ldrb	r1, [r4, #31]
 800d4c2:	01c0      	lsls	r0, r0, #7
 800d4c4:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 800d4c8:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
 800d4cc:	f894 0020 	ldrb.w	r0, [r4, #32]
 800d4d0:	01c9      	lsls	r1, r1, #7
 800d4d2:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 800d4d6:	f883 10a2 	strb.w	r1, [r3, #162]	; 0xa2
 800d4da:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 800d4de:	01c0      	lsls	r0, r0, #7
 800d4e0:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 800d4e4:	f883 00a3 	strb.w	r0, [r3, #163]	; 0xa3
 800d4e8:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 800d4ec:	01c9      	lsls	r1, r1, #7
 800d4ee:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 800d4f2:	f883 10a4 	strb.w	r1, [r3, #164]	; 0xa4
 800d4f6:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 800d4fa:	01c0      	lsls	r0, r0, #7
 800d4fc:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 800d500:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
 800d504:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800d508:	0852      	lsrs	r2, r2, #1
 800d50a:	01c9      	lsls	r1, r1, #7
 800d50c:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 800d510:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 800d514:	2004      	movs	r0, #4
 800d516:	f883 10a6 	strb.w	r1, [r3, #166]	; 0xa6
 800d51a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 800d51e:	f883 0097 	strb.w	r0, [r3, #151]	; 0x97
 800d522:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d526:	f023 0304 	bic.w	r3, r3, #4
 800d52a:	3511      	adds	r5, #17
 800d52c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d530:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d534:	0718      	lsls	r0, r3, #28
 800d536:	f140 8124 	bpl.w	800d782 <WriteRegisterConfiguration+0x3e2>
 800d53a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d53e:	06d9      	lsls	r1, r3, #27
 800d540:	f140 827e 	bpl.w	800da40 <WriteRegisterConfiguration+0x6a0>
 800d544:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 800d548:	f010 0303 	ands.w	r3, r0, #3
 800d54c:	f040 8116 	bne.w	800d77c <WriteRegisterConfiguration+0x3dc>
 800d550:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 800d554:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
 800d558:	1963      	adds	r3, r4, r5
 800d55a:	084a      	lsrs	r2, r1, #1
 800d55c:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
 800d560:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800d564:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800d568:	01c9      	lsls	r1, r1, #7
 800d56a:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d56e:	f883 1099 	strb.w	r1, [r3, #153]	; 0x99
 800d572:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 800d576:	01d2      	lsls	r2, r2, #7
 800d578:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d57c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 800d580:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800d584:	01c9      	lsls	r1, r1, #7
 800d586:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d58a:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
 800d58e:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 800d592:	01d2      	lsls	r2, r2, #7
 800d594:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d598:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800d59c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800d5a0:	01c9      	lsls	r1, r1, #7
 800d5a2:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d5a6:	f883 109d 	strb.w	r1, [r3, #157]	; 0x9d
 800d5aa:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 800d5ae:	01d2      	lsls	r2, r2, #7
 800d5b0:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d5b4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 800d5b8:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 800d5bc:	01c9      	lsls	r1, r1, #7
 800d5be:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d5c2:	f883 109f 	strb.w	r1, [r3, #159]	; 0x9f
 800d5c6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800d5ca:	01d2      	lsls	r2, r2, #7
 800d5cc:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d5d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800d5d4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800d5d8:	01c9      	lsls	r1, r1, #7
 800d5da:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d5de:	f883 10a1 	strb.w	r1, [r3, #161]	; 0xa1
 800d5e2:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 800d5e6:	01d2      	lsls	r2, r2, #7
 800d5e8:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d5ec:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800d5f0:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800d5f4:	01c9      	lsls	r1, r1, #7
 800d5f6:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d5fa:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 800d5fe:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 800d602:	01d2      	lsls	r2, r2, #7
 800d604:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d608:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 800d60c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800d610:	01c9      	lsls	r1, r1, #7
 800d612:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d616:	f883 10a5 	strb.w	r1, [r3, #165]	; 0xa5
 800d61a:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 800d61e:	01d2      	lsls	r2, r2, #7
 800d620:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d624:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 800d628:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 800d62c:	01c9      	lsls	r1, r1, #7
 800d62e:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d632:	f883 10a7 	strb.w	r1, [r3, #167]	; 0xa7
 800d636:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 800d63a:	01d2      	lsls	r2, r2, #7
 800d63c:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d640:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 800d644:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800d648:	01c9      	lsls	r1, r1, #7
 800d64a:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d64e:	f883 10a9 	strb.w	r1, [r3, #169]	; 0xa9
 800d652:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800d656:	01d2      	lsls	r2, r2, #7
 800d658:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d65c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 800d660:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 800d664:	01c9      	lsls	r1, r1, #7
 800d666:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d66a:	f883 10ab 	strb.w	r1, [r3, #171]	; 0xab
 800d66e:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
 800d672:	01d2      	lsls	r2, r2, #7
 800d674:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d678:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 800d67c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800d680:	01c9      	lsls	r1, r1, #7
 800d682:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d686:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
 800d68a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800d68e:	01d2      	lsls	r2, r2, #7
 800d690:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d694:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 800d698:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800d69c:	01c9      	lsls	r1, r1, #7
 800d69e:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d6a2:	f883 10af 	strb.w	r1, [r3, #175]	; 0xaf
 800d6a6:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 800d6aa:	01d2      	lsls	r2, r2, #7
 800d6ac:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d6b0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800d6b4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800d6b8:	01c9      	lsls	r1, r1, #7
 800d6ba:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d6be:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 800d6c2:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 800d6c6:	01d2      	lsls	r2, r2, #7
 800d6c8:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d6cc:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 800d6d0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800d6d4:	01c9      	lsls	r1, r1, #7
 800d6d6:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d6da:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 800d6de:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 800d6e2:	01d2      	lsls	r2, r2, #7
 800d6e4:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800d6e8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 800d6ec:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800d6f0:	01c9      	lsls	r1, r1, #7
 800d6f2:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800d6f6:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
 800d6fa:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 800d6fe:	01d2      	lsls	r2, r2, #7
 800d700:	01f1      	lsls	r1, r6, #7
 800d702:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
 800d706:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
 800d70a:	2106      	movs	r1, #6
 800d70c:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 800d710:	f883 00b7 	strb.w	r0, [r3, #183]	; 0xb7
 800d714:	f883 1097 	strb.w	r1, [r3, #151]	; 0x97
 800d718:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d71c:	f023 0308 	bic.w	r3, r3, #8
 800d720:	3521      	adds	r5, #33	; 0x21
 800d722:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d726:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d72a:	06db      	lsls	r3, r3, #27
 800d72c:	d512      	bpl.n	800d754 <WriteRegisterConfiguration+0x3b4>
 800d72e:	f105 0097 	add.w	r0, r5, #151	; 0x97
 800d732:	2204      	movs	r2, #4
 800d734:	4420      	add	r0, r4
 800d736:	f104 0147 	add.w	r1, r4, #71	; 0x47
 800d73a:	f009 ffe6 	bl	801770a <memcpy>
 800d73e:	1963      	adds	r3, r4, r5
 800d740:	2208      	movs	r2, #8
 800d742:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800d746:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d74a:	f023 0310 	bic.w	r3, r3, #16
 800d74e:	3504      	adds	r5, #4
 800d750:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d754:	f104 0297 	add.w	r2, r4, #151	; 0x97
 800d758:	e9cd 7400 	strd	r7, r4, [sp]
 800d75c:	462b      	mov	r3, r5
 800d75e:	4611      	mov	r1, r2
 800d760:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800d764:	f009 faa4 	bl	8016cb0 <ADS_Transfer>
 800d768:	1e06      	subs	r6, r0, #0
 800d76a:	f2c0 817d 	blt.w	800da68 <WriteRegisterConfiguration+0x6c8>
 800d76e:	4630      	mov	r0, r6
 800d770:	b002      	add	sp, #8
 800d772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d776:	bf00      	nop
 800d778:	0800d3a1 	.word	0x0800d3a1
 800d77c:	2b03      	cmp	r3, #3
 800d77e:	f43f aee7 	beq.w	800d550 <WriteRegisterConfiguration+0x1b0>
 800d782:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d786:	06da      	lsls	r2, r3, #27
 800d788:	d4d1      	bmi.n	800d72e <WriteRegisterConfiguration+0x38e>
 800d78a:	2d00      	cmp	r5, #0
 800d78c:	d1e2      	bne.n	800d754 <WriteRegisterConfiguration+0x3b4>
 800d78e:	2205      	movs	r2, #5
 800d790:	f104 014b 	add.w	r1, r4, #75	; 0x4b
 800d794:	f104 0092 	add.w	r0, r4, #146	; 0x92
 800d798:	f009 ffb7 	bl	801770a <memcpy>
 800d79c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d7a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800d7a4:	f023 0301 	bic.w	r3, r3, #1
 800d7a8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d7ac:	2a00      	cmp	r2, #0
 800d7ae:	d0de      	beq.n	800d76e <WriteRegisterConfiguration+0x3ce>
 800d7b0:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	b002      	add	sp, #8
 800d7b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7bc:	4710      	bx	r2
 800d7be:	f105 0097 	add.w	r0, r5, #151	; 0x97
 800d7c2:	2202      	movs	r2, #2
 800d7c4:	4420      	add	r0, r4
 800d7c6:	f104 017b 	add.w	r1, r4, #123	; 0x7b
 800d7ca:	f009 ff9e 	bl	801770a <memcpy>
 800d7ce:	1963      	adds	r3, r4, r5
 800d7d0:	222a      	movs	r2, #42	; 0x2a
 800d7d2:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800d7d6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d7da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d7de:	3502      	adds	r5, #2
 800d7e0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d7e4:	e620      	b.n	800d428 <WriteRegisterConfiguration+0x88>
 800d7e6:	f105 0097 	add.w	r0, r5, #151	; 0x97
 800d7ea:	2203      	movs	r2, #3
 800d7ec:	4420      	add	r0, r4
 800d7ee:	f104 0178 	add.w	r1, r4, #120	; 0x78
 800d7f2:	f009 ff8a 	bl	801770a <memcpy>
 800d7f6:	1963      	adds	r3, r4, r5
 800d7f8:	2228      	movs	r2, #40	; 0x28
 800d7fa:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800d7fe:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d802:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d806:	3503      	adds	r5, #3
 800d808:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d80c:	e607      	b.n	800d41e <WriteRegisterConfiguration+0x7e>
 800d80e:	2203      	movs	r2, #3
 800d810:	3159      	adds	r1, #89	; 0x59
 800d812:	f104 0097 	add.w	r0, r4, #151	; 0x97
 800d816:	f009 ff78 	bl	801770a <memcpy>
 800d81a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d81e:	4f9f      	ldr	r7, [pc, #636]	; (800da9c <WriteRegisterConfiguration+0x6fc>)
 800d820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d824:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d828:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d82c:	2212      	movs	r2, #18
 800d82e:	079b      	lsls	r3, r3, #30
 800d830:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
 800d834:	f04f 009a 	mov.w	r0, #154	; 0x9a
 800d838:	f04f 080c 	mov.w	r8, #12
 800d83c:	f04f 0503 	mov.w	r5, #3
 800d840:	f57f adc5 	bpl.w	800d3ce <WriteRegisterConfiguration+0x2e>
 800d844:	4425      	add	r5, r4
 800d846:	4420      	add	r0, r4
 800d848:	2209      	movs	r2, #9
 800d84a:	f104 010c 	add.w	r1, r4, #12
 800d84e:	f009 ff5c 	bl	801770a <memcpy>
 800d852:	2302      	movs	r3, #2
 800d854:	f885 3097 	strb.w	r3, [r5, #151]	; 0x97
 800d858:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d85c:	f023 0302 	bic.w	r3, r3, #2
 800d860:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d864:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d868:	0698      	lsls	r0, r3, #26
 800d86a:	4645      	mov	r5, r8
 800d86c:	f57f adb4 	bpl.w	800d3d8 <WriteRegisterConfiguration+0x38>
 800d870:	f105 0097 	add.w	r0, r5, #151	; 0x97
 800d874:	2205      	movs	r2, #5
 800d876:	f104 014b 	add.w	r1, r4, #75	; 0x4b
 800d87a:	4420      	add	r0, r4
 800d87c:	f009 ff45 	bl	801770a <memcpy>
 800d880:	1963      	adds	r3, r4, r5
 800d882:	220a      	movs	r2, #10
 800d884:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800d888:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d88c:	f023 0320 	bic.w	r3, r3, #32
 800d890:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d894:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d898:	0659      	lsls	r1, r3, #25
 800d89a:	f105 0505 	add.w	r5, r5, #5
 800d89e:	f57f ada0 	bpl.w	800d3e2 <WriteRegisterConfiguration+0x42>
 800d8a2:	f105 0097 	add.w	r0, r5, #151	; 0x97
 800d8a6:	2204      	movs	r2, #4
 800d8a8:	4420      	add	r0, r4
 800d8aa:	f104 0150 	add.w	r1, r4, #80	; 0x50
 800d8ae:	f009 ff2c 	bl	801770a <memcpy>
 800d8b2:	1963      	adds	r3, r4, r5
 800d8b4:	220c      	movs	r2, #12
 800d8b6:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800d8ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d8be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8c2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d8c6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d8ca:	061a      	lsls	r2, r3, #24
 800d8cc:	f105 0504 	add.w	r5, r5, #4
 800d8d0:	f57f ad8c 	bpl.w	800d3ec <WriteRegisterConfiguration+0x4c>
 800d8d4:	f105 0097 	add.w	r0, r5, #151	; 0x97
 800d8d8:	2203      	movs	r2, #3
 800d8da:	4420      	add	r0, r4
 800d8dc:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800d8e0:	f009 ff13 	bl	801770a <memcpy>
 800d8e4:	1963      	adds	r3, r4, r5
 800d8e6:	220e      	movs	r2, #14
 800d8e8:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800d8ec:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d8f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8f4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d8f8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d8fc:	045b      	lsls	r3, r3, #17
 800d8fe:	f105 0503 	add.w	r5, r5, #3
 800d902:	f57f ad78 	bpl.w	800d3f6 <WriteRegisterConfiguration+0x56>
 800d906:	f105 0097 	add.w	r0, r5, #151	; 0x97
 800d90a:	2203      	movs	r2, #3
 800d90c:	4420      	add	r0, r4
 800d90e:	f104 0169 	add.w	r1, r4, #105	; 0x69
 800d912:	f009 fefa 	bl	801770a <memcpy>
 800d916:	1963      	adds	r3, r4, r5
 800d918:	221c      	movs	r2, #28
 800d91a:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800d91e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d926:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d92a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d92e:	0418      	lsls	r0, r3, #16
 800d930:	f105 0503 	add.w	r5, r5, #3
 800d934:	f57f ad64 	bpl.w	800d400 <WriteRegisterConfiguration+0x60>
 800d938:	f105 0097 	add.w	r0, r5, #151	; 0x97
 800d93c:	2204      	movs	r2, #4
 800d93e:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 800d942:	4420      	add	r0, r4
 800d944:	f009 fee1 	bl	801770a <memcpy>
 800d948:	1963      	adds	r3, r4, r5
 800d94a:	221e      	movs	r2, #30
 800d94c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800d950:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d954:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d958:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d95c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d960:	03d9      	lsls	r1, r3, #15
 800d962:	f105 0504 	add.w	r5, r5, #4
 800d966:	f57f ad50 	bpl.w	800d40a <WriteRegisterConfiguration+0x6a>
 800d96a:	f105 0097 	add.w	r0, r5, #151	; 0x97
 800d96e:	2204      	movs	r2, #4
 800d970:	4420      	add	r0, r4
 800d972:	f104 0170 	add.w	r1, r4, #112	; 0x70
 800d976:	f009 fec8 	bl	801770a <memcpy>
 800d97a:	1963      	adds	r3, r4, r5
 800d97c:	2220      	movs	r2, #32
 800d97e:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800d982:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d98a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d98e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d992:	039a      	lsls	r2, r3, #14
 800d994:	f105 0504 	add.w	r5, r5, #4
 800d998:	f57f ad3c 	bpl.w	800d414 <WriteRegisterConfiguration+0x74>
 800d99c:	f105 0097 	add.w	r0, r5, #151	; 0x97
 800d9a0:	2204      	movs	r2, #4
 800d9a2:	4420      	add	r0, r4
 800d9a4:	f104 0174 	add.w	r1, r4, #116	; 0x74
 800d9a8:	f009 feaf 	bl	801770a <memcpy>
 800d9ac:	1963      	adds	r3, r4, r5
 800d9ae:	2222      	movs	r2, #34	; 0x22
 800d9b0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800d9b4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d9b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d9bc:	3504      	adds	r5, #4
 800d9be:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d9c2:	e527      	b.n	800d414 <WriteRegisterConfiguration+0x74>
 800d9c4:	2b03      	cmp	r3, #3
 800d9c6:	f43f ad42 	beq.w	800d44e <WriteRegisterConfiguration+0xae>
 800d9ca:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d9ce:	0718      	lsls	r0, r3, #28
 800d9d0:	f57f aed7 	bpl.w	800d782 <WriteRegisterConfiguration+0x3e2>
 800d9d4:	e5b1      	b.n	800d53a <WriteRegisterConfiguration+0x19a>
 800d9d6:	f105 0097 	add.w	r0, r5, #151	; 0x97
 800d9da:	2211      	movs	r2, #17
 800d9dc:	4420      	add	r0, r4
 800d9de:	f104 0115 	add.w	r1, r4, #21
 800d9e2:	f009 fe92 	bl	801770a <memcpy>
 800d9e6:	1963      	adds	r3, r4, r5
 800d9e8:	2204      	movs	r2, #4
 800d9ea:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800d9ee:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d9f2:	f023 0304 	bic.w	r3, r3, #4
 800d9f6:	3511      	adds	r5, #17
 800d9f8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d9fc:	e598      	b.n	800d530 <WriteRegisterConfiguration+0x190>
 800d9fe:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 800da02:	4927      	ldr	r1, [pc, #156]	; (800daa0 <WriteRegisterConfiguration+0x700>)
 800da04:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
 800da08:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800da0c:	f022 0201 	bic.w	r2, r2, #1
 800da10:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800da14:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800da18:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800da1c:	f043 0302 	orr.w	r3, r3, #2
 800da20:	f022 0201 	bic.w	r2, r2, #1
 800da24:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800da28:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
 800da2c:	2d00      	cmp	r5, #0
 800da2e:	f43f ae9e 	beq.w	800d76e <WriteRegisterConfiguration+0x3ce>
 800da32:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800da36:	462b      	mov	r3, r5
 800da38:	b002      	add	sp, #8
 800da3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da3e:	4718      	bx	r3
 800da40:	f105 0097 	add.w	r0, r5, #151	; 0x97
 800da44:	2221      	movs	r2, #33	; 0x21
 800da46:	4420      	add	r0, r4
 800da48:	f104 0126 	add.w	r1, r4, #38	; 0x26
 800da4c:	f009 fe5d 	bl	801770a <memcpy>
 800da50:	1963      	adds	r3, r4, r5
 800da52:	2206      	movs	r2, #6
 800da54:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800da58:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800da5c:	f023 0308 	bic.w	r3, r3, #8
 800da60:	3521      	adds	r5, #33	; 0x21
 800da62:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800da66:	e65e      	b.n	800d726 <WriteRegisterConfiguration+0x386>
 800da68:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800da6c:	4d0c      	ldr	r5, [pc, #48]	; (800daa0 <WriteRegisterConfiguration+0x700>)
 800da6e:	f894 210a 	ldrb.w	r2, [r4, #266]	; 0x10a
 800da72:	f021 0101 	bic.w	r1, r1, #1
 800da76:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800da7a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800da7e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800da82:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800da86:	f021 0101 	bic.w	r1, r1, #1
 800da8a:	f042 0202 	orr.w	r2, r2, #2
 800da8e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800da92:	f884 210a 	strb.w	r2, [r4, #266]	; 0x10a
 800da96:	2d00      	cmp	r5, #0
 800da98:	d1cb      	bne.n	800da32 <WriteRegisterConfiguration+0x692>
 800da9a:	e668      	b.n	800d76e <WriteRegisterConfiguration+0x3ce>
 800da9c:	0800daa5 	.word	0x0800daa5
 800daa0:	0033dffe 	.word	0x0033dffe

0800daa4 <WriteRegisterConfigurationCheckDeviceConfig>:
 800daa4:	2800      	cmp	r0, #0
 800daa6:	db07      	blt.n	800dab8 <WriteRegisterConfigurationCheckDeviceConfig+0x14>
 800daa8:	f891 3099 	ldrb.w	r3, [r1, #153]	; 0x99
 800daac:	069b      	lsls	r3, r3, #26
 800daae:	bf48      	it	mi
 800dab0:	2000      	movmi	r0, #0
 800dab2:	d521      	bpl.n	800daf8 <WriteRegisterConfigurationCheckDeviceConfig+0x54>
 800dab4:	f7ff bc74 	b.w	800d3a0 <WriteRegisterConfiguration>
 800dab8:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 800dabc:	f891 310a 	ldrb.w	r3, [r1, #266]	; 0x10a
 800dac0:	b430      	push	{r4, r5}
 800dac2:	f022 0201 	bic.w	r2, r2, #1
 800dac6:	4d18      	ldr	r5, [pc, #96]	; (800db28 <WriteRegisterConfigurationCheckDeviceConfig+0x84>)
 800dac8:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 800dacc:	f8c1 5080 	str.w	r5, [r1, #128]	; 0x80
 800dad0:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 800dad4:	f8d1 410c 	ldr.w	r4, [r1, #268]	; 0x10c
 800dad8:	f043 0302 	orr.w	r3, r3, #2
 800dadc:	f022 0201 	bic.w	r2, r2, #1
 800dae0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 800dae4:	f881 310a 	strb.w	r3, [r1, #266]	; 0x10a
 800dae8:	b124      	cbz	r4, 800daf4 <WriteRegisterConfigurationCheckDeviceConfig+0x50>
 800daea:	4623      	mov	r3, r4
 800daec:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
 800daf0:	bc30      	pop	{r4, r5}
 800daf2:	4718      	bx	r3
 800daf4:	bc30      	pop	{r4, r5}
 800daf6:	4770      	bx	lr
 800daf8:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 800dafc:	480a      	ldr	r0, [pc, #40]	; (800db28 <WriteRegisterConfigurationCheckDeviceConfig+0x84>)
 800dafe:	f891 310a 	ldrb.w	r3, [r1, #266]	; 0x10a
 800db02:	f022 0201 	bic.w	r2, r2, #1
 800db06:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 800db0a:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
 800db0e:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 800db12:	f043 0302 	orr.w	r3, r3, #2
 800db16:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800db1a:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 800db1e:	f881 310a 	strb.w	r3, [r1, #266]	; 0x10a
 800db22:	f06f 0071 	mvn.w	r0, #113	; 0x71
 800db26:	e7c5      	b.n	800dab4 <WriteRegisterConfigurationCheckDeviceConfig+0x10>
 800db28:	0033dffe 	.word	0x0033dffe

0800db2c <WriteBlockEnable>:
 800db2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db2e:	1e03      	subs	r3, r0, #0
 800db30:	b083      	sub	sp, #12
 800db32:	460c      	mov	r4, r1
 800db34:	db1a      	blt.n	800db6c <WriteBlockEnable+0x40>
 800db36:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800db3a:	05db      	lsls	r3, r3, #23
 800db3c:	d536      	bpl.n	800dbac <WriteBlockEnable+0x80>
 800db3e:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
 800db42:	4b59      	ldr	r3, [pc, #356]	; (800dca8 <WriteBlockEnable+0x17c>)
 800db44:	9401      	str	r4, [sp, #4]
 800db46:	2010      	movs	r0, #16
 800db48:	f104 0297 	add.w	r2, r4, #151	; 0x97
 800db4c:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
 800db50:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
 800db54:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800db58:	9300      	str	r3, [sp, #0]
 800db5a:	4611      	mov	r1, r2
 800db5c:	2302      	movs	r3, #2
 800db5e:	f009 f8a7 	bl	8016cb0 <ADS_Transfer>
 800db62:	1e03      	subs	r3, r0, #0
 800db64:	db02      	blt.n	800db6c <WriteBlockEnable+0x40>
 800db66:	4618      	mov	r0, r3
 800db68:	b003      	add	sp, #12
 800db6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db6c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800db70:	4d4e      	ldr	r5, [pc, #312]	; (800dcac <WriteBlockEnable+0x180>)
 800db72:	f894 210a 	ldrb.w	r2, [r4, #266]	; 0x10a
 800db76:	f021 0101 	bic.w	r1, r1, #1
 800db7a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800db7e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800db82:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800db86:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800db8a:	f021 0101 	bic.w	r1, r1, #1
 800db8e:	f042 0202 	orr.w	r2, r2, #2
 800db92:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800db96:	f884 210a 	strb.w	r2, [r4, #266]	; 0x10a
 800db9a:	2d00      	cmp	r5, #0
 800db9c:	d0e3      	beq.n	800db66 <WriteBlockEnable+0x3a>
 800db9e:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800dba2:	462b      	mov	r3, r5
 800dba4:	b003      	add	sp, #12
 800dba6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dbaa:	4718      	bx	r3
 800dbac:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
 800dbb0:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
 800dbb4:	4b3e      	ldr	r3, [pc, #248]	; (800dcb0 <WriteBlockEnable+0x184>)
 800dbb6:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
 800dbba:	f005 7500 	and.w	r5, r5, #33554432	; 0x2000000
 800dbbe:	f000 0020 	and.w	r0, r0, #32
 800dbc2:	4328      	orrs	r0, r5
 800dbc4:	d053      	beq.n	800dc6e <WriteBlockEnable+0x142>
 800dbc6:	f891 7095 	ldrb.w	r7, [r1, #149]	; 0x95
 800dbca:	f8d1 3130 	ldr.w	r3, [r1, #304]	; 0x130
 800dbce:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 800dbd2:	2f09      	cmp	r7, #9
 800dbd4:	f504 768a 	add.w	r6, r4, #276	; 0x114
 800dbd8:	bf94      	ite	ls
 800dbda:	8b19      	ldrhls	r1, [r3, #24]
 800dbdc:	8b59      	ldrhhi	r1, [r3, #26]
 800dbde:	4630      	mov	r0, r6
 800dbe0:	f7f7 fd22 	bl	8005628 <Time_CheckTimeoutUSec>
 800dbe4:	b310      	cbz	r0, 800dc2c <WriteBlockEnable+0x100>
 800dbe6:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
 800dbea:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800dbee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800dbf2:	f3c2 1383 	ubfx	r3, r2, #6, #4
 800dbf6:	b365      	cbz	r5, 800dc52 <WriteBlockEnable+0x126>
 800dbf8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800dbfc:	f042 0220 	orr.w	r2, r2, #32
 800dc00:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800dc04:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800dc08:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800dc0c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800dc10:	2500      	movs	r5, #0
 800dc12:	019a      	lsls	r2, r3, #6
 800dc14:	f021 0303 	bic.w	r3, r1, #3
 800dc18:	4315      	orrs	r5, r2
 800dc1a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 800dc1e:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
 800dc22:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 800dc26:	4630      	mov	r0, r6
 800dc28:	f7f7 fc28 	bl	800547c <Time_GetNow>
 800dc2c:	4621      	mov	r1, r4
 800dc2e:	230a      	movs	r3, #10
 800dc30:	f801 3f92 	strb.w	r3, [r1, #146]!
 800dc34:	4b1f      	ldr	r3, [pc, #124]	; (800dcb4 <WriteBlockEnable+0x188>)
 800dc36:	2200      	movs	r2, #0
 800dc38:	e9cd 3400 	strd	r3, r4, [sp]
 800dc3c:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800dc40:	2305      	movs	r3, #5
 800dc42:	f009 f835 	bl	8016cb0 <ADS_Transfer>
 800dc46:	1e03      	subs	r3, r0, #0
 800dc48:	da8d      	bge.n	800db66 <WriteBlockEnable+0x3a>
 800dc4a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800dc4e:	4621      	mov	r1, r4
 800dc50:	e7a8      	b.n	800dba4 <WriteBlockEnable+0x78>
 800dc52:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 800dc56:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 800dc5a:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 800dc5e:	f3c2 1283 	ubfx	r2, r2, #6, #4
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d008      	beq.n	800dc78 <WriteBlockEnable+0x14c>
 800dc66:	2f00      	cmp	r7, #0
 800dc68:	bf08      	it	eq
 800dc6a:	4613      	moveq	r3, r2
 800dc6c:	e7d1      	b.n	800dc12 <WriteBlockEnable+0xe6>
 800dc6e:	b003      	add	sp, #12
 800dc70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dc74:	f7ff bb94 	b.w	800d3a0 <WriteRegisterConfiguration>
 800dc78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800dc7c:	4287      	cmp	r7, r0
 800dc7e:	d00c      	beq.n	800dc9a <WriteBlockEnable+0x16e>
 800dc80:	da05      	bge.n	800dc8e <WriteBlockEnable+0x162>
 800dc82:	1c7d      	adds	r5, r7, #1
 800dc84:	42a8      	cmp	r0, r5
 800dc86:	bfa8      	it	ge
 800dc88:	4628      	movge	r0, r5
 800dc8a:	b245      	sxtb	r5, r0
 800dc8c:	e7c1      	b.n	800dc12 <WriteBlockEnable+0xe6>
 800dc8e:	b148      	cbz	r0, 800dca4 <WriteBlockEnable+0x178>
 800dc90:	3f01      	subs	r7, #1
 800dc92:	42b8      	cmp	r0, r7
 800dc94:	bfb8      	it	lt
 800dc96:	4638      	movlt	r0, r7
 800dc98:	e7f7      	b.n	800dc8a <WriteBlockEnable+0x15e>
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800dca0:	4621      	mov	r1, r4
 800dca2:	e77f      	b.n	800dba4 <WriteBlockEnable+0x78>
 800dca4:	462f      	mov	r7, r5
 800dca6:	e7f4      	b.n	800dc92 <WriteBlockEnable+0x166>
 800dca8:	0800d2cd 	.word	0x0800d2cd
 800dcac:	0033dffe 	.word	0x0033dffe
 800dcb0:	0800d3a1 	.word	0x0800d3a1
 800dcb4:	0800cec9 	.word	0x0800cec9

0800dcb8 <PollClockLocked>:
 800dcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcba:	1e03      	subs	r3, r0, #0
 800dcbc:	b083      	sub	sp, #12
 800dcbe:	f2c0 8103 	blt.w	800dec8 <PollClockLocked+0x210>
 800dcc2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800dcc6:	460c      	mov	r4, r1
 800dcc8:	b383      	cbz	r3, 800dd2c <PollClockLocked+0x74>
 800dcca:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800dcce:	0699      	lsls	r1, r3, #26
 800dcd0:	f140 816f 	bpl.w	800dfb2 <PollClockLocked+0x2fa>
 800dcd4:	f104 0688 	add.w	r6, r4, #136	; 0x88
 800dcd8:	4630      	mov	r0, r6
 800dcda:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800dcde:	f7f7 fd0f 	bl	8005700 <Time_CheckTimeoutMSec>
 800dce2:	4605      	mov	r5, r0
 800dce4:	2800      	cmp	r0, #0
 800dce6:	f040 80a4 	bne.w	800de32 <PollClockLocked+0x17a>
 800dcea:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800dcee:	065a      	lsls	r2, r3, #25
 800dcf0:	d432      	bmi.n	800dd58 <PollClockLocked+0xa0>
 800dcf2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800dcf6:	9401      	str	r4, [sp, #4]
 800dcf8:	4622      	mov	r2, r4
 800dcfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcfe:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800dd02:	2512      	movs	r5, #18
 800dd04:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 800dd08:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800dd0c:	f802 5f97 	strb.w	r5, [r2, #151]!
 800dd10:	48c0      	ldr	r0, [pc, #768]	; (800e014 <PollClockLocked+0x35c>)
 800dd12:	9000      	str	r0, [sp, #0]
 800dd14:	2303      	movs	r3, #3
 800dd16:	4611      	mov	r1, r2
 800dd18:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800dd1c:	f008 ffc8 	bl	8016cb0 <ADS_Transfer>
 800dd20:	1e03      	subs	r3, r0, #0
 800dd22:	f2c0 8100 	blt.w	800df26 <PollClockLocked+0x26e>
 800dd26:	4618      	mov	r0, r3
 800dd28:	b003      	add	sp, #12
 800dd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd2c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d1ca      	bne.n	800dcca <PollClockLocked+0x12>
 800dd34:	f101 0088 	add.w	r0, r1, #136	; 0x88
 800dd38:	f7f7 fba0 	bl	800547c <Time_GetNow>
 800dd3c:	2203      	movs	r2, #3
 800dd3e:	f104 0159 	add.w	r1, r4, #89	; 0x59
 800dd42:	f104 0097 	add.w	r0, r4, #151	; 0x97
 800dd46:	f009 fce0 	bl	801770a <memcpy>
 800dd4a:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800dd4e:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800dd52:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 800dd56:	e7ba      	b.n	800dcce <PollClockLocked+0x16>
 800dd58:	4630      	mov	r0, r6
 800dd5a:	f7f7 fb93 	bl	8005484 <Time_GetElapsedUSec>
 800dd5e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800dd62:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800dd66:	49ac      	ldr	r1, [pc, #688]	; (800e018 <PollClockLocked+0x360>)
 800dd68:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800dd6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd70:	4290      	cmp	r0, r2
 800dd72:	bf28      	it	cs
 800dd74:	4610      	movcs	r0, r2
 800dd76:	f006 7600 	and.w	r6, r6, #33554432	; 0x2000000
 800dd7a:	f003 0320 	and.w	r3, r3, #32
 800dd7e:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
 800dd82:	ea53 0006 	orrs.w	r0, r3, r6
 800dd86:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 800dd8a:	f8c4 1110 	str.w	r1, [r4, #272]	; 0x110
 800dd8e:	d04a      	beq.n	800de26 <PollClockLocked+0x16e>
 800dd90:	f894 7095 	ldrb.w	r7, [r4, #149]	; 0x95
 800dd94:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800dd98:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 800dd9c:	2f09      	cmp	r7, #9
 800dd9e:	f504 758a 	add.w	r5, r4, #276	; 0x114
 800dda2:	bf94      	ite	ls
 800dda4:	8b19      	ldrhls	r1, [r3, #24]
 800dda6:	8b59      	ldrhhi	r1, [r3, #26]
 800dda8:	4628      	mov	r0, r5
 800ddaa:	f7f7 fc3d 	bl	8005628 <Time_CheckTimeoutUSec>
 800ddae:	b320      	cbz	r0, 800ddfa <PollClockLocked+0x142>
 800ddb0:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
 800ddb4:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800ddb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ddbc:	f3c2 1383 	ubfx	r3, r2, #6, #4
 800ddc0:	2e00      	cmp	r6, #0
 800ddc2:	f000 80a2 	beq.w	800df0a <PollClockLocked+0x252>
 800ddc6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800ddca:	f042 0220 	orr.w	r2, r2, #32
 800ddce:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800ddd2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800ddd6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800ddda:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800ddde:	2600      	movs	r6, #0
 800dde0:	019a      	lsls	r2, r3, #6
 800dde2:	f021 0303 	bic.w	r3, r1, #3
 800dde6:	4316      	orrs	r6, r2
 800dde8:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 800ddec:	f884 6095 	strb.w	r6, [r4, #149]	; 0x95
 800ddf0:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	f7f7 fb41 	bl	800547c <Time_GetNow>
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	230a      	movs	r3, #10
 800ddfe:	f801 3f92 	strb.w	r3, [r1, #146]!
 800de02:	4b86      	ldr	r3, [pc, #536]	; (800e01c <PollClockLocked+0x364>)
 800de04:	2200      	movs	r2, #0
 800de06:	e9cd 3400 	strd	r3, r4, [sp]
 800de0a:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800de0e:	2305      	movs	r3, #5
 800de10:	f008 ff4e 	bl	8016cb0 <ADS_Transfer>
 800de14:	1e03      	subs	r3, r0, #0
 800de16:	da86      	bge.n	800dd26 <PollClockLocked+0x6e>
 800de18:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800de1c:	4621      	mov	r1, r4
 800de1e:	b003      	add	sp, #12
 800de20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800de24:	4718      	bx	r3
 800de26:	4621      	mov	r1, r4
 800de28:	b003      	add	sp, #12
 800de2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800de2e:	f7ff bab7 	b.w	800d3a0 <WriteRegisterConfiguration>
 800de32:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800de36:	487a      	ldr	r0, [pc, #488]	; (800e020 <PollClockLocked+0x368>)
 800de38:	f7f3 f80a 	bl	8000e50 <print>
 800de3c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800de40:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800de44:	4b74      	ldr	r3, [pc, #464]	; (800e018 <PollClockLocked+0x360>)
 800de46:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800de4a:	f005 7500 	and.w	r5, r5, #33554432	; 0x2000000
 800de4e:	f000 0020 	and.w	r0, r0, #32
 800de52:	2300      	movs	r3, #0
 800de54:	4328      	orrs	r0, r5
 800de56:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
 800de5a:	d0e4      	beq.n	800de26 <PollClockLocked+0x16e>
 800de5c:	f894 7095 	ldrb.w	r7, [r4, #149]	; 0x95
 800de60:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800de64:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 800de68:	2f09      	cmp	r7, #9
 800de6a:	f504 768a 	add.w	r6, r4, #276	; 0x114
 800de6e:	bf94      	ite	ls
 800de70:	8b19      	ldrhls	r1, [r3, #24]
 800de72:	8b59      	ldrhhi	r1, [r3, #26]
 800de74:	4630      	mov	r0, r6
 800de76:	f7f7 fbd7 	bl	8005628 <Time_CheckTimeoutUSec>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d0bd      	beq.n	800ddfa <PollClockLocked+0x142>
 800de7e:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
 800de82:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800de86:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800de8a:	f3c2 1383 	ubfx	r3, r2, #6, #4
 800de8e:	2d00      	cmp	r5, #0
 800de90:	d16b      	bne.n	800df6a <PollClockLocked+0x2b2>
 800de92:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 800de96:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 800de9a:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 800de9e:	f3c2 1283 	ubfx	r2, r2, #6, #4
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d07a      	beq.n	800df9c <PollClockLocked+0x2e4>
 800dea6:	2f00      	cmp	r7, #0
 800dea8:	bf08      	it	eq
 800deaa:	4613      	moveq	r3, r2
 800deac:	019a      	lsls	r2, r3, #6
 800deae:	f021 0303 	bic.w	r3, r1, #3
 800deb2:	4315      	orrs	r5, r2
 800deb4:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 800deb8:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
 800debc:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 800dec0:	4630      	mov	r0, r6
 800dec2:	f7f7 fadb 	bl	800547c <Time_GetNow>
 800dec6:	e798      	b.n	800ddfa <PollClockLocked+0x142>
 800dec8:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 800decc:	4d55      	ldr	r5, [pc, #340]	; (800e024 <PollClockLocked+0x36c>)
 800dece:	f891 210a 	ldrb.w	r2, [r1, #266]	; 0x10a
 800ded2:	f024 0401 	bic.w	r4, r4, #1
 800ded6:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
 800deda:	f8c1 5080 	str.w	r5, [r1, #128]	; 0x80
 800dede:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 800dee2:	f8d1 510c 	ldr.w	r5, [r1, #268]	; 0x10c
 800dee6:	f024 0401 	bic.w	r4, r4, #1
 800deea:	f042 0202 	orr.w	r2, r2, #2
 800deee:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
 800def2:	f881 210a 	strb.w	r2, [r1, #266]	; 0x10a
 800def6:	2d00      	cmp	r5, #0
 800def8:	f43f af15 	beq.w	800dd26 <PollClockLocked+0x6e>
 800defc:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
 800df00:	462b      	mov	r3, r5
 800df02:	b003      	add	sp, #12
 800df04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df08:	4718      	bx	r3
 800df0a:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 800df0e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 800df12:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 800df16:	f3c2 1283 	ubfx	r2, r2, #6, #4
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d033      	beq.n	800df86 <PollClockLocked+0x2ce>
 800df1e:	2f00      	cmp	r7, #0
 800df20:	bf08      	it	eq
 800df22:	4613      	moveq	r3, r2
 800df24:	e75c      	b.n	800dde0 <PollClockLocked+0x128>
 800df26:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 800df2a:	f041 0102 	orr.w	r1, r1, #2
 800df2e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800df32:	483c      	ldr	r0, [pc, #240]	; (800e024 <PollClockLocked+0x36c>)
 800df34:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800df38:	f884 110a 	strb.w	r1, [r4, #266]	; 0x10a
 800df3c:	f022 0201 	bic.w	r2, r2, #1
 800df40:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800df44:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 800df48:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800df4c:	2100      	movs	r1, #0
 800df4e:	f022 0201 	bic.w	r2, r2, #1
 800df52:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800df56:	e9c4 1122 	strd	r1, r1, [r4, #136]	; 0x88
 800df5a:	2d00      	cmp	r5, #0
 800df5c:	f43f aee3 	beq.w	800dd26 <PollClockLocked+0x6e>
 800df60:	4618      	mov	r0, r3
 800df62:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800df66:	462b      	mov	r3, r5
 800df68:	e7cb      	b.n	800df02 <PollClockLocked+0x24a>
 800df6a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800df6e:	f042 0220 	orr.w	r2, r2, #32
 800df72:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800df76:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800df7a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800df7e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800df82:	2500      	movs	r5, #0
 800df84:	e792      	b.n	800deac <PollClockLocked+0x1f4>
 800df86:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800df8a:	4287      	cmp	r7, r0
 800df8c:	d033      	beq.n	800dff6 <PollClockLocked+0x33e>
 800df8e:	da26      	bge.n	800dfde <PollClockLocked+0x326>
 800df90:	1c7e      	adds	r6, r7, #1
 800df92:	42b0      	cmp	r0, r6
 800df94:	bfa8      	it	ge
 800df96:	4630      	movge	r0, r6
 800df98:	b246      	sxtb	r6, r0
 800df9a:	e721      	b.n	800dde0 <PollClockLocked+0x128>
 800df9c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800dfa0:	4287      	cmp	r7, r0
 800dfa2:	d02f      	beq.n	800e004 <PollClockLocked+0x34c>
 800dfa4:	da21      	bge.n	800dfea <PollClockLocked+0x332>
 800dfa6:	3701      	adds	r7, #1
 800dfa8:	42b8      	cmp	r0, r7
 800dfaa:	bfa8      	it	ge
 800dfac:	4638      	movge	r0, r7
 800dfae:	b245      	sxtb	r5, r0
 800dfb0:	e77c      	b.n	800deac <PollClockLocked+0x1f4>
 800dfb2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800dfb6:	4a1b      	ldr	r2, [pc, #108]	; (800e024 <PollClockLocked+0x36c>)
 800dfb8:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 800dfbc:	f023 0301 	bic.w	r3, r3, #1
 800dfc0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800dfc4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800dfc8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800dfcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dfd0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800dfd4:	f041 0102 	orr.w	r1, r1, #2
 800dfd8:	f06f 0371 	mvn.w	r3, #113	; 0x71
 800dfdc:	e7a7      	b.n	800df2e <PollClockLocked+0x276>
 800dfde:	b178      	cbz	r0, 800e000 <PollClockLocked+0x348>
 800dfe0:	3f01      	subs	r7, #1
 800dfe2:	42b8      	cmp	r0, r7
 800dfe4:	bfb8      	it	lt
 800dfe6:	4638      	movlt	r0, r7
 800dfe8:	e7d6      	b.n	800df98 <PollClockLocked+0x2e0>
 800dfea:	b180      	cbz	r0, 800e00e <PollClockLocked+0x356>
 800dfec:	3f01      	subs	r7, #1
 800dfee:	42b8      	cmp	r0, r7
 800dff0:	bfb8      	it	lt
 800dff2:	4638      	movlt	r0, r7
 800dff4:	e7db      	b.n	800dfae <PollClockLocked+0x2f6>
 800dff6:	4630      	mov	r0, r6
 800dff8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800dffc:	4621      	mov	r1, r4
 800dffe:	e70e      	b.n	800de1e <PollClockLocked+0x166>
 800e000:	4637      	mov	r7, r6
 800e002:	e7ee      	b.n	800dfe2 <PollClockLocked+0x32a>
 800e004:	4628      	mov	r0, r5
 800e006:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800e00a:	4621      	mov	r1, r4
 800e00c:	e707      	b.n	800de1e <PollClockLocked+0x166>
 800e00e:	462f      	mov	r7, r5
 800e010:	e7ed      	b.n	800dfee <PollClockLocked+0x336>
 800e012:	bf00      	nop
 800e014:	0800dcb9 	.word	0x0800dcb9
 800e018:	0800d3a1 	.word	0x0800d3a1
 800e01c:	0800cec9 	.word	0x0800cec9
 800e020:	0801ab34 	.word	0x0801ab34
 800e024:	0033dffe 	.word	0x0033dffe

0800e028 <VerifyBlockEnable>:
 800e028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e02a:	1e05      	subs	r5, r0, #0
 800e02c:	b083      	sub	sp, #12
 800e02e:	f891 410a 	ldrb.w	r4, [r1, #266]	; 0x10a
 800e032:	f2c0 80bf 	blt.w	800e1b4 <VerifyBlockEnable+0x18c>
 800e036:	f891 3098 	ldrb.w	r3, [r1, #152]	; 0x98
 800e03a:	f891 2058 	ldrb.w	r2, [r1, #88]	; 0x58
 800e03e:	07de      	lsls	r6, r3, #31
 800e040:	d522      	bpl.n	800e088 <VerifyBlockEnable+0x60>
 800e042:	07d0      	lsls	r0, r2, #31
 800e044:	d520      	bpl.n	800e088 <VerifyBlockEnable+0x60>
 800e046:	4053      	eors	r3, r2
 800e048:	f013 0fef 	tst.w	r3, #239	; 0xef
 800e04c:	bf0c      	ite	eq
 800e04e:	2301      	moveq	r3, #1
 800e050:	2300      	movne	r3, #0
 800e052:	b1fb      	cbz	r3, 800e094 <VerifyBlockEnable+0x6c>
 800e054:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800e058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e05c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800e060:	06d3      	lsls	r3, r2, #27
 800e062:	d445      	bmi.n	800e0f0 <VerifyBlockEnable+0xc8>
 800e064:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
 800e068:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
 800e06c:	4b6d      	ldr	r3, [pc, #436]	; (800e224 <VerifyBlockEnable+0x1fc>)
 800e06e:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
 800e072:	f005 7500 	and.w	r5, r5, #33554432	; 0x2000000
 800e076:	f000 0020 	and.w	r0, r0, #32
 800e07a:	4328      	orrs	r0, r5
 800e07c:	d145      	bne.n	800e10a <VerifyBlockEnable+0xe2>
 800e07e:	b003      	add	sp, #12
 800e080:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e084:	f7ff b98c 	b.w	800d3a0 <WriteRegisterConfiguration>
 800e088:	1a9b      	subs	r3, r3, r2
 800e08a:	fab3 f383 	clz	r3, r3
 800e08e:	095b      	lsrs	r3, r3, #5
 800e090:	2b00      	cmp	r3, #0
 800e092:	d1df      	bne.n	800e054 <VerifyBlockEnable+0x2c>
 800e094:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800e098:	4863      	ldr	r0, [pc, #396]	; (800e228 <VerifyBlockEnable+0x200>)
 800e09a:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
 800e09e:	f023 0301 	bic.w	r3, r3, #1
 800e0a2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800e0a6:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
 800e0aa:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800e0ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e0b2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800e0b6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800e0ba:	f023 0301 	bic.w	r3, r3, #1
 800e0be:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800e0c2:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
 800e0c6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800e0ca:	f044 0402 	orr.w	r4, r4, #2
 800e0ce:	f023 0301 	bic.w	r3, r3, #1
 800e0d2:	f881 410a 	strb.w	r4, [r1, #266]	; 0x10a
 800e0d6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800e0da:	2a00      	cmp	r2, #0
 800e0dc:	f000 808c 	beq.w	800e1f8 <VerifyBlockEnable+0x1d0>
 800e0e0:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
 800e0e4:	f06f 0071 	mvn.w	r0, #113	; 0x71
 800e0e8:	b003      	add	sp, #12
 800e0ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e0ee:	4710      	bx	r2
 800e0f0:	f002 0201 	and.w	r2, r2, #1
 800e0f4:	f004 0410 	and.w	r4, r4, #16
 800e0f8:	ea52 0304 	orrs.w	r3, r2, r4
 800e0fc:	d1b2      	bne.n	800e064 <VerifyBlockEnable+0x3c>
 800e0fe:	4628      	mov	r0, r5
 800e100:	b003      	add	sp, #12
 800e102:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e106:	f7ff bdd7 	b.w	800dcb8 <PollClockLocked>
 800e10a:	f891 7095 	ldrb.w	r7, [r1, #149]	; 0x95
 800e10e:	f8d1 3130 	ldr.w	r3, [r1, #304]	; 0x130
 800e112:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 800e116:	2f09      	cmp	r7, #9
 800e118:	bf94      	ite	ls
 800e11a:	8b1b      	ldrhls	r3, [r3, #24]
 800e11c:	8b5b      	ldrhhi	r3, [r3, #26]
 800e11e:	f501 768a 	add.w	r6, r1, #276	; 0x114
 800e122:	460c      	mov	r4, r1
 800e124:	4630      	mov	r0, r6
 800e126:	4619      	mov	r1, r3
 800e128:	f7f7 fa7e 	bl	8005628 <Time_CheckTimeoutUSec>
 800e12c:	b310      	cbz	r0, 800e174 <VerifyBlockEnable+0x14c>
 800e12e:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
 800e132:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800e136:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e13a:	f3c2 1383 	ubfx	r3, r2, #6, #4
 800e13e:	bb5d      	cbnz	r5, 800e198 <VerifyBlockEnable+0x170>
 800e140:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 800e144:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 800e148:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 800e14c:	f3c2 1283 	ubfx	r2, r2, #6, #4
 800e150:	4293      	cmp	r3, r2
 800e152:	d054      	beq.n	800e1fe <VerifyBlockEnable+0x1d6>
 800e154:	2f00      	cmp	r7, #0
 800e156:	bf08      	it	eq
 800e158:	4613      	moveq	r3, r2
 800e15a:	019a      	lsls	r2, r3, #6
 800e15c:	f021 0303 	bic.w	r3, r1, #3
 800e160:	4315      	orrs	r5, r2
 800e162:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 800e166:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
 800e16a:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 800e16e:	4630      	mov	r0, r6
 800e170:	f7f7 f984 	bl	800547c <Time_GetNow>
 800e174:	4621      	mov	r1, r4
 800e176:	230a      	movs	r3, #10
 800e178:	f801 3f92 	strb.w	r3, [r1, #146]!
 800e17c:	4b2b      	ldr	r3, [pc, #172]	; (800e22c <VerifyBlockEnable+0x204>)
 800e17e:	2200      	movs	r2, #0
 800e180:	e9cd 3400 	strd	r3, r4, [sp]
 800e184:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800e188:	2305      	movs	r3, #5
 800e18a:	f008 fd91 	bl	8016cb0 <ADS_Transfer>
 800e18e:	1e05      	subs	r5, r0, #0
 800e190:	db2b      	blt.n	800e1ea <VerifyBlockEnable+0x1c2>
 800e192:	4628      	mov	r0, r5
 800e194:	b003      	add	sp, #12
 800e196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e198:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800e19c:	f042 0220 	orr.w	r2, r2, #32
 800e1a0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800e1a4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800e1a8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800e1ac:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800e1b0:	2500      	movs	r5, #0
 800e1b2:	e7d2      	b.n	800e15a <VerifyBlockEnable+0x132>
 800e1b4:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800e1b8:	4a1b      	ldr	r2, [pc, #108]	; (800e228 <VerifyBlockEnable+0x200>)
 800e1ba:	f023 0301 	bic.w	r3, r3, #1
 800e1be:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800e1c2:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 800e1c6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800e1ca:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
 800e1ce:	f044 0402 	orr.w	r4, r4, #2
 800e1d2:	f023 0301 	bic.w	r3, r3, #1
 800e1d6:	f881 410a 	strb.w	r4, [r1, #266]	; 0x10a
 800e1da:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800e1de:	2a00      	cmp	r2, #0
 800e1e0:	d0d7      	beq.n	800e192 <VerifyBlockEnable+0x16a>
 800e1e2:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
 800e1e6:	e77f      	b.n	800e0e8 <VerifyBlockEnable+0xc0>
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	b003      	add	sp, #12
 800e1f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e1f6:	4718      	bx	r3
 800e1f8:	f06f 0571 	mvn.w	r5, #113	; 0x71
 800e1fc:	e7c9      	b.n	800e192 <VerifyBlockEnable+0x16a>
 800e1fe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e202:	4287      	cmp	r7, r0
 800e204:	d0f0      	beq.n	800e1e8 <VerifyBlockEnable+0x1c0>
 800e206:	da05      	bge.n	800e214 <VerifyBlockEnable+0x1ec>
 800e208:	1c7d      	adds	r5, r7, #1
 800e20a:	42a8      	cmp	r0, r5
 800e20c:	bfa8      	it	ge
 800e20e:	4628      	movge	r0, r5
 800e210:	b245      	sxtb	r5, r0
 800e212:	e7a2      	b.n	800e15a <VerifyBlockEnable+0x132>
 800e214:	b120      	cbz	r0, 800e220 <VerifyBlockEnable+0x1f8>
 800e216:	1e7a      	subs	r2, r7, #1
 800e218:	4290      	cmp	r0, r2
 800e21a:	bfb8      	it	lt
 800e21c:	4610      	movlt	r0, r2
 800e21e:	e7f7      	b.n	800e210 <VerifyBlockEnable+0x1e8>
 800e220:	462a      	mov	r2, r5
 800e222:	e7f9      	b.n	800e218 <VerifyBlockEnable+0x1f0>
 800e224:	0800d3a1 	.word	0x0800d3a1
 800e228:	0033dffe 	.word	0x0033dffe
 800e22c:	0800cec9 	.word	0x0800cec9

0800e230 <WriteClockConfiguration>:
 800e230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e234:	1e03      	subs	r3, r0, #0
 800e236:	b083      	sub	sp, #12
 800e238:	f2c0 80f7 	blt.w	800e42a <WriteClockConfiguration+0x1fa>
 800e23c:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
 800e240:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 800e244:	460c      	mov	r4, r1
 800e246:	f040 8084 	bne.w	800e352 <WriteClockConfiguration+0x122>
 800e24a:	f04f 0809 	mov.w	r8, #9
 800e24e:	f04f 099c 	mov.w	r9, #156	; 0x9c
 800e252:	2704      	movs	r7, #4
 800e254:	2097      	movs	r0, #151	; 0x97
 800e256:	2605      	movs	r6, #5
 800e258:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e25c:	051b      	lsls	r3, r3, #20
 800e25e:	d43f      	bmi.n	800e2e0 <WriteClockConfiguration+0xb0>
 800e260:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e264:	04da      	lsls	r2, r3, #19
 800e266:	d452      	bmi.n	800e30e <WriteClockConfiguration+0xde>
 800e268:	2d00      	cmp	r5, #0
 800e26a:	f040 80fb 	bne.w	800e464 <WriteClockConfiguration+0x234>
 800e26e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e272:	05db      	lsls	r3, r3, #23
 800e274:	f140 8085 	bpl.w	800e382 <WriteClockConfiguration+0x152>
 800e278:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 800e27c:	4b91      	ldr	r3, [pc, #580]	; (800e4c4 <WriteClockConfiguration+0x294>)
 800e27e:	9401      	str	r4, [sp, #4]
 800e280:	2010      	movs	r0, #16
 800e282:	f104 0297 	add.w	r2, r4, #151	; 0x97
 800e286:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
 800e28a:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
 800e28e:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	4611      	mov	r1, r2
 800e296:	2302      	movs	r3, #2
 800e298:	f008 fd0a 	bl	8016cb0 <ADS_Transfer>
 800e29c:	1e03      	subs	r3, r0, #0
 800e29e:	da54      	bge.n	800e34a <WriteClockConfiguration+0x11a>
 800e2a0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800e2a4:	4d88      	ldr	r5, [pc, #544]	; (800e4c8 <WriteClockConfiguration+0x298>)
 800e2a6:	f894 210a 	ldrb.w	r2, [r4, #266]	; 0x10a
 800e2aa:	f021 0101 	bic.w	r1, r1, #1
 800e2ae:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800e2b2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800e2b6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800e2ba:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800e2be:	f021 0101 	bic.w	r1, r1, #1
 800e2c2:	f042 0202 	orr.w	r2, r2, #2
 800e2c6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800e2ca:	f884 210a 	strb.w	r2, [r4, #266]	; 0x10a
 800e2ce:	2d00      	cmp	r5, #0
 800e2d0:	d03b      	beq.n	800e34a <WriteClockConfiguration+0x11a>
 800e2d2:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800e2d6:	462b      	mov	r3, r5
 800e2d8:	b003      	add	sp, #12
 800e2da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2de:	4718      	bx	r3
 800e2e0:	2205      	movs	r2, #5
 800e2e2:	f104 0160 	add.w	r1, r4, #96	; 0x60
 800e2e6:	4420      	add	r0, r4
 800e2e8:	f009 fa0f 	bl	801770a <memcpy>
 800e2ec:	1963      	adds	r3, r4, r5
 800e2ee:	2216      	movs	r2, #22
 800e2f0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800e2f4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e2f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e2fc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800e300:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e304:	04d9      	lsls	r1, r3, #19
 800e306:	d513      	bpl.n	800e330 <WriteClockConfiguration+0x100>
 800e308:	4648      	mov	r0, r9
 800e30a:	4647      	mov	r7, r8
 800e30c:	4635      	mov	r5, r6
 800e30e:	2204      	movs	r2, #4
 800e310:	4420      	add	r0, r4
 800e312:	f104 0165 	add.w	r1, r4, #101	; 0x65
 800e316:	f009 f9f8 	bl	801770a <memcpy>
 800e31a:	1963      	adds	r3, r4, r5
 800e31c:	2218      	movs	r2, #24
 800e31e:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800e322:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e32a:	463e      	mov	r6, r7
 800e32c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800e330:	f104 0297 	add.w	r2, r4, #151	; 0x97
 800e334:	4865      	ldr	r0, [pc, #404]	; (800e4cc <WriteClockConfiguration+0x29c>)
 800e336:	9000      	str	r0, [sp, #0]
 800e338:	4633      	mov	r3, r6
 800e33a:	9401      	str	r4, [sp, #4]
 800e33c:	4611      	mov	r1, r2
 800e33e:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800e342:	f008 fcb5 	bl	8016cb0 <ADS_Transfer>
 800e346:	1e03      	subs	r3, r0, #0
 800e348:	dbaa      	blt.n	800e2a0 <WriteClockConfiguration+0x70>
 800e34a:	4618      	mov	r0, r3
 800e34c:	b003      	add	sp, #12
 800e34e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e352:	2204      	movs	r2, #4
 800e354:	315c      	adds	r1, #92	; 0x5c
 800e356:	f104 0097 	add.w	r0, r4, #151	; 0x97
 800e35a:	f009 f9d6 	bl	801770a <memcpy>
 800e35e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e362:	2214      	movs	r2, #20
 800e364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e368:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800e36c:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
 800e370:	f04f 080d 	mov.w	r8, #13
 800e374:	f04f 09a0 	mov.w	r9, #160	; 0xa0
 800e378:	2708      	movs	r7, #8
 800e37a:	209b      	movs	r0, #155	; 0x9b
 800e37c:	2609      	movs	r6, #9
 800e37e:	2504      	movs	r5, #4
 800e380:	e76a      	b.n	800e258 <WriteClockConfiguration+0x28>
 800e382:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800e386:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e38a:	4a51      	ldr	r2, [pc, #324]	; (800e4d0 <WriteClockConfiguration+0x2a0>)
 800e38c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
 800e390:	f006 7600 	and.w	r6, r6, #33554432	; 0x2000000
 800e394:	f003 0320 	and.w	r3, r3, #32
 800e398:	4333      	orrs	r3, r6
 800e39a:	d065      	beq.n	800e468 <WriteClockConfiguration+0x238>
 800e39c:	f894 7095 	ldrb.w	r7, [r4, #149]	; 0x95
 800e3a0:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800e3a4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 800e3a8:	2f09      	cmp	r7, #9
 800e3aa:	f504 758a 	add.w	r5, r4, #276	; 0x114
 800e3ae:	bf94      	ite	ls
 800e3b0:	8b19      	ldrhls	r1, [r3, #24]
 800e3b2:	8b59      	ldrhhi	r1, [r3, #26]
 800e3b4:	4628      	mov	r0, r5
 800e3b6:	f7f7 f937 	bl	8005628 <Time_CheckTimeoutUSec>
 800e3ba:	b318      	cbz	r0, 800e404 <WriteClockConfiguration+0x1d4>
 800e3bc:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
 800e3c0:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800e3c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e3c8:	f3c2 1383 	ubfx	r3, r2, #6, #4
 800e3cc:	2e00      	cmp	r6, #0
 800e3ce:	d052      	beq.n	800e476 <WriteClockConfiguration+0x246>
 800e3d0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800e3d4:	f042 0220 	orr.w	r2, r2, #32
 800e3d8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800e3dc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800e3e0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800e3e4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800e3e8:	2600      	movs	r6, #0
 800e3ea:	019a      	lsls	r2, r3, #6
 800e3ec:	f021 0303 	bic.w	r3, r1, #3
 800e3f0:	4316      	orrs	r6, r2
 800e3f2:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 800e3f6:	f884 6095 	strb.w	r6, [r4, #149]	; 0x95
 800e3fa:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 800e3fe:	4628      	mov	r0, r5
 800e400:	f7f7 f83c 	bl	800547c <Time_GetNow>
 800e404:	4621      	mov	r1, r4
 800e406:	230a      	movs	r3, #10
 800e408:	f801 3f92 	strb.w	r3, [r1, #146]!
 800e40c:	4b31      	ldr	r3, [pc, #196]	; (800e4d4 <WriteClockConfiguration+0x2a4>)
 800e40e:	2200      	movs	r2, #0
 800e410:	e9cd 3400 	strd	r3, r4, [sp]
 800e414:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800e418:	2305      	movs	r3, #5
 800e41a:	f008 fc49 	bl	8016cb0 <ADS_Transfer>
 800e41e:	1e03      	subs	r3, r0, #0
 800e420:	da93      	bge.n	800e34a <WriteClockConfiguration+0x11a>
 800e422:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800e426:	4621      	mov	r1, r4
 800e428:	e756      	b.n	800e2d8 <WriteClockConfiguration+0xa8>
 800e42a:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 800e42e:	4d26      	ldr	r5, [pc, #152]	; (800e4c8 <WriteClockConfiguration+0x298>)
 800e430:	f891 210a 	ldrb.w	r2, [r1, #266]	; 0x10a
 800e434:	f024 0401 	bic.w	r4, r4, #1
 800e438:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
 800e43c:	f8c1 5080 	str.w	r5, [r1, #128]	; 0x80
 800e440:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 800e444:	f8d1 510c 	ldr.w	r5, [r1, #268]	; 0x10c
 800e448:	f024 0401 	bic.w	r4, r4, #1
 800e44c:	f042 0202 	orr.w	r2, r2, #2
 800e450:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
 800e454:	f881 210a 	strb.w	r2, [r1, #266]	; 0x10a
 800e458:	2d00      	cmp	r5, #0
 800e45a:	f43f af76 	beq.w	800e34a <WriteClockConfiguration+0x11a>
 800e45e:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
 800e462:	e738      	b.n	800e2d6 <WriteClockConfiguration+0xa6>
 800e464:	462e      	mov	r6, r5
 800e466:	e763      	b.n	800e330 <WriteClockConfiguration+0x100>
 800e468:	4621      	mov	r1, r4
 800e46a:	4628      	mov	r0, r5
 800e46c:	b003      	add	sp, #12
 800e46e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e472:	f7fe bf95 	b.w	800d3a0 <WriteRegisterConfiguration>
 800e476:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 800e47a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 800e47e:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 800e482:	f3c2 1283 	ubfx	r2, r2, #6, #4
 800e486:	4293      	cmp	r3, r2
 800e488:	d003      	beq.n	800e492 <WriteClockConfiguration+0x262>
 800e48a:	2f00      	cmp	r7, #0
 800e48c:	bf08      	it	eq
 800e48e:	4613      	moveq	r3, r2
 800e490:	e7ab      	b.n	800e3ea <WriteClockConfiguration+0x1ba>
 800e492:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e496:	4287      	cmp	r7, r0
 800e498:	d00c      	beq.n	800e4b4 <WriteClockConfiguration+0x284>
 800e49a:	da05      	bge.n	800e4a8 <WriteClockConfiguration+0x278>
 800e49c:	3701      	adds	r7, #1
 800e49e:	42b8      	cmp	r0, r7
 800e4a0:	bfa8      	it	ge
 800e4a2:	4638      	movge	r0, r7
 800e4a4:	b246      	sxtb	r6, r0
 800e4a6:	e7a0      	b.n	800e3ea <WriteClockConfiguration+0x1ba>
 800e4a8:	b148      	cbz	r0, 800e4be <WriteClockConfiguration+0x28e>
 800e4aa:	3f01      	subs	r7, #1
 800e4ac:	42b8      	cmp	r0, r7
 800e4ae:	bfb8      	it	lt
 800e4b0:	4638      	movlt	r0, r7
 800e4b2:	e7f7      	b.n	800e4a4 <WriteClockConfiguration+0x274>
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800e4ba:	4621      	mov	r1, r4
 800e4bc:	e70c      	b.n	800e2d8 <WriteClockConfiguration+0xa8>
 800e4be:	4637      	mov	r7, r6
 800e4c0:	e7f4      	b.n	800e4ac <WriteClockConfiguration+0x27c>
 800e4c2:	bf00      	nop
 800e4c4:	0800d2cd 	.word	0x0800d2cd
 800e4c8:	0033dffe 	.word	0x0033dffe
 800e4cc:	0800db2d 	.word	0x0800db2d
 800e4d0:	0800d3a1 	.word	0x0800d3a1
 800e4d4:	0800cec9 	.word	0x0800cec9

0800e4d8 <Argus_Dev_TestConnection>:
 800e4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4dc:	4604      	mov	r4, r0
 800e4de:	f100 0597 	add.w	r5, r0, #151	; 0x97
 800e4e2:	b083      	sub	sp, #12
 800e4e4:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800e4e8:	2203      	movs	r2, #3
 800e4ea:	4628      	mov	r0, r5
 800e4ec:	f504 789c 	add.w	r8, r4, #312	; 0x138
 800e4f0:	f04f 090e 	mov.w	r9, #14
 800e4f4:	2600      	movs	r6, #0
 800e4f6:	f009 f908 	bl	801770a <memcpy>
 800e4fa:	f884 9097 	strb.w	r9, [r4, #151]	; 0x97
 800e4fe:	462a      	mov	r2, r5
 800e500:	4629      	mov	r1, r5
 800e502:	4640      	mov	r0, r8
 800e504:	e9cd 6600 	strd	r6, r6, [sp]
 800e508:	2303      	movs	r3, #3
 800e50a:	f008 fbd1 	bl	8016cb0 <ADS_Transfer>
 800e50e:	1e07      	subs	r7, r0, #0
 800e510:	db1a      	blt.n	800e548 <Argus_Dev_TestConnection+0x70>
 800e512:	2164      	movs	r1, #100	; 0x64
 800e514:	4640      	mov	r0, r8
 800e516:	f008 fb11 	bl	8016b3c <ADS_AwaitIdle>
 800e51a:	1e07      	subs	r7, r0, #0
 800e51c:	db18      	blt.n	800e550 <Argus_Dev_TestConnection+0x78>
 800e51e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800e522:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
 800e526:	f003 031f 	and.w	r3, r3, #31
 800e52a:	f022 021f 	bic.w	r2, r2, #31
 800e52e:	4313      	orrs	r3, r2
 800e530:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800e534:	f104 0b55 	add.w	fp, r4, #85	; 0x55
 800e538:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800e53c:	4650      	mov	r0, sl
 800e53e:	4659      	mov	r1, fp
 800e540:	2202      	movs	r2, #2
 800e542:	f009 f8d3 	bl	80176ec <memcmp>
 800e546:	b958      	cbnz	r0, 800e560 <Argus_Dev_TestConnection+0x88>
 800e548:	4638      	mov	r0, r7
 800e54a:	b003      	add	sp, #12
 800e54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e550:	4639      	mov	r1, r7
 800e552:	4818      	ldr	r0, [pc, #96]	; (800e5b4 <Argus_Dev_TestConnection+0xdc>)
 800e554:	f7f2 fc7c 	bl	8000e50 <print>
 800e558:	4638      	mov	r0, r7
 800e55a:	b003      	add	sp, #12
 800e55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e560:	f884 9097 	strb.w	r9, [r4, #151]	; 0x97
 800e564:	2303      	movs	r3, #3
 800e566:	e9cd 6600 	strd	r6, r6, [sp]
 800e56a:	462a      	mov	r2, r5
 800e56c:	4629      	mov	r1, r5
 800e56e:	4640      	mov	r0, r8
 800e570:	f008 fb9e 	bl	8016cb0 <ADS_Transfer>
 800e574:	1e07      	subs	r7, r0, #0
 800e576:	dbe7      	blt.n	800e548 <Argus_Dev_TestConnection+0x70>
 800e578:	4640      	mov	r0, r8
 800e57a:	2164      	movs	r1, #100	; 0x64
 800e57c:	f008 fade 	bl	8016b3c <ADS_AwaitIdle>
 800e580:	1e07      	subs	r7, r0, #0
 800e582:	dbe5      	blt.n	800e550 <Argus_Dev_TestConnection+0x78>
 800e584:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800e588:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
 800e58c:	f003 031f 	and.w	r3, r3, #31
 800e590:	f022 021f 	bic.w	r2, r2, #31
 800e594:	4313      	orrs	r3, r2
 800e596:	4659      	mov	r1, fp
 800e598:	4650      	mov	r0, sl
 800e59a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800e59e:	2202      	movs	r2, #2
 800e5a0:	f009 f8a4 	bl	80176ec <memcmp>
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	d0cf      	beq.n	800e548 <Argus_Dev_TestConnection+0x70>
 800e5a8:	4803      	ldr	r0, [pc, #12]	; (800e5b8 <Argus_Dev_TestConnection+0xe0>)
 800e5aa:	f7f2 fc51 	bl	8000e50 <print>
 800e5ae:	f06f 0764 	mvn.w	r7, #100	; 0x64
 800e5b2:	e7c9      	b.n	800e548 <Argus_Dev_TestConnection+0x70>
 800e5b4:	0801aa38 	.word	0x0801aa38
 800e5b8:	0801aa80 	.word	0x0801aa80

0800e5bc <Argus_Dev_Init>:
 800e5bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	461d      	mov	r5, r3
 800e5c6:	4689      	mov	r9, r1
 800e5c8:	4690      	mov	r8, r2
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 800e5d0:	f500 769c 	add.w	r6, r0, #312	; 0x138
 800e5d4:	2703      	movs	r7, #3
 800e5d6:	f009 f8a3 	bl	8017720 <memset>
 800e5da:	f8c4 51d8 	str.w	r5, [r4, #472]	; 0x1d8
 800e5de:	e9c4 9874 	strd	r9, r8, [r4, #464]	; 0x1d0
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	6027      	str	r7, [r4, #0]
 800e5e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e5e8:	f007 ff74 	bl	80164d4 <ADS_Init>
 800e5ec:	1e05      	subs	r5, r0, #0
 800e5ee:	f2c0 80e1 	blt.w	800e7b4 <Argus_Dev_Init+0x1f8>
 800e5f2:	4621      	mov	r1, r4
 800e5f4:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 800e5f8:	f7fa fef0 	bl	80093dc <Argus_Dca_Init>
 800e5fc:	1e05      	subs	r5, r0, #0
 800e5fe:	f2c0 80d9 	blt.w	800e7b4 <Argus_Dev_Init+0x1f8>
 800e602:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
 800e606:	4a7c      	ldr	r2, [pc, #496]	; (800e7f8 <Argus_Dev_Init+0x23c>)
 800e608:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800e60c:	f043 0302 	orr.w	r3, r3, #2
 800e610:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
 800e614:	4620      	mov	r0, r4
 800e616:	f7ff ff5f 	bl	800e4d8 <Argus_Dev_TestConnection>
 800e61a:	1e05      	subs	r5, r0, #0
 800e61c:	f040 80d1 	bne.w	800e7c2 <Argus_Dev_Init+0x206>
 800e620:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800e624:	095b      	lsrs	r3, r3, #5
 800e626:	2b01      	cmp	r3, #1
 800e628:	f000 80d9 	beq.w	800e7de <Argus_Dev_Init+0x222>
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f000 80d9 	beq.w	800e7e4 <Argus_Dev_Init+0x228>
 800e632:	2b02      	cmp	r3, #2
 800e634:	bf08      	it	eq
 800e636:	463d      	moveq	r5, r7
 800e638:	7225      	strb	r5, [r4, #8]
 800e63a:	4b70      	ldr	r3, [pc, #448]	; (800e7fc <Argus_Dev_Init+0x240>)
 800e63c:	681d      	ldr	r5, [r3, #0]
 800e63e:	f8ad 5008 	strh.w	r5, [sp, #8]
 800e642:	aa02      	add	r2, sp, #8
 800e644:	2700      	movs	r7, #0
 800e646:	0c2d      	lsrs	r5, r5, #16
 800e648:	4611      	mov	r1, r2
 800e64a:	e9cd 7700 	strd	r7, r7, [sp]
 800e64e:	2303      	movs	r3, #3
 800e650:	4630      	mov	r0, r6
 800e652:	f88d 500a 	strb.w	r5, [sp, #10]
 800e656:	f008 fb2b 	bl	8016cb0 <ADS_Transfer>
 800e65a:	1e05      	subs	r5, r0, #0
 800e65c:	f2c0 80aa 	blt.w	800e7b4 <Argus_Dev_Init+0x1f8>
 800e660:	2164      	movs	r1, #100	; 0x64
 800e662:	4630      	mov	r0, r6
 800e664:	f008 fa6a 	bl	8016b3c <ADS_AwaitIdle>
 800e668:	1e05      	subs	r5, r0, #0
 800e66a:	f2c0 80b3 	blt.w	800e7d4 <Argus_Dev_Init+0x218>
 800e66e:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800e672:	9701      	str	r7, [sp, #4]
 800e674:	f040 0020 	orr.w	r0, r0, #32
 800e678:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800e67c:	aa02      	add	r2, sp, #8
 800e67e:	2512      	movs	r5, #18
 800e680:	f88d 000a 	strb.w	r0, [sp, #10]
 800e684:	9700      	str	r7, [sp, #0]
 800e686:	2303      	movs	r3, #3
 800e688:	4611      	mov	r1, r2
 800e68a:	4630      	mov	r0, r6
 800e68c:	f88d 5008 	strb.w	r5, [sp, #8]
 800e690:	f008 fb0e 	bl	8016cb0 <ADS_Transfer>
 800e694:	1e05      	subs	r5, r0, #0
 800e696:	f2c0 808d 	blt.w	800e7b4 <Argus_Dev_Init+0x1f8>
 800e69a:	2164      	movs	r1, #100	; 0x64
 800e69c:	4630      	mov	r0, r6
 800e69e:	f008 fa4d 	bl	8016b3c <ADS_AwaitIdle>
 800e6a2:	1e05      	subs	r5, r0, #0
 800e6a4:	f2c0 8096 	blt.w	800e7d4 <Argus_Dev_Init+0x218>
 800e6a8:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800e6ac:	0698      	lsls	r0, r3, #26
 800e6ae:	f140 809c 	bpl.w	800e7ea <Argus_Dev_Init+0x22e>
 800e6b2:	aa02      	add	r2, sp, #8
 800e6b4:	f240 7501 	movw	r5, #1793	; 0x701
 800e6b8:	e9cd 7700 	strd	r7, r7, [sp]
 800e6bc:	f04f 080a 	mov.w	r8, #10
 800e6c0:	2305      	movs	r3, #5
 800e6c2:	4611      	mov	r1, r2
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	9702      	str	r7, [sp, #8]
 800e6c8:	f88d 700c 	strb.w	r7, [sp, #12]
 800e6cc:	f8ad 500a 	strh.w	r5, [sp, #10]
 800e6d0:	f88d 8008 	strb.w	r8, [sp, #8]
 800e6d4:	f008 faec 	bl	8016cb0 <ADS_Transfer>
 800e6d8:	1e05      	subs	r5, r0, #0
 800e6da:	db6b      	blt.n	800e7b4 <Argus_Dev_Init+0x1f8>
 800e6dc:	2164      	movs	r1, #100	; 0x64
 800e6de:	4630      	mov	r0, r6
 800e6e0:	f008 fa2c 	bl	8016b3c <ADS_AwaitIdle>
 800e6e4:	1e05      	subs	r5, r0, #0
 800e6e6:	db75      	blt.n	800e7d4 <Argus_Dev_Init+0x218>
 800e6e8:	f89d 500a 	ldrb.w	r5, [sp, #10]
 800e6ec:	f88d 700b 	strb.w	r7, [sp, #11]
 800e6f0:	aa02      	add	r2, sp, #8
 800e6f2:	f025 0503 	bic.w	r5, r5, #3
 800e6f6:	e9cd 7700 	strd	r7, r7, [sp]
 800e6fa:	2305      	movs	r3, #5
 800e6fc:	4611      	mov	r1, r2
 800e6fe:	4630      	mov	r0, r6
 800e700:	f88d 500a 	strb.w	r5, [sp, #10]
 800e704:	f88d 8008 	strb.w	r8, [sp, #8]
 800e708:	f008 fad2 	bl	8016cb0 <ADS_Transfer>
 800e70c:	1e05      	subs	r5, r0, #0
 800e70e:	db51      	blt.n	800e7b4 <Argus_Dev_Init+0x1f8>
 800e710:	2164      	movs	r1, #100	; 0x64
 800e712:	4630      	mov	r0, r6
 800e714:	f008 fa12 	bl	8016b3c <ADS_AwaitIdle>
 800e718:	1e05      	subs	r5, r0, #0
 800e71a:	db5b      	blt.n	800e7d4 <Argus_Dev_Init+0x218>
 800e71c:	2210      	movs	r2, #16
 800e71e:	23cf      	movs	r3, #207	; 0xcf
 800e720:	f104 0897 	add.w	r8, r4, #151	; 0x97
 800e724:	e9cd 7700 	strd	r7, r7, [sp]
 800e728:	4641      	mov	r1, r8
 800e72a:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
 800e72e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 800e732:	4642      	mov	r2, r8
 800e734:	2302      	movs	r3, #2
 800e736:	4630      	mov	r0, r6
 800e738:	f008 faba 	bl	8016cb0 <ADS_Transfer>
 800e73c:	1e05      	subs	r5, r0, #0
 800e73e:	db39      	blt.n	800e7b4 <Argus_Dev_Init+0x1f8>
 800e740:	2164      	movs	r1, #100	; 0x64
 800e742:	4630      	mov	r0, r6
 800e744:	f008 f9fa 	bl	8016b3c <ADS_AwaitIdle>
 800e748:	1e05      	subs	r5, r0, #0
 800e74a:	db43      	blt.n	800e7d4 <Argus_Dev_Init+0x218>
 800e74c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800e750:	07d9      	lsls	r1, r3, #31
 800e752:	bf48      	it	mi
 800e754:	f023 0310 	bicmi.w	r3, r3, #16
 800e758:	3bcf      	subs	r3, #207	; 0xcf
 800e75a:	bf18      	it	ne
 800e75c:	2301      	movne	r3, #1
 800e75e:	b913      	cbnz	r3, 800e766 <Argus_Dev_Init+0x1aa>
 800e760:	2300      	movs	r3, #0
 800e762:	6023      	str	r3, [r4, #0]
 800e764:	e029      	b.n	800e7ba <Argus_Dev_Init+0x1fe>
 800e766:	2110      	movs	r1, #16
 800e768:	22cf      	movs	r2, #207	; 0xcf
 800e76a:	2300      	movs	r3, #0
 800e76c:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 800e770:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
 800e774:	4641      	mov	r1, r8
 800e776:	e9cd 3300 	strd	r3, r3, [sp]
 800e77a:	4642      	mov	r2, r8
 800e77c:	2302      	movs	r3, #2
 800e77e:	4630      	mov	r0, r6
 800e780:	f008 fa96 	bl	8016cb0 <ADS_Transfer>
 800e784:	1e05      	subs	r5, r0, #0
 800e786:	db15      	blt.n	800e7b4 <Argus_Dev_Init+0x1f8>
 800e788:	4630      	mov	r0, r6
 800e78a:	2164      	movs	r1, #100	; 0x64
 800e78c:	f008 f9d6 	bl	8016b3c <ADS_AwaitIdle>
 800e790:	1e05      	subs	r5, r0, #0
 800e792:	db1f      	blt.n	800e7d4 <Argus_Dev_Init+0x218>
 800e794:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800e798:	07da      	lsls	r2, r3, #31
 800e79a:	bf48      	it	mi
 800e79c:	f023 0310 	bicmi.w	r3, r3, #16
 800e7a0:	3bcf      	subs	r3, #207	; 0xcf
 800e7a2:	bf18      	it	ne
 800e7a4:	2301      	movne	r3, #1
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d0da      	beq.n	800e760 <Argus_Dev_Init+0x1a4>
 800e7aa:	4815      	ldr	r0, [pc, #84]	; (800e800 <Argus_Dev_Init+0x244>)
 800e7ac:	f7f2 fb50 	bl	8000e50 <print>
 800e7b0:	f06f 0564 	mvn.w	r5, #100	; 0x64
 800e7b4:	f06f 0306 	mvn.w	r3, #6
 800e7b8:	6023      	str	r3, [r4, #0]
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	b005      	add	sp, #20
 800e7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7c2:	f6bf af3a 	bge.w	800e63a <Argus_Dev_Init+0x7e>
 800e7c6:	f06f 0364 	mvn.w	r3, #100	; 0x64
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	6023      	str	r3, [r4, #0]
 800e7ce:	b005      	add	sp, #20
 800e7d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7d4:	4629      	mov	r1, r5
 800e7d6:	480b      	ldr	r0, [pc, #44]	; (800e804 <Argus_Dev_Init+0x248>)
 800e7d8:	f7f2 fb3a 	bl	8000e50 <print>
 800e7dc:	e7ea      	b.n	800e7b4 <Argus_Dev_Init+0x1f8>
 800e7de:	2302      	movs	r3, #2
 800e7e0:	7223      	strb	r3, [r4, #8]
 800e7e2:	e72a      	b.n	800e63a <Argus_Dev_Init+0x7e>
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	7223      	strb	r3, [r4, #8]
 800e7e8:	e727      	b.n	800e63a <Argus_Dev_Init+0x7e>
 800e7ea:	4807      	ldr	r0, [pc, #28]	; (800e808 <Argus_Dev_Init+0x24c>)
 800e7ec:	f7f2 fb30 	bl	8000e50 <print>
 800e7f0:	f06f 0571 	mvn.w	r5, #113	; 0x71
 800e7f4:	e7de      	b.n	800e7b4 <Argus_Dev_Init+0x1f8>
 800e7f6:	bf00      	nop
 800e7f8:	0033dffe 	.word	0x0033dffe
 800e7fc:	08018b0c 	.word	0x08018b0c
 800e800:	0801a7a0 	.word	0x0801a7a0
 800e804:	0801a6e8 	.word	0x0801a6e8
 800e808:	0801a740 	.word	0x0801a740

0800e80c <Argus_Dev_AwaitStatus>:
 800e80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e80e:	b083      	sub	sp, #12
 800e810:	4605      	mov	r5, r0
 800e812:	4617      	mov	r7, r2
 800e814:	2300      	movs	r3, #0
 800e816:	4668      	mov	r0, sp
 800e818:	460e      	mov	r6, r1
 800e81a:	e9cd 3300 	strd	r3, r3, [sp]
 800e81e:	f505 749c 	add.w	r4, r5, #312	; 0x138
 800e822:	f7f6 fe2b 	bl	800547c <Time_GetNow>
 800e826:	b167      	cbz	r7, 800e842 <Argus_Dev_AwaitStatus+0x36>
 800e828:	e016      	b.n	800e858 <Argus_Dev_AwaitStatus+0x4c>
 800e82a:	f008 f945 	bl	8016ab8 <ADS_GetStatus>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	4620      	mov	r0, r4
 800e834:	db2e      	blt.n	800e894 <Argus_Dev_AwaitStatus+0x88>
 800e836:	429e      	cmp	r6, r3
 800e838:	d02f      	beq.n	800e89a <Argus_Dev_AwaitStatus+0x8e>
 800e83a:	f008 f951 	bl	8016ae0 <ADS_CheckTimeout>
 800e83e:	1e03      	subs	r3, r0, #0
 800e840:	db28      	blt.n	800e894 <Argus_Dev_AwaitStatus+0x88>
 800e842:	4620      	mov	r0, r4
 800e844:	f008 f94c 	bl	8016ae0 <ADS_CheckTimeout>
 800e848:	1e03      	subs	r3, r0, #0
 800e84a:	db23      	blt.n	800e894 <Argus_Dev_AwaitStatus+0x88>
 800e84c:	682b      	ldr	r3, [r5, #0]
 800e84e:	4620      	mov	r0, r4
 800e850:	2b00      	cmp	r3, #0
 800e852:	d0ea      	beq.n	800e82a <Argus_Dev_AwaitStatus+0x1e>
 800e854:	682b      	ldr	r3, [r5, #0]
 800e856:	e7eb      	b.n	800e830 <Argus_Dev_AwaitStatus+0x24>
 800e858:	4620      	mov	r0, r4
 800e85a:	f008 f941 	bl	8016ae0 <ADS_CheckTimeout>
 800e85e:	1e03      	subs	r3, r0, #0
 800e860:	db18      	blt.n	800e894 <Argus_Dev_AwaitStatus+0x88>
 800e862:	682b      	ldr	r3, [r5, #0]
 800e864:	b1eb      	cbz	r3, 800e8a2 <Argus_Dev_AwaitStatus+0x96>
 800e866:	682b      	ldr	r3, [r5, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	4620      	mov	r0, r4
 800e86c:	db12      	blt.n	800e894 <Argus_Dev_AwaitStatus+0x88>
 800e86e:	429e      	cmp	r6, r3
 800e870:	d013      	beq.n	800e89a <Argus_Dev_AwaitStatus+0x8e>
 800e872:	f008 f935 	bl	8016ae0 <ADS_CheckTimeout>
 800e876:	1e03      	subs	r3, r0, #0
 800e878:	4639      	mov	r1, r7
 800e87a:	4668      	mov	r0, sp
 800e87c:	db0a      	blt.n	800e894 <Argus_Dev_AwaitStatus+0x88>
 800e87e:	f7f6 ff3f 	bl	8005700 <Time_CheckTimeoutMSec>
 800e882:	2800      	cmp	r0, #0
 800e884:	d0e8      	beq.n	800e858 <Argus_Dev_AwaitStatus+0x4c>
 800e886:	463a      	mov	r2, r7
 800e888:	4631      	mov	r1, r6
 800e88a:	4808      	ldr	r0, [pc, #32]	; (800e8ac <Argus_Dev_AwaitStatus+0xa0>)
 800e88c:	f7f2 fae0 	bl	8000e50 <print>
 800e890:	f06f 0305 	mvn.w	r3, #5
 800e894:	4618      	mov	r0, r3
 800e896:	b003      	add	sp, #12
 800e898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e89a:	2300      	movs	r3, #0
 800e89c:	4618      	mov	r0, r3
 800e89e:	b003      	add	sp, #12
 800e8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f008 f908 	bl	8016ab8 <ADS_GetStatus>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	e7dd      	b.n	800e868 <Argus_Dev_AwaitStatus+0x5c>
 800e8ac:	08019cf8 	.word	0x08019cf8

0800e8b0 <Argus_Dev_SetStatusSync>:
 800e8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b4:	b082      	sub	sp, #8
 800e8b6:	4604      	mov	r4, r0
 800e8b8:	4615      	mov	r5, r2
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	4668      	mov	r0, sp
 800e8be:	4688      	mov	r8, r1
 800e8c0:	e9cd 3300 	strd	r3, r3, [sp]
 800e8c4:	f7f6 fdda 	bl	800547c <Time_GetNow>
 800e8c8:	b1fd      	cbz	r5, 800e90a <Argus_Dev_SetStatusSync+0x5a>
 800e8ca:	f504 779c 	add.w	r7, r4, #312	; 0x138
 800e8ce:	e00e      	b.n	800e8ee <Argus_Dev_SetStatusSync+0x3e>
 800e8d0:	6823      	ldr	r3, [r4, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	db1e      	blt.n	800e914 <Argus_Dev_SetStatusSync+0x64>
 800e8d6:	f7f1 fe81 	bl	80005dc <IRQ_UNLOCK>
 800e8da:	4638      	mov	r0, r7
 800e8dc:	f008 f900 	bl	8016ae0 <ADS_CheckTimeout>
 800e8e0:	1e06      	subs	r6, r0, #0
 800e8e2:	4629      	mov	r1, r5
 800e8e4:	4668      	mov	r0, sp
 800e8e6:	db0c      	blt.n	800e902 <Argus_Dev_SetStatusSync+0x52>
 800e8e8:	f7f6 ff0a 	bl	8005700 <Time_CheckTimeoutMSec>
 800e8ec:	b9c8      	cbnz	r0, 800e922 <Argus_Dev_SetStatusSync+0x72>
 800e8ee:	f7f1 fe97 	bl	8000620 <IRQ_LOCK>
 800e8f2:	6823      	ldr	r3, [r4, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1eb      	bne.n	800e8d0 <Argus_Dev_SetStatusSync+0x20>
 800e8f8:	f8c4 8000 	str.w	r8, [r4]
 800e8fc:	f7f1 fe6e 	bl	80005dc <IRQ_UNLOCK>
 800e900:	2600      	movs	r6, #0
 800e902:	4630      	mov	r0, r6
 800e904:	b002      	add	sp, #8
 800e906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e90a:	f7f1 fe89 	bl	8000620 <IRQ_LOCK>
 800e90e:	6823      	ldr	r3, [r4, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d0f1      	beq.n	800e8f8 <Argus_Dev_SetStatusSync+0x48>
 800e914:	6826      	ldr	r6, [r4, #0]
 800e916:	f7f1 fe61 	bl	80005dc <IRQ_UNLOCK>
 800e91a:	4630      	mov	r0, r6
 800e91c:	b002      	add	sp, #8
 800e91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e922:	462a      	mov	r2, r5
 800e924:	4641      	mov	r1, r8
 800e926:	4804      	ldr	r0, [pc, #16]	; (800e938 <Argus_Dev_SetStatusSync+0x88>)
 800e928:	f7f2 fa92 	bl	8000e50 <print>
 800e92c:	f06f 0605 	mvn.w	r6, #5
 800e930:	4630      	mov	r0, r6
 800e932:	b002      	add	sp, #8
 800e934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e938:	0801a9e4 	.word	0x0801a9e4

0800e93c <Argus_Dev_SetStatus>:
 800e93c:	b570      	push	{r4, r5, r6, lr}
 800e93e:	4605      	mov	r5, r0
 800e940:	460e      	mov	r6, r1
 800e942:	f7f1 fe6d 	bl	8000620 <IRQ_LOCK>
 800e946:	682c      	ldr	r4, [r5, #0]
 800e948:	b924      	cbnz	r4, 800e954 <Argus_Dev_SetStatus+0x18>
 800e94a:	602e      	str	r6, [r5, #0]
 800e94c:	f7f1 fe46 	bl	80005dc <IRQ_UNLOCK>
 800e950:	4620      	mov	r0, r4
 800e952:	bd70      	pop	{r4, r5, r6, pc}
 800e954:	682c      	ldr	r4, [r5, #0]
 800e956:	f7f1 fe41 	bl	80005dc <IRQ_UNLOCK>
 800e95a:	4620      	mov	r0, r4
 800e95c:	bd70      	pop	{r4, r5, r6, pc}
 800e95e:	bf00      	nop

0800e960 <Argus_Dev_SetError>:
 800e960:	6001      	str	r1, [r0, #0]
 800e962:	4770      	bx	lr

0800e964 <Argus_Dev_ClearStatus>:
 800e964:	b538      	push	{r3, r4, r5, lr}
 800e966:	4605      	mov	r5, r0
 800e968:	460c      	mov	r4, r1
 800e96a:	f7f1 fe59 	bl	8000620 <IRQ_LOCK>
 800e96e:	682b      	ldr	r3, [r5, #0]
 800e970:	42a3      	cmp	r3, r4
 800e972:	d105      	bne.n	800e980 <Argus_Dev_ClearStatus+0x1c>
 800e974:	2400      	movs	r4, #0
 800e976:	602c      	str	r4, [r5, #0]
 800e978:	f7f1 fe30 	bl	80005dc <IRQ_UNLOCK>
 800e97c:	4620      	mov	r0, r4
 800e97e:	bd38      	pop	{r3, r4, r5, pc}
 800e980:	f7f1 fe2c 	bl	80005dc <IRQ_UNLOCK>
 800e984:	f04f 30ff 	mov.w	r0, #4294967295
 800e988:	bd38      	pop	{r3, r4, r5, pc}
 800e98a:	bf00      	nop

0800e98c <Argus_Dev_GetStatus>:
 800e98c:	b538      	push	{r3, r4, r5, lr}
 800e98e:	f500 759c 	add.w	r5, r0, #312	; 0x138
 800e992:	4604      	mov	r4, r0
 800e994:	4628      	mov	r0, r5
 800e996:	f008 f8a3 	bl	8016ae0 <ADS_CheckTimeout>
 800e99a:	2800      	cmp	r0, #0
 800e99c:	db02      	blt.n	800e9a4 <Argus_Dev_GetStatus+0x18>
 800e99e:	6823      	ldr	r3, [r4, #0]
 800e9a0:	b10b      	cbz	r3, 800e9a6 <Argus_Dev_GetStatus+0x1a>
 800e9a2:	6820      	ldr	r0, [r4, #0]
 800e9a4:	bd38      	pop	{r3, r4, r5, pc}
 800e9a6:	4628      	mov	r0, r5
 800e9a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9ac:	f008 b884 	b.w	8016ab8 <ADS_GetStatus>

0800e9b0 <Argus_Dev_Abort>:
 800e9b0:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800e9b4:	f007 bd4e 	b.w	8016454 <ADS_Abort>

0800e9b8 <Argus_Dev_ReadData>:
 800e9b8:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800e9bc:	f008 ba4a 	b.w	8016e54 <ADS_ReadData>

0800e9c0 <Argus_Dev_CheckCfg>:
 800e9c0:	68c1      	ldr	r1, [r0, #12]
 800e9c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9c4:	4bcd      	ldr	r3, [pc, #820]	; (800ecfc <Argus_Dev_CheckCfg+0x33c>)
 800e9c6:	f1a1 02fa 	sub.w	r2, r1, #250	; 0xfa
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	f200 814e 	bhi.w	800ec6c <Argus_Dev_CheckCfg+0x2ac>
 800e9d0:	7981      	ldrb	r1, [r0, #6]
 800e9d2:	1e8b      	subs	r3, r1, #2
 800e9d4:	2b7e      	cmp	r3, #126	; 0x7e
 800e9d6:	f200 8141 	bhi.w	800ec5c <Argus_Dev_CheckCfg+0x29c>
 800e9da:	7901      	ldrb	r1, [r0, #4]
 800e9dc:	2980      	cmp	r1, #128	; 0x80
 800e9de:	f200 8135 	bhi.w	800ec4c <Argus_Dev_CheckCfg+0x28c>
 800e9e2:	6804      	ldr	r4, [r0, #0]
 800e9e4:	4bc6      	ldr	r3, [pc, #792]	; (800ed00 <Argus_Dev_CheckCfg+0x340>)
 800e9e6:	4ac7      	ldr	r2, [pc, #796]	; (800ed04 <Argus_Dev_CheckCfg+0x344>)
 800e9e8:	4423      	add	r3, r4
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	f200 8125 	bhi.w	800ec3a <Argus_Dev_CheckCfg+0x27a>
 800e9f0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800e9f4:	065a      	lsls	r2, r3, #25
 800e9f6:	f100 811a 	bmi.w	800ec2e <Argus_Dev_CheckCfg+0x26e>
 800e9fa:	f990 207a 	ldrsb.w	r2, [r0, #122]	; 0x7a
 800e9fe:	2a00      	cmp	r2, #0
 800ea00:	f2c0 8158 	blt.w	800ecb4 <Argus_Dev_CheckCfg+0x2f4>
 800ea04:	069b      	lsls	r3, r3, #26
 800ea06:	f140 810c 	bpl.w	800ec22 <Argus_Dev_CheckCfg+0x262>
 800ea0a:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
 800ea0e:	3b01      	subs	r3, #1
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	f200 8100 	bhi.w	800ec16 <Argus_Dev_CheckCfg+0x256>
 800ea16:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 800ea1a:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800ea1e:	2b03      	cmp	r3, #3
 800ea20:	f040 80f2 	bne.w	800ec08 <Argus_Dev_CheckCfg+0x248>
 800ea24:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 800ea28:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
 800ea2c:	f890 507e 	ldrb.w	r5, [r0, #126]	; 0x7e
 800ea30:	f890 3083 	ldrb.w	r3, [r0, #131]	; 0x83
 800ea34:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
 800ea38:	f890 7085 	ldrb.w	r7, [r0, #133]	; 0x85
 800ea3c:	0212      	lsls	r2, r2, #8
 800ea3e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800ea42:	022d      	lsls	r5, r5, #8
 800ea44:	431a      	orrs	r2, r3
 800ea46:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800ea4a:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
 800ea4e:	f890 6086 	ldrb.w	r6, [r0, #134]	; 0x86
 800ea52:	0853      	lsrs	r3, r2, #1
 800ea54:	430d      	orrs	r5, r1
 800ea56:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800ea5a:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
 800ea5e:	1ad2      	subs	r2, r2, r3
 800ea60:	0869      	lsrs	r1, r5, #1
 800ea62:	0893      	lsrs	r3, r2, #2
 800ea64:	f001 3155 	and.w	r1, r1, #1431655765	; 0x55555555
 800ea68:	0877      	lsrs	r7, r6, #1
 800ea6a:	1a6d      	subs	r5, r5, r1
 800ea6c:	f007 3755 	and.w	r7, r7, #1431655765	; 0x55555555
 800ea70:	f003 3133 	and.w	r1, r3, #858993459	; 0x33333333
 800ea74:	f002 3333 	and.w	r3, r2, #858993459	; 0x33333333
 800ea78:	440b      	add	r3, r1
 800ea7a:	1bf2      	subs	r2, r6, r7
 800ea7c:	08a9      	lsrs	r1, r5, #2
 800ea7e:	f001 3633 	and.w	r6, r1, #858993459	; 0x33333333
 800ea82:	f005 3133 	and.w	r1, r5, #858993459	; 0x33333333
 800ea86:	0895      	lsrs	r5, r2, #2
 800ea88:	4431      	add	r1, r6
 800ea8a:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 800ea8e:	f005 3633 	and.w	r6, r5, #858993459	; 0x33333333
 800ea92:	f002 3533 	and.w	r5, r2, #858993459	; 0x33333333
 800ea96:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800ea9a:	eb01 1111 	add.w	r1, r1, r1, lsr #4
 800ea9e:	4435      	add	r5, r6
 800eaa0:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 800eaa4:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
 800eaa8:	eb05 1515 	add.w	r5, r5, r5, lsr #4
 800eaac:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 800eab0:	eb01 2101 	add.w	r1, r1, r1, lsl #8
 800eab4:	f005 350f 	and.w	r5, r5, #252645135	; 0xf0f0f0f
 800eab8:	0e1a      	lsrs	r2, r3, #24
 800eaba:	eb01 4301 	add.w	r3, r1, r1, lsl #16
 800eabe:	eb05 2105 	add.w	r1, r5, r5, lsl #8
 800eac2:	eb02 6313 	add.w	r3, r2, r3, lsr #24
 800eac6:	eb01 4101 	add.w	r1, r1, r1, lsl #16
 800eaca:	eb03 6311 	add.w	r3, r3, r1, lsr #24
 800eace:	009b      	lsls	r3, r3, #2
 800ead0:	2b84      	cmp	r3, #132	; 0x84
 800ead2:	f200 80d1 	bhi.w	800ec78 <Argus_Dev_CheckCfg+0x2b8>
 800ead6:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 800eada:	2963      	cmp	r1, #99	; 0x63
 800eadc:	f240 80d8 	bls.w	800ec90 <Argus_Dev_CheckCfg+0x2d0>
 800eae0:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 800eae4:	2900      	cmp	r1, #0
 800eae6:	f000 80cd 	beq.w	800ec84 <Argus_Dev_CheckCfg+0x2c4>
 800eaea:	f8b0 1098 	ldrh.w	r1, [r0, #152]	; 0x98
 800eaee:	2900      	cmp	r1, #0
 800eaf0:	f000 80d4 	beq.w	800ec9c <Argus_Dev_CheckCfg+0x2dc>
 800eaf4:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 800eaf8:	b1b3      	cbz	r3, 800eb28 <Argus_Dev_CheckCfg+0x168>
 800eafa:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
 800eafe:	2907      	cmp	r1, #7
 800eb00:	f200 80de 	bhi.w	800ecc0 <Argus_Dev_CheckCfg+0x300>
 800eb04:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
 800eb08:	2907      	cmp	r1, #7
 800eb0a:	f200 80df 	bhi.w	800eccc <Argus_Dev_CheckCfg+0x30c>
 800eb0e:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
 800eb12:	2903      	cmp	r1, #3
 800eb14:	f200 80e0 	bhi.w	800ecd8 <Argus_Dev_CheckCfg+0x318>
 800eb18:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
 800eb1c:	1e4b      	subs	r3, r1, #1
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d853      	bhi.n	800ebd0 <Argus_Dev_CheckCfg+0x210>
 800eb28:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
 800eb2c:	2902      	cmp	r1, #2
 800eb2e:	f200 80bb 	bhi.w	800eca8 <Argus_Dev_CheckCfg+0x2e8>
 800eb32:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800eb36:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 800eb3a:	09db      	lsrs	r3, r3, #7
 800eb3c:	3401      	adds	r4, #1
 800eb3e:	4299      	cmp	r1, r3
 800eb40:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800eb44:	d206      	bcs.n	800eb54 <Argus_Dev_CheckCfg+0x194>
 800eb46:	4a70      	ldr	r2, [pc, #448]	; (800ed08 <Argus_Dev_CheckCfg+0x348>)
 800eb48:	4870      	ldr	r0, [pc, #448]	; (800ed0c <Argus_Dev_CheckCfg+0x34c>)
 800eb4a:	f7f2 f981 	bl	8000e50 <print>
 800eb4e:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800eb52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb54:	42a1      	cmp	r1, r4
 800eb56:	d8f6      	bhi.n	800eb46 <Argus_Dev_CheckCfg+0x186>
 800eb58:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
 800eb5c:	1e4d      	subs	r5, r1, #1
 800eb5e:	b2ad      	uxth	r5, r5
 800eb60:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800eb64:	4295      	cmp	r5, r2
 800eb66:	d839      	bhi.n	800ebdc <Argus_Dev_CheckCfg+0x21c>
 800eb68:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
 800eb6c:	1e4d      	subs	r5, r1, #1
 800eb6e:	b2ad      	uxth	r5, r5
 800eb70:	4295      	cmp	r5, r2
 800eb72:	d83c      	bhi.n	800ebee <Argus_Dev_CheckCfg+0x22e>
 800eb74:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 800eb78:	4299      	cmp	r1, r3
 800eb7a:	d201      	bcs.n	800eb80 <Argus_Dev_CheckCfg+0x1c0>
 800eb7c:	4a64      	ldr	r2, [pc, #400]	; (800ed10 <Argus_Dev_CheckCfg+0x350>)
 800eb7e:	e7e3      	b.n	800eb48 <Argus_Dev_CheckCfg+0x188>
 800eb80:	42a1      	cmp	r1, r4
 800eb82:	d8fb      	bhi.n	800eb7c <Argus_Dev_CheckCfg+0x1bc>
 800eb84:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
 800eb88:	1e4b      	subs	r3, r1, #1
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d837      	bhi.n	800ec00 <Argus_Dev_CheckCfg+0x240>
 800eb90:	f8b0 10b6 	ldrh.w	r1, [r0, #182]	; 0xb6
 800eb94:	1e4b      	subs	r3, r1, #1
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d833      	bhi.n	800ec04 <Argus_Dev_CheckCfg+0x244>
 800eb9c:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
 800eba0:	2b02      	cmp	r3, #2
 800eba2:	d001      	beq.n	800eba8 <Argus_Dev_CheckCfg+0x1e8>
 800eba4:	2000      	movs	r0, #0
 800eba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eba8:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	f000 8099 	beq.w	800ece4 <Argus_Dev_CheckCfg+0x324>
 800ebb2:	f8b0 30da 	ldrh.w	r3, [r0, #218]	; 0xda
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	f000 809a 	beq.w	800ecf0 <Argus_Dev_CheckCfg+0x330>
 800ebbc:	f8b0 20d8 	ldrh.w	r2, [r0, #216]	; 0xd8
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d2ef      	bcs.n	800eba4 <Argus_Dev_CheckCfg+0x1e4>
 800ebc4:	4853      	ldr	r0, [pc, #332]	; (800ed14 <Argus_Dev_CheckCfg+0x354>)
 800ebc6:	f7f2 f943 	bl	8000e50 <print>
 800ebca:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ebce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebd0:	4851      	ldr	r0, [pc, #324]	; (800ed18 <Argus_Dev_CheckCfg+0x358>)
 800ebd2:	f7f2 f93d 	bl	8000e50 <print>
 800ebd6:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ebda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebdc:	4a4a      	ldr	r2, [pc, #296]	; (800ed08 <Argus_Dev_CheckCfg+0x348>)
 800ebde:	484f      	ldr	r0, [pc, #316]	; (800ed1c <Argus_Dev_CheckCfg+0x35c>)
 800ebe0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ebe4:	f7f2 f934 	bl	8000e50 <print>
 800ebe8:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ebec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebee:	4a46      	ldr	r2, [pc, #280]	; (800ed08 <Argus_Dev_CheckCfg+0x348>)
 800ebf0:	484b      	ldr	r0, [pc, #300]	; (800ed20 <Argus_Dev_CheckCfg+0x360>)
 800ebf2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ebf6:	f7f2 f92b 	bl	8000e50 <print>
 800ebfa:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ebfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec00:	4a43      	ldr	r2, [pc, #268]	; (800ed10 <Argus_Dev_CheckCfg+0x350>)
 800ec02:	e7ec      	b.n	800ebde <Argus_Dev_CheckCfg+0x21e>
 800ec04:	4a42      	ldr	r2, [pc, #264]	; (800ed10 <Argus_Dev_CheckCfg+0x350>)
 800ec06:	e7f3      	b.n	800ebf0 <Argus_Dev_CheckCfg+0x230>
 800ec08:	2104      	movs	r1, #4
 800ec0a:	4846      	ldr	r0, [pc, #280]	; (800ed24 <Argus_Dev_CheckCfg+0x364>)
 800ec0c:	f7f2 f920 	bl	8000e50 <print>
 800ec10:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ec14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec16:	4844      	ldr	r0, [pc, #272]	; (800ed28 <Argus_Dev_CheckCfg+0x368>)
 800ec18:	f7f2 f91a 	bl	8000e50 <print>
 800ec1c:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ec20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec22:	4842      	ldr	r0, [pc, #264]	; (800ed2c <Argus_Dev_CheckCfg+0x36c>)
 800ec24:	f7f2 f914 	bl	8000e50 <print>
 800ec28:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ec2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec2e:	4840      	ldr	r0, [pc, #256]	; (800ed30 <Argus_Dev_CheckCfg+0x370>)
 800ec30:	f7f2 f90e 	bl	8000e50 <print>
 800ec34:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ec38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec3a:	4621      	mov	r1, r4
 800ec3c:	4b3d      	ldr	r3, [pc, #244]	; (800ed34 <Argus_Dev_CheckCfg+0x374>)
 800ec3e:	4a3e      	ldr	r2, [pc, #248]	; (800ed38 <Argus_Dev_CheckCfg+0x378>)
 800ec40:	483e      	ldr	r0, [pc, #248]	; (800ed3c <Argus_Dev_CheckCfg+0x37c>)
 800ec42:	f7f2 f905 	bl	8000e50 <print>
 800ec46:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ec4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec4c:	2380      	movs	r3, #128	; 0x80
 800ec4e:	2200      	movs	r2, #0
 800ec50:	483b      	ldr	r0, [pc, #236]	; (800ed40 <Argus_Dev_CheckCfg+0x380>)
 800ec52:	f7f2 f8fd 	bl	8000e50 <print>
 800ec56:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ec5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec5c:	2380      	movs	r3, #128	; 0x80
 800ec5e:	2202      	movs	r2, #2
 800ec60:	4838      	ldr	r0, [pc, #224]	; (800ed44 <Argus_Dev_CheckCfg+0x384>)
 800ec62:	f7f2 f8f5 	bl	8000e50 <print>
 800ec66:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ec6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec6c:	4836      	ldr	r0, [pc, #216]	; (800ed48 <Argus_Dev_CheckCfg+0x388>)
 800ec6e:	f7f2 f8ef 	bl	8000e50 <print>
 800ec72:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ec76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec78:	4834      	ldr	r0, [pc, #208]	; (800ed4c <Argus_Dev_CheckCfg+0x38c>)
 800ec7a:	f7f2 f8e9 	bl	8000e50 <print>
 800ec7e:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ec82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec84:	4832      	ldr	r0, [pc, #200]	; (800ed50 <Argus_Dev_CheckCfg+0x390>)
 800ec86:	f7f2 f8e3 	bl	8000e50 <print>
 800ec8a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ec8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec90:	4830      	ldr	r0, [pc, #192]	; (800ed54 <Argus_Dev_CheckCfg+0x394>)
 800ec92:	f7f2 f8dd 	bl	8000e50 <print>
 800ec96:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ec9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec9c:	482e      	ldr	r0, [pc, #184]	; (800ed58 <Argus_Dev_CheckCfg+0x398>)
 800ec9e:	f7f2 f8d7 	bl	8000e50 <print>
 800eca2:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800eca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eca8:	482c      	ldr	r0, [pc, #176]	; (800ed5c <Argus_Dev_CheckCfg+0x39c>)
 800ecaa:	f7f2 f8d1 	bl	8000e50 <print>
 800ecae:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ecb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecb4:	482a      	ldr	r0, [pc, #168]	; (800ed60 <Argus_Dev_CheckCfg+0x3a0>)
 800ecb6:	f7f2 f8cb 	bl	8000e50 <print>
 800ecba:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ecbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecc0:	4828      	ldr	r0, [pc, #160]	; (800ed64 <Argus_Dev_CheckCfg+0x3a4>)
 800ecc2:	f7f2 f8c5 	bl	8000e50 <print>
 800ecc6:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ecca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eccc:	4826      	ldr	r0, [pc, #152]	; (800ed68 <Argus_Dev_CheckCfg+0x3a8>)
 800ecce:	f7f2 f8bf 	bl	8000e50 <print>
 800ecd2:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ecd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecd8:	4824      	ldr	r0, [pc, #144]	; (800ed6c <Argus_Dev_CheckCfg+0x3ac>)
 800ecda:	f7f2 f8b9 	bl	8000e50 <print>
 800ecde:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ece2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ece4:	4822      	ldr	r0, [pc, #136]	; (800ed70 <Argus_Dev_CheckCfg+0x3b0>)
 800ece6:	f7f2 f8b3 	bl	8000e50 <print>
 800ecea:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ecee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecf0:	4820      	ldr	r0, [pc, #128]	; (800ed74 <Argus_Dev_CheckCfg+0x3b4>)
 800ecf2:	f7f2 f8ad 	bl	8000e50 <print>
 800ecf6:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800ecfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecfc:	000185a6 	.word	0x000185a6
 800ed00:	feced300 	.word	0xfeced300
 800ed04:	00989680 	.word	0x00989680
 800ed08:	08019d4c 	.word	0x08019d4c
 800ed0c:	0801a418 	.word	0x0801a418
 800ed10:	08019d48 	.word	0x08019d48
 800ed14:	0801a668 	.word	0x0801a668
 800ed18:	0801a374 	.word	0x0801a374
 800ed1c:	0801a494 	.word	0x0801a494
 800ed20:	0801a50c 	.word	0x0801a50c
 800ed24:	0801a0ac 	.word	0x0801a0ac
 800ed28:	08019968 	.word	0x08019968
 800ed2c:	0801a034 	.word	0x0801a034
 800ed30:	08019eb8 	.word	0x08019eb8
 800ed34:	01c9c380 	.word	0x01c9c380
 800ed38:	01312d00 	.word	0x01312d00
 800ed3c:	08019e4c 	.word	0x08019e4c
 800ed40:	08019df4 	.word	0x08019df4
 800ed44:	08019d9c 	.word	0x08019d9c
 800ed48:	08019d50 	.word	0x08019d50
 800ed4c:	0801a0ec 	.word	0x0801a0ec
 800ed50:	0801a178 	.word	0x0801a178
 800ed54:	0801a124 	.word	0x0801a124
 800ed58:	0801a1cc 	.word	0x0801a1cc
 800ed5c:	0801a3e0 	.word	0x0801a3e0
 800ed60:	08019f88 	.word	0x08019f88
 800ed64:	0801a228 	.word	0x0801a228
 800ed68:	0801a28c 	.word	0x0801a28c
 800ed6c:	0801a300 	.word	0x0801a300
 800ed70:	0801a584 	.word	0x0801a584
 800ed74:	0801a604 	.word	0x0801a604

0800ed78 <Argus_Dev_UpdateCalibration>:
 800ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7a:	f8d0 5130 	ldr.w	r5, [r0, #304]	; 0x130
 800ed7e:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 800ed82:	f895 706d 	ldrb.w	r7, [r5, #109]	; 0x6d
 800ed86:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
 800ed8a:	f890 605e 	ldrb.w	r6, [r0, #94]	; 0x5e
 800ed8e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800ed92:	4604      	mov	r4, r0
 800ed94:	f8d0 01d0 	ldr.w	r0, [r0, #464]	; 0x1d0
 800ed98:	f3c3 1785 	ubfx	r7, r3, #6, #6
 800ed9c:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 800eda0:	f001 fdd6 	bl	8010950 <Argus_Cal_GetCalibrationPtr>
 800eda4:	f990 3050 	ldrsb.w	r3, [r0, #80]	; 0x50
 800eda8:	443b      	add	r3, r7
 800edaa:	f3c6 1685 	ubfx	r6, r6, #6, #6
 800edae:	f383 0306 	usat	r3, #6, r3
 800edb2:	429e      	cmp	r6, r3
 800edb4:	d015      	beq.n	800ede2 <Argus_Dev_UpdateCalibration+0x6a>
 800edb6:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
 800edba:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800edbe:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800edc2:	019b      	lsls	r3, r3, #6
 800edc4:	f021 010f 	bic.w	r1, r1, #15
 800edc8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800edcc:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
 800edd0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 800edd4:	4313      	orrs	r3, r2
 800edd6:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
 800edda:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
 800edde:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 800ede2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 800ede6:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
 800edea:	f894 6064 	ldrb.w	r6, [r4, #100]	; 0x64
 800edee:	f003 0703 	and.w	r7, r3, #3
 800edf2:	f001 fdad 	bl	8010950 <Argus_Cal_GetCalibrationPtr>
 800edf6:	f990 3057 	ldrsb.w	r3, [r0, #87]	; 0x57
 800edfa:	443b      	add	r3, r7
 800edfc:	f006 0603 	and.w	r6, r6, #3
 800ee00:	f383 0302 	usat	r3, #2, r3
 800ee04:	429e      	cmp	r6, r3
 800ee06:	d00c      	beq.n	800ee22 <Argus_Dev_UpdateCalibration+0xaa>
 800ee08:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
 800ee0c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800ee10:	f022 0203 	bic.w	r2, r2, #3
 800ee14:	4313      	orrs	r3, r2
 800ee16:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800ee1a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800ee1e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800ee22:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
 800ee26:	f001 fd93 	bl	8010950 <Argus_Cal_GetCalibrationPtr>
 800ee2a:	f990 1056 	ldrsb.w	r1, [r0, #86]	; 0x56
 800ee2e:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
 800ee32:	1d0b      	adds	r3, r1, #4
 800ee34:	f3c2 0043 	ubfx	r0, r2, #1, #4
 800ee38:	d020      	beq.n	800ee7c <Argus_Dev_UpdateCalibration+0x104>
 800ee3a:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
 800ee3e:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800ee42:	440b      	add	r3, r1
 800ee44:	f383 0304 	usat	r3, #4, r3
 800ee48:	4283      	cmp	r3, r0
 800ee4a:	d00b      	beq.n	800ee64 <Argus_Dev_UpdateCalibration+0xec>
 800ee4c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800ee50:	f022 021e 	bic.w	r2, r2, #30
 800ee54:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 800ee58:	f041 0120 	orr.w	r1, r1, #32
 800ee5c:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
 800ee60:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800ee64:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ee68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ee6c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800ee70:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 800ee74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ee78:	f7fa bb10 	b.w	800949c <Argus_Dca_UpdateCalibration>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	e7e3      	b.n	800ee48 <Argus_Dev_UpdateCalibration+0xd0>

0800ee80 <Argus_Dev_GetFrameTime>:
 800ee80:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800ee84:	6858      	ldr	r0, [r3, #4]
 800ee86:	4770      	bx	lr

0800ee88 <Argus_Dev_GetFrameTimeout>:
 800ee88:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
 800ee8c:	7d8b      	ldrb	r3, [r1, #22]
 800ee8e:	b90b      	cbnz	r3, 800ee94 <Argus_Dev_GetFrameTimeout+0xc>
 800ee90:	4618      	mov	r0, r3
 800ee92:	4770      	bx	lr
 800ee94:	b4f0      	push	{r4, r5, r6, r7}
 800ee96:	f890 5049 	ldrb.w	r5, [r0, #73]	; 0x49
 800ee9a:	f890 204a 	ldrb.w	r2, [r0, #74]	; 0x4a
 800ee9e:	f890 406b 	ldrb.w	r4, [r0, #107]	; 0x6b
 800eea2:	f890 706a 	ldrb.w	r7, [r0, #106]	; 0x6a
 800eea6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800eeaa:	e9d1 5624 	ldrd	r5, r6, [r1, #144]	; 0x90
 800eeae:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800eeb2:	ea44 2107 	orr.w	r1, r4, r7, lsl #8
 800eeb6:	f3c1 1149 	ubfx	r1, r1, #5, #10
 800eeba:	fb06 5202 	mla	r2, r6, r2, r5
 800eebe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800eec2:	fb01 3303 	mla	r3, r1, r3, r3
 800eec6:	0092      	lsls	r2, r2, #2
 800eec8:	b295      	uxth	r5, r2
 800eeca:	b29c      	uxth	r4, r3
 800eecc:	0c1b      	lsrs	r3, r3, #16
 800eece:	fb05 f104 	mul.w	r1, r5, r4
 800eed2:	0c12      	lsrs	r2, r2, #16
 800eed4:	fb05 f503 	mul.w	r5, r5, r3
 800eed8:	eb05 4511 	add.w	r5, r5, r1, lsr #16
 800eedc:	fb02 f404 	mul.w	r4, r2, r4
 800eee0:	fa14 f485 	uxtah	r4, r4, r5
 800eee4:	fb02 f303 	mul.w	r3, r2, r3
 800eee8:	b289      	uxth	r1, r1
 800eeea:	eb01 4104 	add.w	r1, r1, r4, lsl #16
 800eeee:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 800eef2:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 800eef6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800eefa:	f8b0 4108 	ldrh.w	r4, [r0, #264]	; 0x108
 800eefe:	bf3a      	itte	cc
 800ef00:	f501 0100 	addcc.w	r1, r1, #8388608	; 0x800000
 800ef04:	0e09      	lsrcc	r1, r1, #24
 800ef06:	f44f 7180 	movcs.w	r1, #256	; 0x100
 800ef0a:	021b      	lsls	r3, r3, #8
 800ef0c:	07a5      	lsls	r5, r4, #30
 800ef0e:	440b      	add	r3, r1
 800ef10:	d525      	bpl.n	800ef5e <Argus_Dev_GetFrameTimeout+0xd6>
 800ef12:	0761      	lsls	r1, r4, #29
 800ef14:	ea4f 4513 	mov.w	r5, r3, lsr #16
 800ef18:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	d521      	bpl.n	800ef64 <Argus_Dev_GetFrameTimeout+0xdc>
 800ef20:	f5c2 3280 	rsb	r2, r2, #65536	; 0x10000
 800ef24:	b294      	uxth	r4, r2
 800ef26:	fb03 f104 	mul.w	r1, r3, r4
 800ef2a:	0c12      	lsrs	r2, r2, #16
 800ef2c:	fb05 f404 	mul.w	r4, r5, r4
 800ef30:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ef34:	fb03 f302 	mul.w	r3, r3, r2
 800ef38:	fa13 f084 	uxtah	r0, r3, r4
 800ef3c:	fb05 f202 	mul.w	r2, r5, r2
 800ef40:	eb02 4314 	add.w	r3, r2, r4, lsr #16
 800ef44:	0402      	lsls	r2, r0, #16
 800ef46:	fa12 f181 	uxtah	r1, r2, r1
 800ef4a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ef4e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 800ef52:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800ef56:	d321      	bcc.n	800ef9c <Argus_Dev_GetFrameTimeout+0x114>
 800ef58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ef5c:	4403      	add	r3, r0
 800ef5e:	4618      	mov	r0, r3
 800ef60:	bcf0      	pop	{r4, r5, r6, r7}
 800ef62:	4770      	bx	lr
 800ef64:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800ef68:	b290      	uxth	r0, r2
 800ef6a:	fb00 f103 	mul.w	r1, r0, r3
 800ef6e:	0c12      	lsrs	r2, r2, #16
 800ef70:	fb00 f005 	mul.w	r0, r0, r5
 800ef74:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 800ef78:	fb02 f303 	mul.w	r3, r2, r3
 800ef7c:	fa13 f380 	uxtah	r3, r3, r0
 800ef80:	fb02 f205 	mul.w	r2, r2, r5
 800ef84:	eb02 4210 	add.w	r2, r2, r0, lsr #16
 800ef88:	0418      	lsls	r0, r3, #16
 800ef8a:	fa10 f181 	uxtah	r1, r0, r1
 800ef8e:	eb02 4313 	add.w	r3, r2, r3, lsr #16
 800ef92:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 800ef96:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800ef9a:	d2dd      	bcs.n	800ef58 <Argus_Dev_GetFrameTimeout+0xd0>
 800ef9c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800efa0:	0c08      	lsrs	r0, r1, #16
 800efa2:	4403      	add	r3, r0
 800efa4:	e7db      	b.n	800ef5e <Argus_Dev_GetFrameTimeout+0xd6>
 800efa6:	bf00      	nop

0800efa8 <Argus_Dev_GetPixelCount>:
 800efa8:	b430      	push	{r4, r5}
 800efaa:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800efae:	f890 5071 	ldrb.w	r5, [r0, #113]	; 0x71
 800efb2:	f890 4073 	ldrb.w	r4, [r0, #115]	; 0x73
 800efb6:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
 800efba:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
 800efbe:	0218      	lsls	r0, r3, #8
 800efc0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800efc4:	4320      	orrs	r0, r4
 800efc6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800efca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800efce:	0853      	lsrs	r3, r2, #1
 800efd0:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800efd4:	1ad2      	subs	r2, r2, r3
 800efd6:	0893      	lsrs	r3, r2, #2
 800efd8:	f003 3133 	and.w	r1, r3, #858993459	; 0x33333333
 800efdc:	f002 3333 	and.w	r3, r2, #858993459	; 0x33333333
 800efe0:	440b      	add	r3, r1
 800efe2:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 800efe6:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800efea:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 800efee:	f3c0 4000 	ubfx	r0, r0, #16, #1
 800eff2:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 800eff6:	eb00 6013 	add.w	r0, r0, r3, lsr #24
 800effa:	bc30      	pop	{r4, r5}
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop

0800f000 <Argus_Dev_ClearUpdateFlag>:
 800f000:	f890 310a 	ldrb.w	r3, [r0, #266]	; 0x10a
 800f004:	ea23 0101 	bic.w	r1, r3, r1
 800f008:	f880 110a 	strb.w	r1, [r0, #266]	; 0x10a
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop

0800f010 <Argus_Dev_HasUpdateFlag>:
 800f010:	f890 010a 	ldrb.w	r0, [r0, #266]	; 0x10a
 800f014:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 800f018:	4770      	bx	lr
 800f01a:	bf00      	nop

0800f01c <Argus_Dev_StartIgnoreEvalTasks>:
 800f01c:	f890 310a 	ldrb.w	r3, [r0, #266]	; 0x10a
 800f020:	f043 0320 	orr.w	r3, r3, #32
 800f024:	f880 310a 	strb.w	r3, [r0, #266]	; 0x10a
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop

0800f02c <Argus_Dev_StopIgnoreEvalTasks>:
 800f02c:	f890 310a 	ldrb.w	r3, [r0, #266]	; 0x10a
 800f030:	f023 0320 	bic.w	r3, r3, #32
 800f034:	f880 310a 	strb.w	r3, [r0, #266]	; 0x10a
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop

0800f03c <Argus_Dev_GetFrameConfig>:
 800f03c:	b570      	push	{r4, r5, r6, lr}
 800f03e:	4604      	mov	r4, r0
 800f040:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800f044:	f890 6071 	ldrb.w	r6, [r0, #113]	; 0x71
 800f048:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800f04c:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 800f050:	460d      	mov	r5, r1
 800f052:	021b      	lsls	r3, r3, #8
 800f054:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800f058:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800f05c:	4303      	orrs	r3, r0
 800f05e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800f062:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f066:	602a      	str	r2, [r5, #0]
 800f068:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
 800f06c:	f894 006d 	ldrb.w	r0, [r4, #109]	; 0x6d
 800f070:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 800f074:	0212      	lsls	r2, r2, #8
 800f076:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f07a:	430a      	orrs	r2, r1
 800f07c:	0c1b      	lsrs	r3, r3, #16
 800f07e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f082:	606b      	str	r3, [r5, #4]
 800f084:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
 800f088:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800f08c:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800f090:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f094:	f3c3 1349 	ubfx	r3, r3, #5, #10
 800f098:	f992 2000 	ldrsb.w	r2, [r2]
 800f09c:	3301      	adds	r3, #1
 800f09e:	816b      	strh	r3, [r5, #10]
 800f0a0:	f504 76b2 	add.w	r6, r4, #356	; 0x164
 800f0a4:	2a00      	cmp	r2, #0
 800f0a6:	d15f      	bne.n	800f168 <Argus_Dev_GetFrameConfig+0x12c>
 800f0a8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800f0ac:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
 800f0b0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800f0b4:	0180      	lsls	r0, r0, #6
 800f0b6:	b280      	uxth	r0, r0
 800f0b8:	8128      	strh	r0, [r5, #8]
 800f0ba:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 800f0be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0c2:	73ab      	strb	r3, [r5, #14]
 800f0c4:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 800f0c8:	f891 308d 	ldrb.w	r3, [r1, #141]	; 0x8d
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d045      	beq.n	800f15c <Argus_Dev_GetFrameConfig+0x120>
 800f0d0:	2b02      	cmp	r3, #2
 800f0d2:	d110      	bne.n	800f0f6 <Argus_Dev_GetFrameConfig+0xba>
 800f0d4:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 800f0d8:	f24c 208f 	movw	r0, #49807	; 0xc28f
 800f0dc:	f3c2 0244 	ubfx	r2, r2, #1, #5
 800f0e0:	fb00 f002 	mul.w	r0, r0, r2
 800f0e4:	b283      	uxth	r3, r0
 800f0e6:	eb02 4210 	add.w	r2, r2, r0, lsr #16
 800f0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0ee:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800f0f2:	0b1b      	lsrs	r3, r3, #12
 800f0f4:	81ab      	strh	r3, [r5, #12]
 800f0f6:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
 800f0fa:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800f0fe:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
 800f102:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800f106:	0790      	lsls	r0, r2, #30
 800f108:	f3c3 1347 	ubfx	r3, r3, #5, #8
 800f10c:	d417      	bmi.n	800f13e <Argus_Dev_GetFrameConfig+0x102>
 800f10e:	f891 0073 	ldrb.w	r0, [r1, #115]	; 0x73
 800f112:	f891 1074 	ldrb.w	r1, [r1, #116]	; 0x74
 800f116:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800f11a:	eba3 1351 	sub.w	r3, r3, r1, lsr #5
 800f11e:	73eb      	strb	r3, [r5, #15]
 800f120:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	4629      	mov	r1, r5
 800f128:	2b02      	cmp	r3, #2
 800f12a:	bf08      	it	eq
 800f12c:	f042 0201 	orreq.w	r2, r2, #1
 800f130:	4630      	mov	r0, r6
 800f132:	f821 2f10 	strh.w	r2, [r1, #16]!
 800f136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f13a:	f7fa b991 	b.w	8009460 <Argus_Dca_GetState>
 800f13e:	f891 00a8 	ldrb.w	r0, [r1, #168]	; 0xa8
 800f142:	f012 0f04 	tst.w	r2, #4
 800f146:	bf15      	itete	ne
 800f148:	eb01 0140 	addne.w	r1, r1, r0, lsl #1
 800f14c:	3057      	addeq	r0, #87	; 0x57
 800f14e:	f891 10b2 	ldrbne.w	r1, [r1, #178]	; 0xb2
 800f152:	f811 1010 	ldrbeq.w	r1, [r1, r0, lsl #1]
 800f156:	1a5b      	subs	r3, r3, r1
 800f158:	73eb      	strb	r3, [r5, #15]
 800f15a:	e7e1      	b.n	800f120 <Argus_Dev_GetFrameConfig+0xe4>
 800f15c:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 800f160:	f24c 208f 	movw	r0, #49807	; 0xc28f
 800f164:	08d2      	lsrs	r2, r2, #3
 800f166:	e7bb      	b.n	800f0e0 <Argus_Dev_GetFrameConfig+0xa4>
 800f168:	4630      	mov	r0, r6
 800f16a:	f7fa f977 	bl	800945c <Argus_Dca_GetIntDepth>
 800f16e:	e7a3      	b.n	800f0b8 <Argus_Dev_GetFrameConfig+0x7c>

0800f170 <Argus_Dev_GetModule>:
 800f170:	7a80      	ldrb	r0, [r0, #10]
 800f172:	4770      	bx	lr

0800f174 <Argus_Dev_GetChipID>:
 800f174:	6840      	ldr	r0, [r0, #4]
 800f176:	4770      	bx	lr

0800f178 <Argus_Dev_GetChipVersion>:
 800f178:	7a00      	ldrb	r0, [r0, #8]
 800f17a:	4770      	bx	lr

0800f17c <Argus_Dev_GetLaserType>:
 800f17c:	7a40      	ldrb	r0, [r0, #9]
 800f17e:	4770      	bx	lr

0800f180 <Argus_Dev_PrepareCfg>:
 800f180:	b510      	push	{r4, lr}
 800f182:	f890 310a 	ldrb.w	r3, [r0, #266]	; 0x10a
 800f186:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
 800f18a:	4c0f      	ldr	r4, [pc, #60]	; (800f1c8 <Argus_Dev_PrepareCfg+0x48>)
 800f18c:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 800f190:	f043 0202 	orr.w	r2, r3, #2
 800f194:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 800f198:	f880 210a 	strb.w	r2, [r0, #266]	; 0x10a
 800f19c:	7dca      	ldrb	r2, [r1, #23]
 800f19e:	b15a      	cbz	r2, 800f1b8 <Argus_Dev_PrepareCfg+0x38>
 800f1a0:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800f1a4:	f023 0301 	bic.w	r3, r3, #1
 800f1a8:	f043 0302 	orr.w	r3, r3, #2
 800f1ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f1b0:	f880 310a 	strb.w	r3, [r0, #266]	; 0x10a
 800f1b4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800f1b8:	311c      	adds	r1, #28
 800f1ba:	2271      	movs	r2, #113	; 0x71
 800f1bc:	300c      	adds	r0, #12
 800f1be:	f008 faa4 	bl	801770a <memcpy>
 800f1c2:	2000      	movs	r0, #0
 800f1c4:	bd10      	pop	{r4, pc}
 800f1c6:	bf00      	nop
 800f1c8:	0033dffe 	.word	0x0033dffe

0800f1cc <Argus_Dev_GetCfg>:
 800f1cc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop

0800f1d4 <Argus_Dev_InvalidateAllRegisters>:
 800f1d4:	f890 310a 	ldrb.w	r3, [r0, #266]	; 0x10a
 800f1d8:	4a03      	ldr	r2, [pc, #12]	; (800f1e8 <Argus_Dev_InvalidateAllRegisters+0x14>)
 800f1da:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800f1de:	f043 0302 	orr.w	r3, r3, #2
 800f1e2:	f880 310a 	strb.w	r3, [r0, #266]	; 0x10a
 800f1e6:	4770      	bx	lr
 800f1e8:	0033dffe 	.word	0x0033dffe

0800f1ec <Argus_Dev_InvalidateRegister>:
 800f1ec:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800f1f0:	0849      	lsrs	r1, r1, #1
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	408b      	lsls	r3, r1
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 800f1fc:	4770      	bx	lr
 800f1fe:	bf00      	nop

0800f200 <Argus_Dev_Update>:
 800f200:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f202:	4604      	mov	r4, r0
 800f204:	f890 010a 	ldrb.w	r0, [r0, #266]	; 0x10a
 800f208:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 800f20c:	f000 0201 	and.w	r2, r0, #1
 800f210:	4291      	cmp	r1, r2
 800f212:	b083      	sub	sp, #12
 800f214:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 800f218:	d066      	beq.n	800f2e8 <Argus_Dev_Update+0xe8>
 800f21a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800f21e:	7dda      	ldrb	r2, [r3, #23]
 800f220:	bb09      	cbnz	r1, 800f266 <Argus_Dev_Update+0x66>
 800f222:	f020 0003 	bic.w	r0, r0, #3
 800f226:	f884 010a 	strb.w	r0, [r4, #266]	; 0x10a
 800f22a:	b14a      	cbz	r2, 800f240 <Argus_Dev_Update+0x40>
 800f22c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800f230:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 800f234:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f23c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800f240:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 800f244:	f104 010c 	add.w	r1, r4, #12
 800f248:	f7fc fea6 	bl	800bf98 <Argus_Dca_Apply>
 800f24c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800f250:	b9c0      	cbnz	r0, 800f284 <Argus_Dev_Update+0x84>
 800f252:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800f256:	2b00      	cmp	r3, #0
 800f258:	d043      	beq.n	800f2e2 <Argus_Dev_Update+0xe2>
 800f25a:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800f25e:	b003      	add	sp, #12
 800f260:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f264:	4718      	bx	r3
 800f266:	f020 0002 	bic.w	r0, r0, #2
 800f26a:	f040 0001 	orr.w	r0, r0, #1
 800f26e:	f884 010a 	strb.w	r0, [r4, #266]	; 0x10a
 800f272:	2a00      	cmp	r2, #0
 800f274:	d0e4      	beq.n	800f240 <Argus_Dev_Update+0x40>
 800f276:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800f27a:	f063 0377 	orn	r3, r3, #119	; 0x77
 800f27e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 800f282:	e7d7      	b.n	800f234 <Argus_Dev_Update+0x34>
 800f284:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f288:	01db      	lsls	r3, r3, #7
 800f28a:	d469      	bmi.n	800f360 <Argus_Dev_Update+0x160>
 800f28c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f290:	f043 0301 	orr.w	r3, r3, #1
 800f294:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800f298:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f29c:	0558      	lsls	r0, r3, #21
 800f29e:	d426      	bmi.n	800f2ee <Argus_Dev_Update+0xee>
 800f2a0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f2a4:	0519      	lsls	r1, r3, #20
 800f2a6:	d422      	bmi.n	800f2ee <Argus_Dev_Update+0xee>
 800f2a8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f2ac:	04da      	lsls	r2, r3, #19
 800f2ae:	d41e      	bmi.n	800f2ee <Argus_Dev_Update+0xee>
 800f2b0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f2b4:	05db      	lsls	r3, r3, #23
 800f2b6:	f140 80d0 	bpl.w	800f45a <Argus_Dev_Update+0x25a>
 800f2ba:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 800f2be:	4bab      	ldr	r3, [pc, #684]	; (800f56c <Argus_Dev_Update+0x36c>)
 800f2c0:	9401      	str	r4, [sp, #4]
 800f2c2:	2010      	movs	r0, #16
 800f2c4:	f104 0297 	add.w	r2, r4, #151	; 0x97
 800f2c8:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
 800f2cc:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
 800f2d0:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800f2d4:	9300      	str	r3, [sp, #0]
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	2302      	movs	r3, #2
 800f2da:	f007 fce9 	bl	8016cb0 <ADS_Transfer>
 800f2de:	1e03      	subs	r3, r0, #0
 800f2e0:	db21      	blt.n	800f326 <Argus_Dev_Update+0x126>
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	b003      	add	sp, #12
 800f2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2e8:	0782      	lsls	r2, r0, #30
 800f2ea:	d5a9      	bpl.n	800f240 <Argus_Dev_Update+0x40>
 800f2ec:	e795      	b.n	800f21a <Argus_Dev_Update+0x1a>
 800f2ee:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f2f2:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800f2f6:	499e      	ldr	r1, [pc, #632]	; (800f570 <Argus_Dev_Update+0x370>)
 800f2f8:	9401      	str	r4, [sp, #4]
 800f2fa:	f022 0201 	bic.w	r2, r2, #1
 800f2fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f302:	2010      	movs	r0, #16
 800f304:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
 800f308:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800f30c:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
 800f310:	2302      	movs	r3, #2
 800f312:	9100      	str	r1, [sp, #0]
 800f314:	2200      	movs	r2, #0
 800f316:	f104 0197 	add.w	r1, r4, #151	; 0x97
 800f31a:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800f31e:	f007 fcc7 	bl	8016cb0 <ADS_Transfer>
 800f322:	1e03      	subs	r3, r0, #0
 800f324:	dadd      	bge.n	800f2e2 <Argus_Dev_Update+0xe2>
 800f326:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800f32a:	4d92      	ldr	r5, [pc, #584]	; (800f574 <Argus_Dev_Update+0x374>)
 800f32c:	f894 210a 	ldrb.w	r2, [r4, #266]	; 0x10a
 800f330:	f021 0101 	bic.w	r1, r1, #1
 800f334:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800f338:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800f33c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800f340:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800f344:	f021 0101 	bic.w	r1, r1, #1
 800f348:	f042 0202 	orr.w	r2, r2, #2
 800f34c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800f350:	f884 210a 	strb.w	r2, [r4, #266]	; 0x10a
 800f354:	2d00      	cmp	r5, #0
 800f356:	d0c4      	beq.n	800f2e2 <Argus_Dev_Update+0xe2>
 800f358:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800f35c:	462b      	mov	r3, r5
 800f35e:	e77e      	b.n	800f25e <Argus_Dev_Update+0x5e>
 800f360:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 800f364:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f368:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
 800f36c:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
 800f370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f374:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800f378:	bb79      	cbnz	r1, 800f3da <Argus_Dev_Update+0x1da>
 800f37a:	f022 0206 	bic.w	r2, r2, #6
 800f37e:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
 800f382:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 800f386:	4620      	mov	r0, r4
 800f388:	f7fd fe2a 	bl	800cfe0 <ApplyClockFrequency>
 800f38c:	b128      	cbz	r0, 800f39a <Argus_Dev_Update+0x19a>
 800f38e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f392:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f396:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800f39a:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
 800f39e:	069f      	lsls	r7, r3, #26
 800f3a0:	d416      	bmi.n	800f3d0 <Argus_Dev_Update+0x1d0>
 800f3a2:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
 800f3a6:	f7f6 fc17 	bl	8005bd8 <Argus_Measurement_GetBusyBuffers>
 800f3aa:	b188      	cbz	r0, 800f3d0 <Argus_Dev_Update+0x1d0>
 800f3ac:	07c6      	lsls	r6, r0, #31
 800f3ae:	d505      	bpl.n	800f3bc <Argus_Dev_Update+0x1bc>
 800f3b0:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
 800f3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3b8:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
 800f3bc:	0785      	lsls	r5, r0, #30
 800f3be:	f57f af65 	bpl.w	800f28c <Argus_Dev_Update+0x8c>
 800f3c2:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
 800f3c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f3ca:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
 800f3ce:	e75d      	b.n	800f28c <Argus_Dev_Update+0x8c>
 800f3d0:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
 800f3d4:	f7f7 fbc6 	bl	8006b64 <Argus_Eval_Update>
 800f3d8:	e758      	b.n	800f28c <Argus_Dev_Update+0x8c>
 800f3da:	312d      	adds	r1, #45	; 0x2d
 800f3dc:	6805      	ldr	r5, [r0, #0]
 800f3de:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f3e2:	f042 0202 	orr.w	r2, r2, #2
 800f3e6:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
 800f3ea:	b1d5      	cbz	r5, 800f422 <Argus_Dev_Update+0x222>
 800f3ec:	ea85 70e5 	eor.w	r0, r5, r5, asr #31
 800f3f0:	085b      	lsrs	r3, r3, #1
 800f3f2:	eba0 70e5 	sub.w	r0, r0, r5, asr #31
 800f3f6:	4283      	cmp	r3, r0
 800f3f8:	ea83 0605 	eor.w	r6, r3, r5
 800f3fc:	f240 8088 	bls.w	800f510 <Argus_Dev_Update+0x310>
 800f400:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800f404:	e001      	b.n	800f40a <Argus_Dev_Update+0x20a>
 800f406:	4615      	mov	r5, r2
 800f408:	4608      	mov	r0, r1
 800f40a:	0041      	lsls	r1, r0, #1
 800f40c:	428b      	cmp	r3, r1
 800f40e:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800f412:	d8f8      	bhi.n	800f406 <Argus_Dev_Update+0x206>
 800f414:	b942      	cbnz	r2, 800f428 <Argus_Dev_Update+0x228>
 800f416:	2e00      	cmp	r6, #0
 800f418:	bfb4      	ite	lt
 800f41a:	f04f 4500 	movlt.w	r5, #2147483648	; 0x80000000
 800f41e:	f06f 4500 	mvnge.w	r5, #2147483648	; 0x80000000
 800f422:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 800f426:	e7ae      	b.n	800f386 <Argus_Dev_Update+0x186>
 800f428:	2900      	cmp	r1, #0
 800f42a:	da04      	bge.n	800f436 <Argus_Dev_Update+0x236>
 800f42c:	f035 4200 	bics.w	r2, r5, #2147483648	; 0x80000000
 800f430:	4601      	mov	r1, r0
 800f432:	f000 8081 	beq.w	800f538 <Argus_Dev_Update+0x338>
 800f436:	2500      	movs	r5, #0
 800f438:	e000      	b.n	800f43c <Argus_Dev_Update+0x23c>
 800f43a:	b153      	cbz	r3, 800f452 <Argus_Dev_Update+0x252>
 800f43c:	4299      	cmp	r1, r3
 800f43e:	bf9c      	itt	ls
 800f440:	1a5b      	subls	r3, r3, r1
 800f442:	4315      	orrls	r5, r2
 800f444:	0852      	lsrs	r2, r2, #1
 800f446:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f44a:	d1f6      	bne.n	800f43a <Argus_Dev_Update+0x23a>
 800f44c:	4299      	cmp	r1, r3
 800f44e:	bf98      	it	ls
 800f450:	3501      	addls	r5, #1
 800f452:	2e00      	cmp	r6, #0
 800f454:	bfb8      	it	lt
 800f456:	426d      	neglt	r5, r5
 800f458:	e7e3      	b.n	800f422 <Argus_Dev_Update+0x222>
 800f45a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800f45e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f462:	4a45      	ldr	r2, [pc, #276]	; (800f578 <Argus_Dev_Update+0x378>)
 800f464:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
 800f468:	f005 7500 	and.w	r5, r5, #33554432	; 0x2000000
 800f46c:	f003 0320 	and.w	r3, r3, #32
 800f470:	ea53 0005 	orrs.w	r0, r3, r5
 800f474:	d105      	bne.n	800f482 <Argus_Dev_Update+0x282>
 800f476:	4621      	mov	r1, r4
 800f478:	b003      	add	sp, #12
 800f47a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f47e:	f7fd bf8f 	b.w	800d3a0 <WriteRegisterConfiguration>
 800f482:	f894 7095 	ldrb.w	r7, [r4, #149]	; 0x95
 800f486:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800f48a:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 800f48e:	2f09      	cmp	r7, #9
 800f490:	f504 768a 	add.w	r6, r4, #276	; 0x114
 800f494:	bf94      	ite	ls
 800f496:	8b19      	ldrhls	r1, [r3, #24]
 800f498:	8b59      	ldrhhi	r1, [r3, #26]
 800f49a:	4630      	mov	r0, r6
 800f49c:	f7f6 f8c4 	bl	8005628 <Time_CheckTimeoutUSec>
 800f4a0:	b310      	cbz	r0, 800f4e8 <Argus_Dev_Update+0x2e8>
 800f4a2:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 800f4a6:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
 800f4aa:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800f4ae:	f3c1 1183 	ubfx	r1, r1, #6, #4
 800f4b2:	b395      	cbz	r5, 800f51a <Argus_Dev_Update+0x31a>
 800f4b4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f4b8:	f043 0320 	orr.w	r3, r3, #32
 800f4bc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800f4c0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f4c4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800f4c8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	0189      	lsls	r1, r1, #6
 800f4d0:	f022 0203 	bic.w	r2, r2, #3
 800f4d4:	430b      	orrs	r3, r1
 800f4d6:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
 800f4da:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800f4de:	f884 2094 	strb.w	r2, [r4, #148]	; 0x94
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f7f5 ffca 	bl	800547c <Time_GetNow>
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	230a      	movs	r3, #10
 800f4ec:	f801 3f92 	strb.w	r3, [r1, #146]!
 800f4f0:	4b22      	ldr	r3, [pc, #136]	; (800f57c <Argus_Dev_Update+0x37c>)
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	e9cd 3400 	strd	r3, r4, [sp]
 800f4f8:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800f4fc:	2305      	movs	r3, #5
 800f4fe:	f007 fbd7 	bl	8016cb0 <ADS_Transfer>
 800f502:	1e03      	subs	r3, r0, #0
 800f504:	f6bf aeed 	bge.w	800f2e2 <Argus_Dev_Update+0xe2>
 800f508:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800f50c:	4621      	mov	r1, r4
 800f50e:	e6a6      	b.n	800f25e <Argus_Dev_Update+0x5e>
 800f510:	b1fb      	cbz	r3, 800f552 <Argus_Dev_Update+0x352>
 800f512:	4601      	mov	r1, r0
 800f514:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f518:	e78d      	b.n	800f436 <Argus_Dev_Update+0x236>
 800f51a:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 800f51e:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 800f522:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800f526:	f3c0 1083 	ubfx	r0, r0, #6, #4
 800f52a:	4281      	cmp	r1, r0
 800f52c:	d006      	beq.n	800f53c <Argus_Dev_Update+0x33c>
 800f52e:	2f00      	cmp	r7, #0
 800f530:	bf08      	it	eq
 800f532:	4601      	moveq	r1, r0
 800f534:	462b      	mov	r3, r5
 800f536:	e7ca      	b.n	800f4ce <Argus_Dev_Update+0x2ce>
 800f538:	4615      	mov	r5, r2
 800f53a:	e787      	b.n	800f44c <Argus_Dev_Update+0x24c>
 800f53c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f540:	429f      	cmp	r7, r3
 800f542:	d00e      	beq.n	800f562 <Argus_Dev_Update+0x362>
 800f544:	da07      	bge.n	800f556 <Argus_Dev_Update+0x356>
 800f546:	1c7d      	adds	r5, r7, #1
 800f548:	42ab      	cmp	r3, r5
 800f54a:	bfa8      	it	ge
 800f54c:	462b      	movge	r3, r5
 800f54e:	b25b      	sxtb	r3, r3
 800f550:	e7bd      	b.n	800f4ce <Argus_Dev_Update+0x2ce>
 800f552:	461d      	mov	r5, r3
 800f554:	e77d      	b.n	800f452 <Argus_Dev_Update+0x252>
 800f556:	b103      	cbz	r3, 800f55a <Argus_Dev_Update+0x35a>
 800f558:	1e7d      	subs	r5, r7, #1
 800f55a:	42ab      	cmp	r3, r5
 800f55c:	bfb8      	it	lt
 800f55e:	462b      	movlt	r3, r5
 800f560:	e7f5      	b.n	800f54e <Argus_Dev_Update+0x34e>
 800f562:	4628      	mov	r0, r5
 800f564:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800f568:	4621      	mov	r1, r4
 800f56a:	e678      	b.n	800f25e <Argus_Dev_Update+0x5e>
 800f56c:	0800d2cd 	.word	0x0800d2cd
 800f570:	0800d215 	.word	0x0800d215
 800f574:	0033dffe 	.word	0x0033dffe
 800f578:	0800d3a1 	.word	0x0800d3a1
 800f57c:	0800cec9 	.word	0x0800cec9

0800f580 <Argus_Dev_RecoverFromError>:
 800f580:	b510      	push	{r4, lr}
 800f582:	f890 310a 	ldrb.w	r3, [r0, #266]	; 0x10a
 800f586:	4a1a      	ldr	r2, [pc, #104]	; (800f5f0 <Argus_Dev_RecoverFromError+0x70>)
 800f588:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800f58c:	b084      	sub	sp, #16
 800f58e:	f043 0302 	orr.w	r3, r3, #2
 800f592:	f880 310a 	strb.w	r3, [r0, #266]	; 0x10a
 800f596:	2202      	movs	r2, #2
 800f598:	2300      	movs	r3, #0
 800f59a:	4604      	mov	r4, r0
 800f59c:	a802      	add	r0, sp, #8
 800f59e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f5a2:	9201      	str	r2, [sp, #4]
 800f5a4:	f7f5 ff6a 	bl	800547c <Time_GetNow>
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	ab01      	add	r3, sp, #4
 800f5ac:	4a11      	ldr	r2, [pc, #68]	; (800f5f4 <Argus_Dev_RecoverFromError+0x74>)
 800f5ae:	2101      	movs	r1, #1
 800f5b0:	f7ff fe26 	bl	800f200 <Argus_Dev_Update>
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	da03      	bge.n	800f5c0 <Argus_Dev_RecoverFromError+0x40>
 800f5b8:	e011      	b.n	800f5de <Argus_Dev_RecoverFromError+0x5e>
 800f5ba:	9801      	ldr	r0, [sp, #4]
 800f5bc:	2802      	cmp	r0, #2
 800f5be:	d110      	bne.n	800f5e2 <Argus_Dev_RecoverFromError+0x62>
 800f5c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f5c4:	a802      	add	r0, sp, #8
 800f5c6:	f7f6 f89b 	bl	8005700 <Time_CheckTimeoutMSec>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	d0f4      	beq.n	800f5ba <Argus_Dev_RecoverFromError+0x3a>
 800f5d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f5d4:	4808      	ldr	r0, [pc, #32]	; (800f5f8 <Argus_Dev_RecoverFromError+0x78>)
 800f5d6:	f7f1 fc3b 	bl	8000e50 <print>
 800f5da:	f06f 0005 	mvn.w	r0, #5
 800f5de:	b004      	add	sp, #16
 800f5e0:	bd10      	pop	{r4, pc}
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	bfa4      	itt	ge
 800f5e6:	4618      	movge	r0, r3
 800f5e8:	6023      	strge	r3, [r4, #0]
 800f5ea:	b004      	add	sp, #16
 800f5ec:	bd10      	pop	{r4, pc}
 800f5ee:	bf00      	nop
 800f5f0:	0033dffe 	.word	0x0033dffe
 800f5f4:	0800ce8d 	.word	0x0800ce8d
 800f5f8:	0801a9a0 	.word	0x0801a9a0

0800f5fc <Argus_Dev_UpdateSync>:
 800f5fc:	b530      	push	{r4, r5, lr}
 800f5fe:	b085      	sub	sp, #20
 800f600:	2300      	movs	r3, #0
 800f602:	2202      	movs	r2, #2
 800f604:	4604      	mov	r4, r0
 800f606:	460d      	mov	r5, r1
 800f608:	a802      	add	r0, sp, #8
 800f60a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f60e:	9201      	str	r2, [sp, #4]
 800f610:	f7f5 ff34 	bl	800547c <Time_GetNow>
 800f614:	4629      	mov	r1, r5
 800f616:	4620      	mov	r0, r4
 800f618:	ab01      	add	r3, sp, #4
 800f61a:	4a0c      	ldr	r2, [pc, #48]	; (800f64c <Argus_Dev_UpdateSync+0x50>)
 800f61c:	f7ff fdf0 	bl	800f200 <Argus_Dev_Update>
 800f620:	2800      	cmp	r0, #0
 800f622:	da03      	bge.n	800f62c <Argus_Dev_UpdateSync+0x30>
 800f624:	e010      	b.n	800f648 <Argus_Dev_UpdateSync+0x4c>
 800f626:	9801      	ldr	r0, [sp, #4]
 800f628:	2802      	cmp	r0, #2
 800f62a:	d10d      	bne.n	800f648 <Argus_Dev_UpdateSync+0x4c>
 800f62c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f630:	a802      	add	r0, sp, #8
 800f632:	f7f6 f865 	bl	8005700 <Time_CheckTimeoutMSec>
 800f636:	2800      	cmp	r0, #0
 800f638:	d0f5      	beq.n	800f626 <Argus_Dev_UpdateSync+0x2a>
 800f63a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f63e:	4804      	ldr	r0, [pc, #16]	; (800f650 <Argus_Dev_UpdateSync+0x54>)
 800f640:	f7f1 fc06 	bl	8000e50 <print>
 800f644:	f06f 0005 	mvn.w	r0, #5
 800f648:	b005      	add	sp, #20
 800f64a:	bd30      	pop	{r4, r5, pc}
 800f64c:	0800ce8d 	.word	0x0800ce8d
 800f650:	0801a9a0 	.word	0x0801a9a0

0800f654 <Argus_Dev_ChargePumpRamp>:
 800f654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f656:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 800f65a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800f65e:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
 800f662:	f005 7500 	and.w	r5, r5, #33554432	; 0x2000000
 800f666:	f003 0320 	and.w	r3, r3, #32
 800f66a:	432b      	orrs	r3, r5
 800f66c:	b083      	sub	sp, #12
 800f66e:	d106      	bne.n	800f67e <Argus_Dev_ChargePumpRamp+0x2a>
 800f670:	460a      	mov	r2, r1
 800f672:	4601      	mov	r1, r0
 800f674:	4618      	mov	r0, r3
 800f676:	b003      	add	sp, #12
 800f678:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f67c:	4710      	bx	r2
 800f67e:	f890 7095 	ldrb.w	r7, [r0, #149]	; 0x95
 800f682:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800f686:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 800f68a:	2f09      	cmp	r7, #9
 800f68c:	f500 768a 	add.w	r6, r0, #276	; 0x114
 800f690:	bf94      	ite	ls
 800f692:	8b19      	ldrhls	r1, [r3, #24]
 800f694:	8b59      	ldrhhi	r1, [r3, #26]
 800f696:	4604      	mov	r4, r0
 800f698:	4630      	mov	r0, r6
 800f69a:	f7f5 ffc5 	bl	8005628 <Time_CheckTimeoutUSec>
 800f69e:	b310      	cbz	r0, 800f6e6 <Argus_Dev_ChargePumpRamp+0x92>
 800f6a0:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
 800f6a4:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800f6a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800f6ac:	f3c2 1383 	ubfx	r3, r2, #6, #4
 800f6b0:	b355      	cbz	r5, 800f708 <Argus_Dev_ChargePumpRamp+0xb4>
 800f6b2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800f6b6:	f042 0220 	orr.w	r2, r2, #32
 800f6ba:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800f6be:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800f6c2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800f6c6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800f6ca:	2500      	movs	r5, #0
 800f6cc:	019a      	lsls	r2, r3, #6
 800f6ce:	f021 0303 	bic.w	r3, r1, #3
 800f6d2:	4315      	orrs	r5, r2
 800f6d4:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 800f6d8:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
 800f6dc:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	f7f5 fecb 	bl	800547c <Time_GetNow>
 800f6e6:	4621      	mov	r1, r4
 800f6e8:	230a      	movs	r3, #10
 800f6ea:	f801 3f92 	strb.w	r3, [r1, #146]!
 800f6ee:	4b1b      	ldr	r3, [pc, #108]	; (800f75c <Argus_Dev_ChargePumpRamp+0x108>)
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	e9cd 3400 	strd	r3, r4, [sp]
 800f6f6:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800f6fa:	2305      	movs	r3, #5
 800f6fc:	f007 fad8 	bl	8016cb0 <ADS_Transfer>
 800f700:	2800      	cmp	r0, #0
 800f702:	db10      	blt.n	800f726 <Argus_Dev_ChargePumpRamp+0xd2>
 800f704:	b003      	add	sp, #12
 800f706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f708:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 800f70c:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 800f710:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800f714:	f3c0 1083 	ubfx	r0, r0, #6, #4
 800f718:	4283      	cmp	r3, r0
 800f71a:	d00b      	beq.n	800f734 <Argus_Dev_ChargePumpRamp+0xe0>
 800f71c:	2f00      	cmp	r7, #0
 800f71e:	bf08      	it	eq
 800f720:	4603      	moveq	r3, r0
 800f722:	e7d3      	b.n	800f6cc <Argus_Dev_ChargePumpRamp+0x78>
 800f724:	4628      	mov	r0, r5
 800f726:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800f72a:	4621      	mov	r1, r4
 800f72c:	b003      	add	sp, #12
 800f72e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f732:	4718      	bx	r3
 800f734:	f002 003f 	and.w	r0, r2, #63	; 0x3f
 800f738:	4287      	cmp	r7, r0
 800f73a:	d0f3      	beq.n	800f724 <Argus_Dev_ChargePumpRamp+0xd0>
 800f73c:	db06      	blt.n	800f74c <Argus_Dev_ChargePumpRamp+0xf8>
 800f73e:	b150      	cbz	r0, 800f756 <Argus_Dev_ChargePumpRamp+0x102>
 800f740:	1e7a      	subs	r2, r7, #1
 800f742:	4282      	cmp	r2, r0
 800f744:	bfb8      	it	lt
 800f746:	4602      	movlt	r2, r0
 800f748:	b255      	sxtb	r5, r2
 800f74a:	e7bf      	b.n	800f6cc <Argus_Dev_ChargePumpRamp+0x78>
 800f74c:	1c7a      	adds	r2, r7, #1
 800f74e:	4282      	cmp	r2, r0
 800f750:	bfa8      	it	ge
 800f752:	4602      	movge	r2, r0
 800f754:	e7f8      	b.n	800f748 <Argus_Dev_ChargePumpRamp+0xf4>
 800f756:	462a      	mov	r2, r5
 800f758:	e7f3      	b.n	800f742 <Argus_Dev_ChargePumpRamp+0xee>
 800f75a:	bf00      	nop
 800f75c:	0800cec9 	.word	0x0800cec9

0800f760 <Argus_Dev_StartIntegration>:
 800f760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f764:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
 800f768:	b084      	sub	sp, #16
 800f76a:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 800f76e:	4604      	mov	r4, r0
 800f770:	f100 0597 	add.w	r5, r0, #151	; 0x97
 800f774:	f7ff fb88 	bl	800ee88 <Argus_Dev_GetFrameTimeout>
 800f778:	f104 0159 	add.w	r1, r4, #89	; 0x59
 800f77c:	4680      	mov	r8, r0
 800f77e:	2203      	movs	r2, #3
 800f780:	4628      	mov	r0, r5
 800f782:	f007 ffc2 	bl	801770a <memcpy>
 800f786:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f78a:	4f12      	ldr	r7, [pc, #72]	; (800f7d4 <Argus_Dev_StartIntegration+0x74>)
 800f78c:	4e12      	ldr	r6, [pc, #72]	; (800f7d8 <Argus_Dev_StartIntegration+0x78>)
 800f78e:	9403      	str	r4, [sp, #12]
 800f790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f794:	2213      	movs	r2, #19
 800f796:	f8cd 8000 	str.w	r8, [sp]
 800f79a:	4629      	mov	r1, r5
 800f79c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800f7a0:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
 800f7a4:	2303      	movs	r3, #3
 800f7a6:	462a      	mov	r2, r5
 800f7a8:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800f7ac:	e9cd 6701 	strd	r6, r7, [sp, #4]
 800f7b0:	f007 fa04 	bl	8016bbc <ADS_TransferWithStart>
 800f7b4:	1e03      	subs	r3, r0, #0
 800f7b6:	db03      	blt.n	800f7c0 <Argus_Dev_StartIntegration+0x60>
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	b004      	add	sp, #16
 800f7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800f7c4:	2a00      	cmp	r2, #0
 800f7c6:	d0f7      	beq.n	800f7b8 <Argus_Dev_StartIntegration+0x58>
 800f7c8:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800f7cc:	b004      	add	sp, #16
 800f7ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d2:	4710      	bx	r2
 800f7d4:	0800ce91 	.word	0x0800ce91
 800f7d8:	0800d0a5 	.word	0x0800d0a5

0800f7dc <Argus_Dev_CheckDeviceConfigRegister>:
 800f7dc:	788b      	ldrb	r3, [r1, #2]
 800f7de:	069b      	lsls	r3, r3, #26
 800f7e0:	d501      	bpl.n	800f7e6 <Argus_Dev_CheckDeviceConfigRegister+0xa>
 800f7e2:	2000      	movs	r0, #0
 800f7e4:	4770      	bx	lr
 800f7e6:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800f7ea:	490b      	ldr	r1, [pc, #44]	; (800f818 <Argus_Dev_CheckDeviceConfigRegister+0x3c>)
 800f7ec:	f890 310a 	ldrb.w	r3, [r0, #266]	; 0x10a
 800f7f0:	f022 0201 	bic.w	r2, r2, #1
 800f7f4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800f7f8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 800f7fc:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800f800:	f043 0302 	orr.w	r3, r3, #2
 800f804:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800f808:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800f80c:	f880 310a 	strb.w	r3, [r0, #266]	; 0x10a
 800f810:	f06f 0071 	mvn.w	r0, #113	; 0x71
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop
 800f818:	0033dffe 	.word	0x0033dffe

0800f81c <Argus_Dev_DetuneClock>:
 800f81c:	b570      	push	{r4, r5, r6, lr}
 800f81e:	f8b0 3108 	ldrh.w	r3, [r0, #264]	; 0x108
 800f822:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 800f826:	079a      	lsls	r2, r3, #30
 800f828:	bf48      	it	mi
 800f82a:	f083 0304 	eormi.w	r3, r3, #4
 800f82e:	b082      	sub	sp, #8
 800f830:	bf48      	it	mi
 800f832:	f8a0 3108 	strhmi.w	r3, [r0, #264]	; 0x108
 800f836:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
 800f83a:	4604      	mov	r4, r0
 800f83c:	f7fd fbd0 	bl	800cfe0 <ApplyClockFrequency>
 800f840:	b948      	cbnz	r0, 800f856 <Argus_Dev_DetuneClock+0x3a>
 800f842:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800f846:	2b00      	cmp	r3, #0
 800f848:	d041      	beq.n	800f8ce <Argus_Dev_DetuneClock+0xb2>
 800f84a:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800f84e:	b002      	add	sp, #8
 800f850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f854:	4718      	bx	r3
 800f856:	f104 0657 	add.w	r6, r4, #87	; 0x57
 800f85a:	f104 0597 	add.w	r5, r4, #151	; 0x97
 800f85e:	4631      	mov	r1, r6
 800f860:	2202      	movs	r2, #2
 800f862:	4628      	mov	r0, r5
 800f864:	f007 ff51 	bl	801770a <memcpy>
 800f868:	2205      	movs	r2, #5
 800f86a:	f104 0160 	add.w	r1, r4, #96	; 0x60
 800f86e:	f104 0099 	add.w	r0, r4, #153	; 0x99
 800f872:	f007 ff4a 	bl	801770a <memcpy>
 800f876:	4631      	mov	r1, r6
 800f878:	2202      	movs	r2, #2
 800f87a:	f104 009e 	add.w	r0, r4, #158	; 0x9e
 800f87e:	f007 ff44 	bl	801770a <memcpy>
 800f882:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800f886:	4817      	ldr	r0, [pc, #92]	; (800f8e4 <Argus_Dev_DetuneClock+0xc8>)
 800f888:	9401      	str	r4, [sp, #4]
 800f88a:	2210      	movs	r2, #16
 800f88c:	f023 0310 	bic.w	r3, r3, #16
 800f890:	2616      	movs	r6, #22
 800f892:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 800f896:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
 800f89a:	f884 209e 	strb.w	r2, [r4, #158]	; 0x9e
 800f89e:	f884 6099 	strb.w	r6, [r4, #153]	; 0x99
 800f8a2:	2309      	movs	r3, #9
 800f8a4:	9000      	str	r0, [sp, #0]
 800f8a6:	4629      	mov	r1, r5
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800f8ae:	f007 f9ff 	bl	8016cb0 <ADS_Transfer>
 800f8b2:	1e03      	subs	r3, r0, #0
 800f8b4:	da0b      	bge.n	800f8ce <Argus_Dev_DetuneClock+0xb2>
 800f8b6:	f894 210a 	ldrb.w	r2, [r4, #266]	; 0x10a
 800f8ba:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800f8be:	490a      	ldr	r1, [pc, #40]	; (800f8e8 <Argus_Dev_DetuneClock+0xcc>)
 800f8c0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 800f8c4:	f042 0202 	orr.w	r2, r2, #2
 800f8c8:	f884 210a 	strb.w	r2, [r4, #266]	; 0x10a
 800f8cc:	b915      	cbnz	r5, 800f8d4 <Argus_Dev_DetuneClock+0xb8>
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	b002      	add	sp, #8
 800f8d2:	bd70      	pop	{r4, r5, r6, pc}
 800f8d4:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800f8d8:	462b      	mov	r3, r5
 800f8da:	b002      	add	sp, #8
 800f8dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8e0:	4718      	bx	r3
 800f8e2:	bf00      	nop
 800f8e4:	0800cea1 	.word	0x0800cea1
 800f8e8:	0033dffe 	.word	0x0033dffe

0800f8ec <Argus_Dev_ReadEEPROM>:
 800f8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f0:	2400      	movs	r4, #0
 800f8f2:	b095      	sub	sp, #84	; 0x54
 800f8f4:	4688      	mov	r8, r1
 800f8f6:	4605      	mov	r5, r0
 800f8f8:	4621      	mov	r1, r4
 800f8fa:	2210      	movs	r2, #16
 800f8fc:	4640      	mov	r0, r8
 800f8fe:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800f902:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800f906:	9406      	str	r4, [sp, #24]
 800f908:	940a      	str	r4, [sp, #40]	; 0x28
 800f90a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800f90e:	9409      	str	r4, [sp, #36]	; 0x24
 800f910:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800f914:	940d      	str	r4, [sp, #52]	; 0x34
 800f916:	f007 ff03 	bl	8017720 <memset>
 800f91a:	4628      	mov	r0, r5
 800f91c:	f7fd fc1e 	bl	800d15c <EnableEEPROM>
 800f920:	1e07      	subs	r7, r0, #0
 800f922:	db6a      	blt.n	800f9fa <Argus_Dev_ReadEEPROM+0x10e>
 800f924:	f505 769c 	add.w	r6, r5, #312	; 0x138
 800f928:	a902      	add	r1, sp, #8
 800f92a:	4630      	mov	r0, r6
 800f92c:	f007 fb08 	bl	8016f40 <ADS_ReadEEPROM>
 800f930:	a906      	add	r1, sp, #24
 800f932:	4681      	mov	r9, r0
 800f934:	4630      	mov	r0, r6
 800f936:	f007 fb03 	bl	8016f40 <ADS_ReadEEPROM>
 800f93a:	a90a      	add	r1, sp, #40	; 0x28
 800f93c:	4682      	mov	sl, r0
 800f93e:	4630      	mov	r0, r6
 800f940:	f007 fafe 	bl	8016f40 <ADS_ReadEEPROM>
 800f944:	2203      	movs	r2, #3
 800f946:	f105 0159 	add.w	r1, r5, #89	; 0x59
 800f94a:	4683      	mov	fp, r0
 800f94c:	a80e      	add	r0, sp, #56	; 0x38
 800f94e:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
 800f952:	f88d 403a 	strb.w	r4, [sp, #58]	; 0x3a
 800f956:	f007 fed8 	bl	801770a <memcpy>
 800f95a:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800f95e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800f962:	9401      	str	r4, [sp, #4]
 800f964:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800f968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f96c:	9400      	str	r4, [sp, #0]
 800f96e:	4622      	mov	r2, r4
 800f970:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
 800f974:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800f978:	a90e      	add	r1, sp, #56	; 0x38
 800f97a:	4630      	mov	r0, r6
 800f97c:	2412      	movs	r4, #18
 800f97e:	2303      	movs	r3, #3
 800f980:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
 800f984:	f007 f994 	bl	8016cb0 <ADS_Transfer>
 800f988:	1e07      	subs	r7, r0, #0
 800f98a:	db36      	blt.n	800f9fa <Argus_Dev_ReadEEPROM+0x10e>
 800f98c:	4630      	mov	r0, r6
 800f98e:	2164      	movs	r1, #100	; 0x64
 800f990:	f007 f8d4 	bl	8016b3c <ADS_AwaitIdle>
 800f994:	1e07      	subs	r7, r0, #0
 800f996:	db43      	blt.n	800fa20 <Argus_Dev_ReadEEPROM+0x134>
 800f998:	a906      	add	r1, sp, #24
 800f99a:	2210      	movs	r2, #16
 800f99c:	a802      	add	r0, sp, #8
 800f99e:	f007 fea5 	bl	80176ec <memcmp>
 800f9a2:	2800      	cmp	r0, #0
 800f9a4:	d15a      	bne.n	800fa5c <Argus_Dev_ReadEEPROM+0x170>
 800f9a6:	a90a      	add	r1, sp, #40	; 0x28
 800f9a8:	2210      	movs	r2, #16
 800f9aa:	a802      	add	r0, sp, #8
 800f9ac:	f007 fe9e 	bl	80176ec <memcmp>
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	d153      	bne.n	800fa5c <Argus_Dev_ReadEEPROM+0x170>
 800f9b4:	f1b9 0f6d 	cmp.w	r9, #109	; 0x6d
 800f9b8:	d02a      	beq.n	800fa10 <Argus_Dev_ReadEEPROM+0x124>
 800f9ba:	f1ba 0f6d 	cmp.w	sl, #109	; 0x6d
 800f9be:	d027      	beq.n	800fa10 <Argus_Dev_ReadEEPROM+0x124>
 800f9c0:	f1bb 0f6d 	cmp.w	fp, #109	; 0x6d
 800f9c4:	d024      	beq.n	800fa10 <Argus_Dev_ReadEEPROM+0x124>
 800f9c6:	a902      	add	r1, sp, #8
 800f9c8:	2210      	movs	r2, #16
 800f9ca:	4640      	mov	r0, r8
 800f9cc:	f007 fe9d 	bl	801770a <memcpy>
 800f9d0:	4640      	mov	r0, r8
 800f9d2:	f005 febd 	bl	8015750 <EEPROM_ReadChipId>
 800f9d6:	6068      	str	r0, [r5, #4]
 800f9d8:	4640      	mov	r0, r8
 800f9da:	f005 fec7 	bl	801576c <EEPROM_ReadModule>
 800f9de:	2807      	cmp	r0, #7
 800f9e0:	72a8      	strb	r0, [r5, #10]
 800f9e2:	d807      	bhi.n	800f9f4 <Argus_Dev_ReadEEPROM+0x108>
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	fa03 f000 	lsl.w	r0, r3, r0
 800f9ea:	f010 0fec 	tst.w	r0, #236	; 0xec
 800f9ee:	d11f      	bne.n	800fa30 <Argus_Dev_ReadEEPROM+0x144>
 800f9f0:	06c3      	lsls	r3, r0, #27
 800f9f2:	d41a      	bmi.n	800fa2a <Argus_Dev_ReadEEPROM+0x13e>
 800f9f4:	7a2b      	ldrb	r3, [r5, #8]
 800f9f6:	2b02      	cmp	r3, #2
 800f9f8:	d003      	beq.n	800fa02 <Argus_Dev_ReadEEPROM+0x116>
 800f9fa:	4638      	mov	r0, r7
 800f9fc:	b015      	add	sp, #84	; 0x54
 800f9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa02:	7aab      	ldrb	r3, [r5, #10]
 800fa04:	3b02      	subs	r3, #2
 800fa06:	2b05      	cmp	r3, #5
 800fa08:	d8f7      	bhi.n	800f9fa <Argus_Dev_ReadEEPROM+0x10e>
 800fa0a:	2303      	movs	r3, #3
 800fa0c:	722b      	strb	r3, [r5, #8]
 800fa0e:	e7f4      	b.n	800f9fa <Argus_Dev_ReadEEPROM+0x10e>
 800fa10:	4815      	ldr	r0, [pc, #84]	; (800fa68 <Argus_Dev_ReadEEPROM+0x17c>)
 800fa12:	f7f1 fa1d 	bl	8000e50 <print>
 800fa16:	276d      	movs	r7, #109	; 0x6d
 800fa18:	4638      	mov	r0, r7
 800fa1a:	b015      	add	sp, #84	; 0x54
 800fa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa20:	4639      	mov	r1, r7
 800fa22:	4812      	ldr	r0, [pc, #72]	; (800fa6c <Argus_Dev_ReadEEPROM+0x180>)
 800fa24:	f7f1 fa14 	bl	8000e50 <print>
 800fa28:	e7e7      	b.n	800f9fa <Argus_Dev_ReadEEPROM+0x10e>
 800fa2a:	2303      	movs	r3, #3
 800fa2c:	726b      	strb	r3, [r5, #9]
 800fa2e:	e7e1      	b.n	800f9f4 <Argus_Dev_ReadEEPROM+0x108>
 800fa30:	2300      	movs	r3, #0
 800fa32:	4641      	mov	r1, r8
 800fa34:	a80e      	add	r0, sp, #56	; 0x38
 800fa36:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 800fa3a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800fa3e:	9312      	str	r3, [sp, #72]	; 0x48
 800fa40:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800fa44:	f005 feb2 	bl	80157ac <EEPROM_Decode>
 800fa48:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800fa4c:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800fa50:	4313      	orrs	r3, r2
 800fa52:	bf14      	ite	ne
 800fa54:	2302      	movne	r3, #2
 800fa56:	2301      	moveq	r3, #1
 800fa58:	726b      	strb	r3, [r5, #9]
 800fa5a:	e7cb      	b.n	800f9f4 <Argus_Dev_ReadEEPROM+0x108>
 800fa5c:	4804      	ldr	r0, [pc, #16]	; (800fa70 <Argus_Dev_ReadEEPROM+0x184>)
 800fa5e:	f7f1 f9f7 	bl	8000e50 <print>
 800fa62:	f06f 076c 	mvn.w	r7, #108	; 0x6c
 800fa66:	e7c8      	b.n	800f9fa <Argus_Dev_ReadEEPROM+0x10e>
 800fa68:	0801a908 	.word	0x0801a908
 800fa6c:	0801a7f0 	.word	0x0801a7f0
 800fa70:	0801a82c 	.word	0x0801a82c

0800fa74 <AuxMeasurementFinish>:
 800fa74:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 800fa78:	b113      	cbz	r3, 800fa80 <AuxMeasurementFinish+0xc>
 800fa7a:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
 800fa7e:	4718      	bx	r3
 800fa80:	4770      	bx	lr
 800fa82:	bf00      	nop

0800fa84 <BglMeasurementFinish>:
 800fa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa88:	1e04      	subs	r4, r0, #0
 800fa8a:	460d      	mov	r5, r1
 800fa8c:	db3e      	blt.n	800fb0c <BglMeasurementFinish+0x88>
 800fa8e:	f8d1 0120 	ldr.w	r0, [r1, #288]	; 0x120
 800fa92:	460a      	mov	r2, r1
 800fa94:	f101 0763 	add.w	r7, r1, #99	; 0x63
 800fa98:	f892 3099 	ldrb.w	r3, [r2, #153]	; 0x99
 800fa9c:	f892 6098 	ldrb.w	r6, [r2, #152]	; 0x98
 800faa0:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
 800faa4:	021b      	lsls	r3, r3, #8
 800faa6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800faaa:	430b      	orrs	r3, r1
 800faac:	3203      	adds	r2, #3
 800faae:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fab2:	4297      	cmp	r7, r2
 800fab4:	4418      	add	r0, r3
 800fab6:	d1ef      	bne.n	800fa98 <BglMeasurementFinish+0x14>
 800fab8:	2800      	cmp	r0, #0
 800faba:	f8c5 0120 	str.w	r0, [r5, #288]	; 0x120
 800fabe:	db1e      	blt.n	800fafe <BglMeasurementFinish+0x7a>
 800fac0:	4a16      	ldr	r2, [pc, #88]	; (800fb1c <BglMeasurementFinish+0x98>)
 800fac2:	0103      	lsls	r3, r0, #4
 800fac4:	fba2 2303 	umull	r2, r3, r2, r3
 800fac8:	09db      	lsrs	r3, r3, #7
 800faca:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800face:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
 800fad2:	f895 212c 	ldrb.w	r2, [r5, #300]	; 0x12c
 800fad6:	f8d5 610c 	ldr.w	r6, [r5, #268]	; 0x10c
 800fada:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800fade:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800fae2:	4313      	orrs	r3, r2
 800fae4:	2200      	movs	r2, #0
 800fae6:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 800faea:	f885 212c 	strb.w	r2, [r5, #300]	; 0x12c
 800faee:	b156      	cbz	r6, 800fb06 <BglMeasurementFinish+0x82>
 800faf0:	f8d5 111c 	ldr.w	r1, [r5, #284]	; 0x11c
 800faf4:	4620      	mov	r0, r4
 800faf6:	4633      	mov	r3, r6
 800faf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fafc:	4718      	bx	r3
 800fafe:	2300      	movs	r3, #0
 800fb00:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800fb04:	e7e3      	b.n	800face <BglMeasurementFinish+0x4a>
 800fb06:	4620      	mov	r0, r4
 800fb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb0c:	4804      	ldr	r0, [pc, #16]	; (800fb20 <BglMeasurementFinish+0x9c>)
 800fb0e:	f7f1 f99f 	bl	8000e50 <print>
 800fb12:	4628      	mov	r0, r5
 800fb14:	f7ff fb5e 	bl	800f1d4 <Argus_Dev_InvalidateAllRegisters>
 800fb18:	e7d9      	b.n	800face <BglMeasurementFinish+0x4a>
 800fb1a:	bf00      	nop
 800fb1c:	3e0f83e1 	.word	0x3e0f83e1
 800fb20:	0801ab68 	.word	0x0801ab68

0800fb24 <BglMeasurementChargePumpRamp>:
 800fb24:	2800      	cmp	r0, #0
 800fb26:	db0b      	blt.n	800fb40 <BglMeasurementChargePumpRamp+0x1c>
 800fb28:	b510      	push	{r4, lr}
 800fb2a:	460c      	mov	r4, r1
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	4905      	ldr	r1, [pc, #20]	; (800fb44 <BglMeasurementChargePumpRamp+0x20>)
 800fb30:	f7ff fd90 	bl	800f654 <Argus_Dev_ChargePumpRamp>
 800fb34:	2800      	cmp	r0, #0
 800fb36:	db00      	blt.n	800fb3a <BglMeasurementChargePumpRamp+0x16>
 800fb38:	bd10      	pop	{r4, pc}
 800fb3a:	4621      	mov	r1, r4
 800fb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb40:	f7ff bfa0 	b.w	800fa84 <BglMeasurementFinish>
 800fb44:	0800fb49 	.word	0x0800fb49

0800fb48 <BglMeasurementIntegrate0>:
 800fb48:	2800      	cmp	r0, #0
 800fb4a:	db0d      	blt.n	800fb68 <BglMeasurementIntegrate0+0x20>
 800fb4c:	b510      	push	{r4, lr}
 800fb4e:	460c      	mov	r4, r1
 800fb50:	460a      	mov	r2, r1
 800fb52:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800fb56:	4905      	ldr	r1, [pc, #20]	; (800fb6c <BglMeasurementIntegrate0+0x24>)
 800fb58:	f007 f914 	bl	8016d84 <ADS_Start>
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	db00      	blt.n	800fb62 <BglMeasurementIntegrate0+0x1a>
 800fb60:	bd10      	pop	{r4, pc}
 800fb62:	4621      	mov	r1, r4
 800fb64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb68:	f7ff bf8c 	b.w	800fa84 <BglMeasurementFinish>
 800fb6c:	0800fb71 	.word	0x0800fb71

0800fb70 <BglMeasurementRead0>:
 800fb70:	2800      	cmp	r0, #0
 800fb72:	db12      	blt.n	800fb9a <BglMeasurementRead0+0x2a>
 800fb74:	b510      	push	{r4, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	460c      	mov	r4, r1
 800fb7a:	9100      	str	r1, [sp, #0]
 800fb7c:	4b08      	ldr	r3, [pc, #32]	; (800fba0 <BglMeasurementRead0+0x30>)
 800fb7e:	2221      	movs	r2, #33	; 0x21
 800fb80:	3197      	adds	r1, #151	; 0x97
 800fb82:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800fb86:	f007 f965 	bl	8016e54 <ADS_ReadData>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	db01      	blt.n	800fb92 <BglMeasurementRead0+0x22>
 800fb8e:	b002      	add	sp, #8
 800fb90:	bd10      	pop	{r4, pc}
 800fb92:	4621      	mov	r1, r4
 800fb94:	b002      	add	sp, #8
 800fb96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb9a:	f7ff bf73 	b.w	800fa84 <BglMeasurementFinish>
 800fb9e:	bf00      	nop
 800fba0:	0800fd49 	.word	0x0800fd49

0800fba4 <BglMeasurementIntegrate1>:
 800fba4:	2800      	cmp	r0, #0
 800fba6:	db0d      	blt.n	800fbc4 <BglMeasurementIntegrate1+0x20>
 800fba8:	b510      	push	{r4, lr}
 800fbaa:	460c      	mov	r4, r1
 800fbac:	460a      	mov	r2, r1
 800fbae:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800fbb2:	4905      	ldr	r1, [pc, #20]	; (800fbc8 <BglMeasurementIntegrate1+0x24>)
 800fbb4:	f007 f8e6 	bl	8016d84 <ADS_Start>
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	db00      	blt.n	800fbbe <BglMeasurementIntegrate1+0x1a>
 800fbbc:	bd10      	pop	{r4, pc}
 800fbbe:	4621      	mov	r1, r4
 800fbc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbc4:	f7ff bf5e 	b.w	800fa84 <BglMeasurementFinish>
 800fbc8:	0800fbcd 	.word	0x0800fbcd

0800fbcc <BglMeasurementRead1>:
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	db12      	blt.n	800fbf6 <BglMeasurementRead1+0x2a>
 800fbd0:	b510      	push	{r4, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	460c      	mov	r4, r1
 800fbd6:	9100      	str	r1, [sp, #0]
 800fbd8:	4b08      	ldr	r3, [pc, #32]	; (800fbfc <BglMeasurementRead1+0x30>)
 800fbda:	2221      	movs	r2, #33	; 0x21
 800fbdc:	3197      	adds	r1, #151	; 0x97
 800fbde:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800fbe2:	f007 f937 	bl	8016e54 <ADS_ReadData>
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	db01      	blt.n	800fbee <BglMeasurementRead1+0x22>
 800fbea:	b002      	add	sp, #8
 800fbec:	bd10      	pop	{r4, pc}
 800fbee:	4621      	mov	r1, r4
 800fbf0:	b002      	add	sp, #8
 800fbf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbf6:	f7ff bf45 	b.w	800fa84 <BglMeasurementFinish>
 800fbfa:	bf00      	nop
 800fbfc:	0800fa85 	.word	0x0800fa85

0800fc00 <VsubMeasurementFinish>:
 800fc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc04:	1e05      	subs	r5, r0, #0
 800fc06:	460c      	mov	r4, r1
 800fc08:	db5b      	blt.n	800fcc2 <VsubMeasurementFinish+0xc2>
 800fc0a:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 800fc0e:	f894 112c 	ldrb.w	r1, [r4, #300]	; 0x12c
 800fc12:	f8b4 6128 	ldrh.w	r6, [r4, #296]	; 0x128
 800fc16:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800fc1a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800fc1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800fc22:	430b      	orrs	r3, r1
 800fc24:	2100      	movs	r1, #0
 800fc26:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 800fc2a:	0432      	lsls	r2, r6, #16
 800fc2c:	f884 112c 	strb.w	r1, [r4, #300]	; 0x12c
 800fc30:	b1e6      	cbz	r6, 800fc6c <VsubMeasurementFinish+0x6c>
 800fc32:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 800fc36:	ea82 77e2 	eor.w	r7, r2, r2, asr #31
 800fc3a:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800fc3e:	eba7 77e2 	sub.w	r7, r7, r2, asr #31
 800fc42:	42bb      	cmp	r3, r7
 800fc44:	ea80 0602 	eor.w	r6, r0, r2
 800fc48:	d942      	bls.n	800fcd0 <VsubMeasurementFinish+0xd0>
 800fc4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fc4e:	e001      	b.n	800fc54 <VsubMeasurementFinish+0x54>
 800fc50:	460a      	mov	r2, r1
 800fc52:	4607      	mov	r7, r0
 800fc54:	0078      	lsls	r0, r7, #1
 800fc56:	4283      	cmp	r3, r0
 800fc58:	ea4f 0142 	mov.w	r1, r2, lsl #1
 800fc5c:	d8f8      	bhi.n	800fc50 <VsubMeasurementFinish+0x50>
 800fc5e:	b981      	cbnz	r1, 800fc82 <VsubMeasurementFinish+0x82>
 800fc60:	2e00      	cmp	r6, #0
 800fc62:	bfb4      	ite	lt
 800fc64:	f04f 4200 	movlt.w	r2, #2147483648	; 0x80000000
 800fc68:	f06f 4200 	mvnge.w	r2, #2147483648	; 0x80000000
 800fc6c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800fc70:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800fc74:	b313      	cbz	r3, 800fcbc <VsubMeasurementFinish+0xbc>
 800fc76:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc80:	4718      	bx	r3
 800fc82:	2800      	cmp	r0, #0
 800fc84:	da03      	bge.n	800fc8e <VsubMeasurementFinish+0x8e>
 800fc86:	f032 4100 	bics.w	r1, r2, #2147483648	; 0x80000000
 800fc8a:	4638      	mov	r0, r7
 800fc8c:	d025      	beq.n	800fcda <VsubMeasurementFinish+0xda>
 800fc8e:	2200      	movs	r2, #0
 800fc90:	e000      	b.n	800fc94 <VsubMeasurementFinish+0x94>
 800fc92:	b153      	cbz	r3, 800fcaa <VsubMeasurementFinish+0xaa>
 800fc94:	4283      	cmp	r3, r0
 800fc96:	bf24      	itt	cs
 800fc98:	1a1b      	subcs	r3, r3, r0
 800fc9a:	430a      	orrcs	r2, r1
 800fc9c:	0849      	lsrs	r1, r1, #1
 800fc9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fca2:	d1f6      	bne.n	800fc92 <VsubMeasurementFinish+0x92>
 800fca4:	4298      	cmp	r0, r3
 800fca6:	bf98      	it	ls
 800fca8:	3201      	addls	r2, #1
 800fcaa:	2e00      	cmp	r6, #0
 800fcac:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800fcb0:	bfb8      	it	lt
 800fcb2:	4252      	neglt	r2, r2
 800fcb4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d1dc      	bne.n	800fc76 <VsubMeasurementFinish+0x76>
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcc2:	4808      	ldr	r0, [pc, #32]	; (800fce4 <VsubMeasurementFinish+0xe4>)
 800fcc4:	f7f1 f8c4 	bl	8000e50 <print>
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f7ff fa83 	bl	800f1d4 <Argus_Dev_InvalidateAllRegisters>
 800fcce:	e79c      	b.n	800fc0a <VsubMeasurementFinish+0xa>
 800fcd0:	b12b      	cbz	r3, 800fcde <VsubMeasurementFinish+0xde>
 800fcd2:	4638      	mov	r0, r7
 800fcd4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800fcd8:	e7d9      	b.n	800fc8e <VsubMeasurementFinish+0x8e>
 800fcda:	460a      	mov	r2, r1
 800fcdc:	e7e2      	b.n	800fca4 <VsubMeasurementFinish+0xa4>
 800fcde:	461a      	mov	r2, r3
 800fce0:	e7e3      	b.n	800fcaa <VsubMeasurementFinish+0xaa>
 800fce2:	bf00      	nop
 800fce4:	0801abe8 	.word	0x0801abe8

0800fce8 <VsubMeasurementRead>:
 800fce8:	2800      	cmp	r0, #0
 800fcea:	db12      	blt.n	800fd12 <VsubMeasurementRead+0x2a>
 800fcec:	b510      	push	{r4, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	460c      	mov	r4, r1
 800fcf2:	9100      	str	r1, [sp, #0]
 800fcf4:	4b08      	ldr	r3, [pc, #32]	; (800fd18 <VsubMeasurementRead+0x30>)
 800fcf6:	2205      	movs	r2, #5
 800fcf8:	3197      	adds	r1, #151	; 0x97
 800fcfa:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800fcfe:	f007 f8a9 	bl	8016e54 <ADS_ReadData>
 800fd02:	2800      	cmp	r0, #0
 800fd04:	db01      	blt.n	800fd0a <VsubMeasurementRead+0x22>
 800fd06:	b002      	add	sp, #8
 800fd08:	bd10      	pop	{r4, pc}
 800fd0a:	4621      	mov	r1, r4
 800fd0c:	b002      	add	sp, #8
 800fd0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd12:	f7ff bf75 	b.w	800fc00 <VsubMeasurementFinish>
 800fd16:	bf00      	nop
 800fd18:	0800fff9 	.word	0x0800fff9

0800fd1c <AuxMeasurementStarted>:
 800fd1c:	2800      	cmp	r0, #0
 800fd1e:	b510      	push	{r4, lr}
 800fd20:	460c      	mov	r4, r1
 800fd22:	db0c      	blt.n	800fd3e <AuxMeasurementStarted+0x22>
 800fd24:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800fd28:	059b      	lsls	r3, r3, #22
 800fd2a:	d401      	bmi.n	800fd30 <AuxMeasurementStarted+0x14>
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	bd10      	pop	{r4, pc}
 800fd30:	f104 0197 	add.w	r1, r4, #151	; 0x97
 800fd34:	4620      	mov	r0, r4
 800fd36:	f7ff fd51 	bl	800f7dc <Argus_Dev_CheckDeviceConfigRegister>
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	bd10      	pop	{r4, pc}
 800fd3e:	4608      	mov	r0, r1
 800fd40:	f7ff fa48 	bl	800f1d4 <Argus_Dev_InvalidateAllRegisters>
 800fd44:	e7ee      	b.n	800fd24 <AuxMeasurementStarted+0x8>
 800fd46:	bf00      	nop

0800fd48 <BglMeasurementPrepare1>:
 800fd48:	2800      	cmp	r0, #0
 800fd4a:	db42      	blt.n	800fdd2 <BglMeasurementPrepare1+0x8a>
 800fd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd4e:	f8d1 4120 	ldr.w	r4, [r1, #288]	; 0x120
 800fd52:	b083      	sub	sp, #12
 800fd54:	460f      	mov	r7, r1
 800fd56:	460a      	mov	r2, r1
 800fd58:	f101 0663 	add.w	r6, r1, #99	; 0x63
 800fd5c:	f892 3099 	ldrb.w	r3, [r2, #153]	; 0x99
 800fd60:	f892 5098 	ldrb.w	r5, [r2, #152]	; 0x98
 800fd64:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
 800fd68:	021b      	lsls	r3, r3, #8
 800fd6a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800fd6e:	430b      	orrs	r3, r1
 800fd70:	3203      	adds	r2, #3
 800fd72:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fd76:	4296      	cmp	r6, r2
 800fd78:	eba4 0403 	sub.w	r4, r4, r3
 800fd7c:	d1ee      	bne.n	800fd5c <BglMeasurementPrepare1+0x14>
 800fd7e:	2106      	movs	r1, #6
 800fd80:	4638      	mov	r0, r7
 800fd82:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800fd86:	f7ff fa31 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800fd8a:	2306      	movs	r3, #6
 800fd8c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fd90:	2210      	movs	r2, #16
 800fd92:	21ff      	movs	r1, #255	; 0xff
 800fd94:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800fd98:	f007 fcc2 	bl	8017720 <memset>
 800fd9c:	2210      	movs	r2, #16
 800fd9e:	2100      	movs	r1, #0
 800fda0:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 800fda4:	f007 fcbc 	bl	8017720 <memset>
 800fda8:	f107 0197 	add.w	r1, r7, #151	; 0x97
 800fdac:	4a0a      	ldr	r2, [pc, #40]	; (800fdd8 <BglMeasurementPrepare1+0x90>)
 800fdae:	9200      	str	r2, [sp, #0]
 800fdb0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800fdb4:	9701      	str	r7, [sp, #4]
 800fdb6:	1a5b      	subs	r3, r3, r1
 800fdb8:	2200      	movs	r2, #0
 800fdba:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800fdbe:	f006 ff77 	bl	8016cb0 <ADS_Transfer>
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	db01      	blt.n	800fdca <BglMeasurementPrepare1+0x82>
 800fdc6:	b003      	add	sp, #12
 800fdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdca:	4639      	mov	r1, r7
 800fdcc:	b003      	add	sp, #12
 800fdce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fdd2:	f7ff be57 	b.w	800fa84 <BglMeasurementFinish>
 800fdd6:	bf00      	nop
 800fdd8:	0800fba5 	.word	0x0800fba5

0800fddc <VsubMeasurementIntegrate>:
 800fddc:	2800      	cmp	r0, #0
 800fdde:	f2c0 80fb 	blt.w	800ffd8 <VsubMeasurementIntegrate+0x1fc>
 800fde2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fde4:	460c      	mov	r4, r1
 800fde6:	f101 0697 	add.w	r6, r1, #151	; 0x97
 800fdea:	b085      	sub	sp, #20
 800fdec:	2203      	movs	r2, #3
 800fdee:	3159      	adds	r1, #89	; 0x59
 800fdf0:	4630      	mov	r0, r6
 800fdf2:	f007 fc8a 	bl	801770a <memcpy>
 800fdf6:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 800fdfa:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800fdfe:	2112      	movs	r1, #18
 800fe00:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 800fe04:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 800fe08:	f023 0307 	bic.w	r3, r3, #7
 800fe0c:	f002 0207 	and.w	r2, r2, #7
 800fe10:	4313      	orrs	r3, r2
 800fe12:	b25b      	sxtb	r3, r3
 800fe14:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 800fe18:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 800fe1c:	00d2      	lsls	r2, r2, #3
 800fe1e:	f002 0218 	and.w	r2, r2, #24
 800fe22:	f023 0318 	bic.w	r3, r3, #24
 800fe26:	4313      	orrs	r3, r2
 800fe28:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	f7ff f9dd 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800fe32:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800fe36:	0698      	lsls	r0, r3, #26
 800fe38:	f104 059a 	add.w	r5, r4, #154	; 0x9a
 800fe3c:	d404      	bmi.n	800fe48 <VsubMeasurementIntegrate+0x6c>
 800fe3e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800fe42:	09da      	lsrs	r2, r3, #7
 800fe44:	f040 80ca 	bne.w	800ffdc <VsubMeasurementIntegrate+0x200>
 800fe48:	4628      	mov	r0, r5
 800fe4a:	2205      	movs	r2, #5
 800fe4c:	f104 014b 	add.w	r1, r4, #75	; 0x4b
 800fe50:	f007 fc5b 	bl	801770a <memcpy>
 800fe54:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 800fe58:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800fe5c:	210a      	movs	r1, #10
 800fe5e:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
 800fe62:	f892 009d 	ldrb.w	r0, [r2, #157]	; 0x9d
 800fe66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe6a:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 800fe6e:	b25b      	sxtb	r3, r3
 800fe70:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 800fe74:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800fe78:	0112      	lsls	r2, r2, #4
 800fe7a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800fe7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe82:	4313      	orrs	r3, r2
 800fe84:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f7ff f9af 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800fe8e:	f104 059f 	add.w	r5, r4, #159	; 0x9f
 800fe92:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800fe96:	0419      	lsls	r1, r3, #16
 800fe98:	d40a      	bmi.n	800feb0 <VsubMeasurementIntegrate+0xd4>
 800fe9a:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
 800fe9e:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
 800fea2:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800fea6:	021b      	lsls	r3, r3, #8
 800fea8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800feac:	4313      	orrs	r3, r2
 800feae:	d00b      	beq.n	800fec8 <VsubMeasurementIntegrate+0xec>
 800feb0:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 800feb4:	4628      	mov	r0, r5
 800feb6:	2204      	movs	r2, #4
 800feb8:	f007 fc27 	bl	801770a <memcpy>
 800febc:	211e      	movs	r1, #30
 800febe:	f845 1b04 	str.w	r1, [r5], #4
 800fec2:	4620      	mov	r0, r4
 800fec4:	f7ff f992 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800fec8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800fecc:	03da      	lsls	r2, r3, #15
 800fece:	d40c      	bmi.n	800feea <VsubMeasurementIntegrate+0x10e>
 800fed0:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 800fed4:	f894 1071 	ldrb.w	r1, [r4, #113]	; 0x71
 800fed8:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
 800fedc:	021b      	lsls	r3, r3, #8
 800fede:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800fee2:	4313      	orrs	r3, r2
 800fee4:	f5b3 0f66 	cmp.w	r3, #15073280	; 0xe60000
 800fee8:	d00d      	beq.n	800ff06 <VsubMeasurementIntegrate+0x12a>
 800feea:	f104 0170 	add.w	r1, r4, #112	; 0x70
 800feee:	4628      	mov	r0, r5
 800fef0:	2204      	movs	r2, #4
 800fef2:	f007 fc0a 	bl	801770a <memcpy>
 800fef6:	f24e 6320 	movw	r3, #58912	; 0xe620
 800fefa:	f845 3b04 	str.w	r3, [r5], #4
 800fefe:	2120      	movs	r1, #32
 800ff00:	4620      	mov	r0, r4
 800ff02:	f7ff f973 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800ff06:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ff0a:	039b      	lsls	r3, r3, #14
 800ff0c:	d406      	bmi.n	800ff1c <VsubMeasurementIntegrate+0x140>
 800ff0e:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 800ff12:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800ff16:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800ff1a:	d00e      	beq.n	800ff3a <VsubMeasurementIntegrate+0x15e>
 800ff1c:	2204      	movs	r2, #4
 800ff1e:	f104 0174 	add.w	r1, r4, #116	; 0x74
 800ff22:	4628      	mov	r0, r5
 800ff24:	f007 fbf1 	bl	801770a <memcpy>
 800ff28:	2300      	movs	r3, #0
 800ff2a:	2122      	movs	r1, #34	; 0x22
 800ff2c:	7029      	strb	r1, [r5, #0]
 800ff2e:	706b      	strb	r3, [r5, #1]
 800ff30:	70ab      	strb	r3, [r5, #2]
 800ff32:	4620      	mov	r0, r4
 800ff34:	f7ff f95a 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800ff38:	3504      	adds	r5, #4
 800ff3a:	2204      	movs	r2, #4
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	462f      	mov	r7, r5
 800ff40:	4628      	mov	r0, r5
 800ff42:	f007 fbed 	bl	8017720 <memset>
 800ff46:	2108      	movs	r1, #8
 800ff48:	f807 1b04 	strb.w	r1, [r7], #4
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	f7ff f94d 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800ff52:	2203      	movs	r2, #3
 800ff54:	f104 0169 	add.w	r1, r4, #105	; 0x69
 800ff58:	4638      	mov	r0, r7
 800ff5a:	f007 fbd6 	bl	801770a <memcpy>
 800ff5e:	79aa      	ldrb	r2, [r5, #6]
 800ff60:	7968      	ldrb	r0, [r5, #5]
 800ff62:	211c      	movs	r1, #28
 800ff64:	f002 02e1 	and.w	r2, r2, #225	; 0xe1
 800ff68:	71aa      	strb	r2, [r5, #6]
 800ff6a:	7129      	strb	r1, [r5, #4]
 800ff6c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800ff70:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 800ff74:	3b01      	subs	r3, #1
 800ff76:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 800ff7a:	f3c3 03c6 	ubfx	r3, r3, #3, #7
 800ff7e:	4303      	orrs	r3, r0
 800ff80:	b25b      	sxtb	r3, r3
 800ff82:	716b      	strb	r3, [r5, #5]
 800ff84:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 800ff88:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
 800ff8c:	f002 021f 	and.w	r2, r2, #31
 800ff90:	3801      	subs	r0, #1
 800ff92:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
 800ff96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ff9a:	71aa      	strb	r2, [r5, #6]
 800ff9c:	716b      	strb	r3, [r5, #5]
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f7ff f924 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 800ffa4:	4912      	ldr	r1, [pc, #72]	; (800fff0 <VsubMeasurementIntegrate+0x214>)
 800ffa6:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 800ffaa:	4b12      	ldr	r3, [pc, #72]	; (800fff4 <VsubMeasurementIntegrate+0x218>)
 800ffac:	9301      	str	r3, [sp, #4]
 800ffae:	e9cd 1402 	strd	r1, r4, [sp, #8]
 800ffb2:	1deb      	adds	r3, r5, #7
 800ffb4:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 800ffb8:	9200      	str	r2, [sp, #0]
 800ffba:	1b9b      	subs	r3, r3, r6
 800ffbc:	4632      	mov	r2, r6
 800ffbe:	4631      	mov	r1, r6
 800ffc0:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800ffc4:	f006 fdfa 	bl	8016bbc <ADS_TransferWithStart>
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	db01      	blt.n	800ffd0 <VsubMeasurementIntegrate+0x1f4>
 800ffcc:	b005      	add	sp, #20
 800ffce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffd0:	4621      	mov	r1, r4
 800ffd2:	b005      	add	sp, #20
 800ffd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ffd8:	f7ff be12 	b.w	800fc00 <VsubMeasurementFinish>
 800ffdc:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 800ffe0:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800ffe4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	f47f af2d 	bne.w	800fe48 <VsubMeasurementIntegrate+0x6c>
 800ffee:	e750      	b.n	800fe92 <VsubMeasurementIntegrate+0xb6>
 800fff0:	0800fce9 	.word	0x0800fce9
 800fff4:	0800fd1d 	.word	0x0800fd1d

0800fff8 <VsubMeasurementEvaluate>:
 800fff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fffa:	1e07      	subs	r7, r0, #0
 800fffc:	b08b      	sub	sp, #44	; 0x2c
 800fffe:	f2c0 814b 	blt.w	8010298 <VsubMeasurementEvaluate+0x2a0>
 8010002:	460c      	mov	r4, r1
 8010004:	f101 0697 	add.w	r6, r1, #151	; 0x97
 8010008:	2500      	movs	r5, #0
 801000a:	4632      	mov	r2, r6
 801000c:	a906      	add	r1, sp, #24
 801000e:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
 8010012:	9508      	str	r5, [sp, #32]
 8010014:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8010018:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 801001c:	f7f6 ff1a 	bl	8006e54 <Argus_Eval_ApplyAuxEvaluation>
 8010020:	f10d 0116 	add.w	r1, sp, #22
 8010024:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 8010028:	f8ad 5016 	strh.w	r5, [sp, #22]
 801002c:	f7f9 fa18 	bl	8009460 <Argus_Dca_GetState>
 8010030:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8010034:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
 8010038:	a906      	add	r1, sp, #24
 801003a:	f004 f919 	bl	8014270 <Argus_Cal_ApplyAuxCalibration>
 801003e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8010042:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8010046:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 801004a:	429a      	cmp	r2, r3
 801004c:	f200 8116 	bhi.w	801027c <VsubMeasurementEvaluate+0x284>
 8010050:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8010054:	b96b      	cbnz	r3, 8010072 <VsubMeasurementEvaluate+0x7a>
 8010056:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801005a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 801005e:	1a88      	subs	r0, r1, r2
 8010060:	2820      	cmp	r0, #32
 8010062:	f200 811f 	bhi.w	80102a4 <VsubMeasurementEvaluate+0x2ac>
 8010066:	1a52      	subs	r2, r2, r1
 8010068:	2a20      	cmp	r2, #32
 801006a:	f200 811b 	bhi.w	80102a4 <VsubMeasurementEvaluate+0x2ac>
 801006e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8010072:	f8b4 212a 	ldrh.w	r2, [r4, #298]	; 0x12a
 8010076:	429a      	cmp	r2, r3
 8010078:	f240 810c 	bls.w	8010294 <VsubMeasurementEvaluate+0x29c>
 801007c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8010080:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8010084:	3301      	adds	r3, #1
 8010086:	440a      	add	r2, r1
 8010088:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
 801008c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8010090:	2203      	movs	r2, #3
 8010092:	f104 0159 	add.w	r1, r4, #89	; 0x59
 8010096:	4630      	mov	r0, r6
 8010098:	f007 fb37 	bl	801770a <memcpy>
 801009c:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 80100a0:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 80100a4:	2112      	movs	r1, #18
 80100a6:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 80100aa:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 80100ae:	f023 0307 	bic.w	r3, r3, #7
 80100b2:	f002 0207 	and.w	r2, r2, #7
 80100b6:	4313      	orrs	r3, r2
 80100b8:	b25b      	sxtb	r3, r3
 80100ba:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 80100be:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 80100c2:	00d2      	lsls	r2, r2, #3
 80100c4:	f002 0218 	and.w	r2, r2, #24
 80100c8:	f023 0318 	bic.w	r3, r3, #24
 80100cc:	4313      	orrs	r3, r2
 80100ce:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 80100d2:	4620      	mov	r0, r4
 80100d4:	f7ff f88a 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 80100d8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80100dc:	0698      	lsls	r0, r3, #26
 80100de:	f104 059a 	add.w	r5, r4, #154	; 0x9a
 80100e2:	d404      	bmi.n	80100ee <VsubMeasurementEvaluate+0xf6>
 80100e4:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80100e8:	09da      	lsrs	r2, r3, #7
 80100ea:	f040 80de 	bne.w	80102aa <VsubMeasurementEvaluate+0x2b2>
 80100ee:	4628      	mov	r0, r5
 80100f0:	2205      	movs	r2, #5
 80100f2:	f104 014b 	add.w	r1, r4, #75	; 0x4b
 80100f6:	f007 fb08 	bl	801770a <memcpy>
 80100fa:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 80100fe:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8010102:	210a      	movs	r1, #10
 8010104:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
 8010108:	f892 009d 	ldrb.w	r0, [r2, #157]	; 0x9d
 801010c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010110:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 8010114:	b25b      	sxtb	r3, r3
 8010116:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801011a:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 801011e:	0112      	lsls	r2, r2, #4
 8010120:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8010124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010128:	4313      	orrs	r3, r2
 801012a:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801012e:	4620      	mov	r0, r4
 8010130:	f7ff f85c 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 8010134:	f104 059f 	add.w	r5, r4, #159	; 0x9f
 8010138:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801013c:	0419      	lsls	r1, r3, #16
 801013e:	d40a      	bmi.n	8010156 <VsubMeasurementEvaluate+0x15e>
 8010140:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
 8010144:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
 8010148:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 801014c:	021b      	lsls	r3, r3, #8
 801014e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010152:	4313      	orrs	r3, r2
 8010154:	d00b      	beq.n	801016e <VsubMeasurementEvaluate+0x176>
 8010156:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 801015a:	4628      	mov	r0, r5
 801015c:	2204      	movs	r2, #4
 801015e:	f007 fad4 	bl	801770a <memcpy>
 8010162:	211e      	movs	r1, #30
 8010164:	f845 1b04 	str.w	r1, [r5], #4
 8010168:	4620      	mov	r0, r4
 801016a:	f7ff f83f 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 801016e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010172:	03da      	lsls	r2, r3, #15
 8010174:	d40c      	bmi.n	8010190 <VsubMeasurementEvaluate+0x198>
 8010176:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 801017a:	f894 1071 	ldrb.w	r1, [r4, #113]	; 0x71
 801017e:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
 8010182:	021b      	lsls	r3, r3, #8
 8010184:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010188:	4313      	orrs	r3, r2
 801018a:	f5b3 0f66 	cmp.w	r3, #15073280	; 0xe60000
 801018e:	d00d      	beq.n	80101ac <VsubMeasurementEvaluate+0x1b4>
 8010190:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8010194:	4628      	mov	r0, r5
 8010196:	2204      	movs	r2, #4
 8010198:	f007 fab7 	bl	801770a <memcpy>
 801019c:	f24e 6320 	movw	r3, #58912	; 0xe620
 80101a0:	f845 3b04 	str.w	r3, [r5], #4
 80101a4:	2120      	movs	r1, #32
 80101a6:	4620      	mov	r0, r4
 80101a8:	f7ff f820 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 80101ac:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80101b0:	039b      	lsls	r3, r3, #14
 80101b2:	d406      	bmi.n	80101c2 <VsubMeasurementEvaluate+0x1ca>
 80101b4:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 80101b8:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80101bc:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80101c0:	d00e      	beq.n	80101e0 <VsubMeasurementEvaluate+0x1e8>
 80101c2:	2204      	movs	r2, #4
 80101c4:	f104 0174 	add.w	r1, r4, #116	; 0x74
 80101c8:	4628      	mov	r0, r5
 80101ca:	f007 fa9e 	bl	801770a <memcpy>
 80101ce:	2300      	movs	r3, #0
 80101d0:	2122      	movs	r1, #34	; 0x22
 80101d2:	7029      	strb	r1, [r5, #0]
 80101d4:	706b      	strb	r3, [r5, #1]
 80101d6:	70ab      	strb	r3, [r5, #2]
 80101d8:	4620      	mov	r0, r4
 80101da:	f7ff f807 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 80101de:	3504      	adds	r5, #4
 80101e0:	2204      	movs	r2, #4
 80101e2:	2100      	movs	r1, #0
 80101e4:	462f      	mov	r7, r5
 80101e6:	4628      	mov	r0, r5
 80101e8:	f007 fa9a 	bl	8017720 <memset>
 80101ec:	2108      	movs	r1, #8
 80101ee:	f807 1b04 	strb.w	r1, [r7], #4
 80101f2:	4620      	mov	r0, r4
 80101f4:	f7fe fffa 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 80101f8:	2203      	movs	r2, #3
 80101fa:	f104 0169 	add.w	r1, r4, #105	; 0x69
 80101fe:	4638      	mov	r0, r7
 8010200:	f007 fa83 	bl	801770a <memcpy>
 8010204:	79aa      	ldrb	r2, [r5, #6]
 8010206:	7968      	ldrb	r0, [r5, #5]
 8010208:	211c      	movs	r1, #28
 801020a:	f002 02e1 	and.w	r2, r2, #225	; 0xe1
 801020e:	71aa      	strb	r2, [r5, #6]
 8010210:	7129      	strb	r1, [r5, #4]
 8010212:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8010216:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 801021a:	3b01      	subs	r3, #1
 801021c:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8010220:	f3c3 03c6 	ubfx	r3, r3, #3, #7
 8010224:	4303      	orrs	r3, r0
 8010226:	b25b      	sxtb	r3, r3
 8010228:	716b      	strb	r3, [r5, #5]
 801022a:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 801022e:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
 8010232:	f002 021f 	and.w	r2, r2, #31
 8010236:	3801      	subs	r0, #1
 8010238:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
 801023c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010240:	71aa      	strb	r2, [r5, #6]
 8010242:	716b      	strb	r3, [r5, #5]
 8010244:	4620      	mov	r0, r4
 8010246:	f7fe ffd1 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 801024a:	491d      	ldr	r1, [pc, #116]	; (80102c0 <VsubMeasurementEvaluate+0x2c8>)
 801024c:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 8010250:	4b1c      	ldr	r3, [pc, #112]	; (80102c4 <VsubMeasurementEvaluate+0x2cc>)
 8010252:	9301      	str	r3, [sp, #4]
 8010254:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8010258:	1deb      	adds	r3, r5, #7
 801025a:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 801025e:	9200      	str	r2, [sp, #0]
 8010260:	1b9b      	subs	r3, r3, r6
 8010262:	4632      	mov	r2, r6
 8010264:	4631      	mov	r1, r6
 8010266:	f504 709c 	add.w	r0, r4, #312	; 0x138
 801026a:	f006 fca7 	bl	8016bbc <ADS_TransferWithStart>
 801026e:	1e03      	subs	r3, r0, #0
 8010270:	da0d      	bge.n	801028e <VsubMeasurementEvaluate+0x296>
 8010272:	4621      	mov	r1, r4
 8010274:	f7ff fcc4 	bl	800fc00 <VsubMeasurementFinish>
 8010278:	4603      	mov	r3, r0
 801027a:	e008      	b.n	801028e <VsubMeasurementEvaluate+0x296>
 801027c:	4812      	ldr	r0, [pc, #72]	; (80102c8 <VsubMeasurementEvaluate+0x2d0>)
 801027e:	f7f0 fde7 	bl	8000e50 <print>
 8010282:	4621      	mov	r1, r4
 8010284:	f06f 006e 	mvn.w	r0, #110	; 0x6e
 8010288:	f7ff fcba 	bl	800fc00 <VsubMeasurementFinish>
 801028c:	4603      	mov	r3, r0
 801028e:	4618      	mov	r0, r3
 8010290:	b00b      	add	sp, #44	; 0x2c
 8010292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010294:	4621      	mov	r1, r4
 8010296:	4638      	mov	r0, r7
 8010298:	f7ff fcb2 	bl	800fc00 <VsubMeasurementFinish>
 801029c:	4603      	mov	r3, r0
 801029e:	4618      	mov	r0, r3
 80102a0:	b00b      	add	sp, #44	; 0x2c
 80102a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102a4:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 80102a8:	e6f2      	b.n	8010090 <VsubMeasurementEvaluate+0x98>
 80102aa:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 80102ae:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 80102b2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80102b6:	429a      	cmp	r2, r3
 80102b8:	f47f af19 	bne.w	80100ee <VsubMeasurementEvaluate+0xf6>
 80102bc:	e73c      	b.n	8010138 <VsubMeasurementEvaluate+0x140>
 80102be:	bf00      	nop
 80102c0:	0800fce9 	.word	0x0800fce9
 80102c4:	0800fd1d 	.word	0x0800fd1d
 80102c8:	0801ab94 	.word	0x0801ab94

080102cc <Argus_Dev_StartBglMeasurement>:
 80102cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ce:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
 80102d2:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
 80102d6:	2600      	movs	r6, #0
 80102d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80102dc:	4604      	mov	r4, r0
 80102de:	b083      	sub	sp, #12
 80102e0:	f880 312c 	strb.w	r3, [r0, #300]	; 0x12c
 80102e4:	f100 0597 	add.w	r5, r0, #151	; 0x97
 80102e8:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 80102ec:	f8c0 6120 	str.w	r6, [r0, #288]	; 0x120
 80102f0:	2108      	movs	r1, #8
 80102f2:	f7fe ff7b 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 80102f6:	f104 0147 	add.w	r1, r4, #71	; 0x47
 80102fa:	2204      	movs	r2, #4
 80102fc:	4628      	mov	r0, r5
 80102fe:	f007 fa04 	bl	801770a <memcpy>
 8010302:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8010306:	2208      	movs	r2, #8
 8010308:	f023 0303 	bic.w	r3, r3, #3
 801030c:	2101      	movs	r1, #1
 801030e:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 8010312:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
 8010316:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
 801031a:	4620      	mov	r0, r4
 801031c:	211e      	movs	r1, #30
 801031e:	f7fe ff65 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 8010322:	2204      	movs	r2, #4
 8010324:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8010328:	f104 009b 	add.w	r0, r4, #155	; 0x9b
 801032c:	f007 f9ed 	bl	801770a <memcpy>
 8010330:	231e      	movs	r3, #30
 8010332:	f8c4 309b 	str.w	r3, [r4, #155]	; 0x9b
 8010336:	4620      	mov	r0, r4
 8010338:	2120      	movs	r1, #32
 801033a:	f7fe ff57 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 801033e:	2204      	movs	r2, #4
 8010340:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8010344:	f104 009f 	add.w	r0, r4, #159	; 0x9f
 8010348:	f007 f9df 	bl	801770a <memcpy>
 801034c:	4b47      	ldr	r3, [pc, #284]	; (801046c <Argus_Dev_StartBglMeasurement+0x1a0>)
 801034e:	f8c4 309f 	str.w	r3, [r4, #159]	; 0x9f
 8010352:	4620      	mov	r0, r4
 8010354:	2122      	movs	r1, #34	; 0x22
 8010356:	f7fe ff49 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 801035a:	2204      	movs	r2, #4
 801035c:	f104 0174 	add.w	r1, r4, #116	; 0x74
 8010360:	f104 00a3 	add.w	r0, r4, #163	; 0xa3
 8010364:	f007 f9d1 	bl	801770a <memcpy>
 8010368:	27ff      	movs	r7, #255	; 0xff
 801036a:	2322      	movs	r3, #34	; 0x22
 801036c:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8010370:	f884 70a4 	strb.w	r7, [r4, #164]	; 0xa4
 8010374:	f884 70a5 	strb.w	r7, [r4, #165]	; 0xa5
 8010378:	4620      	mov	r0, r4
 801037a:	210e      	movs	r1, #14
 801037c:	f7fe ff36 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 8010380:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8010384:	2203      	movs	r2, #3
 8010386:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
 801038a:	f007 f9be 	bl	801770a <memcpy>
 801038e:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 8010392:	220e      	movs	r2, #14
 8010394:	f023 0301 	bic.w	r3, r3, #1
 8010398:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 801039c:	f884 20a7 	strb.w	r2, [r4, #167]	; 0xa7
 80103a0:	4620      	mov	r0, r4
 80103a2:	210c      	movs	r1, #12
 80103a4:	f7fe ff22 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 80103a8:	f104 0150 	add.w	r1, r4, #80	; 0x50
 80103ac:	2204      	movs	r2, #4
 80103ae:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
 80103b2:	f007 f9aa 	bl	801770a <memcpy>
 80103b6:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
 80103ba:	f884 60ab 	strb.w	r6, [r4, #171]	; 0xab
 80103be:	f003 030f 	and.w	r3, r3, #15
 80103c2:	220c      	movs	r2, #12
 80103c4:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 80103c8:	f884 20aa 	strb.w	r2, [r4, #170]	; 0xaa
 80103cc:	4620      	mov	r0, r4
 80103ce:	211c      	movs	r1, #28
 80103d0:	f884 60ac 	strb.w	r6, [r4, #172]	; 0xac
 80103d4:	f7fe ff0a 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 80103d8:	f104 0169 	add.w	r1, r4, #105	; 0x69
 80103dc:	2203      	movs	r2, #3
 80103de:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 80103e2:	f007 f992 	bl	801770a <memcpy>
 80103e6:	f894 20af 	ldrb.w	r2, [r4, #175]	; 0xaf
 80103ea:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80103ee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80103f2:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 80103f6:	f063 031f 	orn	r3, r3, #31
 80103fa:	f042 0201 	orr.w	r2, r2, #1
 80103fe:	211c      	movs	r1, #28
 8010400:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 8010404:	f884 20af 	strb.w	r2, [r4, #175]	; 0xaf
 8010408:	f884 10ae 	strb.w	r1, [r4, #174]	; 0xae
 801040c:	4620      	mov	r0, r4
 801040e:	2106      	movs	r1, #6
 8010410:	f7fe feec 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 8010414:	4639      	mov	r1, r7
 8010416:	2221      	movs	r2, #33	; 0x21
 8010418:	f104 00b1 	add.w	r0, r4, #177	; 0xb1
 801041c:	f007 f980 	bl	8017720 <memset>
 8010420:	2306      	movs	r3, #6
 8010422:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 8010426:	4620      	mov	r0, r4
 8010428:	210a      	movs	r1, #10
 801042a:	f7fe fedf 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 801042e:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8010432:	4f0f      	ldr	r7, [pc, #60]	; (8010470 <Argus_Dev_StartBglMeasurement+0x1a4>)
 8010434:	9401      	str	r4, [sp, #4]
 8010436:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 801043a:	f041 010f 	orr.w	r1, r1, #15
 801043e:	f104 03d2 	add.w	r3, r4, #210	; 0xd2
 8010442:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
 8010446:	4632      	mov	r2, r6
 8010448:	1b5b      	subs	r3, r3, r5
 801044a:	4629      	mov	r1, r5
 801044c:	f504 709c 	add.w	r0, r4, #312	; 0x138
 8010450:	9700      	str	r7, [sp, #0]
 8010452:	f006 fc2d 	bl	8016cb0 <ADS_Transfer>
 8010456:	42b0      	cmp	r0, r6
 8010458:	db01      	blt.n	801045e <Argus_Dev_StartBglMeasurement+0x192>
 801045a:	b003      	add	sp, #12
 801045c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801045e:	4621      	mov	r1, r4
 8010460:	b003      	add	sp, #12
 8010462:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010466:	f7ff bb0d 	b.w	800fa84 <BglMeasurementFinish>
 801046a:	bf00      	nop
 801046c:	ffff0120 	.word	0xffff0120
 8010470:	0800fb25 	.word	0x0800fb25

08010474 <Argus_Dev_StartVsubMeasurement>:
 8010474:	b570      	push	{r4, r5, r6, lr}
 8010476:	f890 504e 	ldrb.w	r5, [r0, #78]	; 0x4e
 801047a:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
 801047e:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 8010482:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8010486:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 801048a:	4299      	cmp	r1, r3
 801048c:	f04f 0200 	mov.w	r2, #0
 8010490:	4604      	mov	r4, r0
 8010492:	f8a0 612a 	strh.w	r6, [r0, #298]	; 0x12a
 8010496:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801049a:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 801049e:	f8a0 2128 	strh.w	r2, [r0, #296]	; 0x128
 80104a2:	d009      	beq.n	80104b8 <Argus_Dev_StartVsubMeasurement+0x44>
 80104a4:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80104a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80104ac:	431d      	orrs	r5, r3
 80104ae:	f880 504e 	strb.w	r5, [r0, #78]	; 0x4e
 80104b2:	210a      	movs	r1, #10
 80104b4:	f7fe fe9a 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 80104b8:	4620      	mov	r0, r4
 80104ba:	4902      	ldr	r1, [pc, #8]	; (80104c4 <Argus_Dev_StartVsubMeasurement+0x50>)
 80104bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104c0:	f7ff b8c8 	b.w	800f654 <Argus_Dev_ChargePumpRamp>
 80104c4:	0800fddd 	.word	0x0800fddd

080104c8 <Argus_Dev_StartAuxMeasurement>:
 80104c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104ca:	460b      	mov	r3, r1
 80104cc:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
 80104d0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 80104d4:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 80104d8:	f891 409c 	ldrb.w	r4, [r1, #156]	; 0x9c
 80104dc:	b085      	sub	sp, #20
 80104de:	b944      	cbnz	r4, 80104f2 <Argus_Dev_StartAuxMeasurement+0x2a>
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	f000 80fa 	beq.w	80106da <Argus_Dev_StartAuxMeasurement+0x212>
 80104e6:	4611      	mov	r1, r2
 80104e8:	4620      	mov	r0, r4
 80104ea:	b005      	add	sp, #20
 80104ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80104f0:	4718      	bx	r3
 80104f2:	4604      	mov	r4, r0
 80104f4:	f100 0697 	add.w	r6, r0, #151	; 0x97
 80104f8:	2203      	movs	r2, #3
 80104fa:	f104 0159 	add.w	r1, r4, #89	; 0x59
 80104fe:	4630      	mov	r0, r6
 8010500:	f007 f903 	bl	801770a <memcpy>
 8010504:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8010508:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801050c:	2112      	movs	r1, #18
 801050e:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 8010512:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 8010516:	f023 0307 	bic.w	r3, r3, #7
 801051a:	f002 0207 	and.w	r2, r2, #7
 801051e:	4313      	orrs	r3, r2
 8010520:	b25b      	sxtb	r3, r3
 8010522:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 8010526:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 801052a:	00d2      	lsls	r2, r2, #3
 801052c:	f002 0218 	and.w	r2, r2, #24
 8010530:	f023 0318 	bic.w	r3, r3, #24
 8010534:	4313      	orrs	r3, r2
 8010536:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 801053a:	4620      	mov	r0, r4
 801053c:	f7fe fe56 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 8010540:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010544:	0698      	lsls	r0, r3, #26
 8010546:	f104 059a 	add.w	r5, r4, #154	; 0x9a
 801054a:	d404      	bmi.n	8010556 <Argus_Dev_StartAuxMeasurement+0x8e>
 801054c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010550:	09da      	lsrs	r2, r3, #7
 8010552:	f040 80cf 	bne.w	80106f4 <Argus_Dev_StartAuxMeasurement+0x22c>
 8010556:	4628      	mov	r0, r5
 8010558:	2205      	movs	r2, #5
 801055a:	f104 014b 	add.w	r1, r4, #75	; 0x4b
 801055e:	f007 f8d4 	bl	801770a <memcpy>
 8010562:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 8010566:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801056a:	210a      	movs	r1, #10
 801056c:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
 8010570:	f892 009d 	ldrb.w	r0, [r2, #157]	; 0x9d
 8010574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010578:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801057c:	b25b      	sxtb	r3, r3
 801057e:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 8010582:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 8010586:	0112      	lsls	r2, r2, #4
 8010588:	f002 0270 	and.w	r2, r2, #112	; 0x70
 801058c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010590:	4313      	orrs	r3, r2
 8010592:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 8010596:	4620      	mov	r0, r4
 8010598:	f7fe fe28 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 801059c:	f104 059f 	add.w	r5, r4, #159	; 0x9f
 80105a0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80105a4:	0419      	lsls	r1, r3, #16
 80105a6:	d40a      	bmi.n	80105be <Argus_Dev_StartAuxMeasurement+0xf6>
 80105a8:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
 80105ac:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
 80105b0:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 80105b4:	021b      	lsls	r3, r3, #8
 80105b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80105ba:	4313      	orrs	r3, r2
 80105bc:	d00b      	beq.n	80105d6 <Argus_Dev_StartAuxMeasurement+0x10e>
 80105be:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 80105c2:	4628      	mov	r0, r5
 80105c4:	2204      	movs	r2, #4
 80105c6:	f007 f8a0 	bl	801770a <memcpy>
 80105ca:	211e      	movs	r1, #30
 80105cc:	f845 1b04 	str.w	r1, [r5], #4
 80105d0:	4620      	mov	r0, r4
 80105d2:	f7fe fe0b 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 80105d6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80105da:	03da      	lsls	r2, r3, #15
 80105dc:	d40c      	bmi.n	80105f8 <Argus_Dev_StartAuxMeasurement+0x130>
 80105de:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 80105e2:	f894 1071 	ldrb.w	r1, [r4, #113]	; 0x71
 80105e6:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
 80105ea:	021b      	lsls	r3, r3, #8
 80105ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80105f0:	4313      	orrs	r3, r2
 80105f2:	f5b3 0f66 	cmp.w	r3, #15073280	; 0xe60000
 80105f6:	d00d      	beq.n	8010614 <Argus_Dev_StartAuxMeasurement+0x14c>
 80105f8:	f104 0170 	add.w	r1, r4, #112	; 0x70
 80105fc:	4628      	mov	r0, r5
 80105fe:	2204      	movs	r2, #4
 8010600:	f007 f883 	bl	801770a <memcpy>
 8010604:	f24e 6320 	movw	r3, #58912	; 0xe620
 8010608:	f845 3b04 	str.w	r3, [r5], #4
 801060c:	2120      	movs	r1, #32
 801060e:	4620      	mov	r0, r4
 8010610:	f7fe fdec 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 8010614:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010618:	039b      	lsls	r3, r3, #14
 801061a:	d406      	bmi.n	801062a <Argus_Dev_StartAuxMeasurement+0x162>
 801061c:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 8010620:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8010624:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8010628:	d00e      	beq.n	8010648 <Argus_Dev_StartAuxMeasurement+0x180>
 801062a:	2204      	movs	r2, #4
 801062c:	f104 0174 	add.w	r1, r4, #116	; 0x74
 8010630:	4628      	mov	r0, r5
 8010632:	f007 f86a 	bl	801770a <memcpy>
 8010636:	2300      	movs	r3, #0
 8010638:	2122      	movs	r1, #34	; 0x22
 801063a:	7029      	strb	r1, [r5, #0]
 801063c:	706b      	strb	r3, [r5, #1]
 801063e:	70ab      	strb	r3, [r5, #2]
 8010640:	4620      	mov	r0, r4
 8010642:	f7fe fdd3 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 8010646:	3504      	adds	r5, #4
 8010648:	2204      	movs	r2, #4
 801064a:	2100      	movs	r1, #0
 801064c:	462f      	mov	r7, r5
 801064e:	4628      	mov	r0, r5
 8010650:	f007 f866 	bl	8017720 <memset>
 8010654:	2108      	movs	r1, #8
 8010656:	f807 1b04 	strb.w	r1, [r7], #4
 801065a:	4620      	mov	r0, r4
 801065c:	f7fe fdc6 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 8010660:	2203      	movs	r2, #3
 8010662:	f104 0169 	add.w	r1, r4, #105	; 0x69
 8010666:	4638      	mov	r0, r7
 8010668:	f007 f84f 	bl	801770a <memcpy>
 801066c:	79aa      	ldrb	r2, [r5, #6]
 801066e:	7968      	ldrb	r0, [r5, #5]
 8010670:	211c      	movs	r1, #28
 8010672:	f002 02e1 	and.w	r2, r2, #225	; 0xe1
 8010676:	71aa      	strb	r2, [r5, #6]
 8010678:	7129      	strb	r1, [r5, #4]
 801067a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 801067e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8010682:	3b01      	subs	r3, #1
 8010684:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8010688:	f3c3 03c6 	ubfx	r3, r3, #3, #7
 801068c:	4303      	orrs	r3, r0
 801068e:	b25b      	sxtb	r3, r3
 8010690:	716b      	strb	r3, [r5, #5]
 8010692:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8010696:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
 801069a:	f002 021f 	and.w	r2, r2, #31
 801069e:	3801      	subs	r0, #1
 80106a0:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
 80106a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80106a8:	71aa      	strb	r2, [r5, #6]
 80106aa:	716b      	strb	r3, [r5, #5]
 80106ac:	4620      	mov	r0, r4
 80106ae:	f7fe fd9d 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 80106b2:	4915      	ldr	r1, [pc, #84]	; (8010708 <Argus_Dev_StartAuxMeasurement+0x240>)
 80106b4:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 80106b8:	4b14      	ldr	r3, [pc, #80]	; (801070c <Argus_Dev_StartAuxMeasurement+0x244>)
 80106ba:	9301      	str	r3, [sp, #4]
 80106bc:	e9cd 1402 	strd	r1, r4, [sp, #8]
 80106c0:	1deb      	adds	r3, r5, #7
 80106c2:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 80106c6:	9200      	str	r2, [sp, #0]
 80106c8:	1b9b      	subs	r3, r3, r6
 80106ca:	4632      	mov	r2, r6
 80106cc:	4631      	mov	r1, r6
 80106ce:	f504 709c 	add.w	r0, r4, #312	; 0x138
 80106d2:	f006 fa73 	bl	8016bbc <ADS_TransferWithStart>
 80106d6:	1e03      	subs	r3, r0, #0
 80106d8:	db02      	blt.n	80106e0 <Argus_Dev_StartAuxMeasurement+0x218>
 80106da:	4618      	mov	r0, r3
 80106dc:	b005      	add	sp, #20
 80106de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80106e4:	2a00      	cmp	r2, #0
 80106e6:	d0f8      	beq.n	80106da <Argus_Dev_StartAuxMeasurement+0x212>
 80106e8:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
 80106ec:	b005      	add	sp, #20
 80106ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80106f2:	4710      	bx	r2
 80106f4:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 80106f8:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 80106fc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010700:	429a      	cmp	r2, r3
 8010702:	f47f af28 	bne.w	8010556 <Argus_Dev_StartAuxMeasurement+0x8e>
 8010706:	e74b      	b.n	80105a0 <Argus_Dev_StartAuxMeasurement+0xd8>
 8010708:	0800fa75 	.word	0x0800fa75
 801070c:	0800fd1d 	.word	0x0800fd1d

08010710 <ApplyVoltageTemperatureCompensation.part.6>:
 8010710:	b4f0      	push	{r4, r5, r6, r7}
 8010712:	8804      	ldrh	r4, [r0, #0]
 8010714:	f5a4 4300 	sub.w	r3, r4, #32768	; 0x8000
 8010718:	fb02 f203 	mul.w	r2, r2, r3
 801071c:	2a00      	cmp	r2, #0
 801071e:	f5a1 13f0 	sub.w	r3, r1, #1966080	; 0x1e0000
 8010722:	db37      	blt.n	8010794 <ApplyVoltageTemperatureCompensation.part.6+0x84>
 8010724:	f04f 36ff 	mov.w	r6, #4294967295
 8010728:	2501      	movs	r5, #1
 801072a:	2b00      	cmp	r3, #0
 801072c:	bfac      	ite	ge
 801072e:	4619      	movge	r1, r3
 8010730:	f5c1 11f0 	rsblt	r1, r1, #1966080	; 0x1e0000
 8010734:	ea4f 4312 	mov.w	r3, r2, lsr #16
 8010738:	b28f      	uxth	r7, r1
 801073a:	b292      	uxth	r2, r2
 801073c:	bfb8      	it	lt
 801073e:	4635      	movlt	r5, r6
 8010740:	0c09      	lsrs	r1, r1, #16
 8010742:	fb07 f602 	mul.w	r6, r7, r2
 8010746:	fb07 f703 	mul.w	r7, r7, r3
 801074a:	eb07 4716 	add.w	r7, r7, r6, lsr #16
 801074e:	fb01 f202 	mul.w	r2, r1, r2
 8010752:	fa12 f287 	uxtah	r2, r2, r7
 8010756:	fb01 f303 	mul.w	r3, r1, r3
 801075a:	0411      	lsls	r1, r2, #16
 801075c:	fa11 f686 	uxtah	r6, r1, r6
 8010760:	f1b6 4f78 	cmp.w	r6, #4160749568	; 0xf8000000
 8010764:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010768:	bf38      	it	cc
 801076a:	f106 6600 	addcc.w	r6, r6, #134217728	; 0x8000000
 801076e:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010772:	bf34      	ite	cc
 8010774:	0f36      	lsrcc	r6, r6, #28
 8010776:	2610      	movcs	r6, #16
 8010778:	011b      	lsls	r3, r3, #4
 801077a:	4433      	add	r3, r6
 801077c:	2d01      	cmp	r5, #1
 801077e:	bf18      	it	ne
 8010780:	425b      	negne	r3, r3
 8010782:	4423      	add	r3, r4
 8010784:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010788:	4293      	cmp	r3, r2
 801078a:	bf28      	it	cs
 801078c:	4613      	movcs	r3, r2
 801078e:	8003      	strh	r3, [r0, #0]
 8010790:	bcf0      	pop	{r4, r5, r6, r7}
 8010792:	4770      	bx	lr
 8010794:	4252      	negs	r2, r2
 8010796:	2601      	movs	r6, #1
 8010798:	f04f 35ff 	mov.w	r5, #4294967295
 801079c:	e7c5      	b.n	801072a <ApplyVoltageTemperatureCompensation.part.6+0x1a>
 801079e:	bf00      	nop

080107a0 <EvaluateAPDVoltage>:
 80107a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107a2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80107a4:	f890 61f0 	ldrb.w	r6, [r0, #496]	; 0x1f0
 80107a8:	f890 41f1 	ldrb.w	r4, [r0, #497]	; 0x1f1
 80107ac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80107b0:	4293      	cmp	r3, r2
 80107b2:	b085      	sub	sp, #20
 80107b4:	d011      	beq.n	80107da <EvaluateAPDVoltage+0x3a>
 80107b6:	f5a3 12f0 	sub.w	r2, r3, #1966080	; 0x1e0000
 80107ba:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 80107be:	1312      	asrs	r2, r2, #12
 80107c0:	fb03 f302 	mul.w	r3, r3, r2
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	f2c0 8098 	blt.w	80108fa <EvaluateAPDVoltage+0x15a>
 80107ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80107ce:	0adb      	lsrs	r3, r3, #11
 80107d0:	441c      	add	r4, r3
 80107d2:	b2e4      	uxtb	r4, r4
 80107d4:	42b4      	cmp	r4, r6
 80107d6:	bf38      	it	cc
 80107d8:	4634      	movcc	r4, r6
 80107da:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 80107de:	42a3      	cmp	r3, r4
 80107e0:	f000 8084 	beq.w	80108ec <EvaluateAPDVoltage+0x14c>
 80107e4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80107e6:	f880 404d 	strb.w	r4, [r0, #77]	; 0x4d
 80107ea:	1b37      	subs	r7, r6, r4
 80107ec:	fb01 f107 	mul.w	r1, r1, r7
 80107f0:	2900      	cmp	r1, #0
 80107f2:	f88d 6004 	strb.w	r6, [sp, #4]
 80107f6:	f88d 4007 	strb.w	r4, [sp, #7]
 80107fa:	f8b0 51ee 	ldrh.w	r5, [r0, #494]	; 0x1ee
 80107fe:	db77      	blt.n	80108f0 <EvaluateAPDVoltage+0x150>
 8010800:	f501 4300 	add.w	r3, r1, #32768	; 0x8000
 8010804:	0c1b      	lsrs	r3, r3, #16
 8010806:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8010808:	4423      	add	r3, r4
 801080a:	fb02 f207 	mul.w	r2, r2, r7
 801080e:	b2db      	uxtb	r3, r3
 8010810:	2a00      	cmp	r2, #0
 8010812:	f88d 3005 	strb.w	r3, [sp, #5]
 8010816:	db75      	blt.n	8010904 <EvaluateAPDVoltage+0x164>
 8010818:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801081c:	0c12      	lsrs	r2, r2, #16
 801081e:	f8b0 71ec 	ldrh.w	r7, [r0, #492]	; 0x1ec
 8010822:	f8b0 c1c4 	ldrh.w	ip, [r0, #452]	; 0x1c4
 8010826:	f890 e1bf 	ldrb.w	lr, [r0, #447]	; 0x1bf
 801082a:	f8ad 7008 	strh.w	r7, [sp, #8]
 801082e:	ebac 0c07 	sub.w	ip, ip, r7
 8010832:	fb9c fcf5 	sdiv	ip, ip, r5
 8010836:	eb0c 0106 	add.w	r1, ip, r6
 801083a:	4571      	cmp	r1, lr
 801083c:	bfa8      	it	ge
 801083e:	4671      	movge	r1, lr
 8010840:	4422      	add	r2, r4
 8010842:	428c      	cmp	r4, r1
 8010844:	b2d2      	uxtb	r2, r2
 8010846:	bfc8      	it	gt
 8010848:	f88d 1007 	strbgt.w	r1, [sp, #7]
 801084c:	428a      	cmp	r2, r1
 801084e:	f88d 2006 	strb.w	r2, [sp, #6]
 8010852:	bfc8      	it	gt
 8010854:	f88d 1006 	strbgt.w	r1, [sp, #6]
 8010858:	428b      	cmp	r3, r1
 801085a:	bfc8      	it	gt
 801085c:	f88d 1005 	strbgt.w	r1, [sp, #5]
 8010860:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010864:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010868:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801086c:	1b89      	subs	r1, r1, r6
 801086e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8010872:	fb05 7101 	mla	r1, r5, r1, r7
 8010876:	1b92      	subs	r2, r2, r6
 8010878:	fb05 7202 	mla	r2, r5, r2, r7
 801087c:	1b9e      	subs	r6, r3, r6
 801087e:	42a1      	cmp	r1, r4
 8010880:	f890 31f3 	ldrb.w	r3, [r0, #499]	; 0x1f3
 8010884:	fb05 7606 	mla	r6, r5, r6, r7
 8010888:	bfa8      	it	ge
 801088a:	4621      	movge	r1, r4
 801088c:	42a2      	cmp	r2, r4
 801088e:	bfa8      	it	ge
 8010890:	4622      	movge	r2, r4
 8010892:	fb05 f303 	mul.w	r3, r5, r3
 8010896:	42a6      	cmp	r6, r4
 8010898:	bfa8      	it	ge
 801089a:	4626      	movge	r6, r4
 801089c:	029b      	lsls	r3, r3, #10
 801089e:	f8ad 100a 	strh.w	r1, [sp, #10]
 80108a2:	f8ad 200c 	strh.w	r2, [sp, #12]
 80108a6:	f8ad 600e 	strh.w	r6, [sp, #14]
 80108aa:	d015      	beq.n	80108d8 <EvaluateAPDVoltage+0x138>
 80108ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80108b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80108b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80108b8:	f483 3480 	eor.w	r4, r3, #65536	; 0x10000
 80108bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80108c0:	da25      	bge.n	801090e <EvaluateAPDVoltage+0x16e>
 80108c2:	0052      	lsls	r2, r2, #1
 80108c4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80108c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80108cc:	d3f9      	bcc.n	80108c2 <EvaluateAPDVoltage+0x122>
 80108ce:	b9f3      	cbnz	r3, 801090e <EvaluateAPDVoltage+0x16e>
 80108d0:	43e3      	mvns	r3, r4
 80108d2:	0fdb      	lsrs	r3, r3, #31
 80108d4:	425b      	negs	r3, r3
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	f8d0 24f4 	ldr.w	r2, [r0, #1268]	; 0x4f4
 80108dc:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 80108e0:	a901      	add	r1, sp, #4
 80108e2:	f502 70b2 	add.w	r0, r2, #356	; 0x164
 80108e6:	aa02      	add	r2, sp, #8
 80108e8:	f7f8 fda6 	bl	8009438 <Argus_Dca_SetVoltageValues>
 80108ec:	b005      	add	sp, #20
 80108ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108f0:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 80108f4:	0c1b      	lsrs	r3, r3, #16
 80108f6:	425b      	negs	r3, r3
 80108f8:	e785      	b.n	8010806 <EvaluateAPDVoltage+0x66>
 80108fa:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80108fe:	0adb      	lsrs	r3, r3, #11
 8010900:	425b      	negs	r3, r3
 8010902:	e765      	b.n	80107d0 <EvaluateAPDVoltage+0x30>
 8010904:	f5c2 4200 	rsb	r2, r2, #32768	; 0x8000
 8010908:	0c12      	lsrs	r2, r2, #16
 801090a:	4252      	negs	r2, r2
 801090c:	e787      	b.n	801081e <EvaluateAPDVoltage+0x7e>
 801090e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8010912:	2500      	movs	r5, #0
 8010914:	e000      	b.n	8010918 <EvaluateAPDVoltage+0x178>
 8010916:	b151      	cbz	r1, 801092e <EvaluateAPDVoltage+0x18e>
 8010918:	4291      	cmp	r1, r2
 801091a:	bf24      	itt	cs
 801091c:	1a89      	subcs	r1, r1, r2
 801091e:	431d      	orrcs	r5, r3
 8010920:	085b      	lsrs	r3, r3, #1
 8010922:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010926:	d1f6      	bne.n	8010916 <EvaluateAPDVoltage+0x176>
 8010928:	4291      	cmp	r1, r2
 801092a:	bf28      	it	cs
 801092c:	3501      	addcs	r5, #1
 801092e:	2c00      	cmp	r4, #0
 8010930:	bfb8      	it	lt
 8010932:	426d      	neglt	r5, r5
 8010934:	b2ab      	uxth	r3, r5
 8010936:	e7cf      	b.n	80108d8 <EvaluateAPDVoltage+0x138>

08010938 <Argus_Cal_GetCalibration>:
 8010938:	b508      	push	{r3, lr}
 801093a:	460b      	mov	r3, r1
 801093c:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8010940:	f500 71d8 	add.w	r1, r0, #432	; 0x1b0
 8010944:	4618      	mov	r0, r3
 8010946:	f006 fee0 	bl	801770a <memcpy>
 801094a:	2000      	movs	r0, #0
 801094c:	bd08      	pop	{r3, pc}
 801094e:	bf00      	nop

08010950 <Argus_Cal_GetCalibrationPtr>:
 8010950:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 8010954:	4770      	bx	lr
 8010956:	bf00      	nop

08010958 <Argus_Cal_GetGainValues>:
 8010958:	b4f0      	push	{r4, r5, r6, r7}
 801095a:	f890 31f2 	ldrb.w	r3, [r0, #498]	; 0x1f2
 801095e:	0398      	lsls	r0, r3, #14
 8010960:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010964:	f000 852d 	beq.w	80113c2 <Argus_Cal_GetGainValues+0xa6a>
 8010968:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801096c:	f0c0 80dd 	bcc.w	8010b2a <Argus_Cal_GetGainValues+0x1d2>
 8010970:	4aa5      	ldr	r2, [pc, #660]	; (8010c08 <Argus_Cal_GetGainValues+0x2b0>)
 8010972:	0200      	lsls	r0, r0, #8
 8010974:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8010978:	d205      	bcs.n	8010986 <Argus_Cal_GetGainValues+0x2e>
 801097a:	f1a2 7231 	sub.w	r2, r2, #46399488	; 0x2c40000
 801097e:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
 8010982:	3a60      	subs	r2, #96	; 0x60
 8010984:	0100      	lsls	r0, r0, #4
 8010986:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 801098a:	d205      	bcs.n	8010998 <Argus_Cal_GetGainValues+0x40>
 801098c:	f1a2 72b1 	sub.w	r2, r2, #23199744	; 0x1620000
 8010990:	f5a2 4264 	sub.w	r2, r2, #58368	; 0xe400
 8010994:	3a30      	subs	r2, #48	; 0x30
 8010996:	0080      	lsls	r0, r0, #2
 8010998:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801099c:	f0c0 80fb 	bcc.w	8010b96 <Argus_Cal_GetGainValues+0x23e>
 80109a0:	4603      	mov	r3, r0
 80109a2:	0840      	lsrs	r0, r0, #1
 80109a4:	1818      	adds	r0, r3, r0
 80109a6:	d405      	bmi.n	80109b4 <Argus_Cal_GetGainValues+0x5c>
 80109a8:	f5a2 02cf 	sub.w	r2, r2, #6782976	; 0x678000
 80109ac:	f5a2 4299 	sub.w	r2, r2, #19584	; 0x4c80
 80109b0:	3a10      	subs	r2, #16
 80109b2:	4603      	mov	r3, r0
 80109b4:	eb13 0093 	adds.w	r0, r3, r3, lsr #2
 80109b8:	d405      	bmi.n	80109c6 <Argus_Cal_GetGainValues+0x6e>
 80109ba:	f5a2 1264 	sub.w	r2, r2, #3735552	; 0x390000
 80109be:	f5a2 52ff 	sub.w	r2, r2, #8160	; 0x1fe0
 80109c2:	3a10      	subs	r2, #16
 80109c4:	4603      	mov	r3, r0
 80109c6:	eb13 00d3 	adds.w	r0, r3, r3, lsr #3
 80109ca:	d404      	bmi.n	80109d6 <Argus_Cal_GetGainValues+0x7e>
 80109cc:	f5a2 12f1 	sub.w	r2, r2, #1974272	; 0x1e2000
 80109d0:	f2a2 7207 	subw	r2, r2, #1799	; 0x707
 80109d4:	4603      	mov	r3, r0
 80109d6:	eb13 1013 	adds.w	r0, r3, r3, lsr #4
 80109da:	d404      	bmi.n	80109e6 <Argus_Cal_GetGainValues+0x8e>
 80109dc:	f5a2 2278 	sub.w	r2, r2, #1015808	; 0xf8000
 80109e0:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 80109e4:	4603      	mov	r3, r0
 80109e6:	eb13 1053 	adds.w	r0, r3, r3, lsr #5
 80109ea:	d403      	bmi.n	80109f4 <Argus_Cal_GetGainValues+0x9c>
 80109ec:	f5a2 22fc 	sub.w	r2, r2, #516096	; 0x7e000
 80109f0:	3aa7      	subs	r2, #167	; 0xa7
 80109f2:	4603      	mov	r3, r0
 80109f4:	eb13 1093 	adds.w	r0, r3, r3, lsr #6
 80109f8:	d403      	bmi.n	8010a02 <Argus_Cal_GetGainValues+0xaa>
 80109fa:	f5a2 327e 	sub.w	r2, r2, #260096	; 0x3f800
 80109fe:	3a15      	subs	r2, #21
 8010a00:	4603      	mov	r3, r0
 8010a02:	eb13 10d3 	adds.w	r0, r3, r3, lsr #7
 8010a06:	d403      	bmi.n	8010a10 <Argus_Cal_GetGainValues+0xb8>
 8010a08:	f5a2 32ff 	sub.w	r2, r2, #130560	; 0x1fe00
 8010a0c:	3a03      	subs	r2, #3
 8010a0e:	4603      	mov	r3, r0
 8010a10:	eb13 2013 	adds.w	r0, r3, r3, lsr #8
 8010a14:	d403      	bmi.n	8010a1e <Argus_Cal_GetGainValues+0xc6>
 8010a16:	f5a2 427f 	sub.w	r2, r2, #65280	; 0xff00
 8010a1a:	3a80      	subs	r2, #128	; 0x80
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	eb13 2053 	adds.w	r0, r3, r3, lsr #9
 8010a22:	d403      	bmi.n	8010a2c <Argus_Cal_GetGainValues+0xd4>
 8010a24:	f5a2 42ff 	sub.w	r2, r2, #32640	; 0x7f80
 8010a28:	3a60      	subs	r2, #96	; 0x60
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	eb13 2093 	adds.w	r0, r3, r3, lsr #10
 8010a30:	d403      	bmi.n	8010a3a <Argus_Cal_GetGainValues+0xe2>
 8010a32:	f5a2 527f 	sub.w	r2, r2, #16320	; 0x3fc0
 8010a36:	3a38      	subs	r2, #56	; 0x38
 8010a38:	4603      	mov	r3, r0
 8010a3a:	eb13 20d3 	adds.w	r0, r3, r3, lsr #11
 8010a3e:	d403      	bmi.n	8010a48 <Argus_Cal_GetGainValues+0xf0>
 8010a40:	f5a2 52ff 	sub.w	r2, r2, #8160	; 0x1fe0
 8010a44:	3a1e      	subs	r2, #30
 8010a46:	4603      	mov	r3, r0
 8010a48:	f1c3 4300 	rsb	r3, r3, #2147483648	; 0x80000000
 8010a4c:	09db      	lsrs	r3, r3, #7
 8010a4e:	1ad0      	subs	r0, r2, r3
 8010a50:	f100 81d5 	bmi.w	8010dfe <Argus_Cal_GetGainValues+0x4a6>
 8010a54:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8010a58:	0a1b      	lsrs	r3, r3, #8
 8010a5a:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8010a5e:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8010a62:	f5b4 3f40 	cmp.w	r4, #196608	; 0x30000
 8010a66:	f483 3340 	eor.w	r3, r3, #196608	; 0x30000
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	dd64      	ble.n	8010b38 <Argus_Cal_GetGainValues+0x1e0>
 8010a6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010a72:	f44f 3540 	mov.w	r5, #196608	; 0x30000
 8010a76:	006d      	lsls	r5, r5, #1
 8010a78:	42ac      	cmp	r4, r5
 8010a7a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010a7e:	d8fa      	bhi.n	8010a76 <Argus_Cal_GetGainValues+0x11e>
 8010a80:	2a00      	cmp	r2, #0
 8010a82:	d160      	bne.n	8010b46 <Argus_Cal_GetGainValues+0x1ee>
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	db7d      	blt.n	8010b84 <Argus_Cal_GetGainValues+0x22c>
 8010a88:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8010a8c:	60cb      	str	r3, [r1, #12]
 8010a8e:	f04f 34ff 	mov.w	r4, #4294967295
 8010a92:	2501      	movs	r5, #1
 8010a94:	f46f 07c8 	mvn.w	r7, #6553600	; 0x640000
 8010a98:	4a5c      	ldr	r2, [pc, #368]	; (8010c0c <Argus_Cal_GetGainValues+0x2b4>)
 8010a9a:	462e      	mov	r6, r5
 8010a9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010aa0:	0076      	lsls	r6, r6, #1
 8010aa2:	4296      	cmp	r6, r2
 8010aa4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010aa8:	d9fa      	bls.n	8010aa0 <Argus_Cal_GetGainValues+0x148>
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	f040 8183 	bne.w	8010db6 <Argus_Cal_GetGainValues+0x45e>
 8010ab0:	2f00      	cmp	r7, #0
 8010ab2:	f2c0 84dc 	blt.w	801146e <Argus_Cal_GetGainValues+0xb16>
 8010ab6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010aba:	4618      	mov	r0, r3
 8010abc:	608b      	str	r3, [r1, #8]
 8010abe:	4060      	eors	r0, r4
 8010ac0:	46ac      	mov	ip, r5
 8010ac2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8010ac6:	e001      	b.n	8010acc <Argus_Cal_GetGainValues+0x174>
 8010ac8:	4617      	mov	r7, r2
 8010aca:	46b4      	mov	ip, r6
 8010acc:	ea4f 064c 	mov.w	r6, ip, lsl #1
 8010ad0:	42b3      	cmp	r3, r6
 8010ad2:	ea4f 0247 	mov.w	r2, r7, lsl #1
 8010ad6:	d8f7      	bhi.n	8010ac8 <Argus_Cal_GetGainValues+0x170>
 8010ad8:	2a00      	cmp	r2, #0
 8010ada:	d064      	beq.n	8010ba6 <Argus_Cal_GetGainValues+0x24e>
 8010adc:	2e00      	cmp	r6, #0
 8010ade:	f2c0 819d 	blt.w	8010e1c <Argus_Cal_GetGainValues+0x4c4>
 8010ae2:	2700      	movs	r7, #0
 8010ae4:	e000      	b.n	8010ae8 <Argus_Cal_GetGainValues+0x190>
 8010ae6:	b153      	cbz	r3, 8010afe <Argus_Cal_GetGainValues+0x1a6>
 8010ae8:	429e      	cmp	r6, r3
 8010aea:	bf9c      	itt	ls
 8010aec:	1b9b      	subls	r3, r3, r6
 8010aee:	4317      	orrls	r7, r2
 8010af0:	0852      	lsrs	r2, r2, #1
 8010af2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010af6:	d1f6      	bne.n	8010ae6 <Argus_Cal_GetGainValues+0x18e>
 8010af8:	42b3      	cmp	r3, r6
 8010afa:	bf28      	it	cs
 8010afc:	3701      	addcs	r7, #1
 8010afe:	2800      	cmp	r0, #0
 8010b00:	f2c0 8183 	blt.w	8010e0a <Argus_Cal_GetGainValues+0x4b2>
 8010b04:	ea87 72e7 	eor.w	r2, r7, r7, asr #31
 8010b08:	eba2 72e7 	sub.w	r2, r2, r7, asr #31
 8010b0c:	4295      	cmp	r5, r2
 8010b0e:	604f      	str	r7, [r1, #4]
 8010b10:	ea84 0407 	eor.w	r4, r4, r7
 8010b14:	d34e      	bcc.n	8010bb4 <Argus_Cal_GetGainValues+0x25c>
 8010b16:	4613      	mov	r3, r2
 8010b18:	2a00      	cmp	r2, #0
 8010b1a:	f040 84b2 	bne.w	8011482 <Argus_Cal_GetGainValues+0xb2a>
 8010b1e:	2c00      	cmp	r4, #0
 8010b20:	bfb8      	it	lt
 8010b22:	425b      	neglt	r3, r3
 8010b24:	600b      	str	r3, [r1, #0]
 8010b26:	bcf0      	pop	{r4, r5, r6, r7}
 8010b28:	4770      	bx	lr
 8010b2a:	0798      	lsls	r0, r3, #30
 8010b2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8010b30:	f0c0 84b2 	bcc.w	8011498 <Argus_Cal_GetGainValues+0xb40>
 8010b34:	4a36      	ldr	r2, [pc, #216]	; (8010c10 <Argus_Cal_GetGainValues+0x2b8>)
 8010b36:	e71d      	b.n	8010974 <Argus_Cal_GetGainValues+0x1c>
 8010b38:	2c00      	cmp	r4, #0
 8010b3a:	f000 8442 	beq.w	80113c2 <Argus_Cal_GetGainValues+0xa6a>
 8010b3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010b42:	f44f 3540 	mov.w	r5, #196608	; 0x30000
 8010b46:	2400      	movs	r4, #0
 8010b48:	e000      	b.n	8010b4c <Argus_Cal_GetGainValues+0x1f4>
 8010b4a:	b150      	cbz	r0, 8010b62 <Argus_Cal_GetGainValues+0x20a>
 8010b4c:	4285      	cmp	r5, r0
 8010b4e:	bf9c      	itt	ls
 8010b50:	1b40      	subls	r0, r0, r5
 8010b52:	4314      	orrls	r4, r2
 8010b54:	0852      	lsrs	r2, r2, #1
 8010b56:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8010b5a:	d1f6      	bne.n	8010b4a <Argus_Cal_GetGainValues+0x1f2>
 8010b5c:	42a8      	cmp	r0, r5
 8010b5e:	bf28      	it	cs
 8010b60:	3401      	addcs	r4, #1
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	bfb8      	it	lt
 8010b66:	4264      	neglt	r4, r4
 8010b68:	2c00      	cmp	r4, #0
 8010b6a:	f000 842a 	beq.w	80113c2 <Argus_Cal_GetGainValues+0xa6a>
 8010b6e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8010b72:	f000 8494 	beq.w	801149e <Argus_Cal_GetGainValues+0xb46>
 8010b76:	4b27      	ldr	r3, [pc, #156]	; (8010c14 <Argus_Cal_GetGainValues+0x2bc>)
 8010b78:	429c      	cmp	r4, r3
 8010b7a:	dc85      	bgt.n	8010a88 <Argus_Cal_GetGainValues+0x130>
 8010b7c:	4b26      	ldr	r3, [pc, #152]	; (8010c18 <Argus_Cal_GetGainValues+0x2c0>)
 8010b7e:	429c      	cmp	r4, r3
 8010b80:	f280 8160 	bge.w	8010e44 <Argus_Cal_GetGainValues+0x4ec>
 8010b84:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8010b88:	60cb      	str	r3, [r1, #12]
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	e9c1 3301 	strd	r3, r3, [r1, #4]
 8010b90:	600b      	str	r3, [r1, #0]
 8010b92:	bcf0      	pop	{r4, r5, r6, r7}
 8010b94:	4770      	bx	lr
 8010b96:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 8010b9a:	f502 029d 	add.w	r2, r2, #5144576	; 0x4e8000
 8010b9e:	f602 52e8 	addw	r2, r2, #3560	; 0xde8
 8010ba2:	0043      	lsls	r3, r0, #1
 8010ba4:	e6fe      	b.n	80109a4 <Argus_Cal_GetGainValues+0x4c>
 8010ba6:	2800      	cmp	r0, #0
 8010ba8:	f2c0 845b 	blt.w	8011462 <Argus_Cal_GetGainValues+0xb0a>
 8010bac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8010bb0:	604a      	str	r2, [r1, #4]
 8010bb2:	4054      	eors	r4, r2
 8010bb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010bb8:	e001      	b.n	8010bbe <Argus_Cal_GetGainValues+0x266>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	4635      	mov	r5, r6
 8010bbe:	006e      	lsls	r6, r5, #1
 8010bc0:	42b2      	cmp	r2, r6
 8010bc2:	ea4f 0043 	mov.w	r0, r3, lsl #1
 8010bc6:	d8f8      	bhi.n	8010bba <Argus_Cal_GetGainValues+0x262>
 8010bc8:	b1a8      	cbz	r0, 8010bf6 <Argus_Cal_GetGainValues+0x29e>
 8010bca:	2e00      	cmp	r6, #0
 8010bcc:	f2c0 811f 	blt.w	8010e0e <Argus_Cal_GetGainValues+0x4b6>
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	e001      	b.n	8010bd8 <Argus_Cal_GetGainValues+0x280>
 8010bd4:	2a00      	cmp	r2, #0
 8010bd6:	d0a2      	beq.n	8010b1e <Argus_Cal_GetGainValues+0x1c6>
 8010bd8:	4296      	cmp	r6, r2
 8010bda:	bf9c      	itt	ls
 8010bdc:	1b92      	subls	r2, r2, r6
 8010bde:	4303      	orrls	r3, r0
 8010be0:	0840      	lsrs	r0, r0, #1
 8010be2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010be6:	d1f5      	bne.n	8010bd4 <Argus_Cal_GetGainValues+0x27c>
 8010be8:	4296      	cmp	r6, r2
 8010bea:	bf98      	it	ls
 8010bec:	3301      	addls	r3, #1
 8010bee:	2c00      	cmp	r4, #0
 8010bf0:	bfb8      	it	lt
 8010bf2:	425b      	neglt	r3, r3
 8010bf4:	e796      	b.n	8010b24 <Argus_Cal_GetGainValues+0x1cc>
 8010bf6:	2c00      	cmp	r4, #0
 8010bf8:	bfb4      	ite	lt
 8010bfa:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8010bfe:	f06f 4300 	mvnge.w	r3, #2147483648	; 0x80000000
 8010c02:	600b      	str	r3, [r1, #0]
 8010c04:	bcf0      	pop	{r4, r5, r6, r7}
 8010c06:	4770      	bx	lr
 8010c08:	04da1ea8 	.word	0x04da1ea8
 8010c0c:	0063ffff 	.word	0x0063ffff
 8010c10:	ff4e8de9 	.word	0xff4e8de9
 8010c14:	000b1721 	.word	0x000b1721
 8010c18:	fff4376c 	.word	0xfff4376c
 8010c1c:	4a83      	ldr	r2, [pc, #524]	; (8010e2c <Argus_Cal_GetGainValues+0x4d4>)
 8010c1e:	0223      	lsls	r3, r4, #8
 8010c20:	4293      	cmp	r3, r2
 8010c22:	f300 82cd 	bgt.w	80111c0 <Argus_Cal_GetGainValues+0x868>
 8010c26:	4882      	ldr	r0, [pc, #520]	; (8010e30 <Argus_Cal_GetGainValues+0x4d8>)
 8010c28:	4a82      	ldr	r2, [pc, #520]	; (8010e34 <Argus_Cal_GetGainValues+0x4dc>)
 8010c2a:	4418      	add	r0, r3
 8010c2c:	2800      	cmp	r0, #0
 8010c2e:	bfb8      	it	lt
 8010c30:	4618      	movlt	r0, r3
 8010c32:	4402      	add	r2, r0
 8010c34:	bfad      	iteet	ge
 8010c36:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8010c3a:	f04f 6380 	movlt.w	r3, #67108864	; 0x4000000
 8010c3e:	f04f 7480 	movlt.w	r4, #16777216	; 0x1000000
 8010c42:	f04f 5480 	movge.w	r4, #268435456	; 0x10000000
 8010c46:	2a00      	cmp	r2, #0
 8010c48:	bfb8      	it	lt
 8010c4a:	4602      	movlt	r2, r0
 8010c4c:	487a      	ldr	r0, [pc, #488]	; (8010e38 <Argus_Cal_GetGainValues+0x4e0>)
 8010c4e:	4410      	add	r0, r2
 8010c50:	bfb8      	it	lt
 8010c52:	4623      	movlt	r3, r4
 8010c54:	2800      	cmp	r0, #0
 8010c56:	bfa8      	it	ge
 8010c58:	4602      	movge	r2, r0
 8010c5a:	4878      	ldr	r0, [pc, #480]	; (8010e3c <Argus_Cal_GetGainValues+0x4e4>)
 8010c5c:	4410      	add	r0, r2
 8010c5e:	bfa8      	it	ge
 8010c60:	005b      	lslge	r3, r3, #1
 8010c62:	2800      	cmp	r0, #0
 8010c64:	bfa8      	it	ge
 8010c66:	4602      	movge	r2, r0
 8010c68:	4875      	ldr	r0, [pc, #468]	; (8010e40 <Argus_Cal_GetGainValues+0x4e8>)
 8010c6a:	4410      	add	r0, r2
 8010c6c:	bfa8      	it	ge
 8010c6e:	eb03 0353 	addge.w	r3, r3, r3, lsr #1
 8010c72:	2800      	cmp	r0, #0
 8010c74:	bfa8      	it	ge
 8010c76:	4602      	movge	r2, r0
 8010c78:	f5a2 10f1 	sub.w	r0, r2, #1974272	; 0x1e2000
 8010c7c:	f2a0 7007 	subw	r0, r0, #1799	; 0x707
 8010c80:	bfa8      	it	ge
 8010c82:	eb03 0393 	addge.w	r3, r3, r3, lsr #2
 8010c86:	2800      	cmp	r0, #0
 8010c88:	bfa8      	it	ge
 8010c8a:	4602      	movge	r2, r0
 8010c8c:	f5a2 2078 	sub.w	r0, r2, #1015808	; 0xf8000
 8010c90:	f5a0 60a3 	sub.w	r0, r0, #1304	; 0x518
 8010c94:	bfa8      	it	ge
 8010c96:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 8010c9a:	2800      	cmp	r0, #0
 8010c9c:	bfa8      	it	ge
 8010c9e:	4602      	movge	r2, r0
 8010ca0:	f5a2 20fc 	sub.w	r0, r2, #516096	; 0x7e000
 8010ca4:	f1a0 00a7 	sub.w	r0, r0, #167	; 0xa7
 8010ca8:	bfa8      	it	ge
 8010caa:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 8010cae:	2800      	cmp	r0, #0
 8010cb0:	bfa8      	it	ge
 8010cb2:	4602      	movge	r2, r0
 8010cb4:	f5a2 307e 	sub.w	r0, r2, #260096	; 0x3f800
 8010cb8:	f1a0 0015 	sub.w	r0, r0, #21
 8010cbc:	bfa8      	it	ge
 8010cbe:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	bfa8      	it	ge
 8010cc6:	4602      	movge	r2, r0
 8010cc8:	f5a2 30ff 	sub.w	r0, r2, #130560	; 0x1fe00
 8010ccc:	f1a0 0003 	sub.w	r0, r0, #3
 8010cd0:	bfa8      	it	ge
 8010cd2:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	bfa8      	it	ge
 8010cda:	4602      	movge	r2, r0
 8010cdc:	f5a2 407f 	sub.w	r0, r2, #65280	; 0xff00
 8010ce0:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 8010ce4:	bfa8      	it	ge
 8010ce6:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 8010cea:	2800      	cmp	r0, #0
 8010cec:	bfa8      	it	ge
 8010cee:	4602      	movge	r2, r0
 8010cf0:	f5a2 40ff 	sub.w	r0, r2, #32640	; 0x7f80
 8010cf4:	f1a0 0060 	sub.w	r0, r0, #96	; 0x60
 8010cf8:	bfa8      	it	ge
 8010cfa:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	bfa8      	it	ge
 8010d02:	4602      	movge	r2, r0
 8010d04:	f5a2 507f 	sub.w	r0, r2, #16320	; 0x3fc0
 8010d08:	f1a0 0038 	sub.w	r0, r0, #56	; 0x38
 8010d0c:	bfa8      	it	ge
 8010d0e:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 8010d12:	2800      	cmp	r0, #0
 8010d14:	bfa8      	it	ge
 8010d16:	4602      	movge	r2, r0
 8010d18:	f5a2 50ff 	sub.w	r0, r2, #8160	; 0x1fe0
 8010d1c:	f1a0 001e 	sub.w	r0, r0, #30
 8010d20:	bfa8      	it	ge
 8010d22:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 8010d26:	2800      	cmp	r0, #0
 8010d28:	bfa4      	itt	ge
 8010d2a:	4602      	movge	r2, r0
 8010d2c:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 8010d30:	04d4      	lsls	r4, r2, #19
 8010d32:	bf48      	it	mi
 8010d34:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 8010d38:	0510      	lsls	r0, r2, #20
 8010d3a:	bf48      	it	mi
 8010d3c:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 8010d40:	0557      	lsls	r7, r2, #21
 8010d42:	bf48      	it	mi
 8010d44:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 8010d48:	0596      	lsls	r6, r2, #22
 8010d4a:	bf48      	it	mi
 8010d4c:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 8010d50:	05d5      	lsls	r5, r2, #23
 8010d52:	bf48      	it	mi
 8010d54:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 8010d58:	0614      	lsls	r4, r2, #24
 8010d5a:	bf48      	it	mi
 8010d5c:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 8010d60:	0650      	lsls	r0, r2, #25
 8010d62:	bf48      	it	mi
 8010d64:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 8010d68:	0697      	lsls	r7, r2, #26
 8010d6a:	bf48      	it	mi
 8010d6c:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 8010d70:	06d6      	lsls	r6, r2, #27
 8010d72:	bf48      	it	mi
 8010d74:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 8010d78:	0715      	lsls	r5, r2, #28
 8010d7a:	bf48      	it	mi
 8010d7c:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 8010d80:	0754      	lsls	r4, r2, #29
 8010d82:	bf48      	it	mi
 8010d84:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 8010d88:	0790      	lsls	r0, r2, #30
 8010d8a:	bf48      	it	mi
 8010d8c:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 8010d90:	07d2      	lsls	r2, r2, #31
 8010d92:	bf48      	it	mi
 8010d94:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 8010d98:	f113 0f81 	cmn.w	r3, #129	; 0x81
 8010d9c:	f240 81e9 	bls.w	8011172 <Argus_Cal_GetGainValues+0x81a>
 8010da0:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8010da4:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 8010da8:	60cb      	str	r3, [r1, #12]
 8010daa:	4625      	mov	r5, r4
 8010dac:	4626      	mov	r6, r4
 8010dae:	f04f 77b2 	mov.w	r7, #23330816	; 0x1640000
 8010db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010db6:	2000      	movs	r0, #0
 8010db8:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
 8010dbc:	e000      	b.n	8010dc0 <Argus_Cal_GetGainValues+0x468>
 8010dbe:	b152      	cbz	r2, 8010dd6 <Argus_Cal_GetGainValues+0x47e>
 8010dc0:	4296      	cmp	r6, r2
 8010dc2:	bf9c      	itt	ls
 8010dc4:	1b92      	subls	r2, r2, r6
 8010dc6:	4318      	orrls	r0, r3
 8010dc8:	085b      	lsrs	r3, r3, #1
 8010dca:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010dce:	d1f6      	bne.n	8010dbe <Argus_Cal_GetGainValues+0x466>
 8010dd0:	42b2      	cmp	r2, r6
 8010dd2:	bf28      	it	cs
 8010dd4:	3001      	addcs	r0, #1
 8010dd6:	2f00      	cmp	r7, #0
 8010dd8:	bfb8      	it	lt
 8010dda:	4240      	neglt	r0, r0
 8010ddc:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8010de0:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8010de4:	42ab      	cmp	r3, r5
 8010de6:	6088      	str	r0, [r1, #8]
 8010de8:	ea80 0004 	eor.w	r0, r0, r4
 8010dec:	f63f ae68 	bhi.w	8010ac0 <Argus_Cal_GetGainValues+0x168>
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	f040 8341 	bne.w	8011478 <Argus_Cal_GetGainValues+0xb20>
 8010df6:	2800      	cmp	r0, #0
 8010df8:	db06      	blt.n	8010e08 <Argus_Cal_GetGainValues+0x4b0>
 8010dfa:	604b      	str	r3, [r1, #4]
 8010dfc:	e68f      	b.n	8010b1e <Argus_Cal_GetGainValues+0x1c6>
 8010dfe:	1a9b      	subs	r3, r3, r2
 8010e00:	3380      	adds	r3, #128	; 0x80
 8010e02:	0a1b      	lsrs	r3, r3, #8
 8010e04:	425b      	negs	r3, r3
 8010e06:	e628      	b.n	8010a5a <Argus_Cal_GetGainValues+0x102>
 8010e08:	461f      	mov	r7, r3
 8010e0a:	427f      	negs	r7, r7
 8010e0c:	e67a      	b.n	8010b04 <Argus_Cal_GetGainValues+0x1ac>
 8010e0e:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8010e12:	462e      	mov	r6, r5
 8010e14:	f47f aedc 	bne.w	8010bd0 <Argus_Cal_GetGainValues+0x278>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	e6e5      	b.n	8010be8 <Argus_Cal_GetGainValues+0x290>
 8010e1c:	f037 4200 	bics.w	r2, r7, #2147483648	; 0x80000000
 8010e20:	4666      	mov	r6, ip
 8010e22:	f47f ae5e 	bne.w	8010ae2 <Argus_Cal_GetGainValues+0x18a>
 8010e26:	4617      	mov	r7, r2
 8010e28:	e666      	b.n	8010af8 <Argus_Cal_GetGainValues+0x1a0>
 8010e2a:	bf00      	nop
 8010e2c:	058b90be 	.word	0x058b90be
 8010e30:	fd3a37a0 	.word	0xfd3a37a0
 8010e34:	fe9d1bd0 	.word	0xfe9d1bd0
 8010e38:	ff4e8de8 	.word	0xff4e8de8
 8010e3c:	ff983370 	.word	0xff983370
 8010e40:	ffc6e010 	.word	0xffc6e010
 8010e44:	2c00      	cmp	r4, #0
 8010e46:	f73f aee9 	bgt.w	8010c1c <Argus_Cal_GetGainValues+0x2c4>
 8010e4a:	4264      	negs	r4, r4
 8010e4c:	4ad4      	ldr	r2, [pc, #848]	; (80111a0 <Argus_Cal_GetGainValues+0x848>)
 8010e4e:	0223      	lsls	r3, r4, #8
 8010e50:	4293      	cmp	r3, r2
 8010e52:	f300 80d6 	bgt.w	8011002 <Argus_Cal_GetGainValues+0x6aa>
 8010e56:	48d3      	ldr	r0, [pc, #844]	; (80111a4 <Argus_Cal_GetGainValues+0x84c>)
 8010e58:	4ad3      	ldr	r2, [pc, #844]	; (80111a8 <Argus_Cal_GetGainValues+0x850>)
 8010e5a:	4418      	add	r0, r3
 8010e5c:	2800      	cmp	r0, #0
 8010e5e:	bfb8      	it	lt
 8010e60:	4618      	movlt	r0, r3
 8010e62:	4402      	add	r2, r0
 8010e64:	bfad      	iteet	ge
 8010e66:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8010e6a:	f04f 6380 	movlt.w	r3, #67108864	; 0x4000000
 8010e6e:	f04f 7480 	movlt.w	r4, #16777216	; 0x1000000
 8010e72:	f04f 5480 	movge.w	r4, #268435456	; 0x10000000
 8010e76:	2a00      	cmp	r2, #0
 8010e78:	bfb8      	it	lt
 8010e7a:	4602      	movlt	r2, r0
 8010e7c:	48cb      	ldr	r0, [pc, #812]	; (80111ac <Argus_Cal_GetGainValues+0x854>)
 8010e7e:	4410      	add	r0, r2
 8010e80:	bfb8      	it	lt
 8010e82:	4623      	movlt	r3, r4
 8010e84:	2800      	cmp	r0, #0
 8010e86:	bfa8      	it	ge
 8010e88:	4602      	movge	r2, r0
 8010e8a:	48c9      	ldr	r0, [pc, #804]	; (80111b0 <Argus_Cal_GetGainValues+0x858>)
 8010e8c:	4410      	add	r0, r2
 8010e8e:	bfa8      	it	ge
 8010e90:	005b      	lslge	r3, r3, #1
 8010e92:	2800      	cmp	r0, #0
 8010e94:	bfa8      	it	ge
 8010e96:	4602      	movge	r2, r0
 8010e98:	48c6      	ldr	r0, [pc, #792]	; (80111b4 <Argus_Cal_GetGainValues+0x85c>)
 8010e9a:	4410      	add	r0, r2
 8010e9c:	bfa8      	it	ge
 8010e9e:	eb03 0353 	addge.w	r3, r3, r3, lsr #1
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	bfa8      	it	ge
 8010ea6:	4602      	movge	r2, r0
 8010ea8:	f5a2 10f1 	sub.w	r0, r2, #1974272	; 0x1e2000
 8010eac:	f2a0 7007 	subw	r0, r0, #1799	; 0x707
 8010eb0:	bfa8      	it	ge
 8010eb2:	eb03 0393 	addge.w	r3, r3, r3, lsr #2
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	bfa8      	it	ge
 8010eba:	4602      	movge	r2, r0
 8010ebc:	f5a2 2078 	sub.w	r0, r2, #1015808	; 0xf8000
 8010ec0:	f5a0 60a3 	sub.w	r0, r0, #1304	; 0x518
 8010ec4:	bfa8      	it	ge
 8010ec6:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 8010eca:	2800      	cmp	r0, #0
 8010ecc:	bfa8      	it	ge
 8010ece:	4602      	movge	r2, r0
 8010ed0:	f5a2 20fc 	sub.w	r0, r2, #516096	; 0x7e000
 8010ed4:	f1a0 00a7 	sub.w	r0, r0, #167	; 0xa7
 8010ed8:	bfa8      	it	ge
 8010eda:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	bfa8      	it	ge
 8010ee2:	4602      	movge	r2, r0
 8010ee4:	f5a2 307e 	sub.w	r0, r2, #260096	; 0x3f800
 8010ee8:	f1a0 0015 	sub.w	r0, r0, #21
 8010eec:	bfa8      	it	ge
 8010eee:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	bfa8      	it	ge
 8010ef6:	4602      	movge	r2, r0
 8010ef8:	f5a2 30ff 	sub.w	r0, r2, #130560	; 0x1fe00
 8010efc:	f1a0 0003 	sub.w	r0, r0, #3
 8010f00:	bfa8      	it	ge
 8010f02:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 8010f06:	2800      	cmp	r0, #0
 8010f08:	bfa8      	it	ge
 8010f0a:	4602      	movge	r2, r0
 8010f0c:	f5a2 407f 	sub.w	r0, r2, #65280	; 0xff00
 8010f10:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 8010f14:	bfa8      	it	ge
 8010f16:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	bfa8      	it	ge
 8010f1e:	4602      	movge	r2, r0
 8010f20:	f5a2 40ff 	sub.w	r0, r2, #32640	; 0x7f80
 8010f24:	f1a0 0060 	sub.w	r0, r0, #96	; 0x60
 8010f28:	bfa8      	it	ge
 8010f2a:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	bfa8      	it	ge
 8010f32:	4602      	movge	r2, r0
 8010f34:	f5a2 507f 	sub.w	r0, r2, #16320	; 0x3fc0
 8010f38:	f1a0 0038 	sub.w	r0, r0, #56	; 0x38
 8010f3c:	bfa8      	it	ge
 8010f3e:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 8010f42:	2800      	cmp	r0, #0
 8010f44:	bfa8      	it	ge
 8010f46:	4602      	movge	r2, r0
 8010f48:	f5a2 50ff 	sub.w	r0, r2, #8160	; 0x1fe0
 8010f4c:	f1a0 001e 	sub.w	r0, r0, #30
 8010f50:	bfa8      	it	ge
 8010f52:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 8010f56:	2800      	cmp	r0, #0
 8010f58:	bfa4      	itt	ge
 8010f5a:	4602      	movge	r2, r0
 8010f5c:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 8010f60:	04d4      	lsls	r4, r2, #19
 8010f62:	bf48      	it	mi
 8010f64:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 8010f68:	0510      	lsls	r0, r2, #20
 8010f6a:	bf48      	it	mi
 8010f6c:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 8010f70:	0557      	lsls	r7, r2, #21
 8010f72:	bf48      	it	mi
 8010f74:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 8010f78:	0596      	lsls	r6, r2, #22
 8010f7a:	bf48      	it	mi
 8010f7c:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 8010f80:	05d5      	lsls	r5, r2, #23
 8010f82:	bf48      	it	mi
 8010f84:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 8010f88:	0614      	lsls	r4, r2, #24
 8010f8a:	bf48      	it	mi
 8010f8c:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 8010f90:	0650      	lsls	r0, r2, #25
 8010f92:	bf48      	it	mi
 8010f94:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 8010f98:	0697      	lsls	r7, r2, #26
 8010f9a:	bf48      	it	mi
 8010f9c:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 8010fa0:	06d6      	lsls	r6, r2, #27
 8010fa2:	bf48      	it	mi
 8010fa4:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 8010fa8:	0715      	lsls	r5, r2, #28
 8010faa:	bf48      	it	mi
 8010fac:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 8010fb0:	0754      	lsls	r4, r2, #29
 8010fb2:	bf48      	it	mi
 8010fb4:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 8010fb8:	0790      	lsls	r0, r2, #30
 8010fba:	bf48      	it	mi
 8010fbc:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 8010fc0:	07d7      	lsls	r7, r2, #31
 8010fc2:	bf48      	it	mi
 8010fc4:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 8010fc8:	1c5e      	adds	r6, r3, #1
 8010fca:	f040 81cb 	bne.w	8011364 <Argus_Cal_GetGainValues+0xa0c>
 8010fce:	4e7a      	ldr	r6, [pc, #488]	; (80111b8 <Argus_Cal_GetGainValues+0x860>)
 8010fd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010fd4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8010fd8:	2400      	movs	r4, #0
 8010fda:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
 8010fde:	e000      	b.n	8010fe2 <Argus_Cal_GetGainValues+0x68a>
 8010fe0:	b155      	cbz	r5, 8010ff8 <Argus_Cal_GetGainValues+0x6a0>
 8010fe2:	42aa      	cmp	r2, r5
 8010fe4:	bf9c      	itt	ls
 8010fe6:	1aad      	subls	r5, r5, r2
 8010fe8:	4304      	orrls	r4, r0
 8010fea:	0840      	lsrs	r0, r0, #1
 8010fec:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8010ff0:	d1f6      	bne.n	8010fe0 <Argus_Cal_GetGainValues+0x688>
 8010ff2:	42aa      	cmp	r2, r5
 8010ff4:	bf98      	it	ls
 8010ff6:	3401      	addls	r4, #1
 8010ff8:	2e00      	cmp	r6, #0
 8010ffa:	f280 80bc 	bge.w	8011176 <Argus_Cal_GetGainValues+0x81e>
 8010ffe:	4264      	negs	r4, r4
 8011000:	e0b9      	b.n	8011176 <Argus_Cal_GetGainValues+0x81e>
 8011002:	4a6e      	ldr	r2, [pc, #440]	; (80111bc <Argus_Cal_GetGainValues+0x864>)
 8011004:	01e4      	lsls	r4, r4, #7
 8011006:	4422      	add	r2, r4
 8011008:	2a00      	cmp	r2, #0
 801100a:	f2c0 81ca 	blt.w	80113a2 <Argus_Cal_GetGainValues+0xa4a>
 801100e:	2300      	movs	r3, #0
 8011010:	4866      	ldr	r0, [pc, #408]	; (80111ac <Argus_Cal_GetGainValues+0x854>)
 8011012:	4410      	add	r0, r2
 8011014:	2800      	cmp	r0, #0
 8011016:	bfa8      	it	ge
 8011018:	4602      	movge	r2, r0
 801101a:	4865      	ldr	r0, [pc, #404]	; (80111b0 <Argus_Cal_GetGainValues+0x858>)
 801101c:	4410      	add	r0, r2
 801101e:	bfa8      	it	ge
 8011020:	005b      	lslge	r3, r3, #1
 8011022:	2800      	cmp	r0, #0
 8011024:	bfa8      	it	ge
 8011026:	4602      	movge	r2, r0
 8011028:	4862      	ldr	r0, [pc, #392]	; (80111b4 <Argus_Cal_GetGainValues+0x85c>)
 801102a:	4410      	add	r0, r2
 801102c:	bfa8      	it	ge
 801102e:	eb03 0353 	addge.w	r3, r3, r3, lsr #1
 8011032:	2800      	cmp	r0, #0
 8011034:	bfa8      	it	ge
 8011036:	4602      	movge	r2, r0
 8011038:	f5a2 10f1 	sub.w	r0, r2, #1974272	; 0x1e2000
 801103c:	f2a0 7007 	subw	r0, r0, #1799	; 0x707
 8011040:	bfa8      	it	ge
 8011042:	eb03 0393 	addge.w	r3, r3, r3, lsr #2
 8011046:	2800      	cmp	r0, #0
 8011048:	bfa8      	it	ge
 801104a:	4602      	movge	r2, r0
 801104c:	f5a2 2078 	sub.w	r0, r2, #1015808	; 0xf8000
 8011050:	f5a0 60a3 	sub.w	r0, r0, #1304	; 0x518
 8011054:	bfa8      	it	ge
 8011056:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 801105a:	2800      	cmp	r0, #0
 801105c:	bfa8      	it	ge
 801105e:	4602      	movge	r2, r0
 8011060:	f5a2 20fc 	sub.w	r0, r2, #516096	; 0x7e000
 8011064:	f1a0 00a7 	sub.w	r0, r0, #167	; 0xa7
 8011068:	bfa8      	it	ge
 801106a:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 801106e:	2800      	cmp	r0, #0
 8011070:	bfa8      	it	ge
 8011072:	4602      	movge	r2, r0
 8011074:	f5a2 307e 	sub.w	r0, r2, #260096	; 0x3f800
 8011078:	f1a0 0015 	sub.w	r0, r0, #21
 801107c:	bfa8      	it	ge
 801107e:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 8011082:	2800      	cmp	r0, #0
 8011084:	bfa8      	it	ge
 8011086:	4602      	movge	r2, r0
 8011088:	f5a2 30ff 	sub.w	r0, r2, #130560	; 0x1fe00
 801108c:	f1a0 0003 	sub.w	r0, r0, #3
 8011090:	bfa8      	it	ge
 8011092:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 8011096:	2800      	cmp	r0, #0
 8011098:	bfa8      	it	ge
 801109a:	4602      	movge	r2, r0
 801109c:	f5a2 407f 	sub.w	r0, r2, #65280	; 0xff00
 80110a0:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 80110a4:	bfa8      	it	ge
 80110a6:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 80110aa:	2800      	cmp	r0, #0
 80110ac:	bfa8      	it	ge
 80110ae:	4602      	movge	r2, r0
 80110b0:	f5a2 40ff 	sub.w	r0, r2, #32640	; 0x7f80
 80110b4:	f1a0 0060 	sub.w	r0, r0, #96	; 0x60
 80110b8:	bfa8      	it	ge
 80110ba:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 80110be:	2800      	cmp	r0, #0
 80110c0:	bfa8      	it	ge
 80110c2:	4602      	movge	r2, r0
 80110c4:	f5a2 507f 	sub.w	r0, r2, #16320	; 0x3fc0
 80110c8:	f1a0 0038 	sub.w	r0, r0, #56	; 0x38
 80110cc:	bfa8      	it	ge
 80110ce:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 80110d2:	2800      	cmp	r0, #0
 80110d4:	bfa8      	it	ge
 80110d6:	4602      	movge	r2, r0
 80110d8:	f5a2 50ff 	sub.w	r0, r2, #8160	; 0x1fe0
 80110dc:	f1a0 001e 	sub.w	r0, r0, #30
 80110e0:	bfa8      	it	ge
 80110e2:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 80110e6:	2800      	cmp	r0, #0
 80110e8:	bfa4      	itt	ge
 80110ea:	4602      	movge	r2, r0
 80110ec:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 80110f0:	04d5      	lsls	r5, r2, #19
 80110f2:	bf48      	it	mi
 80110f4:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 80110f8:	0514      	lsls	r4, r2, #20
 80110fa:	bf48      	it	mi
 80110fc:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 8011100:	0550      	lsls	r0, r2, #21
 8011102:	bf48      	it	mi
 8011104:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 8011108:	0597      	lsls	r7, r2, #22
 801110a:	bf48      	it	mi
 801110c:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 8011110:	05d6      	lsls	r6, r2, #23
 8011112:	bf48      	it	mi
 8011114:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 8011118:	0615      	lsls	r5, r2, #24
 801111a:	bf48      	it	mi
 801111c:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 8011120:	0654      	lsls	r4, r2, #25
 8011122:	bf48      	it	mi
 8011124:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 8011128:	0690      	lsls	r0, r2, #26
 801112a:	bf48      	it	mi
 801112c:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 8011130:	06d7      	lsls	r7, r2, #27
 8011132:	bf48      	it	mi
 8011134:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 8011138:	0716      	lsls	r6, r2, #28
 801113a:	bf48      	it	mi
 801113c:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 8011140:	0755      	lsls	r5, r2, #29
 8011142:	bf48      	it	mi
 8011144:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 8011148:	0794      	lsls	r4, r2, #30
 801114a:	bf48      	it	mi
 801114c:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 8011150:	07d0      	lsls	r0, r2, #31
 8011152:	bf48      	it	mi
 8011154:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 8011158:	1c5a      	adds	r2, r3, #1
 801115a:	f000 814c 	beq.w	80113f6 <Argus_Cal_GetGainValues+0xa9e>
 801115e:	3301      	adds	r3, #1
 8011160:	085b      	lsrs	r3, r3, #1
 8011162:	f040 8138 	bne.w	80113d6 <Argus_Cal_GetGainValues+0xa7e>
 8011166:	461a      	mov	r2, r3
 8011168:	f503 4400 	add.w	r4, r3, #32768	; 0x8000
 801116c:	0c24      	lsrs	r4, r4, #16
 801116e:	4414      	add	r4, r2
 8011170:	e001      	b.n	8011176 <Argus_Cal_GetGainValues+0x81e>
 8011172:	3380      	adds	r3, #128	; 0x80
 8011174:	0a1c      	lsrs	r4, r3, #8
 8011176:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 801117a:	60cb      	str	r3, [r1, #12]
 801117c:	2c00      	cmp	r4, #0
 801117e:	f43f ad04 	beq.w	8010b8a <Argus_Cal_GetGainValues+0x232>
 8011182:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8011186:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801118a:	f5b5 0fc8 	cmp.w	r5, #6553600	; 0x640000
 801118e:	f484 07c8 	eor.w	r7, r4, #6553600	; 0x640000
 8011192:	f6ff ac81 	blt.w	8010a98 <Argus_Cal_GetGainValues+0x140>
 8011196:	462e      	mov	r6, r5
 8011198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801119c:	e60b      	b.n	8010db6 <Argus_Cal_GetGainValues+0x45e>
 801119e:	bf00      	nop
 80111a0:	058b90be 	.word	0x058b90be
 80111a4:	fd3a37a0 	.word	0xfd3a37a0
 80111a8:	fe9d1bd0 	.word	0xfe9d1bd0
 80111ac:	ff4e8de8 	.word	0xff4e8de8
 80111b0:	ff983370 	.word	0xff983370
 80111b4:	ffc6e010 	.word	0xffc6e010
 80111b8:	80800000 	.word	0x80800000
 80111bc:	fa746f40 	.word	0xfa746f40
 80111c0:	4bbb      	ldr	r3, [pc, #748]	; (80114b0 <Argus_Cal_GetGainValues+0xb58>)
 80111c2:	4abc      	ldr	r2, [pc, #752]	; (80114b4 <Argus_Cal_GetGainValues+0xb5c>)
 80111c4:	01e4      	lsls	r4, r4, #7
 80111c6:	4423      	add	r3, r4
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	bfa8      	it	ge
 80111cc:	461c      	movge	r4, r3
 80111ce:	4422      	add	r2, r4
 80111d0:	bfad      	iteet	ge
 80111d2:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 80111d6:	f04f 6380 	movlt.w	r3, #67108864	; 0x4000000
 80111da:	f04f 7080 	movlt.w	r0, #16777216	; 0x1000000
 80111de:	f04f 5080 	movge.w	r0, #268435456	; 0x10000000
 80111e2:	2a00      	cmp	r2, #0
 80111e4:	bfb8      	it	lt
 80111e6:	4603      	movlt	r3, r0
 80111e8:	48b3      	ldr	r0, [pc, #716]	; (80114b8 <Argus_Cal_GetGainValues+0xb60>)
 80111ea:	bfb8      	it	lt
 80111ec:	4622      	movlt	r2, r4
 80111ee:	4410      	add	r0, r2
 80111f0:	2800      	cmp	r0, #0
 80111f2:	bfa8      	it	ge
 80111f4:	4602      	movge	r2, r0
 80111f6:	48b1      	ldr	r0, [pc, #708]	; (80114bc <Argus_Cal_GetGainValues+0xb64>)
 80111f8:	4410      	add	r0, r2
 80111fa:	bfa8      	it	ge
 80111fc:	005b      	lslge	r3, r3, #1
 80111fe:	2800      	cmp	r0, #0
 8011200:	bfa8      	it	ge
 8011202:	4602      	movge	r2, r0
 8011204:	48ae      	ldr	r0, [pc, #696]	; (80114c0 <Argus_Cal_GetGainValues+0xb68>)
 8011206:	4410      	add	r0, r2
 8011208:	bfa8      	it	ge
 801120a:	eb03 0353 	addge.w	r3, r3, r3, lsr #1
 801120e:	2800      	cmp	r0, #0
 8011210:	bfa8      	it	ge
 8011212:	4602      	movge	r2, r0
 8011214:	f5a2 10f1 	sub.w	r0, r2, #1974272	; 0x1e2000
 8011218:	f2a0 7007 	subw	r0, r0, #1799	; 0x707
 801121c:	bfa8      	it	ge
 801121e:	eb03 0393 	addge.w	r3, r3, r3, lsr #2
 8011222:	2800      	cmp	r0, #0
 8011224:	bfa8      	it	ge
 8011226:	4602      	movge	r2, r0
 8011228:	f5a2 2078 	sub.w	r0, r2, #1015808	; 0xf8000
 801122c:	f5a0 60a3 	sub.w	r0, r0, #1304	; 0x518
 8011230:	bfa8      	it	ge
 8011232:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 8011236:	2800      	cmp	r0, #0
 8011238:	bfa8      	it	ge
 801123a:	4602      	movge	r2, r0
 801123c:	f5a2 20fc 	sub.w	r0, r2, #516096	; 0x7e000
 8011240:	f1a0 00a7 	sub.w	r0, r0, #167	; 0xa7
 8011244:	bfa8      	it	ge
 8011246:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 801124a:	2800      	cmp	r0, #0
 801124c:	bfa8      	it	ge
 801124e:	4602      	movge	r2, r0
 8011250:	f5a2 307e 	sub.w	r0, r2, #260096	; 0x3f800
 8011254:	f1a0 0015 	sub.w	r0, r0, #21
 8011258:	bfa8      	it	ge
 801125a:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 801125e:	2800      	cmp	r0, #0
 8011260:	bfa8      	it	ge
 8011262:	4602      	movge	r2, r0
 8011264:	f5a2 30ff 	sub.w	r0, r2, #130560	; 0x1fe00
 8011268:	f1a0 0003 	sub.w	r0, r0, #3
 801126c:	bfa8      	it	ge
 801126e:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 8011272:	2800      	cmp	r0, #0
 8011274:	bfa8      	it	ge
 8011276:	4602      	movge	r2, r0
 8011278:	f5a2 407f 	sub.w	r0, r2, #65280	; 0xff00
 801127c:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 8011280:	bfa8      	it	ge
 8011282:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 8011286:	2800      	cmp	r0, #0
 8011288:	bfa8      	it	ge
 801128a:	4602      	movge	r2, r0
 801128c:	f5a2 40ff 	sub.w	r0, r2, #32640	; 0x7f80
 8011290:	f1a0 0060 	sub.w	r0, r0, #96	; 0x60
 8011294:	bfa8      	it	ge
 8011296:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 801129a:	2800      	cmp	r0, #0
 801129c:	bfa8      	it	ge
 801129e:	4602      	movge	r2, r0
 80112a0:	f5a2 507f 	sub.w	r0, r2, #16320	; 0x3fc0
 80112a4:	f1a0 0038 	sub.w	r0, r0, #56	; 0x38
 80112a8:	bfa8      	it	ge
 80112aa:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 80112ae:	2800      	cmp	r0, #0
 80112b0:	bfa8      	it	ge
 80112b2:	4602      	movge	r2, r0
 80112b4:	f5a2 50ff 	sub.w	r0, r2, #8160	; 0x1fe0
 80112b8:	f1a0 001e 	sub.w	r0, r0, #30
 80112bc:	bfa8      	it	ge
 80112be:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 80112c2:	2800      	cmp	r0, #0
 80112c4:	bfa4      	itt	ge
 80112c6:	4602      	movge	r2, r0
 80112c8:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 80112cc:	04d7      	lsls	r7, r2, #19
 80112ce:	bf48      	it	mi
 80112d0:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 80112d4:	0516      	lsls	r6, r2, #20
 80112d6:	bf48      	it	mi
 80112d8:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 80112dc:	0555      	lsls	r5, r2, #21
 80112de:	bf48      	it	mi
 80112e0:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 80112e4:	0594      	lsls	r4, r2, #22
 80112e6:	bf48      	it	mi
 80112e8:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 80112ec:	05d0      	lsls	r0, r2, #23
 80112ee:	bf48      	it	mi
 80112f0:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 80112f4:	0617      	lsls	r7, r2, #24
 80112f6:	bf48      	it	mi
 80112f8:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 80112fc:	0656      	lsls	r6, r2, #25
 80112fe:	bf48      	it	mi
 8011300:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 8011304:	0695      	lsls	r5, r2, #26
 8011306:	bf48      	it	mi
 8011308:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 801130c:	06d4      	lsls	r4, r2, #27
 801130e:	bf48      	it	mi
 8011310:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 8011314:	0710      	lsls	r0, r2, #28
 8011316:	bf48      	it	mi
 8011318:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 801131c:	0757      	lsls	r7, r2, #29
 801131e:	bf48      	it	mi
 8011320:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 8011324:	0796      	lsls	r6, r2, #30
 8011326:	bf48      	it	mi
 8011328:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 801132c:	07d5      	lsls	r5, r2, #31
 801132e:	bf48      	it	mi
 8011330:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 8011334:	0c1a      	lsrs	r2, r3, #16
 8011336:	b29b      	uxth	r3, r3
 8011338:	fb03 f003 	mul.w	r0, r3, r3
 801133c:	fb03 f302 	mul.w	r3, r3, r2
 8011340:	eb03 4410 	add.w	r4, r3, r0, lsr #16
 8011344:	fa13 f384 	uxtah	r3, r3, r4
 8011348:	041d      	lsls	r5, r3, #16
 801134a:	fb02 f202 	mul.w	r2, r2, r2
 801134e:	fa15 f080 	uxtah	r0, r5, r0
 8011352:	eb02 4414 	add.w	r4, r2, r4, lsr #16
 8011356:	2800      	cmp	r0, #0
 8011358:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801135c:	f6bf af0b 	bge.w	8011176 <Argus_Cal_GetGainValues+0x81e>
 8011360:	3401      	adds	r4, #1
 8011362:	e708      	b.n	8011176 <Argus_Cal_GetGainValues+0x81e>
 8011364:	3301      	adds	r3, #1
 8011366:	085a      	lsrs	r2, r3, #1
 8011368:	f43f ac0c 	beq.w	8010b84 <Argus_Cal_GetGainValues+0x22c>
 801136c:	4b55      	ldr	r3, [pc, #340]	; (80114c4 <Argus_Cal_GetGainValues+0xb6c>)
 801136e:	429a      	cmp	r2, r3
 8011370:	f482 0600 	eor.w	r6, r2, #8388608	; 0x800000
 8011374:	f73f ae2e 	bgt.w	8010fd4 <Argus_Cal_GetGainValues+0x67c>
 8011378:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801137c:	0052      	lsls	r2, r2, #1
 801137e:	429a      	cmp	r2, r3
 8011380:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8011384:	d9fa      	bls.n	801137c <Argus_Cal_GetGainValues+0xa24>
 8011386:	2800      	cmp	r0, #0
 8011388:	f47f ae26 	bne.w	8010fd8 <Argus_Cal_GetGainValues+0x680>
 801138c:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8011390:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8011394:	60cb      	str	r3, [r1, #12]
 8011396:	4625      	mov	r5, r4
 8011398:	4626      	mov	r6, r4
 801139a:	4f4b      	ldr	r7, [pc, #300]	; (80114c8 <Argus_Cal_GetGainValues+0xb70>)
 801139c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80113a0:	e509      	b.n	8010db6 <Argus_Cal_GetGainValues+0x45e>
 80113a2:	4843      	ldr	r0, [pc, #268]	; (80114b0 <Argus_Cal_GetGainValues+0xb58>)
 80113a4:	4420      	add	r0, r4
 80113a6:	2800      	cmp	r0, #0
 80113a8:	db70      	blt.n	801148c <Argus_Cal_GetGainValues+0xb34>
 80113aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80113ae:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 80113b2:	4a40      	ldr	r2, [pc, #256]	; (80114b4 <Argus_Cal_GetGainValues+0xb5c>)
 80113b4:	4402      	add	r2, r0
 80113b6:	2a00      	cmp	r2, #0
 80113b8:	f6bf ae2a 	bge.w	8011010 <Argus_Cal_GetGainValues+0x6b8>
 80113bc:	4623      	mov	r3, r4
 80113be:	4602      	mov	r2, r0
 80113c0:	e626      	b.n	8011010 <Argus_Cal_GetGainValues+0x6b8>
 80113c2:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 80113c6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80113ca:	60cb      	str	r3, [r1, #12]
 80113cc:	4625      	mov	r5, r4
 80113ce:	f44f 07ca 	mov.w	r7, #6619136	; 0x650000
 80113d2:	f7ff bb61 	b.w	8010a98 <Argus_Cal_GetGainValues+0x140>
 80113d6:	483b      	ldr	r0, [pc, #236]	; (80114c4 <Argus_Cal_GetGainValues+0xb6c>)
 80113d8:	4283      	cmp	r3, r0
 80113da:	f483 0500 	eor.w	r5, r3, #8388608	; 0x800000
 80113de:	dc0d      	bgt.n	80113fc <Argus_Cal_GetGainValues+0xaa4>
 80113e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80113e4:	005b      	lsls	r3, r3, #1
 80113e6:	4283      	cmp	r3, r0
 80113e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80113ec:	d9fa      	bls.n	80113e4 <Argus_Cal_GetGainValues+0xa8c>
 80113ee:	b93a      	cbnz	r2, 8011400 <Argus_Cal_GetGainValues+0xaa8>
 80113f0:	4a36      	ldr	r2, [pc, #216]	; (80114cc <Argus_Cal_GetGainValues+0xb74>)
 80113f2:	2301      	movs	r3, #1
 80113f4:	e6b8      	b.n	8011168 <Argus_Cal_GetGainValues+0x810>
 80113f6:	4d36      	ldr	r5, [pc, #216]	; (80114d0 <Argus_Cal_GetGainValues+0xb78>)
 80113f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80113fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011400:	2400      	movs	r4, #0
 8011402:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8011406:	e000      	b.n	801140a <Argus_Cal_GetGainValues+0xab2>
 8011408:	b150      	cbz	r0, 8011420 <Argus_Cal_GetGainValues+0xac8>
 801140a:	4298      	cmp	r0, r3
 801140c:	bf24      	itt	cs
 801140e:	1ac0      	subcs	r0, r0, r3
 8011410:	4314      	orrcs	r4, r2
 8011412:	0852      	lsrs	r2, r2, #1
 8011414:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8011418:	d1f6      	bne.n	8011408 <Argus_Cal_GetGainValues+0xab0>
 801141a:	4283      	cmp	r3, r0
 801141c:	bf98      	it	ls
 801141e:	3401      	addls	r4, #1
 8011420:	2d00      	cmp	r5, #0
 8011422:	bfb8      	it	lt
 8011424:	4264      	neglt	r4, r4
 8011426:	0c22      	lsrs	r2, r4, #16
 8011428:	b2a4      	uxth	r4, r4
 801142a:	fb04 f302 	mul.w	r3, r4, r2
 801142e:	fb04 f404 	mul.w	r4, r4, r4
 8011432:	eb03 4014 	add.w	r0, r3, r4, lsr #16
 8011436:	fb02 f202 	mul.w	r2, r2, r2
 801143a:	fa13 f380 	uxtah	r3, r3, r0
 801143e:	b2a4      	uxth	r4, r4
 8011440:	eb02 4210 	add.w	r2, r2, r0, lsr #16
 8011444:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011448:	eb04 4303 	add.w	r3, r4, r3, lsl #16
 801144c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8011450:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8011454:	bf28      	it	cs
 8011456:	f44f 3480 	movcs.w	r4, #65536	; 0x10000
 801145a:	f4ff ae85 	bcc.w	8011168 <Argus_Cal_GetGainValues+0x810>
 801145e:	4414      	add	r4, r2
 8011460:	e689      	b.n	8011176 <Argus_Cal_GetGainValues+0x81e>
 8011462:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011466:	4414      	add	r4, r2
 8011468:	604a      	str	r2, [r1, #4]
 801146a:	f7ff bba3 	b.w	8010bb4 <Argus_Cal_GetGainValues+0x25c>
 801146e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011472:	4618      	mov	r0, r3
 8011474:	f7ff bb22 	b.w	8010abc <Argus_Cal_GetGainValues+0x164>
 8011478:	462e      	mov	r6, r5
 801147a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801147e:	f7ff bb30 	b.w	8010ae2 <Argus_Cal_GetGainValues+0x18a>
 8011482:	462e      	mov	r6, r5
 8011484:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8011488:	f7ff bba2 	b.w	8010bd0 <Argus_Cal_GetGainValues+0x278>
 801148c:	4620      	mov	r0, r4
 801148e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8011492:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 8011496:	e78c      	b.n	80113b2 <Argus_Cal_GetGainValues+0xa5a>
 8011498:	4a0e      	ldr	r2, [pc, #56]	; (80114d4 <Argus_Cal_GetGainValues+0xb7c>)
 801149a:	f7ff ba6a 	b.w	8010972 <Argus_Cal_GetGainValues+0x1a>
 801149e:	4c0e      	ldr	r4, [pc, #56]	; (80114d8 <Argus_Cal_GetGainValues+0xb80>)
 80114a0:	4f0e      	ldr	r7, [pc, #56]	; (80114dc <Argus_Cal_GetGainValues+0xb84>)
 80114a2:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 80114a6:	4625      	mov	r5, r4
 80114a8:	60cb      	str	r3, [r1, #12]
 80114aa:	f7ff baf5 	b.w	8010a98 <Argus_Cal_GetGainValues+0x140>
 80114ae:	bf00      	nop
 80114b0:	fd3a37a0 	.word	0xfd3a37a0
 80114b4:	fe9d1bd0 	.word	0xfe9d1bd0
 80114b8:	ff4e8de8 	.word	0xff4e8de8
 80114bc:	ff983370 	.word	0xff983370
 80114c0:	ffc6e010 	.word	0xffc6e010
 80114c4:	007fffff 	.word	0x007fffff
 80114c8:	7f9bffff 	.word	0x7f9bffff
 80114cc:	ffff0000 	.word	0xffff0000
 80114d0:	80800000 	.word	0x80800000
 80114d4:	f9c2fd29 	.word	0xf9c2fd29
 80114d8:	0002b7e1 	.word	0x0002b7e1
 80114dc:	0066b7e1 	.word	0x0066b7e1

080114e0 <Argus_Cal_PrepareCal>:
 80114e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114e4:	4606      	mov	r6, r0
 80114e6:	b089      	sub	sp, #36	; 0x24
 80114e8:	460c      	mov	r4, r1
 80114ea:	a802      	add	r0, sp, #8
 80114ec:	f506 71d0 	add.w	r1, r6, #416	; 0x1a0
 80114f0:	f004 f95c 	bl	80157ac <EEPROM_Decode>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	f2c0 827d 	blt.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 80114fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80114fc:	07d8      	lsls	r0, r3, #31
 80114fe:	d405      	bmi.n	801150c <Argus_Cal_PrepareCal+0x2c>
 8011500:	f99d 1016 	ldrsb.w	r1, [sp, #22]
 8011504:	8a22      	ldrh	r2, [r4, #16]
 8011506:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 801150a:	87a2      	strh	r2, [r4, #60]	; 0x3c
 801150c:	0799      	lsls	r1, r3, #30
 801150e:	d405      	bmi.n	801151c <Argus_Cal_PrepareCal+0x3c>
 8011510:	f99d 1017 	ldrsb.w	r1, [sp, #23]
 8011514:	8a62      	ldrh	r2, [r4, #18]
 8011516:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801151a:	87e2      	strh	r2, [r4, #62]	; 0x3e
 801151c:	075a      	lsls	r2, r3, #29
 801151e:	d405      	bmi.n	801152c <Argus_Cal_PrepareCal+0x4c>
 8011520:	7b62      	ldrb	r2, [r4, #13]
 8011522:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8011526:	440a      	add	r2, r1
 8011528:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 801152c:	071f      	lsls	r7, r3, #28
 801152e:	d405      	bmi.n	801153c <Argus_Cal_PrepareCal+0x5c>
 8011530:	7ba2      	ldrb	r2, [r4, #14]
 8011532:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8011536:	440a      	add	r2, r1
 8011538:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 801153c:	06d8      	lsls	r0, r3, #27
 801153e:	d40b      	bmi.n	8011558 <Argus_Cal_PrepareCal+0x78>
 8011540:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8011544:	7da2      	ldrb	r2, [r4, #22]
 8011546:	f89d 0013 	ldrb.w	r0, [sp, #19]
 801154a:	2901      	cmp	r1, #1
 801154c:	bf0c      	ite	eq
 801154e:	eb02 0240 	addeq.w	r2, r2, r0, lsl #1
 8011552:	1812      	addne	r2, r2, r0
 8011554:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8011558:	0699      	lsls	r1, r3, #26
 801155a:	d405      	bmi.n	8011568 <Argus_Cal_PrepareCal+0x88>
 801155c:	7de2      	ldrb	r2, [r4, #23]
 801155e:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8011562:	440a      	add	r2, r1
 8011564:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011568:	065a      	lsls	r2, r3, #25
 801156a:	d407      	bmi.n	801157c <Argus_Cal_PrepareCal+0x9c>
 801156c:	f99d 2014 	ldrsb.w	r2, [sp, #20]
 8011570:	69a1      	ldr	r1, [r4, #24]
 8011572:	f241 0062 	movw	r0, #4194	; 0x1062
 8011576:	fb00 1202 	mla	r2, r0, r2, r1
 801157a:	6462      	str	r2, [r4, #68]	; 0x44
 801157c:	055f      	lsls	r7, r3, #21
 801157e:	d407      	bmi.n	8011590 <Argus_Cal_PrepareCal+0xb0>
 8011580:	f99d 2018 	ldrsb.w	r2, [sp, #24]
 8011584:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011586:	f241 0062 	movw	r0, #4194	; 0x1062
 801158a:	fb00 1202 	mla	r2, r0, r2, r1
 801158e:	64a2      	str	r2, [r4, #72]	; 0x48
 8011590:	0418      	lsls	r0, r3, #16
 8011592:	d406      	bmi.n	80115a2 <Argus_Cal_PrepareCal+0xc2>
 8011594:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8011598:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801159a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801159e:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 80115a2:	0519      	lsls	r1, r3, #20
 80115a4:	bf5c      	itt	pl
 80115a6:	f89d 2009 	ldrbpl.w	r2, [sp, #9]
 80115aa:	f884 2050 	strbpl.w	r2, [r4, #80]	; 0x50
 80115ae:	04da      	lsls	r2, r3, #19
 80115b0:	bf5c      	itt	pl
 80115b2:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 80115b6:	f884 2051 	strbpl.w	r2, [r4, #81]	; 0x51
 80115ba:	049f      	lsls	r7, r3, #18
 80115bc:	d40b      	bmi.n	80115d6 <Argus_Cal_PrepareCal+0xf6>
 80115be:	f99d 200b 	ldrsb.w	r2, [sp, #11]
 80115c2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80115c6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80115ca:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
 80115ce:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 80115d2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	db07      	blt.n	80115ea <Argus_Cal_PrepareCal+0x10a>
 80115da:	f99d 200f 	ldrsb.w	r2, [sp, #15]
 80115de:	6821      	ldr	r1, [r4, #0]
 80115e0:	f241 0062 	movw	r0, #4194	; 0x1062
 80115e4:	fb00 1202 	mla	r2, r0, r2, r1
 80115e8:	64e2      	str	r2, [r4, #76]	; 0x4c
 80115ea:	03d8      	lsls	r0, r3, #15
 80115ec:	bf5c      	itt	pl
 80115ee:	f89d 2010 	ldrbpl.w	r2, [sp, #16]
 80115f2:	f884 2056 	strbpl.w	r2, [r4, #86]	; 0x56
 80115f6:	f413 1280 	ands.w	r2, r3, #1048576	; 0x100000
 80115fa:	bf08      	it	eq
 80115fc:	f884 2057 	strbeq.w	r2, [r4, #87]	; 0x57
 8011600:	0459      	lsls	r1, r3, #17
 8011602:	f140 81fa 	bpl.w	80119fa <Argus_Cal_PrepareCal+0x51a>
 8011606:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 801160a:	039a      	lsls	r2, r3, #14
 801160c:	d40d      	bmi.n	801162a <Argus_Cal_PrepareCal+0x14a>
 801160e:	f8bd 501a 	ldrh.w	r5, [sp, #26]
 8011612:	8922      	ldrh	r2, [r4, #8]
 8011614:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8011618:	8963      	ldrh	r3, [r4, #10]
 801161a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801161e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8011622:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8011626:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801162a:	2907      	cmp	r1, #7
 801162c:	f201 8046 	bhi.w	80126bc <Argus_Cal_PrepareCal+0x11dc>
 8011630:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8011634:	2903      	cmp	r1, #3
 8011636:	f201 8065 	bhi.w	8012704 <Argus_Cal_PrepareCal+0x1224>
 801163a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801163e:	2b00      	cmp	r3, #0
 8011640:	f001 8067 	beq.w	8012712 <Argus_Cal_PrepareCal+0x1232>
 8011644:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011648:	2b00      	cmp	r3, #0
 801164a:	f001 8069 	beq.w	8012720 <Argus_Cal_PrepareCal+0x1240>
 801164e:	7be1      	ldrb	r1, [r4, #15]
 8011650:	293f      	cmp	r1, #63	; 0x3f
 8011652:	f201 806c 	bhi.w	801272e <Argus_Cal_PrepareCal+0x124e>
 8011656:	7ba2      	ldrb	r2, [r4, #14]
 8011658:	2a3f      	cmp	r2, #63	; 0x3f
 801165a:	f201 806f 	bhi.w	801273c <Argus_Cal_PrepareCal+0x125c>
 801165e:	7b61      	ldrb	r1, [r4, #13]
 8011660:	428a      	cmp	r2, r1
 8011662:	f241 8032 	bls.w	80126ca <Argus_Cal_PrepareCal+0x11ea>
 8011666:	8a21      	ldrh	r1, [r4, #16]
 8011668:	040b      	lsls	r3, r1, #16
 801166a:	f141 8010 	bpl.w	801268e <Argus_Cal_PrepareCal+0x11ae>
 801166e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8011672:	2a3f      	cmp	r2, #63	; 0x3f
 8011674:	f201 8030 	bhi.w	80126d8 <Argus_Cal_PrepareCal+0x11f8>
 8011678:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 801167c:	428a      	cmp	r2, r1
 801167e:	f241 8033 	bls.w	80126e8 <Argus_Cal_PrepareCal+0x1208>
 8011682:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8011684:	040f      	lsls	r7, r1, #16
 8011686:	f141 800a 	bpl.w	801269e <Argus_Cal_PrepareCal+0x11be>
 801168a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801168c:	2b00      	cmp	r3, #0
 801168e:	f001 8032 	beq.w	80126f6 <Argus_Cal_PrepareCal+0x1216>
 8011692:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011694:	2b00      	cmp	r3, #0
 8011696:	f001 800a 	beq.w	80126ae <Argus_Cal_PrepareCal+0x11ce>
 801169a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801169e:	b123      	cbz	r3, 80116aa <Argus_Cal_PrepareCal+0x1ca>
 80116a0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	f001 8051 	beq.w	801274c <Argus_Cal_PrepareCal+0x126c>
 80116aa:	f44f 724f 	mov.w	r2, #828	; 0x33c
 80116ae:	4621      	mov	r1, r4
 80116b0:	f506 70d8 	add.w	r0, r6, #432	; 0x1b0
 80116b4:	f006 f829 	bl	801770a <memcpy>
 80116b8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80116bc:	2b00      	cmp	r3, #0
 80116be:	f040 81b5 	bne.w	8011a2c <Argus_Cal_PrepareCal+0x54c>
 80116c2:	f04f 3340 	mov.w	r3, #1077952576	; 0x40404040
 80116c6:	e9c6 3304 	strd	r3, r3, [r6, #16]
 80116ca:	e9c6 3306 	strd	r3, r3, [r6, #24]
 80116ce:	e9c6 3308 	strd	r3, r3, [r6, #32]
 80116d2:	e9c6 330a 	strd	r3, r3, [r6, #40]	; 0x28
 80116d6:	4630      	mov	r0, r6
 80116d8:	a902      	add	r1, sp, #8
 80116da:	f7ff f93d 	bl	8010958 <Argus_Cal_GetGainValues>
 80116de:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80116e2:	1a1b      	subs	r3, r3, r0
 80116e4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80116e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116ec:	f000 8738 	beq.w	8012560 <Argus_Cal_PrepareCal+0x1080>
 80116f0:	4acc      	ldr	r2, [pc, #816]	; (8011a24 <Argus_Cal_PrepareCal+0x544>)
 80116f2:	4293      	cmp	r3, r2
 80116f4:	f000 87b6 	beq.w	8012664 <Argus_Cal_PrepareCal+0x1184>
 80116f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80116fc:	f240 868c 	bls.w	8012418 <Argus_Cal_PrepareCal+0xf38>
 8011700:	1c5f      	adds	r7, r3, #1
 8011702:	f000 875b 	beq.w	80125bc <Argus_Cal_PrepareCal+0x10dc>
 8011706:	3301      	adds	r3, #1
 8011708:	4ac7      	ldr	r2, [pc, #796]	; (8011a28 <Argus_Cal_PrepareCal+0x548>)
 801170a:	085b      	lsrs	r3, r3, #1
 801170c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011710:	f080 86a6 	bcs.w	8012460 <Argus_Cal_PrepareCal+0xf80>
 8011714:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 8011718:	005c      	lsls	r4, r3, #1
 801171a:	f502 029d 	add.w	r2, r2, #5144576	; 0x4e8000
 801171e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011722:	f602 52e8 	addw	r2, r2, #3560	; 0xde8
 8011726:	1919      	adds	r1, r3, r4
 8011728:	2900      	cmp	r1, #0
 801172a:	bfa5      	ittet	ge
 801172c:	f5a2 02cf 	subge.w	r2, r2, #6782976	; 0x678000
 8011730:	f5a2 4299 	subge.w	r2, r2, #19584	; 0x4c80
 8011734:	4621      	movlt	r1, r4
 8011736:	3a10      	subge	r2, #16
 8011738:	eb11 0491 	adds.w	r4, r1, r1, lsr #2
 801173c:	bf5b      	ittet	pl
 801173e:	f5a2 1264 	subpl.w	r2, r2, #3735552	; 0x390000
 8011742:	f5a2 52ff 	subpl.w	r2, r2, #8160	; 0x1fe0
 8011746:	460c      	movmi	r4, r1
 8011748:	3a10      	subpl	r2, #16
 801174a:	eb14 03d4 	adds.w	r3, r4, r4, lsr #3
 801174e:	f100 877b 	bmi.w	8012648 <Argus_Cal_PrepareCal+0x1168>
 8011752:	f5a2 12f1 	sub.w	r2, r2, #1974272	; 0x1e2000
 8011756:	f2a2 7207 	subw	r2, r2, #1799	; 0x707
 801175a:	eb13 1113 	adds.w	r1, r3, r3, lsr #4
 801175e:	d404      	bmi.n	801176a <Argus_Cal_PrepareCal+0x28a>
 8011760:	f5a2 2278 	sub.w	r2, r2, #1015808	; 0xf8000
 8011764:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 8011768:	460b      	mov	r3, r1
 801176a:	eb13 1153 	adds.w	r1, r3, r3, lsr #5
 801176e:	d403      	bmi.n	8011778 <Argus_Cal_PrepareCal+0x298>
 8011770:	f5a2 22fc 	sub.w	r2, r2, #516096	; 0x7e000
 8011774:	3aa7      	subs	r2, #167	; 0xa7
 8011776:	460b      	mov	r3, r1
 8011778:	eb13 1193 	adds.w	r1, r3, r3, lsr #6
 801177c:	d403      	bmi.n	8011786 <Argus_Cal_PrepareCal+0x2a6>
 801177e:	f5a2 327e 	sub.w	r2, r2, #260096	; 0x3f800
 8011782:	3a15      	subs	r2, #21
 8011784:	460b      	mov	r3, r1
 8011786:	eb13 11d3 	adds.w	r1, r3, r3, lsr #7
 801178a:	d403      	bmi.n	8011794 <Argus_Cal_PrepareCal+0x2b4>
 801178c:	f5a2 32ff 	sub.w	r2, r2, #130560	; 0x1fe00
 8011790:	3a03      	subs	r2, #3
 8011792:	460b      	mov	r3, r1
 8011794:	eb13 2113 	adds.w	r1, r3, r3, lsr #8
 8011798:	d403      	bmi.n	80117a2 <Argus_Cal_PrepareCal+0x2c2>
 801179a:	f5a2 427f 	sub.w	r2, r2, #65280	; 0xff00
 801179e:	3a80      	subs	r2, #128	; 0x80
 80117a0:	460b      	mov	r3, r1
 80117a2:	eb13 2153 	adds.w	r1, r3, r3, lsr #9
 80117a6:	d403      	bmi.n	80117b0 <Argus_Cal_PrepareCal+0x2d0>
 80117a8:	f5a2 42ff 	sub.w	r2, r2, #32640	; 0x7f80
 80117ac:	3a60      	subs	r2, #96	; 0x60
 80117ae:	460b      	mov	r3, r1
 80117b0:	eb13 2193 	adds.w	r1, r3, r3, lsr #10
 80117b4:	d403      	bmi.n	80117be <Argus_Cal_PrepareCal+0x2de>
 80117b6:	f5a2 527f 	sub.w	r2, r2, #16320	; 0x3fc0
 80117ba:	3a38      	subs	r2, #56	; 0x38
 80117bc:	460b      	mov	r3, r1
 80117be:	eb13 21d3 	adds.w	r1, r3, r3, lsr #11
 80117c2:	d403      	bmi.n	80117cc <Argus_Cal_PrepareCal+0x2ec>
 80117c4:	f5a2 52ff 	sub.w	r2, r2, #8160	; 0x1fe0
 80117c8:	3a1e      	subs	r2, #30
 80117ca:	460b      	mov	r3, r1
 80117cc:	f1c3 4300 	rsb	r3, r3, #2147483648	; 0x80000000
 80117d0:	09db      	lsrs	r3, r3, #7
 80117d2:	1ad1      	subs	r1, r2, r3
 80117d4:	f100 8650 	bmi.w	8012478 <Argus_Cal_PrepareCal+0xf98>
 80117d8:	3180      	adds	r1, #128	; 0x80
 80117da:	0a09      	lsrs	r1, r1, #8
 80117dc:	460c      	mov	r4, r1
 80117de:	9a04      	ldr	r2, [sp, #16]
 80117e0:	1a12      	subs	r2, r2, r0
 80117e2:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 80117e6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80117ea:	f000 86bd 	beq.w	8012568 <Argus_Cal_PrepareCal+0x1088>
 80117ee:	4b8d      	ldr	r3, [pc, #564]	; (8011a24 <Argus_Cal_PrepareCal+0x544>)
 80117f0:	429a      	cmp	r2, r3
 80117f2:	f000 873c 	beq.w	801266e <Argus_Cal_PrepareCal+0x118e>
 80117f6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80117fa:	f240 85d2 	bls.w	80123a2 <Argus_Cal_PrepareCal+0xec2>
 80117fe:	1c55      	adds	r5, r2, #1
 8011800:	f000 86e1 	beq.w	80125c6 <Argus_Cal_PrepareCal+0x10e6>
 8011804:	3201      	adds	r2, #1
 8011806:	4b88      	ldr	r3, [pc, #544]	; (8011a28 <Argus_Cal_PrepareCal+0x548>)
 8011808:	0852      	lsrs	r2, r2, #1
 801180a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801180e:	f080 85ec 	bcs.w	80123ea <Argus_Cal_PrepareCal+0xf0a>
 8011812:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8011816:	0057      	lsls	r7, r2, #1
 8011818:	f503 039d 	add.w	r3, r3, #5144576	; 0x4e8000
 801181c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8011820:	f603 53e8 	addw	r3, r3, #3560	; 0xde8
 8011824:	19d5      	adds	r5, r2, r7
 8011826:	2d00      	cmp	r5, #0
 8011828:	bfa5      	ittet	ge
 801182a:	f5a3 03cf 	subge.w	r3, r3, #6782976	; 0x678000
 801182e:	f5a3 4399 	subge.w	r3, r3, #19584	; 0x4c80
 8011832:	463d      	movlt	r5, r7
 8011834:	3b10      	subge	r3, #16
 8011836:	eb15 0795 	adds.w	r7, r5, r5, lsr #2
 801183a:	bf5b      	ittet	pl
 801183c:	f5a3 1364 	subpl.w	r3, r3, #3735552	; 0x390000
 8011840:	f5a3 53ff 	subpl.w	r3, r3, #8160	; 0x1fe0
 8011844:	462f      	movmi	r7, r5
 8011846:	3b10      	subpl	r3, #16
 8011848:	eb17 02d7 	adds.w	r2, r7, r7, lsr #3
 801184c:	f100 86f9 	bmi.w	8012642 <Argus_Cal_PrepareCal+0x1162>
 8011850:	f5a3 13f1 	sub.w	r3, r3, #1974272	; 0x1e2000
 8011854:	f2a3 7307 	subw	r3, r3, #1799	; 0x707
 8011858:	eb12 1512 	adds.w	r5, r2, r2, lsr #4
 801185c:	d404      	bmi.n	8011868 <Argus_Cal_PrepareCal+0x388>
 801185e:	f5a3 2378 	sub.w	r3, r3, #1015808	; 0xf8000
 8011862:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8011866:	462a      	mov	r2, r5
 8011868:	eb12 1552 	adds.w	r5, r2, r2, lsr #5
 801186c:	d403      	bmi.n	8011876 <Argus_Cal_PrepareCal+0x396>
 801186e:	f5a3 23fc 	sub.w	r3, r3, #516096	; 0x7e000
 8011872:	3ba7      	subs	r3, #167	; 0xa7
 8011874:	462a      	mov	r2, r5
 8011876:	eb12 1592 	adds.w	r5, r2, r2, lsr #6
 801187a:	d403      	bmi.n	8011884 <Argus_Cal_PrepareCal+0x3a4>
 801187c:	f5a3 337e 	sub.w	r3, r3, #260096	; 0x3f800
 8011880:	3b15      	subs	r3, #21
 8011882:	462a      	mov	r2, r5
 8011884:	eb12 15d2 	adds.w	r5, r2, r2, lsr #7
 8011888:	d403      	bmi.n	8011892 <Argus_Cal_PrepareCal+0x3b2>
 801188a:	f5a3 33ff 	sub.w	r3, r3, #130560	; 0x1fe00
 801188e:	3b03      	subs	r3, #3
 8011890:	462a      	mov	r2, r5
 8011892:	eb12 2512 	adds.w	r5, r2, r2, lsr #8
 8011896:	d403      	bmi.n	80118a0 <Argus_Cal_PrepareCal+0x3c0>
 8011898:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 801189c:	3b80      	subs	r3, #128	; 0x80
 801189e:	462a      	mov	r2, r5
 80118a0:	eb12 2552 	adds.w	r5, r2, r2, lsr #9
 80118a4:	d403      	bmi.n	80118ae <Argus_Cal_PrepareCal+0x3ce>
 80118a6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80118aa:	3b60      	subs	r3, #96	; 0x60
 80118ac:	462a      	mov	r2, r5
 80118ae:	eb12 2592 	adds.w	r5, r2, r2, lsr #10
 80118b2:	d403      	bmi.n	80118bc <Argus_Cal_PrepareCal+0x3dc>
 80118b4:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 80118b8:	3b38      	subs	r3, #56	; 0x38
 80118ba:	462a      	mov	r2, r5
 80118bc:	eb12 25d2 	adds.w	r5, r2, r2, lsr #11
 80118c0:	d403      	bmi.n	80118ca <Argus_Cal_PrepareCal+0x3ea>
 80118c2:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 80118c6:	3b1e      	subs	r3, #30
 80118c8:	462a      	mov	r2, r5
 80118ca:	f1c2 4200 	rsb	r2, r2, #2147483648	; 0x80000000
 80118ce:	09d2      	lsrs	r2, r2, #7
 80118d0:	1a9d      	subs	r5, r3, r2
 80118d2:	f100 85ca 	bmi.w	801246a <Argus_Cal_PrepareCal+0xf8a>
 80118d6:	f105 0280 	add.w	r2, r5, #128	; 0x80
 80118da:	0a12      	lsrs	r2, r2, #8
 80118dc:	4613      	mov	r3, r2
 80118de:	9d05      	ldr	r5, [sp, #20]
 80118e0:	1a28      	subs	r0, r5, r0
 80118e2:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
 80118e6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80118ea:	f000 8641 	beq.w	8012570 <Argus_Cal_PrepareCal+0x1090>
 80118ee:	4b4d      	ldr	r3, [pc, #308]	; (8011a24 <Argus_Cal_PrepareCal+0x544>)
 80118f0:	4298      	cmp	r0, r3
 80118f2:	f000 86af 	beq.w	8012654 <Argus_Cal_PrepareCal+0x1174>
 80118f6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80118fa:	f240 8529 	bls.w	8012350 <Argus_Cal_PrepareCal+0xe70>
 80118fe:	1c43      	adds	r3, r0, #1
 8011900:	f000 8666 	beq.w	80125d0 <Argus_Cal_PrepareCal+0x10f0>
 8011904:	3001      	adds	r0, #1
 8011906:	4c48      	ldr	r4, [pc, #288]	; (8011a28 <Argus_Cal_PrepareCal+0x548>)
 8011908:	0840      	lsrs	r0, r0, #1
 801190a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801190e:	f080 8543 	bcs.w	8012398 <Argus_Cal_PrepareCal+0xeb8>
 8011912:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
 8011916:	0045      	lsls	r5, r0, #1
 8011918:	f504 049d 	add.w	r4, r4, #5144576	; 0x4e8000
 801191c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011920:	f604 54e8 	addw	r4, r4, #3560	; 0xde8
 8011924:	1943      	adds	r3, r0, r5
 8011926:	2b00      	cmp	r3, #0
 8011928:	bfa5      	ittet	ge
 801192a:	f5a4 04cf 	subge.w	r4, r4, #6782976	; 0x678000
 801192e:	f5a4 4499 	subge.w	r4, r4, #19584	; 0x4c80
 8011932:	462b      	movlt	r3, r5
 8011934:	3c10      	subge	r4, #16
 8011936:	eb13 0093 	adds.w	r0, r3, r3, lsr #2
 801193a:	bf5b      	ittet	pl
 801193c:	f5a4 1464 	subpl.w	r4, r4, #3735552	; 0x390000
 8011940:	f5a4 54ff 	subpl.w	r4, r4, #8160	; 0x1fe0
 8011944:	4618      	movmi	r0, r3
 8011946:	3c10      	subpl	r4, #16
 8011948:	eb10 03d0 	adds.w	r3, r0, r0, lsr #3
 801194c:	f100 8676 	bmi.w	801263c <Argus_Cal_PrepareCal+0x115c>
 8011950:	f5a4 14f1 	sub.w	r4, r4, #1974272	; 0x1e2000
 8011954:	f2a4 7407 	subw	r4, r4, #1799	; 0x707
 8011958:	eb13 1013 	adds.w	r0, r3, r3, lsr #4
 801195c:	d404      	bmi.n	8011968 <Argus_Cal_PrepareCal+0x488>
 801195e:	f5a4 2478 	sub.w	r4, r4, #1015808	; 0xf8000
 8011962:	f5a4 64a3 	sub.w	r4, r4, #1304	; 0x518
 8011966:	4603      	mov	r3, r0
 8011968:	eb13 1053 	adds.w	r0, r3, r3, lsr #5
 801196c:	d403      	bmi.n	8011976 <Argus_Cal_PrepareCal+0x496>
 801196e:	f5a4 24fc 	sub.w	r4, r4, #516096	; 0x7e000
 8011972:	3ca7      	subs	r4, #167	; 0xa7
 8011974:	4603      	mov	r3, r0
 8011976:	eb13 1093 	adds.w	r0, r3, r3, lsr #6
 801197a:	d403      	bmi.n	8011984 <Argus_Cal_PrepareCal+0x4a4>
 801197c:	f5a4 347e 	sub.w	r4, r4, #260096	; 0x3f800
 8011980:	3c15      	subs	r4, #21
 8011982:	4603      	mov	r3, r0
 8011984:	eb13 10d3 	adds.w	r0, r3, r3, lsr #7
 8011988:	d403      	bmi.n	8011992 <Argus_Cal_PrepareCal+0x4b2>
 801198a:	f5a4 34ff 	sub.w	r4, r4, #130560	; 0x1fe00
 801198e:	3c03      	subs	r4, #3
 8011990:	4603      	mov	r3, r0
 8011992:	eb13 2013 	adds.w	r0, r3, r3, lsr #8
 8011996:	d403      	bmi.n	80119a0 <Argus_Cal_PrepareCal+0x4c0>
 8011998:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
 801199c:	3c80      	subs	r4, #128	; 0x80
 801199e:	4603      	mov	r3, r0
 80119a0:	eb13 2053 	adds.w	r0, r3, r3, lsr #9
 80119a4:	d403      	bmi.n	80119ae <Argus_Cal_PrepareCal+0x4ce>
 80119a6:	f5a4 44ff 	sub.w	r4, r4, #32640	; 0x7f80
 80119aa:	3c60      	subs	r4, #96	; 0x60
 80119ac:	4603      	mov	r3, r0
 80119ae:	eb13 2093 	adds.w	r0, r3, r3, lsr #10
 80119b2:	d403      	bmi.n	80119bc <Argus_Cal_PrepareCal+0x4dc>
 80119b4:	f5a4 547f 	sub.w	r4, r4, #16320	; 0x3fc0
 80119b8:	3c38      	subs	r4, #56	; 0x38
 80119ba:	4603      	mov	r3, r0
 80119bc:	eb13 20d3 	adds.w	r0, r3, r3, lsr #11
 80119c0:	d403      	bmi.n	80119ca <Argus_Cal_PrepareCal+0x4ea>
 80119c2:	f5a4 54ff 	sub.w	r4, r4, #8160	; 0x1fe0
 80119c6:	3c1e      	subs	r4, #30
 80119c8:	4603      	mov	r3, r0
 80119ca:	f1c3 4300 	rsb	r3, r3, #2147483648	; 0x80000000
 80119ce:	09db      	lsrs	r3, r3, #7
 80119d0:	1ae0      	subs	r0, r4, r3
 80119d2:	f100 8558 	bmi.w	8012486 <Argus_Cal_PrepareCal+0xfa6>
 80119d6:	f100 0380 	add.w	r3, r0, #128	; 0x80
 80119da:	0a1b      	lsrs	r3, r3, #8
 80119dc:	f5c3 378c 	rsb	r7, r3, #71680	; 0x11800
 80119e0:	f207 173f 	addw	r7, r7, #319	; 0x13f
 80119e4:	2f00      	cmp	r7, #0
 80119e6:	f040 8647 	bne.w	8012678 <Argus_Cal_PrepareCal+0x1198>
 80119ea:	6477      	str	r7, [r6, #68]	; 0x44
 80119ec:	2000      	movs	r0, #0
 80119ee:	64b7      	str	r7, [r6, #72]	; 0x48
 80119f0:	f886 004d 	strb.w	r0, [r6, #77]	; 0x4d
 80119f4:	b009      	add	sp, #36	; 0x24
 80119f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119fa:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80119fe:	7961      	ldrb	r1, [r4, #5]
 8011a00:	79a0      	ldrb	r0, [r4, #6]
 8011a02:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
 8011a06:	3a01      	subs	r2, #1
 8011a08:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
 8011a0c:	2a06      	cmp	r2, #6
 8011a0e:	f63f adfc 	bhi.w	801160a <Argus_Cal_PrepareCal+0x12a>
 8011a12:	e8df f012 	tbh	[pc, r2, lsl #1]
 8011a16:	05e8      	.short	0x05e8
 8011a18:	05f205ed 	.word	0x05f205ed
 8011a1c:	060105fb 	.word	0x060105fb
 8011a20:	05e2060a 	.word	0x05e2060a
 8011a24:	0002b7e1 	.word	0x0002b7e1
 8011a28:	0b172180 	.word	0x0b172180
 8011a2c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8011a30:	0299      	lsls	r1, r3, #10
 8011a32:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8011a36:	f000 860a 	beq.w	801264e <Argus_Cal_PrepareCal+0x116e>
 8011a3a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8011a3e:	f080 85a3 	bcs.w	8012588 <Argus_Cal_PrepareCal+0x10a8>
 8011a42:	0699      	lsls	r1, r3, #26
 8011a44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8011a48:	f0c0 8687 	bcc.w	801275a <Argus_Cal_PrepareCal+0x127a>
 8011a4c:	4ac0      	ldr	r2, [pc, #768]	; (8011d50 <Argus_Cal_PrepareCal+0x870>)
 8011a4e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8011a52:	d205      	bcs.n	8011a60 <Argus_Cal_PrepareCal+0x580>
 8011a54:	f1a2 7231 	sub.w	r2, r2, #46399488	; 0x2c40000
 8011a58:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
 8011a5c:	3a60      	subs	r2, #96	; 0x60
 8011a5e:	0109      	lsls	r1, r1, #4
 8011a60:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8011a64:	d205      	bcs.n	8011a72 <Argus_Cal_PrepareCal+0x592>
 8011a66:	f1a2 72b1 	sub.w	r2, r2, #23199744	; 0x1620000
 8011a6a:	f5a2 4264 	sub.w	r2, r2, #58368	; 0xe400
 8011a6e:	3a30      	subs	r2, #48	; 0x30
 8011a70:	0089      	lsls	r1, r1, #2
 8011a72:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8011a76:	f0c0 857e 	bcc.w	8012576 <Argus_Cal_PrepareCal+0x1096>
 8011a7a:	460b      	mov	r3, r1
 8011a7c:	0849      	lsrs	r1, r1, #1
 8011a7e:	1859      	adds	r1, r3, r1
 8011a80:	d405      	bmi.n	8011a8e <Argus_Cal_PrepareCal+0x5ae>
 8011a82:	f5a2 02cf 	sub.w	r2, r2, #6782976	; 0x678000
 8011a86:	f5a2 4299 	sub.w	r2, r2, #19584	; 0x4c80
 8011a8a:	3a10      	subs	r2, #16
 8011a8c:	460b      	mov	r3, r1
 8011a8e:	eb13 0193 	adds.w	r1, r3, r3, lsr #2
 8011a92:	d405      	bmi.n	8011aa0 <Argus_Cal_PrepareCal+0x5c0>
 8011a94:	f5a2 1264 	sub.w	r2, r2, #3735552	; 0x390000
 8011a98:	f5a2 52ff 	sub.w	r2, r2, #8160	; 0x1fe0
 8011a9c:	3a10      	subs	r2, #16
 8011a9e:	460b      	mov	r3, r1
 8011aa0:	eb13 01d3 	adds.w	r1, r3, r3, lsr #3
 8011aa4:	d404      	bmi.n	8011ab0 <Argus_Cal_PrepareCal+0x5d0>
 8011aa6:	f5a2 12f1 	sub.w	r2, r2, #1974272	; 0x1e2000
 8011aaa:	f2a2 7207 	subw	r2, r2, #1799	; 0x707
 8011aae:	460b      	mov	r3, r1
 8011ab0:	eb13 1113 	adds.w	r1, r3, r3, lsr #4
 8011ab4:	d404      	bmi.n	8011ac0 <Argus_Cal_PrepareCal+0x5e0>
 8011ab6:	f5a2 2278 	sub.w	r2, r2, #1015808	; 0xf8000
 8011aba:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 8011abe:	460b      	mov	r3, r1
 8011ac0:	eb13 1153 	adds.w	r1, r3, r3, lsr #5
 8011ac4:	d403      	bmi.n	8011ace <Argus_Cal_PrepareCal+0x5ee>
 8011ac6:	f5a2 22fc 	sub.w	r2, r2, #516096	; 0x7e000
 8011aca:	3aa7      	subs	r2, #167	; 0xa7
 8011acc:	460b      	mov	r3, r1
 8011ace:	eb13 1193 	adds.w	r1, r3, r3, lsr #6
 8011ad2:	d403      	bmi.n	8011adc <Argus_Cal_PrepareCal+0x5fc>
 8011ad4:	f5a2 327e 	sub.w	r2, r2, #260096	; 0x3f800
 8011ad8:	3a15      	subs	r2, #21
 8011ada:	460b      	mov	r3, r1
 8011adc:	eb13 11d3 	adds.w	r1, r3, r3, lsr #7
 8011ae0:	d403      	bmi.n	8011aea <Argus_Cal_PrepareCal+0x60a>
 8011ae2:	f5a2 32ff 	sub.w	r2, r2, #130560	; 0x1fe00
 8011ae6:	3a03      	subs	r2, #3
 8011ae8:	460b      	mov	r3, r1
 8011aea:	eb13 2113 	adds.w	r1, r3, r3, lsr #8
 8011aee:	d403      	bmi.n	8011af8 <Argus_Cal_PrepareCal+0x618>
 8011af0:	f5a2 427f 	sub.w	r2, r2, #65280	; 0xff00
 8011af4:	3a80      	subs	r2, #128	; 0x80
 8011af6:	460b      	mov	r3, r1
 8011af8:	eb13 2153 	adds.w	r1, r3, r3, lsr #9
 8011afc:	d403      	bmi.n	8011b06 <Argus_Cal_PrepareCal+0x626>
 8011afe:	f5a2 42ff 	sub.w	r2, r2, #32640	; 0x7f80
 8011b02:	3a60      	subs	r2, #96	; 0x60
 8011b04:	460b      	mov	r3, r1
 8011b06:	eb13 2193 	adds.w	r1, r3, r3, lsr #10
 8011b0a:	d403      	bmi.n	8011b14 <Argus_Cal_PrepareCal+0x634>
 8011b0c:	f5a2 527f 	sub.w	r2, r2, #16320	; 0x3fc0
 8011b10:	3a38      	subs	r2, #56	; 0x38
 8011b12:	460b      	mov	r3, r1
 8011b14:	eb13 21d3 	adds.w	r1, r3, r3, lsr #11
 8011b18:	d403      	bmi.n	8011b22 <Argus_Cal_PrepareCal+0x642>
 8011b1a:	f5a2 52ff 	sub.w	r2, r2, #8160	; 0x1fe0
 8011b1e:	3a1e      	subs	r2, #30
 8011b20:	460b      	mov	r3, r1
 8011b22:	f1c3 4300 	rsb	r3, r3, #2147483648	; 0x80000000
 8011b26:	09db      	lsrs	r3, r3, #7
 8011b28:	1ad1      	subs	r1, r2, r3
 8011b2a:	d40c      	bmi.n	8011b46 <Argus_Cal_PrepareCal+0x666>
 8011b2c:	f101 0380 	add.w	r3, r1, #128	; 0x80
 8011b30:	0a1b      	lsrs	r3, r3, #8
 8011b32:	f483 1080 	eor.w	r0, r3, #1048576	; 0x100000
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	f040 852a 	bne.w	8012590 <Argus_Cal_PrepareCal+0x10b0>
 8011b3c:	461d      	mov	r5, r3
 8011b3e:	2800      	cmp	r0, #0
 8011b40:	da1c      	bge.n	8011b7c <Argus_Cal_PrepareCal+0x69c>
 8011b42:	426d      	negs	r5, r5
 8011b44:	e01a      	b.n	8011b7c <Argus_Cal_PrepareCal+0x69c>
 8011b46:	1a9b      	subs	r3, r3, r2
 8011b48:	3380      	adds	r3, #128	; 0x80
 8011b4a:	0a1b      	lsrs	r3, r3, #8
 8011b4c:	4258      	negs	r0, r3
 8011b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b52:	f480 1080 	eor.w	r0, r0, #1048576	; 0x100000
 8011b56:	ddee      	ble.n	8011b36 <Argus_Cal_PrepareCal+0x656>
 8011b58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011b5c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8011b60:	0049      	lsls	r1, r1, #1
 8011b62:	428b      	cmp	r3, r1
 8011b64:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011b68:	d8fa      	bhi.n	8011b60 <Argus_Cal_PrepareCal+0x680>
 8011b6a:	2a00      	cmp	r2, #0
 8011b6c:	f040 8514 	bne.w	8012598 <Argus_Cal_PrepareCal+0x10b8>
 8011b70:	2800      	cmp	r0, #0
 8011b72:	bfb4      	ite	lt
 8011b74:	f04f 4500 	movlt.w	r5, #2147483648	; 0x80000000
 8011b78:	f06f 4500 	mvnge.w	r5, #2147483648	; 0x80000000
 8011b7c:	2100      	movs	r1, #0
 8011b7e:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 8011d64 <Argus_Cal_PrepareCal+0x884>
 8011b82:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8011d68 <Argus_Cal_PrepareCal+0x888>
 8011b86:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8011d6c <Argus_Cal_PrepareCal+0x88c>
 8011b8a:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8011d70 <Argus_Cal_PrepareCal+0x890>
 8011b8e:	f106 040f 	add.w	r4, r6, #15
 8011b92:	f106 072f 	add.w	r7, r6, #47	; 0x2f
 8011b96:	2900      	cmp	r1, #0
 8011b98:	f000 80d8 	beq.w	8011d4c <Argus_Cal_PrepareCal+0x86c>
 8011b9c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8011ba0:	f000 826b 	beq.w	801207a <Argus_Cal_PrepareCal+0xb9a>
 8011ba4:	4571      	cmp	r1, lr
 8011ba6:	f300 81a0 	bgt.w	8011eea <Argus_Cal_PrepareCal+0xa0a>
 8011baa:	4541      	cmp	r1, r8
 8011bac:	f2c0 819d 	blt.w	8011eea <Argus_Cal_PrepareCal+0xa0a>
 8011bb0:	2900      	cmp	r1, #0
 8011bb2:	f340 819c 	ble.w	8011eee <Argus_Cal_PrepareCal+0xa0e>
 8011bb6:	0208      	lsls	r0, r1, #8
 8011bb8:	4548      	cmp	r0, r9
 8011bba:	f200 826b 	bhi.w	8012094 <Argus_Cal_PrepareCal+0xbb4>
 8011bbe:	4b65      	ldr	r3, [pc, #404]	; (8011d54 <Argus_Cal_PrepareCal+0x874>)
 8011bc0:	4a65      	ldr	r2, [pc, #404]	; (8011d58 <Argus_Cal_PrepareCal+0x878>)
 8011bc2:	18c3      	adds	r3, r0, r3
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	bfab      	itete	ge
 8011bc8:	4618      	movge	r0, r3
 8011bca:	f04f 6380 	movlt.w	r3, #67108864	; 0x4000000
 8011bce:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8011bd2:	f04f 7a80 	movlt.w	sl, #16777216	; 0x1000000
 8011bd6:	bfa8      	it	ge
 8011bd8:	f04f 5a80 	movge.w	sl, #268435456	; 0x10000000
 8011bdc:	1882      	adds	r2, r0, r2
 8011bde:	bf44      	itt	mi
 8011be0:	4602      	movmi	r2, r0
 8011be2:	4653      	movmi	r3, sl
 8011be4:	eb12 000c 	adds.w	r0, r2, ip
 8011be8:	bf58      	it	pl
 8011bea:	4602      	movpl	r2, r0
 8011bec:	485b      	ldr	r0, [pc, #364]	; (8011d5c <Argus_Cal_PrepareCal+0x87c>)
 8011bee:	bf58      	it	pl
 8011bf0:	005b      	lslpl	r3, r3, #1
 8011bf2:	1810      	adds	r0, r2, r0
 8011bf4:	bf58      	it	pl
 8011bf6:	4602      	movpl	r2, r0
 8011bf8:	4859      	ldr	r0, [pc, #356]	; (8011d60 <Argus_Cal_PrepareCal+0x880>)
 8011bfa:	bf58      	it	pl
 8011bfc:	eb03 0353 	addpl.w	r3, r3, r3, lsr #1
 8011c00:	1810      	adds	r0, r2, r0
 8011c02:	bf58      	it	pl
 8011c04:	4602      	movpl	r2, r0
 8011c06:	f5a2 10f1 	sub.w	r0, r2, #1974272	; 0x1e2000
 8011c0a:	f2a0 7007 	subw	r0, r0, #1799	; 0x707
 8011c0e:	bf58      	it	pl
 8011c10:	eb03 0393 	addpl.w	r3, r3, r3, lsr #2
 8011c14:	2800      	cmp	r0, #0
 8011c16:	bfa8      	it	ge
 8011c18:	4602      	movge	r2, r0
 8011c1a:	f5a2 2078 	sub.w	r0, r2, #1015808	; 0xf8000
 8011c1e:	f5a0 60a3 	sub.w	r0, r0, #1304	; 0x518
 8011c22:	bfa8      	it	ge
 8011c24:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	bfa8      	it	ge
 8011c2c:	4602      	movge	r2, r0
 8011c2e:	f5a2 20fc 	sub.w	r0, r2, #516096	; 0x7e000
 8011c32:	f1a0 00a7 	sub.w	r0, r0, #167	; 0xa7
 8011c36:	bfa8      	it	ge
 8011c38:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 8011c3c:	2800      	cmp	r0, #0
 8011c3e:	bfa8      	it	ge
 8011c40:	4602      	movge	r2, r0
 8011c42:	f5a2 307e 	sub.w	r0, r2, #260096	; 0x3f800
 8011c46:	f1a0 0015 	sub.w	r0, r0, #21
 8011c4a:	bfa8      	it	ge
 8011c4c:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 8011c50:	2800      	cmp	r0, #0
 8011c52:	bfa8      	it	ge
 8011c54:	4602      	movge	r2, r0
 8011c56:	f5a2 30ff 	sub.w	r0, r2, #130560	; 0x1fe00
 8011c5a:	f1a0 0003 	sub.w	r0, r0, #3
 8011c5e:	bfa8      	it	ge
 8011c60:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 8011c64:	2800      	cmp	r0, #0
 8011c66:	bfa8      	it	ge
 8011c68:	4602      	movge	r2, r0
 8011c6a:	f5a2 407f 	sub.w	r0, r2, #65280	; 0xff00
 8011c6e:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 8011c72:	bfa8      	it	ge
 8011c74:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 8011c78:	2800      	cmp	r0, #0
 8011c7a:	bfa8      	it	ge
 8011c7c:	4602      	movge	r2, r0
 8011c7e:	f5a2 40ff 	sub.w	r0, r2, #32640	; 0x7f80
 8011c82:	f1a0 0060 	sub.w	r0, r0, #96	; 0x60
 8011c86:	bfa8      	it	ge
 8011c88:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	bfa8      	it	ge
 8011c90:	4602      	movge	r2, r0
 8011c92:	f5a2 507f 	sub.w	r0, r2, #16320	; 0x3fc0
 8011c96:	f1a0 0038 	sub.w	r0, r0, #56	; 0x38
 8011c9a:	bfa8      	it	ge
 8011c9c:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 8011ca0:	2800      	cmp	r0, #0
 8011ca2:	bfa8      	it	ge
 8011ca4:	4602      	movge	r2, r0
 8011ca6:	f5a2 50ff 	sub.w	r0, r2, #8160	; 0x1fe0
 8011caa:	f1a0 001e 	sub.w	r0, r0, #30
 8011cae:	bfa8      	it	ge
 8011cb0:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	bfa4      	itt	ge
 8011cb8:	4602      	movge	r2, r0
 8011cba:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 8011cbe:	04d0      	lsls	r0, r2, #19
 8011cc0:	bf48      	it	mi
 8011cc2:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 8011cc6:	0510      	lsls	r0, r2, #20
 8011cc8:	bf48      	it	mi
 8011cca:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 8011cce:	0550      	lsls	r0, r2, #21
 8011cd0:	bf48      	it	mi
 8011cd2:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 8011cd6:	0590      	lsls	r0, r2, #22
 8011cd8:	bf48      	it	mi
 8011cda:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 8011cde:	05d0      	lsls	r0, r2, #23
 8011ce0:	bf48      	it	mi
 8011ce2:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 8011ce6:	0610      	lsls	r0, r2, #24
 8011ce8:	bf48      	it	mi
 8011cea:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 8011cee:	0650      	lsls	r0, r2, #25
 8011cf0:	bf48      	it	mi
 8011cf2:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 8011cf6:	0690      	lsls	r0, r2, #26
 8011cf8:	bf48      	it	mi
 8011cfa:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 8011cfe:	06d0      	lsls	r0, r2, #27
 8011d00:	bf48      	it	mi
 8011d02:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 8011d06:	0710      	lsls	r0, r2, #28
 8011d08:	bf48      	it	mi
 8011d0a:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 8011d0e:	0750      	lsls	r0, r2, #29
 8011d10:	bf48      	it	mi
 8011d12:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 8011d16:	0790      	lsls	r0, r2, #30
 8011d18:	bf48      	it	mi
 8011d1a:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 8011d1e:	07d2      	lsls	r2, r2, #31
 8011d20:	bf48      	it	mi
 8011d22:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 8011d26:	f113 0f81 	cmn.w	r3, #129	; 0x81
 8011d2a:	f200 80de 	bhi.w	8011eea <Argus_Cal_PrepareCal+0xa0a>
 8011d2e:	3380      	adds	r3, #128	; 0x80
 8011d30:	0a1b      	lsrs	r3, r3, #8
 8011d32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011d36:	f3c3 2387 	ubfx	r3, r3, #10, #8
 8011d3a:	f804 3f01 	strb.w	r3, [r4, #1]!
 8011d3e:	42bc      	cmp	r4, r7
 8011d40:	4429      	add	r1, r5
 8011d42:	f43f acc8 	beq.w	80116d6 <Argus_Cal_PrepareCal+0x1f6>
 8011d46:	2900      	cmp	r1, #0
 8011d48:	f47f af28 	bne.w	8011b9c <Argus_Cal_PrepareCal+0x6bc>
 8011d4c:	2340      	movs	r3, #64	; 0x40
 8011d4e:	e7f4      	b.n	8011d3a <Argus_Cal_PrepareCal+0x85a>
 8011d50:	ff4e8de9 	.word	0xff4e8de9
 8011d54:	fd3a37a0 	.word	0xfd3a37a0
 8011d58:	fe9d1bd0 	.word	0xfe9d1bd0
 8011d5c:	ff983370 	.word	0xff983370
 8011d60:	ffc6e010 	.word	0xffc6e010
 8011d64:	000b1721 	.word	0x000b1721
 8011d68:	fff4376c 	.word	0xfff4376c
 8011d6c:	058b90be 	.word	0x058b90be
 8011d70:	ff4e8de8 	.word	0xff4e8de8
 8011d74:	ebc1 6341 	rsb	r3, r1, r1, lsl #25
 8011d78:	4ac1      	ldr	r2, [pc, #772]	; (8012080 <Argus_Cal_PrepareCal+0xba0>)
 8011d7a:	01db      	lsls	r3, r3, #7
 8011d7c:	189a      	adds	r2, r3, r2
 8011d7e:	f100 8257 	bmi.w	8012230 <Argus_Cal_PrepareCal+0xd50>
 8011d82:	2300      	movs	r3, #0
 8011d84:	eb12 000c 	adds.w	r0, r2, ip
 8011d88:	bf58      	it	pl
 8011d8a:	4602      	movpl	r2, r0
 8011d8c:	48bd      	ldr	r0, [pc, #756]	; (8012084 <Argus_Cal_PrepareCal+0xba4>)
 8011d8e:	bf58      	it	pl
 8011d90:	005b      	lslpl	r3, r3, #1
 8011d92:	1810      	adds	r0, r2, r0
 8011d94:	bf58      	it	pl
 8011d96:	4602      	movpl	r2, r0
 8011d98:	48bb      	ldr	r0, [pc, #748]	; (8012088 <Argus_Cal_PrepareCal+0xba8>)
 8011d9a:	bf58      	it	pl
 8011d9c:	eb03 0353 	addpl.w	r3, r3, r3, lsr #1
 8011da0:	1810      	adds	r0, r2, r0
 8011da2:	bf58      	it	pl
 8011da4:	4602      	movpl	r2, r0
 8011da6:	f5a2 10f1 	sub.w	r0, r2, #1974272	; 0x1e2000
 8011daa:	f2a0 7007 	subw	r0, r0, #1799	; 0x707
 8011dae:	bf58      	it	pl
 8011db0:	eb03 0393 	addpl.w	r3, r3, r3, lsr #2
 8011db4:	2800      	cmp	r0, #0
 8011db6:	bfa8      	it	ge
 8011db8:	4602      	movge	r2, r0
 8011dba:	f5a2 2078 	sub.w	r0, r2, #1015808	; 0xf8000
 8011dbe:	f5a0 60a3 	sub.w	r0, r0, #1304	; 0x518
 8011dc2:	bfa8      	it	ge
 8011dc4:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 8011dc8:	2800      	cmp	r0, #0
 8011dca:	bfa8      	it	ge
 8011dcc:	4602      	movge	r2, r0
 8011dce:	f5a2 20fc 	sub.w	r0, r2, #516096	; 0x7e000
 8011dd2:	f1a0 00a7 	sub.w	r0, r0, #167	; 0xa7
 8011dd6:	bfa8      	it	ge
 8011dd8:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	bfa8      	it	ge
 8011de0:	4602      	movge	r2, r0
 8011de2:	f5a2 307e 	sub.w	r0, r2, #260096	; 0x3f800
 8011de6:	f1a0 0015 	sub.w	r0, r0, #21
 8011dea:	bfa8      	it	ge
 8011dec:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 8011df0:	2800      	cmp	r0, #0
 8011df2:	bfa8      	it	ge
 8011df4:	4602      	movge	r2, r0
 8011df6:	f5a2 30ff 	sub.w	r0, r2, #130560	; 0x1fe00
 8011dfa:	f1a0 0003 	sub.w	r0, r0, #3
 8011dfe:	bfa8      	it	ge
 8011e00:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 8011e04:	2800      	cmp	r0, #0
 8011e06:	bfa8      	it	ge
 8011e08:	4602      	movge	r2, r0
 8011e0a:	f5a2 407f 	sub.w	r0, r2, #65280	; 0xff00
 8011e0e:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 8011e12:	bfa8      	it	ge
 8011e14:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	bfa8      	it	ge
 8011e1c:	4602      	movge	r2, r0
 8011e1e:	f5a2 40ff 	sub.w	r0, r2, #32640	; 0x7f80
 8011e22:	f1a0 0060 	sub.w	r0, r0, #96	; 0x60
 8011e26:	bfa8      	it	ge
 8011e28:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	bfa8      	it	ge
 8011e30:	4602      	movge	r2, r0
 8011e32:	f5a2 507f 	sub.w	r0, r2, #16320	; 0x3fc0
 8011e36:	f1a0 0038 	sub.w	r0, r0, #56	; 0x38
 8011e3a:	bfa8      	it	ge
 8011e3c:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 8011e40:	2800      	cmp	r0, #0
 8011e42:	bfa8      	it	ge
 8011e44:	4602      	movge	r2, r0
 8011e46:	f5a2 50ff 	sub.w	r0, r2, #8160	; 0x1fe0
 8011e4a:	f1a0 001e 	sub.w	r0, r0, #30
 8011e4e:	bfa8      	it	ge
 8011e50:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 8011e54:	2800      	cmp	r0, #0
 8011e56:	bfa4      	itt	ge
 8011e58:	4602      	movge	r2, r0
 8011e5a:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 8011e5e:	04d0      	lsls	r0, r2, #19
 8011e60:	bf48      	it	mi
 8011e62:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 8011e66:	0510      	lsls	r0, r2, #20
 8011e68:	bf48      	it	mi
 8011e6a:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 8011e6e:	0550      	lsls	r0, r2, #21
 8011e70:	bf48      	it	mi
 8011e72:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 8011e76:	0590      	lsls	r0, r2, #22
 8011e78:	bf48      	it	mi
 8011e7a:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 8011e7e:	05d0      	lsls	r0, r2, #23
 8011e80:	bf48      	it	mi
 8011e82:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 8011e86:	0610      	lsls	r0, r2, #24
 8011e88:	bf48      	it	mi
 8011e8a:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 8011e8e:	0650      	lsls	r0, r2, #25
 8011e90:	bf48      	it	mi
 8011e92:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 8011e96:	0690      	lsls	r0, r2, #26
 8011e98:	bf48      	it	mi
 8011e9a:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 8011e9e:	06d0      	lsls	r0, r2, #27
 8011ea0:	bf48      	it	mi
 8011ea2:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 8011ea6:	0710      	lsls	r0, r2, #28
 8011ea8:	bf48      	it	mi
 8011eaa:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 8011eae:	0750      	lsls	r0, r2, #29
 8011eb0:	bf48      	it	mi
 8011eb2:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 8011eb6:	0790      	lsls	r0, r2, #30
 8011eb8:	bf48      	it	mi
 8011eba:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 8011ebe:	07d0      	lsls	r0, r2, #31
 8011ec0:	bf48      	it	mi
 8011ec2:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 8011ec6:	1c5a      	adds	r2, r3, #1
 8011ec8:	f000 8205 	beq.w	80122d6 <Argus_Cal_PrepareCal+0xdf6>
 8011ecc:	3301      	adds	r3, #1
 8011ece:	085a      	lsrs	r2, r3, #1
 8011ed0:	f040 81cd 	bne.w	801226e <Argus_Cal_PrepareCal+0xd8e>
 8011ed4:	4610      	mov	r0, r2
 8011ed6:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
 8011eda:	0c1b      	lsrs	r3, r3, #16
 8011edc:	4403      	add	r3, r0
 8011ede:	f513 7f00 	cmn.w	r3, #512	; 0x200
 8011ee2:	bf38      	it	cc
 8011ee4:	461a      	movcc	r2, r3
 8011ee6:	f0c0 80c3 	bcc.w	8012070 <Argus_Cal_PrepareCal+0xb90>
 8011eea:	2300      	movs	r3, #0
 8011eec:	e725      	b.n	8011d3a <Argus_Cal_PrepareCal+0x85a>
 8011eee:	ebc1 6301 	rsb	r3, r1, r1, lsl #24
 8011ef2:	021b      	lsls	r3, r3, #8
 8011ef4:	454b      	cmp	r3, r9
 8011ef6:	f63f af3d 	bhi.w	8011d74 <Argus_Cal_PrepareCal+0x894>
 8011efa:	4864      	ldr	r0, [pc, #400]	; (801208c <Argus_Cal_PrepareCal+0xbac>)
 8011efc:	4a64      	ldr	r2, [pc, #400]	; (8012090 <Argus_Cal_PrepareCal+0xbb0>)
 8011efe:	1818      	adds	r0, r3, r0
 8011f00:	2800      	cmp	r0, #0
 8011f02:	bfb7      	itett	lt
 8011f04:	4618      	movlt	r0, r3
 8011f06:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8011f0a:	f04f 6380 	movlt.w	r3, #67108864	; 0x4000000
 8011f0e:	f04f 7a80 	movlt.w	sl, #16777216	; 0x1000000
 8011f12:	bfa8      	it	ge
 8011f14:	f04f 5a80 	movge.w	sl, #268435456	; 0x10000000
 8011f18:	1882      	adds	r2, r0, r2
 8011f1a:	bf44      	itt	mi
 8011f1c:	4602      	movmi	r2, r0
 8011f1e:	4653      	movmi	r3, sl
 8011f20:	eb12 000c 	adds.w	r0, r2, ip
 8011f24:	bf58      	it	pl
 8011f26:	4602      	movpl	r2, r0
 8011f28:	4856      	ldr	r0, [pc, #344]	; (8012084 <Argus_Cal_PrepareCal+0xba4>)
 8011f2a:	bf58      	it	pl
 8011f2c:	005b      	lslpl	r3, r3, #1
 8011f2e:	1810      	adds	r0, r2, r0
 8011f30:	bf58      	it	pl
 8011f32:	4602      	movpl	r2, r0
 8011f34:	4854      	ldr	r0, [pc, #336]	; (8012088 <Argus_Cal_PrepareCal+0xba8>)
 8011f36:	bf58      	it	pl
 8011f38:	eb03 0353 	addpl.w	r3, r3, r3, lsr #1
 8011f3c:	1810      	adds	r0, r2, r0
 8011f3e:	bf58      	it	pl
 8011f40:	4602      	movpl	r2, r0
 8011f42:	f5a2 10f1 	sub.w	r0, r2, #1974272	; 0x1e2000
 8011f46:	f2a0 7007 	subw	r0, r0, #1799	; 0x707
 8011f4a:	bf58      	it	pl
 8011f4c:	eb03 0393 	addpl.w	r3, r3, r3, lsr #2
 8011f50:	2800      	cmp	r0, #0
 8011f52:	bfa8      	it	ge
 8011f54:	4602      	movge	r2, r0
 8011f56:	f5a2 2078 	sub.w	r0, r2, #1015808	; 0xf8000
 8011f5a:	f5a0 60a3 	sub.w	r0, r0, #1304	; 0x518
 8011f5e:	bfa8      	it	ge
 8011f60:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 8011f64:	2800      	cmp	r0, #0
 8011f66:	bfa8      	it	ge
 8011f68:	4602      	movge	r2, r0
 8011f6a:	f5a2 20fc 	sub.w	r0, r2, #516096	; 0x7e000
 8011f6e:	f1a0 00a7 	sub.w	r0, r0, #167	; 0xa7
 8011f72:	bfa8      	it	ge
 8011f74:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 8011f78:	2800      	cmp	r0, #0
 8011f7a:	bfa8      	it	ge
 8011f7c:	4602      	movge	r2, r0
 8011f7e:	f5a2 307e 	sub.w	r0, r2, #260096	; 0x3f800
 8011f82:	f1a0 0015 	sub.w	r0, r0, #21
 8011f86:	bfa8      	it	ge
 8011f88:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 8011f8c:	2800      	cmp	r0, #0
 8011f8e:	bfa8      	it	ge
 8011f90:	4602      	movge	r2, r0
 8011f92:	f5a2 30ff 	sub.w	r0, r2, #130560	; 0x1fe00
 8011f96:	f1a0 0003 	sub.w	r0, r0, #3
 8011f9a:	bfa8      	it	ge
 8011f9c:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	bfa8      	it	ge
 8011fa4:	4602      	movge	r2, r0
 8011fa6:	f5a2 407f 	sub.w	r0, r2, #65280	; 0xff00
 8011faa:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 8011fae:	bfa8      	it	ge
 8011fb0:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	bfa8      	it	ge
 8011fb8:	4602      	movge	r2, r0
 8011fba:	f5a2 40ff 	sub.w	r0, r2, #32640	; 0x7f80
 8011fbe:	f1a0 0060 	sub.w	r0, r0, #96	; 0x60
 8011fc2:	bfa8      	it	ge
 8011fc4:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 8011fc8:	2800      	cmp	r0, #0
 8011fca:	bfa8      	it	ge
 8011fcc:	4602      	movge	r2, r0
 8011fce:	f5a2 507f 	sub.w	r0, r2, #16320	; 0x3fc0
 8011fd2:	f1a0 0038 	sub.w	r0, r0, #56	; 0x38
 8011fd6:	bfa8      	it	ge
 8011fd8:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	bfa8      	it	ge
 8011fe0:	4602      	movge	r2, r0
 8011fe2:	f5a2 50ff 	sub.w	r0, r2, #8160	; 0x1fe0
 8011fe6:	f1a0 001e 	sub.w	r0, r0, #30
 8011fea:	bfa8      	it	ge
 8011fec:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 8011ff0:	2800      	cmp	r0, #0
 8011ff2:	bfa4      	itt	ge
 8011ff4:	4602      	movge	r2, r0
 8011ff6:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 8011ffa:	04d0      	lsls	r0, r2, #19
 8011ffc:	bf48      	it	mi
 8011ffe:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 8012002:	0510      	lsls	r0, r2, #20
 8012004:	bf48      	it	mi
 8012006:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 801200a:	0550      	lsls	r0, r2, #21
 801200c:	bf48      	it	mi
 801200e:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 8012012:	0590      	lsls	r0, r2, #22
 8012014:	bf48      	it	mi
 8012016:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 801201a:	05d0      	lsls	r0, r2, #23
 801201c:	bf48      	it	mi
 801201e:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 8012022:	0610      	lsls	r0, r2, #24
 8012024:	bf48      	it	mi
 8012026:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 801202a:	0650      	lsls	r0, r2, #25
 801202c:	bf48      	it	mi
 801202e:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 8012032:	0690      	lsls	r0, r2, #26
 8012034:	bf48      	it	mi
 8012036:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 801203a:	06d0      	lsls	r0, r2, #27
 801203c:	bf48      	it	mi
 801203e:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 8012042:	0710      	lsls	r0, r2, #28
 8012044:	bf48      	it	mi
 8012046:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 801204a:	0750      	lsls	r0, r2, #29
 801204c:	bf48      	it	mi
 801204e:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 8012052:	0790      	lsls	r0, r2, #30
 8012054:	bf48      	it	mi
 8012056:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 801205a:	07d0      	lsls	r0, r2, #31
 801205c:	bf48      	it	mi
 801205e:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 8012062:	1c5a      	adds	r2, r3, #1
 8012064:	f000 8113 	beq.w	801228e <Argus_Cal_PrepareCal+0xdae>
 8012068:	3301      	adds	r3, #1
 801206a:	085a      	lsrs	r2, r3, #1
 801206c:	f040 80ef 	bne.w	801224e <Argus_Cal_PrepareCal+0xd6e>
 8012070:	f502 7300 	add.w	r3, r2, #512	; 0x200
 8012074:	f3c3 2387 	ubfx	r3, r3, #10, #8
 8012078:	e65f      	b.n	8011d3a <Argus_Cal_PrepareCal+0x85a>
 801207a:	23ae      	movs	r3, #174	; 0xae
 801207c:	e65d      	b.n	8011d3a <Argus_Cal_PrepareCal+0x85a>
 801207e:	bf00      	nop
 8012080:	fa746f40 	.word	0xfa746f40
 8012084:	ff983370 	.word	0xff983370
 8012088:	ffc6e010 	.word	0xffc6e010
 801208c:	fd3a37a0 	.word	0xfd3a37a0
 8012090:	fe9d1bd0 	.word	0xfe9d1bd0
 8012094:	4bd7      	ldr	r3, [pc, #860]	; (80123f4 <Argus_Cal_PrepareCal+0xf14>)
 8012096:	4ad8      	ldr	r2, [pc, #864]	; (80123f8 <Argus_Cal_PrepareCal+0xf18>)
 8012098:	01c8      	lsls	r0, r1, #7
 801209a:	18c3      	adds	r3, r0, r3
 801209c:	2b00      	cmp	r3, #0
 801209e:	bfab      	itete	ge
 80120a0:	4618      	movge	r0, r3
 80120a2:	f04f 6380 	movlt.w	r3, #67108864	; 0x4000000
 80120a6:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 80120aa:	f04f 7a80 	movlt.w	sl, #16777216	; 0x1000000
 80120ae:	bfa8      	it	ge
 80120b0:	f04f 5a80 	movge.w	sl, #268435456	; 0x10000000
 80120b4:	1882      	adds	r2, r0, r2
 80120b6:	bf44      	itt	mi
 80120b8:	4602      	movmi	r2, r0
 80120ba:	4653      	movmi	r3, sl
 80120bc:	eb12 000c 	adds.w	r0, r2, ip
 80120c0:	bf58      	it	pl
 80120c2:	4602      	movpl	r2, r0
 80120c4:	48cd      	ldr	r0, [pc, #820]	; (80123fc <Argus_Cal_PrepareCal+0xf1c>)
 80120c6:	bf58      	it	pl
 80120c8:	005b      	lslpl	r3, r3, #1
 80120ca:	1810      	adds	r0, r2, r0
 80120cc:	bf58      	it	pl
 80120ce:	4602      	movpl	r2, r0
 80120d0:	48cb      	ldr	r0, [pc, #812]	; (8012400 <Argus_Cal_PrepareCal+0xf20>)
 80120d2:	bf58      	it	pl
 80120d4:	eb03 0353 	addpl.w	r3, r3, r3, lsr #1
 80120d8:	1810      	adds	r0, r2, r0
 80120da:	bf58      	it	pl
 80120dc:	4602      	movpl	r2, r0
 80120de:	f5a2 10f1 	sub.w	r0, r2, #1974272	; 0x1e2000
 80120e2:	f2a0 7007 	subw	r0, r0, #1799	; 0x707
 80120e6:	bf58      	it	pl
 80120e8:	eb03 0393 	addpl.w	r3, r3, r3, lsr #2
 80120ec:	2800      	cmp	r0, #0
 80120ee:	bfa8      	it	ge
 80120f0:	4602      	movge	r2, r0
 80120f2:	f5a2 2078 	sub.w	r0, r2, #1015808	; 0xf8000
 80120f6:	f5a0 60a3 	sub.w	r0, r0, #1304	; 0x518
 80120fa:	bfa8      	it	ge
 80120fc:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 8012100:	2800      	cmp	r0, #0
 8012102:	bfa8      	it	ge
 8012104:	4602      	movge	r2, r0
 8012106:	f5a2 20fc 	sub.w	r0, r2, #516096	; 0x7e000
 801210a:	f1a0 00a7 	sub.w	r0, r0, #167	; 0xa7
 801210e:	bfa8      	it	ge
 8012110:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 8012114:	2800      	cmp	r0, #0
 8012116:	bfa8      	it	ge
 8012118:	4602      	movge	r2, r0
 801211a:	f5a2 307e 	sub.w	r0, r2, #260096	; 0x3f800
 801211e:	f1a0 0015 	sub.w	r0, r0, #21
 8012122:	bfa8      	it	ge
 8012124:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 8012128:	2800      	cmp	r0, #0
 801212a:	bfa8      	it	ge
 801212c:	4602      	movge	r2, r0
 801212e:	f5a2 30ff 	sub.w	r0, r2, #130560	; 0x1fe00
 8012132:	f1a0 0003 	sub.w	r0, r0, #3
 8012136:	bfa8      	it	ge
 8012138:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 801213c:	2800      	cmp	r0, #0
 801213e:	bfa8      	it	ge
 8012140:	4602      	movge	r2, r0
 8012142:	f5a2 407f 	sub.w	r0, r2, #65280	; 0xff00
 8012146:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 801214a:	bfa8      	it	ge
 801214c:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 8012150:	2800      	cmp	r0, #0
 8012152:	bfa8      	it	ge
 8012154:	4602      	movge	r2, r0
 8012156:	f5a2 40ff 	sub.w	r0, r2, #32640	; 0x7f80
 801215a:	f1a0 0060 	sub.w	r0, r0, #96	; 0x60
 801215e:	bfa8      	it	ge
 8012160:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 8012164:	2800      	cmp	r0, #0
 8012166:	bfa8      	it	ge
 8012168:	4602      	movge	r2, r0
 801216a:	f5a2 507f 	sub.w	r0, r2, #16320	; 0x3fc0
 801216e:	f1a0 0038 	sub.w	r0, r0, #56	; 0x38
 8012172:	bfa8      	it	ge
 8012174:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 8012178:	2800      	cmp	r0, #0
 801217a:	bfa8      	it	ge
 801217c:	4602      	movge	r2, r0
 801217e:	f5a2 50ff 	sub.w	r0, r2, #8160	; 0x1fe0
 8012182:	f1a0 001e 	sub.w	r0, r0, #30
 8012186:	bfa8      	it	ge
 8012188:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 801218c:	2800      	cmp	r0, #0
 801218e:	bfa4      	itt	ge
 8012190:	4602      	movge	r2, r0
 8012192:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 8012196:	04d0      	lsls	r0, r2, #19
 8012198:	bf48      	it	mi
 801219a:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 801219e:	0510      	lsls	r0, r2, #20
 80121a0:	bf48      	it	mi
 80121a2:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 80121a6:	0550      	lsls	r0, r2, #21
 80121a8:	bf48      	it	mi
 80121aa:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 80121ae:	0590      	lsls	r0, r2, #22
 80121b0:	bf48      	it	mi
 80121b2:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 80121b6:	05d0      	lsls	r0, r2, #23
 80121b8:	bf48      	it	mi
 80121ba:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 80121be:	0610      	lsls	r0, r2, #24
 80121c0:	bf48      	it	mi
 80121c2:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 80121c6:	0650      	lsls	r0, r2, #25
 80121c8:	bf48      	it	mi
 80121ca:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 80121ce:	0690      	lsls	r0, r2, #26
 80121d0:	bf48      	it	mi
 80121d2:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 80121d6:	06d0      	lsls	r0, r2, #27
 80121d8:	bf48      	it	mi
 80121da:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 80121de:	0710      	lsls	r0, r2, #28
 80121e0:	bf48      	it	mi
 80121e2:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 80121e6:	0750      	lsls	r0, r2, #29
 80121e8:	bf48      	it	mi
 80121ea:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 80121ee:	0790      	lsls	r0, r2, #30
 80121f0:	bf48      	it	mi
 80121f2:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 80121f6:	07d2      	lsls	r2, r2, #31
 80121f8:	bf48      	it	mi
 80121fa:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 80121fe:	0c1a      	lsrs	r2, r3, #16
 8012200:	b29b      	uxth	r3, r3
 8012202:	fb03 f003 	mul.w	r0, r3, r3
 8012206:	fb03 f302 	mul.w	r3, r3, r2
 801220a:	eb03 4a10 	add.w	sl, r3, r0, lsr #16
 801220e:	fa13 f38a 	uxtah	r3, r3, sl
 8012212:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8012216:	fb02 f202 	mul.w	r2, r2, r2
 801221a:	fa1b f080 	uxtah	r0, fp, r0
 801221e:	eb02 421a 	add.w	r2, r2, sl, lsr #16
 8012222:	2800      	cmp	r0, #0
 8012224:	eb02 4313 	add.w	r3, r2, r3, lsr #16
 8012228:	f6bf ae59 	bge.w	8011ede <Argus_Cal_PrepareCal+0x9fe>
 801222c:	3301      	adds	r3, #1
 801222e:	e656      	b.n	8011ede <Argus_Cal_PrepareCal+0x9fe>
 8012230:	4a70      	ldr	r2, [pc, #448]	; (80123f4 <Argus_Cal_PrepareCal+0xf14>)
 8012232:	1898      	adds	r0, r3, r2
 8012234:	f100 8293 	bmi.w	801275e <Argus_Cal_PrepareCal+0x127e>
 8012238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801223c:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 8012240:	4a6d      	ldr	r2, [pc, #436]	; (80123f8 <Argus_Cal_PrepareCal+0xf18>)
 8012242:	1882      	adds	r2, r0, r2
 8012244:	f57f ad9e 	bpl.w	8011d84 <Argus_Cal_PrepareCal+0x8a4>
 8012248:	4653      	mov	r3, sl
 801224a:	4602      	mov	r2, r0
 801224c:	e59a      	b.n	8011d84 <Argus_Cal_PrepareCal+0x8a4>
 801224e:	4b6d      	ldr	r3, [pc, #436]	; (8012404 <Argus_Cal_PrepareCal+0xf24>)
 8012250:	429a      	cmp	r2, r3
 8012252:	f482 0b00 	eor.w	fp, r2, #8388608	; 0x800000
 8012256:	dc1e      	bgt.n	8012296 <Argus_Cal_PrepareCal+0xdb6>
 8012258:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801225c:	0052      	lsls	r2, r2, #1
 801225e:	429a      	cmp	r2, r3
 8012260:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8012264:	d9fa      	bls.n	801225c <Argus_Cal_PrepareCal+0xd7c>
 8012266:	b9c0      	cbnz	r0, 801229a <Argus_Cal_PrepareCal+0xdba>
 8012268:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801226c:	e700      	b.n	8012070 <Argus_Cal_PrepareCal+0xb90>
 801226e:	4865      	ldr	r0, [pc, #404]	; (8012404 <Argus_Cal_PrepareCal+0xf24>)
 8012270:	4282      	cmp	r2, r0
 8012272:	f482 0a00 	eor.w	sl, r2, #8388608	; 0x800000
 8012276:	dc32      	bgt.n	80122de <Argus_Cal_PrepareCal+0xdfe>
 8012278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801227c:	0052      	lsls	r2, r2, #1
 801227e:	4282      	cmp	r2, r0
 8012280:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012284:	d9fa      	bls.n	801227c <Argus_Cal_PrepareCal+0xd9c>
 8012286:	bb63      	cbnz	r3, 80122e2 <Argus_Cal_PrepareCal+0xe02>
 8012288:	485f      	ldr	r0, [pc, #380]	; (8012408 <Argus_Cal_PrepareCal+0xf28>)
 801228a:	2201      	movs	r2, #1
 801228c:	e623      	b.n	8011ed6 <Argus_Cal_PrepareCal+0x9f6>
 801228e:	f8df b184 	ldr.w	fp, [pc, #388]	; 8012414 <Argus_Cal_PrepareCal+0xf34>
 8012292:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012296:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801229a:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 801229e:	f8cd a004 	str.w	sl, [sp, #4]
 80122a2:	2300      	movs	r3, #0
 80122a4:	4682      	mov	sl, r0
 80122a6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80122aa:	e000      	b.n	80122ae <Argus_Cal_PrepareCal+0xdce>
 80122ac:	b168      	cbz	r0, 80122ca <Argus_Cal_PrepareCal+0xdea>
 80122ae:	4290      	cmp	r0, r2
 80122b0:	bf24      	itt	cs
 80122b2:	1a80      	subcs	r0, r0, r2
 80122b4:	ea43 030a 	orrcs.w	r3, r3, sl
 80122b8:	ea5f 0a5a 	movs.w	sl, sl, lsr #1
 80122bc:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80122c0:	d1f4      	bne.n	80122ac <Argus_Cal_PrepareCal+0xdcc>
 80122c2:	4290      	cmp	r0, r2
 80122c4:	4682      	mov	sl, r0
 80122c6:	bf28      	it	cs
 80122c8:	3301      	addcs	r3, #1
 80122ca:	f1bb 0f00 	cmp.w	fp, #0
 80122ce:	f6bf ae06 	bge.w	8011ede <Argus_Cal_PrepareCal+0x9fe>
 80122d2:	425b      	negs	r3, r3
 80122d4:	e603      	b.n	8011ede <Argus_Cal_PrepareCal+0x9fe>
 80122d6:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8012414 <Argus_Cal_PrepareCal+0xf34>
 80122da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80122de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80122e2:	f04f 0b00 	mov.w	fp, #0
 80122e6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80122ea:	e000      	b.n	80122ee <Argus_Cal_PrepareCal+0xe0e>
 80122ec:	b160      	cbz	r0, 8012308 <Argus_Cal_PrepareCal+0xe28>
 80122ee:	4282      	cmp	r2, r0
 80122f0:	bf9c      	itt	ls
 80122f2:	1a80      	subls	r0, r0, r2
 80122f4:	ea4b 0b03 	orrls.w	fp, fp, r3
 80122f8:	085b      	lsrs	r3, r3, #1
 80122fa:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80122fe:	d1f5      	bne.n	80122ec <Argus_Cal_PrepareCal+0xe0c>
 8012300:	4282      	cmp	r2, r0
 8012302:	bf98      	it	ls
 8012304:	f10b 0b01 	addls.w	fp, fp, #1
 8012308:	f1ba 0f00 	cmp.w	sl, #0
 801230c:	bfb8      	it	lt
 801230e:	f1cb 0b00 	rsblt	fp, fp, #0
 8012312:	ea4f 401b 	mov.w	r0, fp, lsr #16
 8012316:	fa1f fb8b 	uxth.w	fp, fp
 801231a:	fb0b f20b 	mul.w	r2, fp, fp
 801231e:	fb0b fb00 	mul.w	fp, fp, r0
 8012322:	eb0b 4312 	add.w	r3, fp, r2, lsr #16
 8012326:	fa1b fb83 	uxtah	fp, fp, r3
 801232a:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 801232e:	0c1b      	lsrs	r3, r3, #16
 8012330:	fb00 3000 	mla	r0, r0, r0, r3
 8012334:	fa1a f282 	uxtah	r2, sl, r2
 8012338:	eb00 431b 	add.w	r3, r0, fp, lsr #16
 801233c:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8012340:	ea4f 4003 	mov.w	r0, r3, lsl #16
 8012344:	bf28      	it	cs
 8012346:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 801234a:	f4bf adc7 	bcs.w	8011edc <Argus_Cal_PrepareCal+0x9fc>
 801234e:	e5c2      	b.n	8011ed6 <Argus_Cal_PrepareCal+0x9f6>
 8012350:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012354:	f080 8236 	bcs.w	80127c4 <Argus_Cal_PrepareCal+0x12e4>
 8012358:	4c2c      	ldr	r4, [pc, #176]	; (801240c <Argus_Cal_PrepareCal+0xf2c>)
 801235a:	4b2d      	ldr	r3, [pc, #180]	; (8012410 <Argus_Cal_PrepareCal+0xf30>)
 801235c:	0400      	lsls	r0, r0, #16
 801235e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8012362:	bf34      	ite	cc
 8012364:	0200      	lslcc	r0, r0, #8
 8012366:	461c      	movcs	r4, r3
 8012368:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 801236c:	d205      	bcs.n	801237a <Argus_Cal_PrepareCal+0xe9a>
 801236e:	f1a4 7431 	sub.w	r4, r4, #46399488	; 0x2c40000
 8012372:	f5a4 34e4 	sub.w	r4, r4, #116736	; 0x1c800
 8012376:	3c60      	subs	r4, #96	; 0x60
 8012378:	0100      	lsls	r0, r0, #4
 801237a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 801237e:	f4bf aac4 	bcs.w	801190a <Argus_Cal_PrepareCal+0x42a>
 8012382:	f1a4 74b1 	sub.w	r4, r4, #23199744	; 0x1620000
 8012386:	0080      	lsls	r0, r0, #2
 8012388:	f5a4 4464 	sub.w	r4, r4, #58368	; 0xe400
 801238c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012390:	f1a4 0430 	sub.w	r4, r4, #48	; 0x30
 8012394:	f4ff aabd 	bcc.w	8011912 <Argus_Cal_PrepareCal+0x432>
 8012398:	eb00 0350 	add.w	r3, r0, r0, lsr #1
 801239c:	4605      	mov	r5, r0
 801239e:	f7ff bac2 	b.w	8011926 <Argus_Cal_PrepareCal+0x446>
 80123a2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80123a6:	f080 820a 	bcs.w	80127be <Argus_Cal_PrepareCal+0x12de>
 80123aa:	4b18      	ldr	r3, [pc, #96]	; (801240c <Argus_Cal_PrepareCal+0xf2c>)
 80123ac:	4d18      	ldr	r5, [pc, #96]	; (8012410 <Argus_Cal_PrepareCal+0xf30>)
 80123ae:	0412      	lsls	r2, r2, #16
 80123b0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80123b4:	bf34      	ite	cc
 80123b6:	0212      	lslcc	r2, r2, #8
 80123b8:	462b      	movcs	r3, r5
 80123ba:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80123be:	d205      	bcs.n	80123cc <Argus_Cal_PrepareCal+0xeec>
 80123c0:	f1a3 7331 	sub.w	r3, r3, #46399488	; 0x2c40000
 80123c4:	f5a3 33e4 	sub.w	r3, r3, #116736	; 0x1c800
 80123c8:	3b60      	subs	r3, #96	; 0x60
 80123ca:	0112      	lsls	r2, r2, #4
 80123cc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80123d0:	f4bf aa1b 	bcs.w	801180a <Argus_Cal_PrepareCal+0x32a>
 80123d4:	f1a3 73b1 	sub.w	r3, r3, #23199744	; 0x1620000
 80123d8:	0092      	lsls	r2, r2, #2
 80123da:	f5a3 4364 	sub.w	r3, r3, #58368	; 0xe400
 80123de:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80123e2:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 80123e6:	f4ff aa14 	bcc.w	8011812 <Argus_Cal_PrepareCal+0x332>
 80123ea:	eb02 0552 	add.w	r5, r2, r2, lsr #1
 80123ee:	4617      	mov	r7, r2
 80123f0:	f7ff ba19 	b.w	8011826 <Argus_Cal_PrepareCal+0x346>
 80123f4:	fd3a37a0 	.word	0xfd3a37a0
 80123f8:	fe9d1bd0 	.word	0xfe9d1bd0
 80123fc:	ff983370 	.word	0xff983370
 8012400:	ffc6e010 	.word	0xffc6e010
 8012404:	007fffff 	.word	0x007fffff
 8012408:	ffff0000 	.word	0xffff0000
 801240c:	f9c2fd29 	.word	0xf9c2fd29
 8012410:	ff4e8de9 	.word	0xff4e8de9
 8012414:	80800000 	.word	0x80800000
 8012418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801241c:	f080 81cc 	bcs.w	80127b8 <Argus_Cal_PrepareCal+0x12d8>
 8012420:	4ad2      	ldr	r2, [pc, #840]	; (801276c <Argus_Cal_PrepareCal+0x128c>)
 8012422:	49d3      	ldr	r1, [pc, #844]	; (8012770 <Argus_Cal_PrepareCal+0x1290>)
 8012424:	041b      	lsls	r3, r3, #16
 8012426:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801242a:	bf34      	ite	cc
 801242c:	021b      	lslcc	r3, r3, #8
 801242e:	460a      	movcs	r2, r1
 8012430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012434:	d205      	bcs.n	8012442 <Argus_Cal_PrepareCal+0xf62>
 8012436:	f1a2 7231 	sub.w	r2, r2, #46399488	; 0x2c40000
 801243a:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
 801243e:	3a60      	subs	r2, #96	; 0x60
 8012440:	011b      	lsls	r3, r3, #4
 8012442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012446:	f4bf a961 	bcs.w	801170c <Argus_Cal_PrepareCal+0x22c>
 801244a:	f1a2 72b1 	sub.w	r2, r2, #23199744	; 0x1620000
 801244e:	009b      	lsls	r3, r3, #2
 8012450:	f5a2 4264 	sub.w	r2, r2, #58368	; 0xe400
 8012454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012458:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
 801245c:	f4ff a95a 	bcc.w	8011714 <Argus_Cal_PrepareCal+0x234>
 8012460:	eb03 0153 	add.w	r1, r3, r3, lsr #1
 8012464:	461c      	mov	r4, r3
 8012466:	f7ff b95f 	b.w	8011728 <Argus_Cal_PrepareCal+0x248>
 801246a:	1ad2      	subs	r2, r2, r3
 801246c:	3280      	adds	r2, #128	; 0x80
 801246e:	0a12      	lsrs	r2, r2, #8
 8012470:	4252      	negs	r2, r2
 8012472:	4613      	mov	r3, r2
 8012474:	f7ff ba33 	b.w	80118de <Argus_Cal_PrepareCal+0x3fe>
 8012478:	1a9b      	subs	r3, r3, r2
 801247a:	3380      	adds	r3, #128	; 0x80
 801247c:	0a1b      	lsrs	r3, r3, #8
 801247e:	4259      	negs	r1, r3
 8012480:	460c      	mov	r4, r1
 8012482:	f7ff b9ac 	b.w	80117de <Argus_Cal_PrepareCal+0x2fe>
 8012486:	1b1b      	subs	r3, r3, r4
 8012488:	3380      	adds	r3, #128	; 0x80
 801248a:	0a1b      	lsrs	r3, r3, #8
 801248c:	f503 308c 	add.w	r0, r3, #71680	; 0x11800
 8012490:	f200 103f 	addw	r0, r0, #319	; 0x13f
 8012494:	185c      	adds	r4, r3, r1
 8012496:	4607      	mov	r7, r0
 8012498:	4413      	add	r3, r2
 801249a:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801249e:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80124a2:	4285      	cmp	r5, r0
 80124a4:	ea84 0c07 	eor.w	ip, r4, r7
 80124a8:	d929      	bls.n	80124fe <Argus_Cal_PrepareCal+0x101e>
 80124aa:	4601      	mov	r1, r0
 80124ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80124b0:	0049      	lsls	r1, r1, #1
 80124b2:	428d      	cmp	r5, r1
 80124b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80124b8:	d8fa      	bhi.n	80124b0 <Argus_Cal_PrepareCal+0xfd0>
 80124ba:	bb32      	cbnz	r2, 801250a <Argus_Cal_PrepareCal+0x102a>
 80124bc:	f1bc 0f00 	cmp.w	ip, #0
 80124c0:	bfb4      	ite	lt
 80124c2:	f04f 4400 	movlt.w	r4, #2147483648	; 0x80000000
 80124c6:	f06f 4400 	mvnge.w	r4, #2147483648	; 0x80000000
 80124ca:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80124ce:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80124d2:	4281      	cmp	r1, r0
 80124d4:	6474      	str	r4, [r6, #68]	; 0x44
 80124d6:	ea83 0307 	eor.w	r3, r3, r7
 80124da:	bf88      	it	hi
 80124dc:	f44f 3280 	movhi.w	r2, #65536	; 0x10000
 80124e0:	d926      	bls.n	8012530 <Argus_Cal_PrepareCal+0x1050>
 80124e2:	0040      	lsls	r0, r0, #1
 80124e4:	4281      	cmp	r1, r0
 80124e6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80124ea:	d8fa      	bhi.n	80124e2 <Argus_Cal_PrepareCal+0x1002>
 80124ec:	bb2a      	cbnz	r2, 801253a <Argus_Cal_PrepareCal+0x105a>
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	bfb4      	ite	lt
 80124f2:	f04f 4700 	movlt.w	r7, #2147483648	; 0x80000000
 80124f6:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 80124fa:	f7ff ba77 	b.w	80119ec <Argus_Cal_PrepareCal+0x50c>
 80124fe:	2d00      	cmp	r5, #0
 8012500:	f000 80c3 	beq.w	801268a <Argus_Cal_PrepareCal+0x11aa>
 8012504:	4601      	mov	r1, r0
 8012506:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801250a:	2400      	movs	r4, #0
 801250c:	e000      	b.n	8012510 <Argus_Cal_PrepareCal+0x1030>
 801250e:	b155      	cbz	r5, 8012526 <Argus_Cal_PrepareCal+0x1046>
 8012510:	42a9      	cmp	r1, r5
 8012512:	bf9c      	itt	ls
 8012514:	1a6d      	subls	r5, r5, r1
 8012516:	4314      	orrls	r4, r2
 8012518:	0852      	lsrs	r2, r2, #1
 801251a:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801251e:	d1f6      	bne.n	801250e <Argus_Cal_PrepareCal+0x102e>
 8012520:	42a9      	cmp	r1, r5
 8012522:	bf98      	it	ls
 8012524:	3401      	addls	r4, #1
 8012526:	f1bc 0f00 	cmp.w	ip, #0
 801252a:	dace      	bge.n	80124ca <Argus_Cal_PrepareCal+0xfea>
 801252c:	4264      	negs	r4, r4
 801252e:	e7cc      	b.n	80124ca <Argus_Cal_PrepareCal+0xfea>
 8012530:	2900      	cmp	r1, #0
 8012532:	f000 80a8 	beq.w	8012686 <Argus_Cal_PrepareCal+0x11a6>
 8012536:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801253a:	2700      	movs	r7, #0
 801253c:	e000      	b.n	8012540 <Argus_Cal_PrepareCal+0x1060>
 801253e:	b151      	cbz	r1, 8012556 <Argus_Cal_PrepareCal+0x1076>
 8012540:	4288      	cmp	r0, r1
 8012542:	bf9c      	itt	ls
 8012544:	1a09      	subls	r1, r1, r0
 8012546:	4317      	orrls	r7, r2
 8012548:	0852      	lsrs	r2, r2, #1
 801254a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801254e:	d1f6      	bne.n	801253e <Argus_Cal_PrepareCal+0x105e>
 8012550:	4288      	cmp	r0, r1
 8012552:	bf98      	it	ls
 8012554:	3701      	addls	r7, #1
 8012556:	2b00      	cmp	r3, #0
 8012558:	bfb8      	it	lt
 801255a:	427f      	neglt	r7, r7
 801255c:	f7ff ba46 	b.w	80119ec <Argus_Cal_PrepareCal+0x50c>
 8012560:	2100      	movs	r1, #0
 8012562:	460c      	mov	r4, r1
 8012564:	f7ff b93b 	b.w	80117de <Argus_Cal_PrepareCal+0x2fe>
 8012568:	2200      	movs	r2, #0
 801256a:	4613      	mov	r3, r2
 801256c:	f7ff b9b7 	b.w	80118de <Argus_Cal_PrepareCal+0x3fe>
 8012570:	4880      	ldr	r0, [pc, #512]	; (8012774 <Argus_Cal_PrepareCal+0x1294>)
 8012572:	4607      	mov	r7, r0
 8012574:	e791      	b.n	801249a <Argus_Cal_PrepareCal+0xfba>
 8012576:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 801257a:	f502 029d 	add.w	r2, r2, #5144576	; 0x4e8000
 801257e:	f602 52e8 	addw	r2, r2, #3560	; 0xde8
 8012582:	004b      	lsls	r3, r1, #1
 8012584:	f7ff ba7b 	b.w	8011a7e <Argus_Cal_PrepareCal+0x59e>
 8012588:	4a7b      	ldr	r2, [pc, #492]	; (8012778 <Argus_Cal_PrepareCal+0x1298>)
 801258a:	0209      	lsls	r1, r1, #8
 801258c:	f7ff ba5f 	b.w	8011a4e <Argus_Cal_PrepareCal+0x56e>
 8012590:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012594:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8012598:	2500      	movs	r5, #0
 801259a:	e002      	b.n	80125a2 <Argus_Cal_PrepareCal+0x10c2>
 801259c:	2b00      	cmp	r3, #0
 801259e:	f43f aace 	beq.w	8011b3e <Argus_Cal_PrepareCal+0x65e>
 80125a2:	4299      	cmp	r1, r3
 80125a4:	bf9c      	itt	ls
 80125a6:	1a5b      	subls	r3, r3, r1
 80125a8:	4315      	orrls	r5, r2
 80125aa:	0852      	lsrs	r2, r2, #1
 80125ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80125b0:	d1f4      	bne.n	801259c <Argus_Cal_PrepareCal+0x10bc>
 80125b2:	428b      	cmp	r3, r1
 80125b4:	bf28      	it	cs
 80125b6:	3501      	addcs	r5, #1
 80125b8:	f7ff bac1 	b.w	8011b3e <Argus_Cal_PrepareCal+0x65e>
 80125bc:	4a6f      	ldr	r2, [pc, #444]	; (801277c <Argus_Cal_PrepareCal+0x129c>)
 80125be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125c2:	f7ff b8ca 	b.w	801175a <Argus_Cal_PrepareCal+0x27a>
 80125c6:	4b6d      	ldr	r3, [pc, #436]	; (801277c <Argus_Cal_PrepareCal+0x129c>)
 80125c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80125cc:	f7ff b944 	b.w	8011858 <Argus_Cal_PrepareCal+0x378>
 80125d0:	4c6a      	ldr	r4, [pc, #424]	; (801277c <Argus_Cal_PrepareCal+0x129c>)
 80125d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125d6:	f7ff b9bf 	b.w	8011958 <Argus_Cal_PrepareCal+0x478>
 80125da:	3901      	subs	r1, #1
 80125dc:	b2c9      	uxtb	r1, r1
 80125de:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
 80125e2:	f7ff b812 	b.w	801160a <Argus_Cal_PrepareCal+0x12a>
 80125e6:	3801      	subs	r0, #1
 80125e8:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
 80125ec:	f7ff b80d 	b.w	801160a <Argus_Cal_PrepareCal+0x12a>
 80125f0:	3001      	adds	r0, #1
 80125f2:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
 80125f6:	f7ff b808 	b.w	801160a <Argus_Cal_PrepareCal+0x12a>
 80125fa:	3101      	adds	r1, #1
 80125fc:	b2c9      	uxtb	r1, r1
 80125fe:	3801      	subs	r0, #1
 8012600:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
 8012604:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
 8012608:	f7fe bfff 	b.w	801160a <Argus_Cal_PrepareCal+0x12a>
 801260c:	3101      	adds	r1, #1
 801260e:	b2c9      	uxtb	r1, r1
 8012610:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
 8012614:	f7fe bff9 	b.w	801160a <Argus_Cal_PrepareCal+0x12a>
 8012618:	3101      	adds	r1, #1
 801261a:	b2c9      	uxtb	r1, r1
 801261c:	3001      	adds	r0, #1
 801261e:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
 8012622:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
 8012626:	f7fe bff0 	b.w	801160a <Argus_Cal_PrepareCal+0x12a>
 801262a:	3901      	subs	r1, #1
 801262c:	b2c9      	uxtb	r1, r1
 801262e:	3801      	subs	r0, #1
 8012630:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
 8012634:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
 8012638:	f7fe bfe7 	b.w	801160a <Argus_Cal_PrepareCal+0x12a>
 801263c:	4603      	mov	r3, r0
 801263e:	f7ff b98b 	b.w	8011958 <Argus_Cal_PrepareCal+0x478>
 8012642:	463a      	mov	r2, r7
 8012644:	f7ff b908 	b.w	8011858 <Argus_Cal_PrepareCal+0x378>
 8012648:	4623      	mov	r3, r4
 801264a:	f7ff b886 	b.w	801175a <Argus_Cal_PrepareCal+0x27a>
 801264e:	2500      	movs	r5, #0
 8012650:	f7ff ba94 	b.w	8011b7c <Argus_Cal_PrepareCal+0x69c>
 8012654:	f641 103f 	movw	r0, #6463	; 0x193f
 8012658:	f5a1 3480 	sub.w	r4, r1, #65536	; 0x10000
 801265c:	f5a2 3380 	sub.w	r3, r2, #65536	; 0x10000
 8012660:	4607      	mov	r7, r0
 8012662:	e71a      	b.n	801249a <Argus_Cal_PrepareCal+0xfba>
 8012664:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8012668:	460c      	mov	r4, r1
 801266a:	f7ff b8b8 	b.w	80117de <Argus_Cal_PrepareCal+0x2fe>
 801266e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012672:	4613      	mov	r3, r2
 8012674:	f7ff b933 	b.w	80118de <Argus_Cal_PrepareCal+0x3fe>
 8012678:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
 801267c:	1acc      	subs	r4, r1, r3
 801267e:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
 8012682:	1ad3      	subs	r3, r2, r3
 8012684:	e709      	b.n	801249a <Argus_Cal_PrepareCal+0xfba>
 8012686:	460f      	mov	r7, r1
 8012688:	e765      	b.n	8012556 <Argus_Cal_PrepareCal+0x1076>
 801268a:	462c      	mov	r4, r5
 801268c:	e74b      	b.n	8012526 <Argus_Cal_PrepareCal+0x1046>
 801268e:	0909      	lsrs	r1, r1, #4
 8012690:	483b      	ldr	r0, [pc, #236]	; (8012780 <Argus_Cal_PrepareCal+0x12a0>)
 8012692:	f7ee fbdd 	bl	8000e50 <print>
 8012696:	f06f 0065 	mvn.w	r0, #101	; 0x65
 801269a:	f7ff b9ab 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 801269e:	0909      	lsrs	r1, r1, #4
 80126a0:	4838      	ldr	r0, [pc, #224]	; (8012784 <Argus_Cal_PrepareCal+0x12a4>)
 80126a2:	f7ee fbd5 	bl	8000e50 <print>
 80126a6:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80126aa:	f7ff b9a3 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 80126ae:	4836      	ldr	r0, [pc, #216]	; (8012788 <Argus_Cal_PrepareCal+0x12a8>)
 80126b0:	f7ee fbce 	bl	8000e50 <print>
 80126b4:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80126b8:	f7ff b99c 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 80126bc:	4833      	ldr	r0, [pc, #204]	; (801278c <Argus_Cal_PrepareCal+0x12ac>)
 80126be:	f7ee fbc7 	bl	8000e50 <print>
 80126c2:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80126c6:	f7ff b995 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 80126ca:	4831      	ldr	r0, [pc, #196]	; (8012790 <Argus_Cal_PrepareCal+0x12b0>)
 80126cc:	f7ee fbc0 	bl	8000e50 <print>
 80126d0:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80126d4:	f7ff b98e 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 80126d8:	4611      	mov	r1, r2
 80126da:	482e      	ldr	r0, [pc, #184]	; (8012794 <Argus_Cal_PrepareCal+0x12b4>)
 80126dc:	f7ee fbb8 	bl	8000e50 <print>
 80126e0:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80126e4:	f7ff b986 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 80126e8:	482b      	ldr	r0, [pc, #172]	; (8012798 <Argus_Cal_PrepareCal+0x12b8>)
 80126ea:	f7ee fbb1 	bl	8000e50 <print>
 80126ee:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80126f2:	f7ff b97f 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 80126f6:	4829      	ldr	r0, [pc, #164]	; (801279c <Argus_Cal_PrepareCal+0x12bc>)
 80126f8:	f7ee fbaa 	bl	8000e50 <print>
 80126fc:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8012700:	f7ff b978 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 8012704:	4826      	ldr	r0, [pc, #152]	; (80127a0 <Argus_Cal_PrepareCal+0x12c0>)
 8012706:	f7ee fba3 	bl	8000e50 <print>
 801270a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 801270e:	f7ff b971 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 8012712:	4824      	ldr	r0, [pc, #144]	; (80127a4 <Argus_Cal_PrepareCal+0x12c4>)
 8012714:	f7ee fb9c 	bl	8000e50 <print>
 8012718:	f06f 0065 	mvn.w	r0, #101	; 0x65
 801271c:	f7ff b96a 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 8012720:	4821      	ldr	r0, [pc, #132]	; (80127a8 <Argus_Cal_PrepareCal+0x12c8>)
 8012722:	f7ee fb95 	bl	8000e50 <print>
 8012726:	f06f 0065 	mvn.w	r0, #101	; 0x65
 801272a:	f7ff b963 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 801272e:	481f      	ldr	r0, [pc, #124]	; (80127ac <Argus_Cal_PrepareCal+0x12cc>)
 8012730:	f7ee fb8e 	bl	8000e50 <print>
 8012734:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8012738:	f7ff b95c 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 801273c:	4611      	mov	r1, r2
 801273e:	481c      	ldr	r0, [pc, #112]	; (80127b0 <Argus_Cal_PrepareCal+0x12d0>)
 8012740:	f7ee fb86 	bl	8000e50 <print>
 8012744:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8012748:	f7ff b954 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 801274c:	4819      	ldr	r0, [pc, #100]	; (80127b4 <Argus_Cal_PrepareCal+0x12d4>)
 801274e:	f7ee fb7f 	bl	8000e50 <print>
 8012752:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8012756:	f7ff b94d 	b.w	80119f4 <Argus_Cal_PrepareCal+0x514>
 801275a:	4a04      	ldr	r2, [pc, #16]	; (801276c <Argus_Cal_PrepareCal+0x128c>)
 801275c:	e715      	b.n	801258a <Argus_Cal_PrepareCal+0x10aa>
 801275e:	4618      	mov	r0, r3
 8012760:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
 8012764:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8012768:	e56a      	b.n	8012240 <Argus_Cal_PrepareCal+0xd60>
 801276a:	bf00      	nop
 801276c:	f9c2fd29 	.word	0xf9c2fd29
 8012770:	ff4e8de9 	.word	0xff4e8de9
 8012774:	0001193f 	.word	0x0001193f
 8012778:	04da1ea8 	.word	0x04da1ea8
 801277c:	0b172180 	.word	0x0b172180
 8012780:	0801ae28 	.word	0x0801ae28
 8012784:	0801af4c 	.word	0x0801af4c
 8012788:	0801afec 	.word	0x0801afec
 801278c:	0801ac34 	.word	0x0801ac34
 8012790:	0801adc4 	.word	0x0801adc4
 8012794:	0801ae94 	.word	0x0801ae94
 8012798:	0801aee8 	.word	0x0801aee8
 801279c:	0801afb4 	.word	0x0801afb4
 80127a0:	0801ac70 	.word	0x0801ac70
 80127a4:	0801acac 	.word	0x0801acac
 80127a8:	0801ace0 	.word	0x0801ace0
 80127ac:	0801ad20 	.word	0x0801ad20
 80127b0:	0801ad70 	.word	0x0801ad70
 80127b4:	0801b020 	.word	0x0801b020
 80127b8:	4a04      	ldr	r2, [pc, #16]	; (80127cc <Argus_Cal_PrepareCal+0x12ec>)
 80127ba:	4905      	ldr	r1, [pc, #20]	; (80127d0 <Argus_Cal_PrepareCal+0x12f0>)
 80127bc:	e633      	b.n	8012426 <Argus_Cal_PrepareCal+0xf46>
 80127be:	4b03      	ldr	r3, [pc, #12]	; (80127cc <Argus_Cal_PrepareCal+0x12ec>)
 80127c0:	4d03      	ldr	r5, [pc, #12]	; (80127d0 <Argus_Cal_PrepareCal+0x12f0>)
 80127c2:	e5f5      	b.n	80123b0 <Argus_Cal_PrepareCal+0xed0>
 80127c4:	4c01      	ldr	r4, [pc, #4]	; (80127cc <Argus_Cal_PrepareCal+0x12ec>)
 80127c6:	4b02      	ldr	r3, [pc, #8]	; (80127d0 <Argus_Cal_PrepareCal+0x12f0>)
 80127c8:	e5c9      	b.n	801235e <Argus_Cal_PrepareCal+0xe7e>
 80127ca:	bf00      	nop
 80127cc:	04da1ea8 	.word	0x04da1ea8
 80127d0:	0a65af68 	.word	0x0a65af68

080127d4 <Argus_Cal_Init>:
 80127d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127d6:	4604      	mov	r4, r0
 80127d8:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 80127dc:	460f      	mov	r7, r1
 80127de:	4616      	mov	r6, r2
 80127e0:	2100      	movs	r1, #0
 80127e2:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
 80127e6:	461d      	mov	r5, r3
 80127e8:	f004 ff9a 	bl	8017720 <memset>
 80127ec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80127f0:	f8c4 74f0 	str.w	r7, [r4, #1264]	; 0x4f0
 80127f4:	f8c4 64f4 	str.w	r6, [r4, #1268]	; 0x4f4
 80127f8:	f8c4 54ec 	str.w	r5, [r4, #1260]	; 0x4ec
 80127fc:	6522      	str	r2, [r4, #80]	; 0x50
 80127fe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8012802:	f004 ff05 	bl	8017610 <NVM_Init>
 8012806:	f110 0f09 	cmn.w	r0, #9
 801280a:	d001      	beq.n	8012810 <Argus_Cal_Init+0x3c>
 801280c:	2800      	cmp	r0, #0
 801280e:	db0f      	blt.n	8012830 <Argus_Cal_Init+0x5c>
 8012810:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8012814:	2100      	movs	r1, #0
 8012816:	a801      	add	r0, sp, #4
 8012818:	f004 ff82 	bl	8017720 <memset>
 801281c:	a901      	add	r1, sp, #4
 801281e:	4620      	mov	r0, r4
 8012820:	f002 ff7e 	bl	8015720 <Argus_Cal_GetCurrentDefaultCalibration>
 8012824:	2800      	cmp	r0, #0
 8012826:	db03      	blt.n	8012830 <Argus_Cal_Init+0x5c>
 8012828:	a901      	add	r1, sp, #4
 801282a:	4620      	mov	r0, r4
 801282c:	f7fe fe58 	bl	80114e0 <Argus_Cal_PrepareCal>
 8012830:	f50d 7d51 	add.w	sp, sp, #836	; 0x344
 8012834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012836:	bf00      	nop

08012838 <Argus_Cal_Update>:
 8012838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283c:	4604      	mov	r4, r0
 801283e:	b0c5      	sub	sp, #276	; 0x114
 8012840:	f8d0 04f0 	ldr.w	r0, [r0, #1264]	; 0x4f0
 8012844:	f7f5 fe88 	bl	8008558 <Argus_Cfg_GetConfigurationPtr>
 8012848:	f890 9000 	ldrb.w	r9, [r0]
 801284c:	4607      	mov	r7, r0
 801284e:	a904      	add	r1, sp, #16
 8012850:	4620      	mov	r0, r4
 8012852:	464a      	mov	r2, r9
 8012854:	f002 fc28 	bl	80150a8 <Argus_Cal_GetInternalXtalkVectorTable>
 8012858:	f1b0 0a00 	subs.w	sl, r0, #0
 801285c:	f2c0 8500 	blt.w	8013260 <Argus_Cal_Update+0xa28>
 8012860:	f109 35ff 	add.w	r5, r9, #4294967295
 8012864:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012868:	fb02 4205 	mla	r2, r2, r5, r4
 801286c:	ab04      	add	r3, sp, #16
 801286e:	f50d 7c88 	add.w	ip, sp, #272	; 0x110
 8012872:	8859      	ldrh	r1, [r3, #2]
 8012874:	f8b2 6274 	ldrh.w	r6, [r2, #628]	; 0x274
 8012878:	f8b3 8000 	ldrh.w	r8, [r3]
 801287c:	f8b2 0272 	ldrh.w	r0, [r2, #626]	; 0x272
 8012880:	f8b2 e276 	ldrh.w	lr, [r2, #630]	; 0x276
 8012884:	4431      	add	r1, r6
 8012886:	889e      	ldrh	r6, [r3, #4]
 8012888:	8059      	strh	r1, [r3, #2]
 801288a:	4440      	add	r0, r8
 801288c:	8018      	strh	r0, [r3, #0]
 801288e:	4476      	add	r6, lr
 8012890:	88d8      	ldrh	r0, [r3, #6]
 8012892:	f8b2 e278 	ldrh.w	lr, [r2, #632]	; 0x278
 8012896:	8919      	ldrh	r1, [r3, #8]
 8012898:	809e      	strh	r6, [r3, #4]
 801289a:	4470      	add	r0, lr
 801289c:	f8b2 e27a 	ldrh.w	lr, [r2, #634]	; 0x27a
 80128a0:	895e      	ldrh	r6, [r3, #10]
 80128a2:	80d8      	strh	r0, [r3, #6]
 80128a4:	4471      	add	r1, lr
 80128a6:	f8b2 e27c 	ldrh.w	lr, [r2, #636]	; 0x27c
 80128aa:	8998      	ldrh	r0, [r3, #12]
 80128ac:	8119      	strh	r1, [r3, #8]
 80128ae:	4476      	add	r6, lr
 80128b0:	f8b2 e27e 	ldrh.w	lr, [r2, #638]	; 0x27e
 80128b4:	89d9      	ldrh	r1, [r3, #14]
 80128b6:	815e      	strh	r6, [r3, #10]
 80128b8:	4470      	add	r0, lr
 80128ba:	f8b2 e280 	ldrh.w	lr, [r2, #640]	; 0x280
 80128be:	8a1e      	ldrh	r6, [r3, #16]
 80128c0:	8198      	strh	r0, [r3, #12]
 80128c2:	4471      	add	r1, lr
 80128c4:	f8b2 e282 	ldrh.w	lr, [r2, #642]	; 0x282
 80128c8:	f8b2 0284 	ldrh.w	r0, [r2, #644]	; 0x284
 80128cc:	81d9      	strh	r1, [r3, #14]
 80128ce:	4476      	add	r6, lr
 80128d0:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 80128d4:	f8b2 1286 	ldrh.w	r1, [r2, #646]	; 0x286
 80128d8:	821e      	strh	r6, [r3, #16]
 80128da:	4470      	add	r0, lr
 80128dc:	f8b3 e014 	ldrh.w	lr, [r3, #20]
 80128e0:	8258      	strh	r0, [r3, #18]
 80128e2:	4471      	add	r1, lr
 80128e4:	8299      	strh	r1, [r3, #20]
 80128e6:	8b19      	ldrh	r1, [r3, #24]
 80128e8:	f8b2 628a 	ldrh.w	r6, [r2, #650]	; 0x28a
 80128ec:	f8b3 8016 	ldrh.w	r8, [r3, #22]
 80128f0:	f8b2 0288 	ldrh.w	r0, [r2, #648]	; 0x288
 80128f4:	f8b2 e28c 	ldrh.w	lr, [r2, #652]	; 0x28c
 80128f8:	4431      	add	r1, r6
 80128fa:	8b5e      	ldrh	r6, [r3, #26]
 80128fc:	8319      	strh	r1, [r3, #24]
 80128fe:	4440      	add	r0, r8
 8012900:	82d8      	strh	r0, [r3, #22]
 8012902:	4476      	add	r6, lr
 8012904:	8b98      	ldrh	r0, [r3, #28]
 8012906:	f8b2 e28e 	ldrh.w	lr, [r2, #654]	; 0x28e
 801290a:	8bd9      	ldrh	r1, [r3, #30]
 801290c:	835e      	strh	r6, [r3, #26]
 801290e:	4470      	add	r0, lr
 8012910:	f8b2 e290 	ldrh.w	lr, [r2, #656]	; 0x290
 8012914:	8c1e      	ldrh	r6, [r3, #32]
 8012916:	8398      	strh	r0, [r3, #28]
 8012918:	4471      	add	r1, lr
 801291a:	f8b2 e292 	ldrh.w	lr, [r2, #658]	; 0x292
 801291e:	8c58      	ldrh	r0, [r3, #34]	; 0x22
 8012920:	83d9      	strh	r1, [r3, #30]
 8012922:	4476      	add	r6, lr
 8012924:	f8b2 e294 	ldrh.w	lr, [r2, #660]	; 0x294
 8012928:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 801292a:	841e      	strh	r6, [r3, #32]
 801292c:	4470      	add	r0, lr
 801292e:	f8b2 e296 	ldrh.w	lr, [r2, #662]	; 0x296
 8012932:	8cde      	ldrh	r6, [r3, #38]	; 0x26
 8012934:	8458      	strh	r0, [r3, #34]	; 0x22
 8012936:	4471      	add	r1, lr
 8012938:	f8b2 e298 	ldrh.w	lr, [r2, #664]	; 0x298
 801293c:	f8b2 029a 	ldrh.w	r0, [r2, #666]	; 0x29a
 8012940:	8499      	strh	r1, [r3, #36]	; 0x24
 8012942:	4476      	add	r6, lr
 8012944:	f8b3 e028 	ldrh.w	lr, [r3, #40]	; 0x28
 8012948:	f8b2 129c 	ldrh.w	r1, [r2, #668]	; 0x29c
 801294c:	84de      	strh	r6, [r3, #38]	; 0x26
 801294e:	4470      	add	r0, lr
 8012950:	f8b3 e02a 	ldrh.w	lr, [r3, #42]	; 0x2a
 8012954:	8518      	strh	r0, [r3, #40]	; 0x28
 8012956:	4471      	add	r1, lr
 8012958:	8559      	strh	r1, [r3, #42]	; 0x2a
 801295a:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 801295c:	f8b2 62a0 	ldrh.w	r6, [r2, #672]	; 0x2a0
 8012960:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
 8012964:	f8b2 029e 	ldrh.w	r0, [r2, #670]	; 0x29e
 8012968:	f8b2 e2a2 	ldrh.w	lr, [r2, #674]	; 0x2a2
 801296c:	4431      	add	r1, r6
 801296e:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 8012970:	85d9      	strh	r1, [r3, #46]	; 0x2e
 8012972:	4440      	add	r0, r8
 8012974:	8598      	strh	r0, [r3, #44]	; 0x2c
 8012976:	4476      	add	r6, lr
 8012978:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801297a:	f8b2 e2a4 	ldrh.w	lr, [r2, #676]	; 0x2a4
 801297e:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8012980:	861e      	strh	r6, [r3, #48]	; 0x30
 8012982:	4470      	add	r0, lr
 8012984:	f8b2 e2a6 	ldrh.w	lr, [r2, #678]	; 0x2a6
 8012988:	8ede      	ldrh	r6, [r3, #54]	; 0x36
 801298a:	8658      	strh	r0, [r3, #50]	; 0x32
 801298c:	4471      	add	r1, lr
 801298e:	f8b2 e2a8 	ldrh.w	lr, [r2, #680]	; 0x2a8
 8012992:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8012994:	8699      	strh	r1, [r3, #52]	; 0x34
 8012996:	4476      	add	r6, lr
 8012998:	f8b2 e2aa 	ldrh.w	lr, [r2, #682]	; 0x2aa
 801299c:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 801299e:	86de      	strh	r6, [r3, #54]	; 0x36
 80129a0:	4470      	add	r0, lr
 80129a2:	f8b2 e2ac 	ldrh.w	lr, [r2, #684]	; 0x2ac
 80129a6:	8f9e      	ldrh	r6, [r3, #60]	; 0x3c
 80129a8:	8718      	strh	r0, [r3, #56]	; 0x38
 80129aa:	4471      	add	r1, lr
 80129ac:	f8b2 e2ae 	ldrh.w	lr, [r2, #686]	; 0x2ae
 80129b0:	f8b2 02b0 	ldrh.w	r0, [r2, #688]	; 0x2b0
 80129b4:	8759      	strh	r1, [r3, #58]	; 0x3a
 80129b6:	4476      	add	r6, lr
 80129b8:	f8b3 e03e 	ldrh.w	lr, [r3, #62]	; 0x3e
 80129bc:	f8b2 12b2 	ldrh.w	r1, [r2, #690]	; 0x2b2
 80129c0:	879e      	strh	r6, [r3, #60]	; 0x3c
 80129c2:	4470      	add	r0, lr
 80129c4:	f8b3 e040 	ldrh.w	lr, [r3, #64]	; 0x40
 80129c8:	87d8      	strh	r0, [r3, #62]	; 0x3e
 80129ca:	4471      	add	r1, lr
 80129cc:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
 80129d0:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 80129d4:	f8b2 62b6 	ldrh.w	r6, [r2, #694]	; 0x2b6
 80129d8:	f8b3 8042 	ldrh.w	r8, [r3, #66]	; 0x42
 80129dc:	f8b2 02b4 	ldrh.w	r0, [r2, #692]	; 0x2b4
 80129e0:	f8b2 e2b8 	ldrh.w	lr, [r2, #696]	; 0x2b8
 80129e4:	4431      	add	r1, r6
 80129e6:	f8b3 6046 	ldrh.w	r6, [r3, #70]	; 0x46
 80129ea:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
 80129ee:	4440      	add	r0, r8
 80129f0:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
 80129f4:	4476      	add	r6, lr
 80129f6:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80129fa:	f8b2 e2ba 	ldrh.w	lr, [r2, #698]	; 0x2ba
 80129fe:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8012a02:	f8a3 6046 	strh.w	r6, [r3, #70]	; 0x46
 8012a06:	4470      	add	r0, lr
 8012a08:	f8b2 e2bc 	ldrh.w	lr, [r2, #700]	; 0x2bc
 8012a0c:	f8b3 604c 	ldrh.w	r6, [r3, #76]	; 0x4c
 8012a10:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
 8012a14:	4471      	add	r1, lr
 8012a16:	f8b2 e2be 	ldrh.w	lr, [r2, #702]	; 0x2be
 8012a1a:	f8b3 004e 	ldrh.w	r0, [r3, #78]	; 0x4e
 8012a1e:	f8a3 104a 	strh.w	r1, [r3, #74]	; 0x4a
 8012a22:	4476      	add	r6, lr
 8012a24:	f8b2 e2c0 	ldrh.w	lr, [r2, #704]	; 0x2c0
 8012a28:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8012a2c:	f8a3 604c 	strh.w	r6, [r3, #76]	; 0x4c
 8012a30:	4470      	add	r0, lr
 8012a32:	f8b2 e2c2 	ldrh.w	lr, [r2, #706]	; 0x2c2
 8012a36:	f8b3 6052 	ldrh.w	r6, [r3, #82]	; 0x52
 8012a3a:	f8a3 004e 	strh.w	r0, [r3, #78]	; 0x4e
 8012a3e:	4471      	add	r1, lr
 8012a40:	f8b2 e2c4 	ldrh.w	lr, [r2, #708]	; 0x2c4
 8012a44:	f8b2 02c6 	ldrh.w	r0, [r2, #710]	; 0x2c6
 8012a48:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 8012a4c:	4476      	add	r6, lr
 8012a4e:	f8b3 e054 	ldrh.w	lr, [r3, #84]	; 0x54
 8012a52:	f8b2 12c8 	ldrh.w	r1, [r2, #712]	; 0x2c8
 8012a56:	f8a3 6052 	strh.w	r6, [r3, #82]	; 0x52
 8012a5a:	4470      	add	r0, lr
 8012a5c:	f8b3 e056 	ldrh.w	lr, [r3, #86]	; 0x56
 8012a60:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
 8012a64:	4471      	add	r1, lr
 8012a66:	f8a3 1056 	strh.w	r1, [r3, #86]	; 0x56
 8012a6a:	f8b3 105a 	ldrh.w	r1, [r3, #90]	; 0x5a
 8012a6e:	f8b2 62cc 	ldrh.w	r6, [r2, #716]	; 0x2cc
 8012a72:	f8b3 8058 	ldrh.w	r8, [r3, #88]	; 0x58
 8012a76:	f8b2 02ca 	ldrh.w	r0, [r2, #714]	; 0x2ca
 8012a7a:	f8b2 e2ce 	ldrh.w	lr, [r2, #718]	; 0x2ce
 8012a7e:	4431      	add	r1, r6
 8012a80:	f8b3 605c 	ldrh.w	r6, [r3, #92]	; 0x5c
 8012a84:	f8a3 105a 	strh.w	r1, [r3, #90]	; 0x5a
 8012a88:	4440      	add	r0, r8
 8012a8a:	f8a3 0058 	strh.w	r0, [r3, #88]	; 0x58
 8012a8e:	4476      	add	r6, lr
 8012a90:	f8b3 005e 	ldrh.w	r0, [r3, #94]	; 0x5e
 8012a94:	f8b2 e2d0 	ldrh.w	lr, [r2, #720]	; 0x2d0
 8012a98:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 8012a9c:	f8a3 605c 	strh.w	r6, [r3, #92]	; 0x5c
 8012aa0:	4470      	add	r0, lr
 8012aa2:	f8b2 e2d2 	ldrh.w	lr, [r2, #722]	; 0x2d2
 8012aa6:	f8b3 6062 	ldrh.w	r6, [r3, #98]	; 0x62
 8012aaa:	f8a3 005e 	strh.w	r0, [r3, #94]	; 0x5e
 8012aae:	4471      	add	r1, lr
 8012ab0:	f8b2 e2d4 	ldrh.w	lr, [r2, #724]	; 0x2d4
 8012ab4:	f8b3 0064 	ldrh.w	r0, [r3, #100]	; 0x64
 8012ab8:	f8a3 1060 	strh.w	r1, [r3, #96]	; 0x60
 8012abc:	4476      	add	r6, lr
 8012abe:	f8b2 e2d6 	ldrh.w	lr, [r2, #726]	; 0x2d6
 8012ac2:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
 8012ac6:	f8a3 6062 	strh.w	r6, [r3, #98]	; 0x62
 8012aca:	4470      	add	r0, lr
 8012acc:	f8b2 e2d8 	ldrh.w	lr, [r2, #728]	; 0x2d8
 8012ad0:	f8b3 6068 	ldrh.w	r6, [r3, #104]	; 0x68
 8012ad4:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
 8012ad8:	4471      	add	r1, lr
 8012ada:	f8b2 e2da 	ldrh.w	lr, [r2, #730]	; 0x2da
 8012ade:	f8b2 02dc 	ldrh.w	r0, [r2, #732]	; 0x2dc
 8012ae2:	f8a3 1066 	strh.w	r1, [r3, #102]	; 0x66
 8012ae6:	4476      	add	r6, lr
 8012ae8:	f8b3 e06a 	ldrh.w	lr, [r3, #106]	; 0x6a
 8012aec:	f8b2 12de 	ldrh.w	r1, [r2, #734]	; 0x2de
 8012af0:	f8a3 6068 	strh.w	r6, [r3, #104]	; 0x68
 8012af4:	4470      	add	r0, lr
 8012af6:	f8b3 e06c 	ldrh.w	lr, [r3, #108]	; 0x6c
 8012afa:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
 8012afe:	4471      	add	r1, lr
 8012b00:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
 8012b04:	f8b3 0070 	ldrh.w	r0, [r3, #112]	; 0x70
 8012b08:	f8b2 12e2 	ldrh.w	r1, [r2, #738]	; 0x2e2
 8012b0c:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
 8012b10:	f8b2 62e0 	ldrh.w	r6, [r2, #736]	; 0x2e0
 8012b14:	f8b3 e072 	ldrh.w	lr, [r3, #114]	; 0x72
 8012b18:	4408      	add	r0, r1
 8012b1a:	f8b2 12e4 	ldrh.w	r1, [r2, #740]	; 0x2e4
 8012b1e:	f8a3 0070 	strh.w	r0, [r3, #112]	; 0x70
 8012b22:	4446      	add	r6, r8
 8012b24:	f8a3 606e 	strh.w	r6, [r3, #110]	; 0x6e
 8012b28:	4471      	add	r1, lr
 8012b2a:	f8b2 62e6 	ldrh.w	r6, [r2, #742]	; 0x2e6
 8012b2e:	f8b3 e074 	ldrh.w	lr, [r3, #116]	; 0x74
 8012b32:	f8b2 02e8 	ldrh.w	r0, [r2, #744]	; 0x2e8
 8012b36:	f8a3 1072 	strh.w	r1, [r3, #114]	; 0x72
 8012b3a:	4476      	add	r6, lr
 8012b3c:	f8b3 e076 	ldrh.w	lr, [r3, #118]	; 0x76
 8012b40:	f8b3 1078 	ldrh.w	r1, [r3, #120]	; 0x78
 8012b44:	f8a3 6074 	strh.w	r6, [r3, #116]	; 0x74
 8012b48:	4470      	add	r0, lr
 8012b4a:	f8b2 e2ea 	ldrh.w	lr, [r2, #746]	; 0x2ea
 8012b4e:	f8b2 62ec 	ldrh.w	r6, [r2, #748]	; 0x2ec
 8012b52:	f8a3 0076 	strh.w	r0, [r3, #118]	; 0x76
 8012b56:	4471      	add	r1, lr
 8012b58:	f8b3 e07a 	ldrh.w	lr, [r3, #122]	; 0x7a
 8012b5c:	f8b3 007c 	ldrh.w	r0, [r3, #124]	; 0x7c
 8012b60:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
 8012b64:	4476      	add	r6, lr
 8012b66:	f8b2 e2ee 	ldrh.w	lr, [r2, #750]	; 0x2ee
 8012b6a:	f8b2 12f0 	ldrh.w	r1, [r2, #752]	; 0x2f0
 8012b6e:	f8a3 607a 	strh.w	r6, [r3, #122]	; 0x7a
 8012b72:	4470      	add	r0, lr
 8012b74:	f8b3 e07e 	ldrh.w	lr, [r3, #126]	; 0x7e
 8012b78:	f8a3 007c 	strh.w	r0, [r3, #124]	; 0x7c
 8012b7c:	4471      	add	r1, lr
 8012b7e:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
 8012b82:	3380      	adds	r3, #128	; 0x80
 8012b84:	459c      	cmp	ip, r3
 8012b86:	f102 0280 	add.w	r2, r2, #128	; 0x80
 8012b8a:	f47f ae72 	bne.w	8012872 <Argus_Cal_Update+0x3a>
 8012b8e:	f1ba 0f00 	cmp.w	sl, #0
 8012b92:	f040 8365 	bne.w	8013260 <Argus_Cal_Update+0xa28>
 8012b96:	ea4f 1885 	mov.w	r8, r5, lsl #6
 8012b9a:	eb08 0305 	add.w	r3, r8, r5
 8012b9e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012ba2:	4650      	mov	r0, sl
 8012ba4:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 8012ba8:	4626      	mov	r6, r4
 8012baa:	4621      	mov	r1, r4
 8012bac:	e042      	b.n	8012c34 <Argus_Cal_Update+0x3fc>
 8012bae:	f50e 7e00 	add.w	lr, lr, #512	; 0x200
 8012bb2:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8012bb6:	eb03 0a02 	add.w	sl, r3, r2
 8012bba:	f10d 0b10 	add.w	fp, sp, #16
 8012bbe:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
 8012bc2:	f8a1 e058 	strh.w	lr, [r1, #88]	; 0x58
 8012bc6:	f9ba e002 	ldrsh.w	lr, [sl, #2]
 8012bca:	fb0c fe0e 	mul.w	lr, ip, lr
 8012bce:	f1be 0f00 	cmp.w	lr, #0
 8012bd2:	f2c0 82ea 	blt.w	80131aa <Argus_Cal_Update+0x972>
 8012bd6:	f50e 7e00 	add.w	lr, lr, #512	; 0x200
 8012bda:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8012bde:	eb03 0a02 	add.w	sl, r3, r2
 8012be2:	f10a 0a20 	add.w	sl, sl, #32
 8012be6:	f8a1 e05a 	strh.w	lr, [r1, #90]	; 0x5a
 8012bea:	f10d 0e10 	add.w	lr, sp, #16
 8012bee:	f93e e02a 	ldrsh.w	lr, [lr, sl, lsl #2]
 8012bf2:	fb0c fe0e 	mul.w	lr, ip, lr
 8012bf6:	f1be 0f00 	cmp.w	lr, #0
 8012bfa:	f2c0 82cf 	blt.w	801319c <Argus_Cal_Update+0x964>
 8012bfe:	f50e 7e00 	add.w	lr, lr, #512	; 0x200
 8012c02:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8012c06:	4413      	add	r3, r2
 8012c08:	aa04      	add	r2, sp, #16
 8012c0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c0e:	f8a1 e0d8 	strh.w	lr, [r1, #216]	; 0xd8
 8012c12:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8012c16:	fb0c f303 	mul.w	r3, ip, r3
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	da28      	bge.n	8012c70 <Argus_Cal_Update+0x438>
 8012c1e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012c22:	0a9b      	lsrs	r3, r3, #10
 8012c24:	3001      	adds	r0, #1
 8012c26:	425b      	negs	r3, r3
 8012c28:	2820      	cmp	r0, #32
 8012c2a:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
 8012c2e:	f101 0104 	add.w	r1, r1, #4
 8012c32:	d027      	beq.n	8012c84 <Argus_Cal_Update+0x44c>
 8012c34:	08c2      	lsrs	r2, r0, #3
 8012c36:	ea6f 0350 	mvn.w	r3, r0, lsr #1
 8012c3a:	f002 0e02 	and.w	lr, r2, #2
 8012c3e:	f003 0307 	and.w	r3, r3, #7
 8012c42:	f000 0201 	and.w	r2, r0, #1
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	ea4e 0202 	orr.w	r2, lr, r2
 8012c4c:	eb03 0e02 	add.w	lr, r3, r2
 8012c50:	f10d 0a10 	add.w	sl, sp, #16
 8012c54:	f93a e02e 	ldrsh.w	lr, [sl, lr, lsl #2]
 8012c58:	fb0c fe0e 	mul.w	lr, ip, lr
 8012c5c:	f1be 0f00 	cmp.w	lr, #0
 8012c60:	daa5      	bge.n	8012bae <Argus_Cal_Update+0x376>
 8012c62:	f5ce 7e00 	rsb	lr, lr, #512	; 0x200
 8012c66:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8012c6a:	f1ce 0e00 	rsb	lr, lr, #0
 8012c6e:	e7a2      	b.n	8012bb6 <Argus_Cal_Update+0x37e>
 8012c70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8012c74:	3001      	adds	r0, #1
 8012c76:	0a9b      	lsrs	r3, r3, #10
 8012c78:	2820      	cmp	r0, #32
 8012c7a:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
 8012c7e:	f101 0104 	add.w	r1, r1, #4
 8012c82:	d1d7      	bne.n	8012c34 <Argus_Cal_Update+0x3fc>
 8012c84:	464a      	mov	r2, r9
 8012c86:	f504 71ac 	add.w	r1, r4, #344	; 0x158
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f002 f966 	bl	8014f5c <Argus_Cal_GetInternalPixelRangeOffsets>
 8012c90:	f1b0 0a00 	subs.w	sl, r0, #0
 8012c94:	f2c0 82e4 	blt.w	8013260 <Argus_Cal_Update+0xa28>
 8012c98:	f44f 79b4 	mov.w	r9, #360	; 0x168
 8012c9c:	fb09 4905 	mla	r9, r9, r5, r4
 8012ca0:	f8b4 2158 	ldrh.w	r2, [r4, #344]	; 0x158
 8012ca4:	f8b9 3230 	ldrh.w	r3, [r9, #560]	; 0x230
 8012ca8:	f8b4 115a 	ldrh.w	r1, [r4, #346]	; 0x15a
 8012cac:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
 8012cb0:	4413      	add	r3, r2
 8012cb2:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
 8012cb6:	f8b9 2232 	ldrh.w	r2, [r9, #562]	; 0x232
 8012cba:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
 8012cbe:	440a      	add	r2, r1
 8012cc0:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
 8012cc4:	f8b9 2234 	ldrh.w	r2, [r9, #564]	; 0x234
 8012cc8:	f8b4 1160 	ldrh.w	r1, [r4, #352]	; 0x160
 8012ccc:	4413      	add	r3, r2
 8012cce:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8012cd2:	f8b9 2236 	ldrh.w	r2, [r9, #566]	; 0x236
 8012cd6:	4402      	add	r2, r0
 8012cd8:	f8a4 215e 	strh.w	r2, [r4, #350]	; 0x15e
 8012cdc:	f8b9 3238 	ldrh.w	r3, [r9, #568]	; 0x238
 8012ce0:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
 8012ce4:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
 8012ce8:	440b      	add	r3, r1
 8012cea:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
 8012cee:	f8b9 323a 	ldrh.w	r3, [r9, #570]	; 0x23a
 8012cf2:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
 8012cf6:	441a      	add	r2, r3
 8012cf8:	f8a4 2162 	strh.w	r2, [r4, #354]	; 0x162
 8012cfc:	f8b9 323c 	ldrh.w	r3, [r9, #572]	; 0x23c
 8012d00:	440b      	add	r3, r1
 8012d02:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
 8012d06:	f8b9 223e 	ldrh.w	r2, [r9, #574]	; 0x23e
 8012d0a:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
 8012d0e:	4402      	add	r2, r0
 8012d10:	f8a4 2166 	strh.w	r2, [r4, #358]	; 0x166
 8012d14:	f8b9 3240 	ldrh.w	r3, [r9, #576]	; 0x240
 8012d18:	f8b4 016a 	ldrh.w	r0, [r4, #362]	; 0x16a
 8012d1c:	440b      	add	r3, r1
 8012d1e:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
 8012d22:	f8b9 2242 	ldrh.w	r2, [r9, #578]	; 0x242
 8012d26:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
 8012d2a:	4402      	add	r2, r0
 8012d2c:	f8a4 216a 	strh.w	r2, [r4, #362]	; 0x16a
 8012d30:	f8b9 3244 	ldrh.w	r3, [r9, #580]	; 0x244
 8012d34:	440b      	add	r3, r1
 8012d36:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
 8012d3a:	f8b9 3246 	ldrh.w	r3, [r9, #582]	; 0x246
 8012d3e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8012d42:	f8b4 0170 	ldrh.w	r0, [r4, #368]	; 0x170
 8012d46:	f8b4 1172 	ldrh.w	r1, [r4, #370]	; 0x172
 8012d4a:	4413      	add	r3, r2
 8012d4c:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
 8012d50:	f8b9 2248 	ldrh.w	r2, [r9, #584]	; 0x248
 8012d54:	4402      	add	r2, r0
 8012d56:	f8a4 2170 	strh.w	r2, [r4, #368]	; 0x170
 8012d5a:	f8b9 324a 	ldrh.w	r3, [r9, #586]	; 0x24a
 8012d5e:	f8b4 0174 	ldrh.w	r0, [r4, #372]	; 0x174
 8012d62:	440b      	add	r3, r1
 8012d64:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
 8012d68:	f8b9 224c 	ldrh.w	r2, [r9, #588]	; 0x24c
 8012d6c:	f8b4 1176 	ldrh.w	r1, [r4, #374]	; 0x176
 8012d70:	4402      	add	r2, r0
 8012d72:	f8a4 2174 	strh.w	r2, [r4, #372]	; 0x174
 8012d76:	f8b9 324e 	ldrh.w	r3, [r9, #590]	; 0x24e
 8012d7a:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
 8012d7e:	440b      	add	r3, r1
 8012d80:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
 8012d84:	f8b9 2250 	ldrh.w	r2, [r9, #592]	; 0x250
 8012d88:	f8b4 117a 	ldrh.w	r1, [r4, #378]	; 0x17a
 8012d8c:	4402      	add	r2, r0
 8012d8e:	f8a4 2178 	strh.w	r2, [r4, #376]	; 0x178
 8012d92:	f8b9 3252 	ldrh.w	r3, [r9, #594]	; 0x252
 8012d96:	f8b4 017c 	ldrh.w	r0, [r4, #380]	; 0x17c
 8012d9a:	440b      	add	r3, r1
 8012d9c:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
 8012da0:	f8b9 2254 	ldrh.w	r2, [r9, #596]	; 0x254
 8012da4:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
 8012da8:	4402      	add	r2, r0
 8012daa:	f8a4 217c 	strh.w	r2, [r4, #380]	; 0x17c
 8012dae:	f8b9 3256 	ldrh.w	r3, [r9, #598]	; 0x256
 8012db2:	f8b4 0180 	ldrh.w	r0, [r4, #384]	; 0x180
 8012db6:	440b      	add	r3, r1
 8012db8:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
 8012dbc:	f8b9 2258 	ldrh.w	r2, [r9, #600]	; 0x258
 8012dc0:	f8b4 1182 	ldrh.w	r1, [r4, #386]	; 0x182
 8012dc4:	4402      	add	r2, r0
 8012dc6:	f8a4 2180 	strh.w	r2, [r4, #384]	; 0x180
 8012dca:	f8b9 325a 	ldrh.w	r3, [r9, #602]	; 0x25a
 8012dce:	440b      	add	r3, r1
 8012dd0:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
 8012dd4:	f8b9 225c 	ldrh.w	r2, [r9, #604]	; 0x25c
 8012dd8:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
 8012ddc:	f8b4 1186 	ldrh.w	r1, [r4, #390]	; 0x186
 8012de0:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
 8012de4:	441a      	add	r2, r3
 8012de6:	f8a4 2184 	strh.w	r2, [r4, #388]	; 0x184
 8012dea:	f8b9 325e 	ldrh.w	r3, [r9, #606]	; 0x25e
 8012dee:	440b      	add	r3, r1
 8012df0:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
 8012df4:	f8b9 2260 	ldrh.w	r2, [r9, #608]	; 0x260
 8012df8:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
 8012dfc:	4402      	add	r2, r0
 8012dfe:	f8a4 2188 	strh.w	r2, [r4, #392]	; 0x188
 8012e02:	f8b9 3262 	ldrh.w	r3, [r9, #610]	; 0x262
 8012e06:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
 8012e0a:	440b      	add	r3, r1
 8012e0c:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
 8012e10:	f8b9 2264 	ldrh.w	r2, [r9, #612]	; 0x264
 8012e14:	f8b4 118e 	ldrh.w	r1, [r4, #398]	; 0x18e
 8012e18:	4402      	add	r2, r0
 8012e1a:	f8a4 218c 	strh.w	r2, [r4, #396]	; 0x18c
 8012e1e:	f8b9 3266 	ldrh.w	r3, [r9, #614]	; 0x266
 8012e22:	f8b4 2190 	ldrh.w	r2, [r4, #400]	; 0x190
 8012e26:	440b      	add	r3, r1
 8012e28:	f8a4 318e 	strh.w	r3, [r4, #398]	; 0x18e
 8012e2c:	f8b9 1268 	ldrh.w	r1, [r9, #616]	; 0x268
 8012e30:	f8b4 3192 	ldrh.w	r3, [r4, #402]	; 0x192
 8012e34:	440a      	add	r2, r1
 8012e36:	f8a4 2190 	strh.w	r2, [r4, #400]	; 0x190
 8012e3a:	f8b9 226a 	ldrh.w	r2, [r9, #618]	; 0x26a
 8012e3e:	f8b4 1194 	ldrh.w	r1, [r4, #404]	; 0x194
 8012e42:	4413      	add	r3, r2
 8012e44:	f8a4 3192 	strh.w	r3, [r4, #402]	; 0x192
 8012e48:	f8b9 226c 	ldrh.w	r2, [r9, #620]	; 0x26c
 8012e4c:	f8b4 3196 	ldrh.w	r3, [r4, #406]	; 0x196
 8012e50:	440a      	add	r2, r1
 8012e52:	f8a4 2194 	strh.w	r2, [r4, #404]	; 0x194
 8012e56:	f8b9 226e 	ldrh.w	r2, [r9, #622]	; 0x26e
 8012e5a:	4413      	add	r3, r2
 8012e5c:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
 8012e60:	f040 81fe 	bne.w	8013260 <Argus_Cal_Update+0xa28>
 8012e64:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 8012e68:	f7fc f89e 	bl	800efa8 <Argus_Dev_GetPixelCount>
 8012e6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012e70:	fbb2 f3f0 	udiv	r3, r2, r0
 8012e74:	0400      	lsls	r0, r0, #16
 8012e76:	6323      	str	r3, [r4, #48]	; 0x30
 8012e78:	f000 8322 	beq.w	80134c0 <Argus_Cal_Update+0xc88>
 8012e7c:	f9b9 137c 	ldrsh.w	r1, [r9, #892]	; 0x37c
 8012e80:	0109      	lsls	r1, r1, #4
 8012e82:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 8012e86:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8012e8a:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
 8012e8e:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8012e92:	459c      	cmp	ip, r3
 8012e94:	ea81 0900 	eor.w	r9, r1, r0
 8012e98:	f240 84b3 	bls.w	8013802 <Argus_Cal_Update+0xfca>
 8012e9c:	4619      	mov	r1, r3
 8012e9e:	0049      	lsls	r1, r1, #1
 8012ea0:	458c      	cmp	ip, r1
 8012ea2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012ea6:	d8fa      	bhi.n	8012e9e <Argus_Cal_Update+0x666>
 8012ea8:	2a00      	cmp	r2, #0
 8012eaa:	f040 84af 	bne.w	801380c <Argus_Cal_Update+0xfd4>
 8012eae:	f1b9 0f00 	cmp.w	r9, #0
 8012eb2:	bfb4      	ite	lt
 8012eb4:	f04f 4200 	movlt.w	r2, #2147483648	; 0x80000000
 8012eb8:	f06f 4200 	mvnge.w	r2, #2147483648	; 0x80000000
 8012ebc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8012ec0:	fb01 4105 	mla	r1, r1, r5, r4
 8012ec4:	6362      	str	r2, [r4, #52]	; 0x34
 8012ec6:	f9b1 237e 	ldrsh.w	r2, [r1, #894]	; 0x37e
 8012eca:	0112      	lsls	r2, r2, #4
 8012ecc:	ea82 7ce2 	eor.w	ip, r2, r2, asr #31
 8012ed0:	ebac 7ce2 	sub.w	ip, ip, r2, asr #31
 8012ed4:	4563      	cmp	r3, ip
 8012ed6:	ea80 0902 	eor.w	r9, r0, r2
 8012eda:	f080 846e 	bcs.w	80137ba <Argus_Cal_Update+0xf82>
 8012ede:	4619      	mov	r1, r3
 8012ee0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012ee4:	0049      	lsls	r1, r1, #1
 8012ee6:	458c      	cmp	ip, r1
 8012ee8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012eec:	d8fa      	bhi.n	8012ee4 <Argus_Cal_Update+0x6ac>
 8012eee:	2a00      	cmp	r2, #0
 8012ef0:	f040 846a 	bne.w	80137c8 <Argus_Cal_Update+0xf90>
 8012ef4:	f1b9 0f00 	cmp.w	r9, #0
 8012ef8:	bfb4      	ite	lt
 8012efa:	f04f 4200 	movlt.w	r2, #2147483648	; 0x80000000
 8012efe:	f06f 4200 	mvnge.w	r2, #2147483648	; 0x80000000
 8012f02:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8012f06:	fb01 4105 	mla	r1, r1, r5, r4
 8012f0a:	63a2      	str	r2, [r4, #56]	; 0x38
 8012f0c:	f9b1 2380 	ldrsh.w	r2, [r1, #896]	; 0x380
 8012f10:	0112      	lsls	r2, r2, #4
 8012f12:	ea82 7ce2 	eor.w	ip, r2, r2, asr #31
 8012f16:	ebac 7ce2 	sub.w	ip, ip, r2, asr #31
 8012f1a:	4563      	cmp	r3, ip
 8012f1c:	ea80 0902 	eor.w	r9, r0, r2
 8012f20:	f080 8427 	bcs.w	8013772 <Argus_Cal_Update+0xf3a>
 8012f24:	4619      	mov	r1, r3
 8012f26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012f2a:	0049      	lsls	r1, r1, #1
 8012f2c:	458c      	cmp	ip, r1
 8012f2e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012f32:	d8fa      	bhi.n	8012f2a <Argus_Cal_Update+0x6f2>
 8012f34:	2a00      	cmp	r2, #0
 8012f36:	f040 8423 	bne.w	8013780 <Argus_Cal_Update+0xf48>
 8012f3a:	f1b9 0f00 	cmp.w	r9, #0
 8012f3e:	bfb4      	ite	lt
 8012f40:	f04f 4200 	movlt.w	r2, #2147483648	; 0x80000000
 8012f44:	f06f 4200 	mvnge.w	r2, #2147483648	; 0x80000000
 8012f48:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8012f4c:	fb01 4105 	mla	r1, r1, r5, r4
 8012f50:	63e2      	str	r2, [r4, #60]	; 0x3c
 8012f52:	f9b1 2382 	ldrsh.w	r2, [r1, #898]	; 0x382
 8012f56:	0112      	lsls	r2, r2, #4
 8012f58:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8012f5c:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8012f60:	428b      	cmp	r3, r1
 8012f62:	ea80 0c02 	eor.w	ip, r0, r2
 8012f66:	bf38      	it	cc
 8012f68:	f44f 3280 	movcc.w	r2, #65536	; 0x10000
 8012f6c:	f080 83e9 	bcs.w	8013742 <Argus_Cal_Update+0xf0a>
 8012f70:	005b      	lsls	r3, r3, #1
 8012f72:	4299      	cmp	r1, r3
 8012f74:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012f78:	d8fa      	bhi.n	8012f70 <Argus_Cal_Update+0x738>
 8012f7a:	2a00      	cmp	r2, #0
 8012f7c:	f040 83e6 	bne.w	801374c <Argus_Cal_Update+0xf14>
 8012f80:	f1bc 0f00 	cmp.w	ip, #0
 8012f84:	bfb4      	ite	lt
 8012f86:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
 8012f8a:	f06f 4000 	mvnge.w	r0, #2147483648	; 0x80000000
 8012f8e:	4445      	add	r5, r8
 8012f90:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8012f94:	6420      	str	r0, [r4, #64]	; 0x40
 8012f96:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	f040 829c 	bne.w	80134d8 <Argus_Cal_Update+0xca0>
 8012fa0:	6563      	str	r3, [r4, #84]	; 0x54
 8012fa2:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
 8012fa6:	f7f5 fad7 	bl	8008558 <Argus_Cfg_GetConfigurationPtr>
 8012faa:	7803      	ldrb	r3, [r0, #0]
 8012fac:	f890 21bd 	ldrb.w	r2, [r0, #445]	; 0x1bd
 8012fb0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8012fb4:	3b01      	subs	r3, #1
 8012fb6:	fb01 4303 	mla	r3, r1, r3, r4
 8012fba:	2a01      	cmp	r2, #1
 8012fbc:	f893 721d 	ldrb.w	r7, [r3, #541]	; 0x21d
 8012fc0:	4680      	mov	r8, r0
 8012fc2:	ea4f 2707 	mov.w	r7, r7, lsl #8
 8012fc6:	f000 83b8 	beq.w	801373a <Argus_Cal_Update+0xf02>
 8012fca:	2a02      	cmp	r2, #2
 8012fcc:	f000 82f0 	beq.w	80135b0 <Argus_Cal_Update+0xd78>
 8012fd0:	48a5      	ldr	r0, [pc, #660]	; (8013268 <Argus_Cal_Update+0xa30>)
 8012fd2:	f7ed ff3d 	bl	8000e50 <print>
 8012fd6:	f06f 031a 	mvn.w	r3, #26
 8012fda:	fb03 f307 	mul.w	r3, r3, r7
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	f000 8504 	beq.w	80139ec <Argus_Cal_Update+0x11b4>
 8012fe4:	4aa1      	ldr	r2, [pc, #644]	; (801326c <Argus_Cal_Update+0xa34>)
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	f2c0 80e6 	blt.w	80131b8 <Argus_Cal_Update+0x980>
 8012fec:	425b      	negs	r3, r3
 8012fee:	4aa0      	ldr	r2, [pc, #640]	; (8013270 <Argus_Cal_Update+0xa38>)
 8012ff0:	0219      	lsls	r1, r3, #8
 8012ff2:	4291      	cmp	r1, r2
 8012ff4:	f300 86d2 	bgt.w	8013d9c <Argus_Cal_Update+0x1564>
 8012ff8:	4b9e      	ldr	r3, [pc, #632]	; (8013274 <Argus_Cal_Update+0xa3c>)
 8012ffa:	4a9f      	ldr	r2, [pc, #636]	; (8013278 <Argus_Cal_Update+0xa40>)
 8012ffc:	440b      	add	r3, r1
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	bfa8      	it	ge
 8013002:	4619      	movge	r1, r3
 8013004:	440a      	add	r2, r1
 8013006:	bfad      	iteet	ge
 8013008:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 801300c:	f04f 6380 	movlt.w	r3, #67108864	; 0x4000000
 8013010:	f04f 7080 	movlt.w	r0, #16777216	; 0x1000000
 8013014:	f04f 5080 	movge.w	r0, #268435456	; 0x10000000
 8013018:	2a00      	cmp	r2, #0
 801301a:	bfb8      	it	lt
 801301c:	460a      	movlt	r2, r1
 801301e:	4997      	ldr	r1, [pc, #604]	; (801327c <Argus_Cal_Update+0xa44>)
 8013020:	4411      	add	r1, r2
 8013022:	bfb8      	it	lt
 8013024:	4603      	movlt	r3, r0
 8013026:	2900      	cmp	r1, #0
 8013028:	bfa8      	it	ge
 801302a:	460a      	movge	r2, r1
 801302c:	4994      	ldr	r1, [pc, #592]	; (8013280 <Argus_Cal_Update+0xa48>)
 801302e:	4411      	add	r1, r2
 8013030:	bfa8      	it	ge
 8013032:	005b      	lslge	r3, r3, #1
 8013034:	2900      	cmp	r1, #0
 8013036:	bfa8      	it	ge
 8013038:	460a      	movge	r2, r1
 801303a:	4992      	ldr	r1, [pc, #584]	; (8013284 <Argus_Cal_Update+0xa4c>)
 801303c:	4411      	add	r1, r2
 801303e:	bfa8      	it	ge
 8013040:	eb03 0353 	addge.w	r3, r3, r3, lsr #1
 8013044:	2900      	cmp	r1, #0
 8013046:	bfa8      	it	ge
 8013048:	460a      	movge	r2, r1
 801304a:	f5a2 11f1 	sub.w	r1, r2, #1974272	; 0x1e2000
 801304e:	f2a1 7107 	subw	r1, r1, #1799	; 0x707
 8013052:	bfa8      	it	ge
 8013054:	eb03 0393 	addge.w	r3, r3, r3, lsr #2
 8013058:	2900      	cmp	r1, #0
 801305a:	bfa8      	it	ge
 801305c:	460a      	movge	r2, r1
 801305e:	f5a2 2178 	sub.w	r1, r2, #1015808	; 0xf8000
 8013062:	f5a1 61a3 	sub.w	r1, r1, #1304	; 0x518
 8013066:	bfa8      	it	ge
 8013068:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 801306c:	2900      	cmp	r1, #0
 801306e:	bfa8      	it	ge
 8013070:	460a      	movge	r2, r1
 8013072:	f5a2 21fc 	sub.w	r1, r2, #516096	; 0x7e000
 8013076:	f1a1 01a7 	sub.w	r1, r1, #167	; 0xa7
 801307a:	bfa8      	it	ge
 801307c:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 8013080:	2900      	cmp	r1, #0
 8013082:	bfa8      	it	ge
 8013084:	460a      	movge	r2, r1
 8013086:	f5a2 317e 	sub.w	r1, r2, #260096	; 0x3f800
 801308a:	f1a1 0115 	sub.w	r1, r1, #21
 801308e:	bfa8      	it	ge
 8013090:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 8013094:	2900      	cmp	r1, #0
 8013096:	bfa8      	it	ge
 8013098:	460a      	movge	r2, r1
 801309a:	f5a2 31ff 	sub.w	r1, r2, #130560	; 0x1fe00
 801309e:	f1a1 0103 	sub.w	r1, r1, #3
 80130a2:	bfa8      	it	ge
 80130a4:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 80130a8:	2900      	cmp	r1, #0
 80130aa:	bfa8      	it	ge
 80130ac:	460a      	movge	r2, r1
 80130ae:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
 80130b2:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 80130b6:	bfa8      	it	ge
 80130b8:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 80130bc:	2900      	cmp	r1, #0
 80130be:	bfa8      	it	ge
 80130c0:	460a      	movge	r2, r1
 80130c2:	f5a2 41ff 	sub.w	r1, r2, #32640	; 0x7f80
 80130c6:	f1a1 0160 	sub.w	r1, r1, #96	; 0x60
 80130ca:	bfa8      	it	ge
 80130cc:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 80130d0:	2900      	cmp	r1, #0
 80130d2:	bfa8      	it	ge
 80130d4:	460a      	movge	r2, r1
 80130d6:	f5a2 517f 	sub.w	r1, r2, #16320	; 0x3fc0
 80130da:	f1a1 0138 	sub.w	r1, r1, #56	; 0x38
 80130de:	bfa8      	it	ge
 80130e0:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 80130e4:	2900      	cmp	r1, #0
 80130e6:	bfa8      	it	ge
 80130e8:	460a      	movge	r2, r1
 80130ea:	f5a2 51ff 	sub.w	r1, r2, #8160	; 0x1fe0
 80130ee:	f1a1 011e 	sub.w	r1, r1, #30
 80130f2:	bfa8      	it	ge
 80130f4:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 80130f8:	2900      	cmp	r1, #0
 80130fa:	bfa4      	itt	ge
 80130fc:	460a      	movge	r2, r1
 80130fe:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 8013102:	04d1      	lsls	r1, r2, #19
 8013104:	bf48      	it	mi
 8013106:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 801310a:	0515      	lsls	r5, r2, #20
 801310c:	bf48      	it	mi
 801310e:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 8013112:	0550      	lsls	r0, r2, #21
 8013114:	bf48      	it	mi
 8013116:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 801311a:	0591      	lsls	r1, r2, #22
 801311c:	bf48      	it	mi
 801311e:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 8013122:	05d5      	lsls	r5, r2, #23
 8013124:	bf48      	it	mi
 8013126:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 801312a:	0610      	lsls	r0, r2, #24
 801312c:	bf48      	it	mi
 801312e:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 8013132:	0651      	lsls	r1, r2, #25
 8013134:	bf48      	it	mi
 8013136:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 801313a:	0695      	lsls	r5, r2, #26
 801313c:	bf48      	it	mi
 801313e:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 8013142:	06d0      	lsls	r0, r2, #27
 8013144:	bf48      	it	mi
 8013146:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 801314a:	0711      	lsls	r1, r2, #28
 801314c:	bf48      	it	mi
 801314e:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 8013152:	0755      	lsls	r5, r2, #29
 8013154:	bf48      	it	mi
 8013156:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 801315a:	0790      	lsls	r0, r2, #30
 801315c:	bf48      	it	mi
 801315e:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 8013162:	07d1      	lsls	r1, r2, #31
 8013164:	bf48      	it	mi
 8013166:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 801316a:	1c5a      	adds	r2, r3, #1
 801316c:	f000 872b 	beq.w	8013fc6 <Argus_Cal_Update+0x178e>
 8013170:	3301      	adds	r3, #1
 8013172:	085d      	lsrs	r5, r3, #1
 8013174:	d021      	beq.n	80131ba <Argus_Cal_Update+0x982>
 8013176:	4a44      	ldr	r2, [pc, #272]	; (8013288 <Argus_Cal_Update+0xa50>)
 8013178:	4295      	cmp	r5, r2
 801317a:	f485 0000 	eor.w	r0, r5, #8388608	; 0x800000
 801317e:	f300 8725 	bgt.w	8013fcc <Argus_Cal_Update+0x1794>
 8013182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013186:	006d      	lsls	r5, r5, #1
 8013188:	4295      	cmp	r5, r2
 801318a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801318e:	d9fa      	bls.n	8013186 <Argus_Cal_Update+0x94e>
 8013190:	2b00      	cmp	r3, #0
 8013192:	f040 871d 	bne.w	8013fd0 <Argus_Cal_Update+0x1798>
 8013196:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801319a:	e00e      	b.n	80131ba <Argus_Cal_Update+0x982>
 801319c:	f5ce 7e00 	rsb	lr, lr, #512	; 0x200
 80131a0:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 80131a4:	f1ce 0e00 	rsb	lr, lr, #0
 80131a8:	e52d      	b.n	8012c06 <Argus_Cal_Update+0x3ce>
 80131aa:	f5ce 7e00 	rsb	lr, lr, #512	; 0x200
 80131ae:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 80131b2:	f1ce 0e00 	rsb	lr, lr, #0
 80131b6:	e512      	b.n	8012bde <Argus_Cal_Update+0x3a6>
 80131b8:	2500      	movs	r5, #0
 80131ba:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 80131be:	f500 70b2 	add.w	r0, r0, #356	; 0x164
 80131c2:	f7f6 f949 	bl	8009458 <Argus_Dca_GetCurrentValues>
 80131c6:	f898 1000 	ldrb.w	r1, [r8]
 80131ca:	f8d4 31f8 	ldr.w	r3, [r4, #504]	; 0x1f8
 80131ce:	9400      	str	r4, [sp, #0]
 80131d0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80131d4:	3901      	subs	r1, #1
 80131d6:	fb02 4101 	mla	r1, r2, r1, r4
 80131da:	1e42      	subs	r2, r0, #1
 80131dc:	f8d1 1220 	ldr.w	r1, [r1, #544]	; 0x220
 80131e0:	eb01 0e03 	add.w	lr, r1, r3
 80131e4:	f1be 0f00 	cmp.w	lr, #0
 80131e8:	bfb4      	ite	lt
 80131ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80131ee:	2301      	movge	r3, #1
 80131f0:	9301      	str	r3, [sp, #4]
 80131f2:	f1c3 0300 	rsb	r3, r3, #0
 80131f6:	46f4      	mov	ip, lr
 80131f8:	9302      	str	r3, [sp, #8]
 80131fa:	bfb8      	it	lt
 80131fc:	f1ce 0c00 	rsblt	ip, lr, #0
 8013200:	4673      	mov	r3, lr
 8013202:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8013206:	46be      	mov	lr, r7
 8013208:	fa1f fc8c 	uxth.w	ip, ip
 801320c:	3003      	adds	r0, #3
 801320e:	461f      	mov	r7, r3
 8013210:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013214:	2b04      	cmp	r3, #4
 8013216:	d13d      	bne.n	8013294 <Argus_Cal_Update+0xa5c>
 8013218:	6037      	str	r7, [r6, #0]
 801321a:	4282      	cmp	r2, r0
 801321c:	f106 0604 	add.w	r6, r6, #4
 8013220:	d1f6      	bne.n	8013210 <Argus_Cal_Update+0x9d8>
 8013222:	9c00      	ldr	r4, [sp, #0]
 8013224:	4620      	mov	r0, r4
 8013226:	f7fd fabb 	bl	80107a0 <EvaluateAPDVoltage>
 801322a:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 801322e:	f7fb fda3 	bl	800ed78 <Argus_Dev_UpdateCalibration>
 8013232:	4682      	mov	sl, r0
 8013234:	b9a0      	cbnz	r0, 8013260 <Argus_Cal_Update+0xa28>
 8013236:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 801323a:	f7fb fe21 	bl	800ee80 <Argus_Dev_GetFrameTime>
 801323e:	4b13      	ldr	r3, [pc, #76]	; (801328c <Argus_Cal_Update+0xa54>)
 8013240:	4298      	cmp	r0, r3
 8013242:	f200 83cf 	bhi.w	80139e4 <Argus_Cal_Update+0x11ac>
 8013246:	4a12      	ldr	r2, [pc, #72]	; (8013290 <Argus_Cal_Update+0xa58>)
 8013248:	08c3      	lsrs	r3, r0, #3
 801324a:	fba2 2303 	umull	r2, r3, r2, r3
 801324e:	f642 02af 	movw	r2, #10415	; 0x28af
 8013252:	4290      	cmp	r0, r2
 8013254:	f3c3 1387 	ubfx	r3, r3, #6, #8
 8013258:	bf98      	it	ls
 801325a:	2303      	movls	r3, #3
 801325c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8013260:	4650      	mov	r0, sl
 8013262:	b045      	add	sp, #276	; 0x114
 8013264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013268:	08019c04 	.word	0x08019c04
 801326c:	fff4376c 	.word	0xfff4376c
 8013270:	058b90be 	.word	0x058b90be
 8013274:	fd3a37a0 	.word	0xfd3a37a0
 8013278:	fe9d1bd0 	.word	0xfe9d1bd0
 801327c:	ff4e8de8 	.word	0xff4e8de8
 8013280:	ff983370 	.word	0xff983370
 8013284:	ffc6e010 	.word	0xffc6e010
 8013288:	007fffff 	.word	0x007fffff
 801328c:	000a2c2a 	.word	0x000a2c2a
 8013290:	192add01 	.word	0x192add01
 8013294:	f1c3 0304 	rsb	r3, r3, #4
 8013298:	fb0e f303 	mul.w	r3, lr, r3
 801329c:	2b00      	cmp	r3, #0
 801329e:	f000 810a 	beq.w	80134b6 <Argus_Cal_Update+0xc7e>
 80132a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132a6:	f000 83a5 	beq.w	80139f4 <Argus_Cal_Update+0x11bc>
 80132aa:	49ba      	ldr	r1, [pc, #744]	; (8013594 <Argus_Cal_Update+0xd5c>)
 80132ac:	428b      	cmp	r3, r1
 80132ae:	f2c0 8105 	blt.w	80134bc <Argus_Cal_Update+0xc84>
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	f340 82d2 	ble.w	801385c <Argus_Cal_Update+0x1024>
 80132b8:	49b7      	ldr	r1, [pc, #732]	; (8013598 <Argus_Cal_Update+0xd60>)
 80132ba:	4cb8      	ldr	r4, [pc, #736]	; (801359c <Argus_Cal_Update+0xd64>)
 80132bc:	021b      	lsls	r3, r3, #8
 80132be:	1859      	adds	r1, r3, r1
 80132c0:	2900      	cmp	r1, #0
 80132c2:	bfab      	itete	ge
 80132c4:	460b      	movge	r3, r1
 80132c6:	f04f 6180 	movlt.w	r1, #67108864	; 0x4000000
 80132ca:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
 80132ce:	f04f 7a80 	movlt.w	sl, #16777216	; 0x1000000
 80132d2:	bfa8      	it	ge
 80132d4:	f04f 5a80 	movge.w	sl, #268435456	; 0x10000000
 80132d8:	eb13 0904 	adds.w	r9, r3, r4
 80132dc:	bf48      	it	mi
 80132de:	4699      	movmi	r9, r3
 80132e0:	4baf      	ldr	r3, [pc, #700]	; (80135a0 <Argus_Cal_Update+0xd68>)
 80132e2:	bf48      	it	mi
 80132e4:	4651      	movmi	r1, sl
 80132e6:	eb19 0303 	adds.w	r3, r9, r3
 80132ea:	bf58      	it	pl
 80132ec:	4699      	movpl	r9, r3
 80132ee:	4bad      	ldr	r3, [pc, #692]	; (80135a4 <Argus_Cal_Update+0xd6c>)
 80132f0:	bf58      	it	pl
 80132f2:	0049      	lslpl	r1, r1, #1
 80132f4:	eb19 0303 	adds.w	r3, r9, r3
 80132f8:	bf58      	it	pl
 80132fa:	4699      	movpl	r9, r3
 80132fc:	4baa      	ldr	r3, [pc, #680]	; (80135a8 <Argus_Cal_Update+0xd70>)
 80132fe:	bf58      	it	pl
 8013300:	eb01 0151 	addpl.w	r1, r1, r1, lsr #1
 8013304:	eb19 0303 	adds.w	r3, r9, r3
 8013308:	bf58      	it	pl
 801330a:	4699      	movpl	r9, r3
 801330c:	f5a9 13f1 	sub.w	r3, r9, #1974272	; 0x1e2000
 8013310:	f2a3 7307 	subw	r3, r3, #1799	; 0x707
 8013314:	bf58      	it	pl
 8013316:	eb01 0191 	addpl.w	r1, r1, r1, lsr #2
 801331a:	2b00      	cmp	r3, #0
 801331c:	bfa8      	it	ge
 801331e:	4699      	movge	r9, r3
 8013320:	f5a9 2378 	sub.w	r3, r9, #1015808	; 0xf8000
 8013324:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8013328:	bfa8      	it	ge
 801332a:	eb01 01d1 	addge.w	r1, r1, r1, lsr #3
 801332e:	2b00      	cmp	r3, #0
 8013330:	bfa8      	it	ge
 8013332:	4699      	movge	r9, r3
 8013334:	f5a9 23fc 	sub.w	r3, r9, #516096	; 0x7e000
 8013338:	f1a3 03a7 	sub.w	r3, r3, #167	; 0xa7
 801333c:	bfa8      	it	ge
 801333e:	eb01 1111 	addge.w	r1, r1, r1, lsr #4
 8013342:	2b00      	cmp	r3, #0
 8013344:	bfa8      	it	ge
 8013346:	4699      	movge	r9, r3
 8013348:	f5a9 337e 	sub.w	r3, r9, #260096	; 0x3f800
 801334c:	f1a3 0315 	sub.w	r3, r3, #21
 8013350:	bfa8      	it	ge
 8013352:	eb01 1151 	addge.w	r1, r1, r1, lsr #5
 8013356:	2b00      	cmp	r3, #0
 8013358:	bfa8      	it	ge
 801335a:	4699      	movge	r9, r3
 801335c:	f5a9 33ff 	sub.w	r3, r9, #130560	; 0x1fe00
 8013360:	f1a3 0303 	sub.w	r3, r3, #3
 8013364:	bfa8      	it	ge
 8013366:	eb01 1191 	addge.w	r1, r1, r1, lsr #6
 801336a:	2b00      	cmp	r3, #0
 801336c:	bfa8      	it	ge
 801336e:	4699      	movge	r9, r3
 8013370:	f5a9 437f 	sub.w	r3, r9, #65280	; 0xff00
 8013374:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8013378:	bfa8      	it	ge
 801337a:	eb01 11d1 	addge.w	r1, r1, r1, lsr #7
 801337e:	2b00      	cmp	r3, #0
 8013380:	bfa8      	it	ge
 8013382:	4699      	movge	r9, r3
 8013384:	f5a9 43ff 	sub.w	r3, r9, #32640	; 0x7f80
 8013388:	f1a3 0360 	sub.w	r3, r3, #96	; 0x60
 801338c:	bfa8      	it	ge
 801338e:	eb01 2111 	addge.w	r1, r1, r1, lsr #8
 8013392:	2b00      	cmp	r3, #0
 8013394:	bfa8      	it	ge
 8013396:	4699      	movge	r9, r3
 8013398:	f5a9 537f 	sub.w	r3, r9, #16320	; 0x3fc0
 801339c:	f1a3 0338 	sub.w	r3, r3, #56	; 0x38
 80133a0:	bfa8      	it	ge
 80133a2:	eb01 2151 	addge.w	r1, r1, r1, lsr #9
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	bfa8      	it	ge
 80133aa:	4699      	movge	r9, r3
 80133ac:	f5a9 53ff 	sub.w	r3, r9, #8160	; 0x1fe0
 80133b0:	f1a3 031e 	sub.w	r3, r3, #30
 80133b4:	bfa8      	it	ge
 80133b6:	eb01 2191 	addge.w	r1, r1, r1, lsr #10
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	bfa4      	itt	ge
 80133be:	4699      	movge	r9, r3
 80133c0:	eb01 21d1 	addge.w	r1, r1, r1, lsr #11
 80133c4:	f419 5f80 	tst.w	r9, #4096	; 0x1000
 80133c8:	bf18      	it	ne
 80133ca:	eb01 3111 	addne.w	r1, r1, r1, lsr #12
 80133ce:	f419 6f00 	tst.w	r9, #2048	; 0x800
 80133d2:	bf18      	it	ne
 80133d4:	eb01 3151 	addne.w	r1, r1, r1, lsr #13
 80133d8:	f419 6f80 	tst.w	r9, #1024	; 0x400
 80133dc:	bf18      	it	ne
 80133de:	eb01 3191 	addne.w	r1, r1, r1, lsr #14
 80133e2:	f419 7f00 	tst.w	r9, #512	; 0x200
 80133e6:	bf18      	it	ne
 80133e8:	eb01 31d1 	addne.w	r1, r1, r1, lsr #15
 80133ec:	f419 7f80 	tst.w	r9, #256	; 0x100
 80133f0:	bf18      	it	ne
 80133f2:	eb01 4111 	addne.w	r1, r1, r1, lsr #16
 80133f6:	f019 0f80 	tst.w	r9, #128	; 0x80
 80133fa:	bf18      	it	ne
 80133fc:	eb01 4151 	addne.w	r1, r1, r1, lsr #17
 8013400:	f019 0f40 	tst.w	r9, #64	; 0x40
 8013404:	bf18      	it	ne
 8013406:	eb01 4191 	addne.w	r1, r1, r1, lsr #18
 801340a:	f019 0f20 	tst.w	r9, #32
 801340e:	bf18      	it	ne
 8013410:	eb01 41d1 	addne.w	r1, r1, r1, lsr #19
 8013414:	f019 0f10 	tst.w	r9, #16
 8013418:	bf18      	it	ne
 801341a:	eb01 5111 	addne.w	r1, r1, r1, lsr #20
 801341e:	f019 0f08 	tst.w	r9, #8
 8013422:	bf18      	it	ne
 8013424:	eb01 5151 	addne.w	r1, r1, r1, lsr #21
 8013428:	f019 0f04 	tst.w	r9, #4
 801342c:	bf18      	it	ne
 801342e:	eb01 5191 	addne.w	r1, r1, r1, lsr #22
 8013432:	f019 0f02 	tst.w	r9, #2
 8013436:	bf18      	it	ne
 8013438:	eb01 51d1 	addne.w	r1, r1, r1, lsr #23
 801343c:	f019 0f01 	tst.w	r9, #1
 8013440:	bf18      	it	ne
 8013442:	eb01 6111 	addne.w	r1, r1, r1, lsr #24
 8013446:	f111 0f81 	cmn.w	r1, #129	; 0x81
 801344a:	f200 83f6 	bhi.w	8013c3a <Argus_Cal_Update+0x1402>
 801344e:	f101 0380 	add.w	r3, r1, #128	; 0x80
 8013452:	0a1b      	lsrs	r3, r3, #8
 8013454:	1b5b      	subs	r3, r3, r5
 8013456:	bf48      	it	mi
 8013458:	425b      	negmi	r3, r3
 801345a:	fa1f fb83 	uxth.w	fp, r3
 801345e:	fb0b f10c 	mul.w	r1, fp, ip
 8013462:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8013466:	fb0b fb08 	mul.w	fp, fp, r8
 801346a:	eb0b 4b11 	add.w	fp, fp, r1, lsr #16
 801346e:	fb03 f90c 	mul.w	r9, r3, ip
 8013472:	fa19 f98b 	uxtah	r9, r9, fp
 8013476:	fb03 f308 	mul.w	r3, r3, r8
 801347a:	eb03 431b 	add.w	r3, r3, fp, lsr #16
 801347e:	ea4f 4b09 	mov.w	fp, r9, lsl #16
 8013482:	fa1b f181 	uxtah	r1, fp, r1
 8013486:	bf4c      	ite	mi
 8013488:	f8dd a008 	ldrmi.w	sl, [sp, #8]
 801348c:	f8dd a004 	ldrpl.w	sl, [sp, #4]
 8013490:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8013494:	bf38      	it	cc
 8013496:	f501 4100 	addcc.w	r1, r1, #32768	; 0x8000
 801349a:	eb03 4319 	add.w	r3, r3, r9, lsr #16
 801349e:	bf34      	ite	cc
 80134a0:	0c09      	lsrcc	r1, r1, #16
 80134a2:	f44f 3180 	movcs.w	r1, #65536	; 0x10000
 80134a6:	041b      	lsls	r3, r3, #16
 80134a8:	440b      	add	r3, r1
 80134aa:	f1ba 0f01 	cmp.w	sl, #1
 80134ae:	bf18      	it	ne
 80134b0:	425b      	negne	r3, r3
 80134b2:	6033      	str	r3, [r6, #0]
 80134b4:	e6b1      	b.n	801321a <Argus_Cal_Update+0x9e2>
 80134b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80134ba:	e7cb      	b.n	8013454 <Argus_Cal_Update+0xc1c>
 80134bc:	2300      	movs	r3, #0
 80134be:	e7c9      	b.n	8013454 <Argus_Cal_Update+0xc1c>
 80134c0:	4445      	add	r5, r8
 80134c2:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80134c6:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 80134ca:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 80134ce:	63e0      	str	r0, [r4, #60]	; 0x3c
 80134d0:	6420      	str	r0, [r4, #64]	; 0x40
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	f43f ad64 	beq.w	8012fa0 <Argus_Cal_Update+0x768>
 80134d8:	441d      	add	r5, r3
 80134da:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 80134de:	4833      	ldr	r0, [pc, #204]	; (80135ac <Argus_Cal_Update+0xd74>)
 80134e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80134e4:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 80134e8:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 80134ec:	4285      	cmp	r5, r0
 80134ee:	4629      	mov	r1, r5
 80134f0:	ea83 0c00 	eor.w	ip, r3, r0
 80134f4:	f340 8592 	ble.w	801401c <Argus_Cal_Update+0x17e4>
 80134f8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80134fc:	e001      	b.n	8013502 <Argus_Cal_Update+0xcca>
 80134fe:	461f      	mov	r7, r3
 8013500:	4610      	mov	r0, r2
 8013502:	0042      	lsls	r2, r0, #1
 8013504:	4295      	cmp	r5, r2
 8013506:	ea4f 0347 	mov.w	r3, r7, lsl #1
 801350a:	d8f8      	bhi.n	80134fe <Argus_Cal_Update+0xcc6>
 801350c:	2b00      	cmp	r3, #0
 801350e:	f040 8273 	bne.w	80139f8 <Argus_Cal_Update+0x11c0>
 8013512:	f1bc 0f00 	cmp.w	ip, #0
 8013516:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801351a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801351e:	bfad      	iteet	ge
 8013520:	460b      	movge	r3, r1
 8013522:	f44f 4200 	movlt.w	r2, #32768	; 0x8000
 8013526:	f04f 4500 	movlt.w	r5, #2147483648	; 0x80000000
 801352a:	f06f 4500 	mvnge.w	r5, #2147483648	; 0x80000000
 801352e:	f8b4 11e2 	ldrh.w	r1, [r4, #482]	; 0x1e2
 8013532:	f8b4 01e4 	ldrh.w	r0, [r4, #484]	; 0x1e4
 8013536:	fb03 f301 	mul.w	r3, r3, r1
 801353a:	fb02 f201 	mul.w	r2, r2, r1
 801353e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8013542:	0412      	lsls	r2, r2, #16
 8013544:	fa12 f383 	uxtah	r3, r2, r3
 8013548:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801354c:	bf3a      	itte	cc
 801354e:	f503 4300 	addcc.w	r3, r3, #32768	; 0x8000
 8013552:	0c1b      	lsrcc	r3, r3, #16
 8013554:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 8013558:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801355c:	b1bd      	cbz	r5, 801358e <Argus_Cal_Update+0xd56>
 801355e:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8013562:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8013566:	4298      	cmp	r0, r3
 8013568:	ea85 0500 	eor.w	r5, r5, r0
 801356c:	4601      	mov	r1, r0
 801356e:	f240 834e 	bls.w	8013c0e <Argus_Cal_Update+0x13d6>
 8013572:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013576:	005b      	lsls	r3, r3, #1
 8013578:	4298      	cmp	r0, r3
 801357a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801357e:	d8fa      	bhi.n	8013576 <Argus_Cal_Update+0xd3e>
 8013580:	2a00      	cmp	r2, #0
 8013582:	f040 8347 	bne.w	8013c14 <Argus_Cal_Update+0x13dc>
 8013586:	43ed      	mvns	r5, r5
 8013588:	0fed      	lsrs	r5, r5, #31
 801358a:	426d      	negs	r5, r5
 801358c:	b2ad      	uxth	r5, r5
 801358e:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8013592:	e506      	b.n	8012fa2 <Argus_Cal_Update+0x76a>
 8013594:	fff4376c 	.word	0xfff4376c
 8013598:	fd3a37a0 	.word	0xfd3a37a0
 801359c:	fe9d1bd0 	.word	0xfe9d1bd0
 80135a0:	ff4e8de8 	.word	0xff4e8de8
 80135a4:	ff983370 	.word	0xff983370
 80135a8:	ffc6e010 	.word	0xffc6e010
 80135ac:	002dc6c0 	.word	0x002dc6c0
 80135b0:	f890 3192 	ldrb.w	r3, [r0, #402]	; 0x192
 80135b4:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80135b8:	f1c3 0304 	rsb	r3, r3, #4
 80135bc:	fb07 f303 	mul.w	r3, r7, r3
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	f000 8213 	beq.w	80139ec <Argus_Cal_Update+0x11b4>
 80135c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80135ca:	f000 8339 	beq.w	8013c40 <Argus_Cal_Update+0x1408>
 80135ce:	4a9e      	ldr	r2, [pc, #632]	; (8013848 <Argus_Cal_Update+0x1010>)
 80135d0:	4293      	cmp	r3, r2
 80135d2:	f6ff adf1 	blt.w	80131b8 <Argus_Cal_Update+0x980>
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	f77f ad08 	ble.w	8012fec <Argus_Cal_Update+0x7b4>
 80135dc:	4a9b      	ldr	r2, [pc, #620]	; (801384c <Argus_Cal_Update+0x1014>)
 80135de:	021b      	lsls	r3, r3, #8
 80135e0:	441a      	add	r2, r3
 80135e2:	2a00      	cmp	r2, #0
 80135e4:	f2c0 8307 	blt.w	8013bf6 <Argus_Cal_Update+0x13be>
 80135e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80135ec:	4998      	ldr	r1, [pc, #608]	; (8013850 <Argus_Cal_Update+0x1018>)
 80135ee:	4411      	add	r1, r2
 80135f0:	2900      	cmp	r1, #0
 80135f2:	bfa8      	it	ge
 80135f4:	460a      	movge	r2, r1
 80135f6:	4997      	ldr	r1, [pc, #604]	; (8013854 <Argus_Cal_Update+0x101c>)
 80135f8:	4411      	add	r1, r2
 80135fa:	bfa8      	it	ge
 80135fc:	005b      	lslge	r3, r3, #1
 80135fe:	2900      	cmp	r1, #0
 8013600:	bfa8      	it	ge
 8013602:	460a      	movge	r2, r1
 8013604:	4994      	ldr	r1, [pc, #592]	; (8013858 <Argus_Cal_Update+0x1020>)
 8013606:	4411      	add	r1, r2
 8013608:	bfa8      	it	ge
 801360a:	eb03 0353 	addge.w	r3, r3, r3, lsr #1
 801360e:	2900      	cmp	r1, #0
 8013610:	bfa8      	it	ge
 8013612:	460a      	movge	r2, r1
 8013614:	f5a2 11f1 	sub.w	r1, r2, #1974272	; 0x1e2000
 8013618:	f2a1 7107 	subw	r1, r1, #1799	; 0x707
 801361c:	bfa8      	it	ge
 801361e:	eb03 0393 	addge.w	r3, r3, r3, lsr #2
 8013622:	2900      	cmp	r1, #0
 8013624:	bfa8      	it	ge
 8013626:	460a      	movge	r2, r1
 8013628:	f5a2 2178 	sub.w	r1, r2, #1015808	; 0xf8000
 801362c:	f5a1 61a3 	sub.w	r1, r1, #1304	; 0x518
 8013630:	bfa8      	it	ge
 8013632:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 8013636:	2900      	cmp	r1, #0
 8013638:	bfa8      	it	ge
 801363a:	460a      	movge	r2, r1
 801363c:	f5a2 21fc 	sub.w	r1, r2, #516096	; 0x7e000
 8013640:	f1a1 01a7 	sub.w	r1, r1, #167	; 0xa7
 8013644:	bfa8      	it	ge
 8013646:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 801364a:	2900      	cmp	r1, #0
 801364c:	bfa8      	it	ge
 801364e:	460a      	movge	r2, r1
 8013650:	f5a2 317e 	sub.w	r1, r2, #260096	; 0x3f800
 8013654:	f1a1 0115 	sub.w	r1, r1, #21
 8013658:	bfa8      	it	ge
 801365a:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 801365e:	2900      	cmp	r1, #0
 8013660:	bfa8      	it	ge
 8013662:	460a      	movge	r2, r1
 8013664:	f5a2 31ff 	sub.w	r1, r2, #130560	; 0x1fe00
 8013668:	f1a1 0103 	sub.w	r1, r1, #3
 801366c:	bfa8      	it	ge
 801366e:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 8013672:	2900      	cmp	r1, #0
 8013674:	bfa8      	it	ge
 8013676:	460a      	movge	r2, r1
 8013678:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
 801367c:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 8013680:	bfa8      	it	ge
 8013682:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 8013686:	2900      	cmp	r1, #0
 8013688:	bfa8      	it	ge
 801368a:	460a      	movge	r2, r1
 801368c:	f5a2 41ff 	sub.w	r1, r2, #32640	; 0x7f80
 8013690:	f1a1 0160 	sub.w	r1, r1, #96	; 0x60
 8013694:	bfa8      	it	ge
 8013696:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 801369a:	2900      	cmp	r1, #0
 801369c:	bfa8      	it	ge
 801369e:	460a      	movge	r2, r1
 80136a0:	f5a2 517f 	sub.w	r1, r2, #16320	; 0x3fc0
 80136a4:	f1a1 0138 	sub.w	r1, r1, #56	; 0x38
 80136a8:	bfa8      	it	ge
 80136aa:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 80136ae:	2900      	cmp	r1, #0
 80136b0:	bfa8      	it	ge
 80136b2:	460a      	movge	r2, r1
 80136b4:	f5a2 51ff 	sub.w	r1, r2, #8160	; 0x1fe0
 80136b8:	f1a1 011e 	sub.w	r1, r1, #30
 80136bc:	bfa8      	it	ge
 80136be:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 80136c2:	2900      	cmp	r1, #0
 80136c4:	bfa4      	itt	ge
 80136c6:	460a      	movge	r2, r1
 80136c8:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 80136cc:	04d0      	lsls	r0, r2, #19
 80136ce:	bf48      	it	mi
 80136d0:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 80136d4:	0511      	lsls	r1, r2, #20
 80136d6:	bf48      	it	mi
 80136d8:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 80136dc:	0555      	lsls	r5, r2, #21
 80136de:	bf48      	it	mi
 80136e0:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 80136e4:	0590      	lsls	r0, r2, #22
 80136e6:	bf48      	it	mi
 80136e8:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 80136ec:	05d1      	lsls	r1, r2, #23
 80136ee:	bf48      	it	mi
 80136f0:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 80136f4:	0615      	lsls	r5, r2, #24
 80136f6:	bf48      	it	mi
 80136f8:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 80136fc:	0650      	lsls	r0, r2, #25
 80136fe:	bf48      	it	mi
 8013700:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 8013704:	0691      	lsls	r1, r2, #26
 8013706:	bf48      	it	mi
 8013708:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 801370c:	06d5      	lsls	r5, r2, #27
 801370e:	bf48      	it	mi
 8013710:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 8013714:	0710      	lsls	r0, r2, #28
 8013716:	bf48      	it	mi
 8013718:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 801371c:	0751      	lsls	r1, r2, #29
 801371e:	bf48      	it	mi
 8013720:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 8013724:	0795      	lsls	r5, r2, #30
 8013726:	bf48      	it	mi
 8013728:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 801372c:	07d0      	lsls	r0, r2, #31
 801372e:	d501      	bpl.n	8013734 <Argus_Cal_Update+0xefc>
 8013730:	eb03 6313 	add.w	r3, r3, r3, lsr #24
 8013734:	3380      	adds	r3, #128	; 0x80
 8013736:	0a1d      	lsrs	r5, r3, #8
 8013738:	e53f      	b.n	80131ba <Argus_Cal_Update+0x982>
 801373a:	f890 3191 	ldrb.w	r3, [r0, #401]	; 0x191
 801373e:	08db      	lsrs	r3, r3, #3
 8013740:	e73a      	b.n	80135b8 <Argus_Cal_Update+0xd80>
 8013742:	2900      	cmp	r1, #0
 8013744:	f000 8467 	beq.w	8014016 <Argus_Cal_Update+0x17de>
 8013748:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801374c:	2000      	movs	r0, #0
 801374e:	e000      	b.n	8013752 <Argus_Cal_Update+0xf1a>
 8013750:	b151      	cbz	r1, 8013768 <Argus_Cal_Update+0xf30>
 8013752:	4299      	cmp	r1, r3
 8013754:	bf24      	itt	cs
 8013756:	1ac9      	subcs	r1, r1, r3
 8013758:	4310      	orrcs	r0, r2
 801375a:	0852      	lsrs	r2, r2, #1
 801375c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013760:	d1f6      	bne.n	8013750 <Argus_Cal_Update+0xf18>
 8013762:	4299      	cmp	r1, r3
 8013764:	bf28      	it	cs
 8013766:	3001      	addcs	r0, #1
 8013768:	f1bc 0f00 	cmp.w	ip, #0
 801376c:	bfb8      	it	lt
 801376e:	4240      	neglt	r0, r0
 8013770:	e40d      	b.n	8012f8e <Argus_Cal_Update+0x756>
 8013772:	f1bc 0f00 	cmp.w	ip, #0
 8013776:	f000 8444 	beq.w	8014002 <Argus_Cal_Update+0x17ca>
 801377a:	4619      	mov	r1, r3
 801377c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013780:	46e2      	mov	sl, ip
 8013782:	f04f 0e00 	mov.w	lr, #0
 8013786:	4694      	mov	ip, r2
 8013788:	4652      	mov	r2, sl
 801378a:	e000      	b.n	801378e <Argus_Cal_Update+0xf56>
 801378c:	b16a      	cbz	r2, 80137aa <Argus_Cal_Update+0xf72>
 801378e:	4291      	cmp	r1, r2
 8013790:	bf9c      	itt	ls
 8013792:	1a52      	subls	r2, r2, r1
 8013794:	ea4e 0e0c 	orrls.w	lr, lr, ip
 8013798:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
 801379c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80137a0:	d1f4      	bne.n	801378c <Argus_Cal_Update+0xf54>
 80137a2:	428a      	cmp	r2, r1
 80137a4:	bf28      	it	cs
 80137a6:	f10e 0e01 	addcs.w	lr, lr, #1
 80137aa:	f1b9 0f00 	cmp.w	r9, #0
 80137ae:	bfb8      	it	lt
 80137b0:	f1ce 0e00 	rsblt	lr, lr, #0
 80137b4:	4672      	mov	r2, lr
 80137b6:	f7ff bbc7 	b.w	8012f48 <Argus_Cal_Update+0x710>
 80137ba:	f1bc 0f00 	cmp.w	ip, #0
 80137be:	f000 841d 	beq.w	8013ffc <Argus_Cal_Update+0x17c4>
 80137c2:	4619      	mov	r1, r3
 80137c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80137c8:	46e2      	mov	sl, ip
 80137ca:	f04f 0e00 	mov.w	lr, #0
 80137ce:	4694      	mov	ip, r2
 80137d0:	4652      	mov	r2, sl
 80137d2:	e000      	b.n	80137d6 <Argus_Cal_Update+0xf9e>
 80137d4:	b16a      	cbz	r2, 80137f2 <Argus_Cal_Update+0xfba>
 80137d6:	428a      	cmp	r2, r1
 80137d8:	bf24      	itt	cs
 80137da:	1a52      	subcs	r2, r2, r1
 80137dc:	ea4e 0e0c 	orrcs.w	lr, lr, ip
 80137e0:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
 80137e4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80137e8:	d1f4      	bne.n	80137d4 <Argus_Cal_Update+0xf9c>
 80137ea:	428a      	cmp	r2, r1
 80137ec:	bf28      	it	cs
 80137ee:	f10e 0e01 	addcs.w	lr, lr, #1
 80137f2:	f1b9 0f00 	cmp.w	r9, #0
 80137f6:	bfb8      	it	lt
 80137f8:	f1ce 0e00 	rsblt	lr, lr, #0
 80137fc:	4672      	mov	r2, lr
 80137fe:	f7ff bb80 	b.w	8012f02 <Argus_Cal_Update+0x6ca>
 8013802:	f1bc 0f00 	cmp.w	ip, #0
 8013806:	f000 8402 	beq.w	801400e <Argus_Cal_Update+0x17d6>
 801380a:	4619      	mov	r1, r3
 801380c:	46e2      	mov	sl, ip
 801380e:	f04f 0e00 	mov.w	lr, #0
 8013812:	4694      	mov	ip, r2
 8013814:	4652      	mov	r2, sl
 8013816:	e000      	b.n	801381a <Argus_Cal_Update+0xfe2>
 8013818:	b16a      	cbz	r2, 8013836 <Argus_Cal_Update+0xffe>
 801381a:	4291      	cmp	r1, r2
 801381c:	bf9c      	itt	ls
 801381e:	1a52      	subls	r2, r2, r1
 8013820:	ea4e 0e0c 	orrls.w	lr, lr, ip
 8013824:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
 8013828:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801382c:	d1f4      	bne.n	8013818 <Argus_Cal_Update+0xfe0>
 801382e:	428a      	cmp	r2, r1
 8013830:	bf28      	it	cs
 8013832:	f10e 0e01 	addcs.w	lr, lr, #1
 8013836:	f1b9 0f00 	cmp.w	r9, #0
 801383a:	bfb8      	it	lt
 801383c:	f1ce 0e00 	rsblt	lr, lr, #0
 8013840:	4672      	mov	r2, lr
 8013842:	f7ff bb3b 	b.w	8012ebc <Argus_Cal_Update+0x684>
 8013846:	bf00      	nop
 8013848:	fff4376c 	.word	0xfff4376c
 801384c:	fd3a37a0 	.word	0xfd3a37a0
 8013850:	ff4e8de8 	.word	0xff4e8de8
 8013854:	ff983370 	.word	0xff983370
 8013858:	ffc6e010 	.word	0xffc6e010
 801385c:	425b      	negs	r3, r3
 801385e:	4c72      	ldr	r4, [pc, #456]	; (8013a28 <Argus_Cal_Update+0x11f0>)
 8013860:	0219      	lsls	r1, r3, #8
 8013862:	42a1      	cmp	r1, r4
 8013864:	f340 80ec 	ble.w	8013a40 <Argus_Cal_Update+0x1208>
 8013868:	4970      	ldr	r1, [pc, #448]	; (8013a2c <Argus_Cal_Update+0x11f4>)
 801386a:	01db      	lsls	r3, r3, #7
 801386c:	1859      	adds	r1, r3, r1
 801386e:	f100 81ea 	bmi.w	8013c46 <Argus_Cal_Update+0x140e>
 8013872:	2300      	movs	r3, #0
 8013874:	4c6e      	ldr	r4, [pc, #440]	; (8013a30 <Argus_Cal_Update+0x11f8>)
 8013876:	eb11 0904 	adds.w	r9, r1, r4
 801387a:	4c6e      	ldr	r4, [pc, #440]	; (8013a34 <Argus_Cal_Update+0x11fc>)
 801387c:	bf5c      	itt	pl
 801387e:	4649      	movpl	r1, r9
 8013880:	005b      	lslpl	r3, r3, #1
 8013882:	eb11 0904 	adds.w	r9, r1, r4
 8013886:	4c6c      	ldr	r4, [pc, #432]	; (8013a38 <Argus_Cal_Update+0x1200>)
 8013888:	bf5c      	itt	pl
 801388a:	4649      	movpl	r1, r9
 801388c:	eb03 0353 	addpl.w	r3, r3, r3, lsr #1
 8013890:	eb11 0904 	adds.w	r9, r1, r4
 8013894:	bf58      	it	pl
 8013896:	4649      	movpl	r1, r9
 8013898:	f5a1 19f1 	sub.w	r9, r1, #1974272	; 0x1e2000
 801389c:	f2a9 7907 	subw	r9, r9, #1799	; 0x707
 80138a0:	bf58      	it	pl
 80138a2:	eb03 0393 	addpl.w	r3, r3, r3, lsr #2
 80138a6:	f1b9 0f00 	cmp.w	r9, #0
 80138aa:	bfa8      	it	ge
 80138ac:	4649      	movge	r1, r9
 80138ae:	f5a1 2978 	sub.w	r9, r1, #1015808	; 0xf8000
 80138b2:	f5a9 69a3 	sub.w	r9, r9, #1304	; 0x518
 80138b6:	bfa8      	it	ge
 80138b8:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 80138bc:	f1b9 0f00 	cmp.w	r9, #0
 80138c0:	bfa8      	it	ge
 80138c2:	4649      	movge	r1, r9
 80138c4:	f5a1 29fc 	sub.w	r9, r1, #516096	; 0x7e000
 80138c8:	f1a9 09a7 	sub.w	r9, r9, #167	; 0xa7
 80138cc:	bfa8      	it	ge
 80138ce:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 80138d2:	f1b9 0f00 	cmp.w	r9, #0
 80138d6:	bfa8      	it	ge
 80138d8:	4649      	movge	r1, r9
 80138da:	f5a1 397e 	sub.w	r9, r1, #260096	; 0x3f800
 80138de:	f1a9 0915 	sub.w	r9, r9, #21
 80138e2:	bfa8      	it	ge
 80138e4:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 80138e8:	f1b9 0f00 	cmp.w	r9, #0
 80138ec:	bfa8      	it	ge
 80138ee:	4649      	movge	r1, r9
 80138f0:	f5a1 39ff 	sub.w	r9, r1, #130560	; 0x1fe00
 80138f4:	f1a9 0903 	sub.w	r9, r9, #3
 80138f8:	bfa8      	it	ge
 80138fa:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 80138fe:	f1b9 0f00 	cmp.w	r9, #0
 8013902:	bfa8      	it	ge
 8013904:	4649      	movge	r1, r9
 8013906:	f5a1 497f 	sub.w	r9, r1, #65280	; 0xff00
 801390a:	f1a9 0980 	sub.w	r9, r9, #128	; 0x80
 801390e:	bfa8      	it	ge
 8013910:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 8013914:	f1b9 0f00 	cmp.w	r9, #0
 8013918:	bfa8      	it	ge
 801391a:	4649      	movge	r1, r9
 801391c:	f5a1 49ff 	sub.w	r9, r1, #32640	; 0x7f80
 8013920:	f1a9 0960 	sub.w	r9, r9, #96	; 0x60
 8013924:	bfa8      	it	ge
 8013926:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 801392a:	f1b9 0f00 	cmp.w	r9, #0
 801392e:	bfa8      	it	ge
 8013930:	4649      	movge	r1, r9
 8013932:	f5a1 597f 	sub.w	r9, r1, #16320	; 0x3fc0
 8013936:	f1a9 0938 	sub.w	r9, r9, #56	; 0x38
 801393a:	bfa8      	it	ge
 801393c:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 8013940:	f1b9 0f00 	cmp.w	r9, #0
 8013944:	bfa8      	it	ge
 8013946:	4649      	movge	r1, r9
 8013948:	f5a1 59ff 	sub.w	r9, r1, #8160	; 0x1fe0
 801394c:	f1a9 091e 	sub.w	r9, r9, #30
 8013950:	bfa8      	it	ge
 8013952:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 8013956:	f1b9 0f00 	cmp.w	r9, #0
 801395a:	bfa4      	itt	ge
 801395c:	4649      	movge	r1, r9
 801395e:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 8013962:	04cc      	lsls	r4, r1, #19
 8013964:	bf48      	it	mi
 8013966:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 801396a:	050c      	lsls	r4, r1, #20
 801396c:	bf48      	it	mi
 801396e:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 8013972:	054c      	lsls	r4, r1, #21
 8013974:	bf48      	it	mi
 8013976:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 801397a:	058c      	lsls	r4, r1, #22
 801397c:	bf48      	it	mi
 801397e:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 8013982:	05cc      	lsls	r4, r1, #23
 8013984:	bf48      	it	mi
 8013986:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 801398a:	060c      	lsls	r4, r1, #24
 801398c:	bf48      	it	mi
 801398e:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 8013992:	064c      	lsls	r4, r1, #25
 8013994:	bf48      	it	mi
 8013996:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 801399a:	068c      	lsls	r4, r1, #26
 801399c:	bf48      	it	mi
 801399e:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 80139a2:	06cc      	lsls	r4, r1, #27
 80139a4:	bf48      	it	mi
 80139a6:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 80139aa:	070c      	lsls	r4, r1, #28
 80139ac:	bf48      	it	mi
 80139ae:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 80139b2:	074c      	lsls	r4, r1, #29
 80139b4:	bf48      	it	mi
 80139b6:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 80139ba:	078c      	lsls	r4, r1, #30
 80139bc:	bf48      	it	mi
 80139be:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 80139c2:	07cc      	lsls	r4, r1, #31
 80139c4:	bf48      	it	mi
 80139c6:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 80139ca:	1c59      	adds	r1, r3, #1
 80139cc:	f000 818d 	beq.w	8013cea <Argus_Cal_Update+0x14b2>
 80139d0:	3301      	adds	r3, #1
 80139d2:	0859      	lsrs	r1, r3, #1
 80139d4:	f040 8148 	bne.w	8013c68 <Argus_Cal_Update+0x1430>
 80139d8:	4689      	mov	r9, r1
 80139da:	f501 4300 	add.w	r3, r1, #32768	; 0x8000
 80139de:	0c1b      	lsrs	r3, r3, #16
 80139e0:	444b      	add	r3, r9
 80139e2:	e537      	b.n	8013454 <Argus_Cal_Update+0xc1c>
 80139e4:	2380      	movs	r3, #128	; 0x80
 80139e6:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80139ea:	e439      	b.n	8013260 <Argus_Cal_Update+0xa28>
 80139ec:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80139f0:	f7ff bbe3 	b.w	80131ba <Argus_Cal_Update+0x982>
 80139f4:	4b11      	ldr	r3, [pc, #68]	; (8013a3c <Argus_Cal_Update+0x1204>)
 80139f6:	e52d      	b.n	8013454 <Argus_Cal_Update+0xc1c>
 80139f8:	2a00      	cmp	r2, #0
 80139fa:	f2c0 8286 	blt.w	8013f0a <Argus_Cal_Update+0x16d2>
 80139fe:	2500      	movs	r5, #0
 8013a00:	e000      	b.n	8013a04 <Argus_Cal_Update+0x11cc>
 8013a02:	b151      	cbz	r1, 8013a1a <Argus_Cal_Update+0x11e2>
 8013a04:	428a      	cmp	r2, r1
 8013a06:	bf9c      	itt	ls
 8013a08:	1a89      	subls	r1, r1, r2
 8013a0a:	431d      	orrls	r5, r3
 8013a0c:	085b      	lsrs	r3, r3, #1
 8013a0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013a12:	d1f6      	bne.n	8013a02 <Argus_Cal_Update+0x11ca>
 8013a14:	428a      	cmp	r2, r1
 8013a16:	bf98      	it	ls
 8013a18:	3501      	addls	r5, #1
 8013a1a:	f1bc 0f00 	cmp.w	ip, #0
 8013a1e:	bfb8      	it	lt
 8013a20:	426d      	neglt	r5, r5
 8013a22:	0c2a      	lsrs	r2, r5, #16
 8013a24:	b2ab      	uxth	r3, r5
 8013a26:	e582      	b.n	801352e <Argus_Cal_Update+0xcf6>
 8013a28:	058b90be 	.word	0x058b90be
 8013a2c:	fa746f40 	.word	0xfa746f40
 8013a30:	ff4e8de8 	.word	0xff4e8de8
 8013a34:	ff983370 	.word	0xff983370
 8013a38:	ffc6e010 	.word	0xffc6e010
 8013a3c:	0002b7e1 	.word	0x0002b7e1
 8013a40:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8013d90 <Argus_Cal_Update+0x1558>
 8013a44:	4ccc      	ldr	r4, [pc, #816]	; (8013d78 <Argus_Cal_Update+0x1540>)
 8013a46:	4489      	add	r9, r1
 8013a48:	f1b9 0f00 	cmp.w	r9, #0
 8013a4c:	bfb8      	it	lt
 8013a4e:	4689      	movlt	r9, r1
 8013a50:	49ca      	ldr	r1, [pc, #808]	; (8013d7c <Argus_Cal_Update+0x1544>)
 8013a52:	bfad      	iteet	ge
 8013a54:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8013a58:	f04f 6380 	movlt.w	r3, #67108864	; 0x4000000
 8013a5c:	f04f 7a80 	movlt.w	sl, #16777216	; 0x1000000
 8013a60:	f04f 5a80 	movge.w	sl, #268435456	; 0x10000000
 8013a64:	eb19 0101 	adds.w	r1, r9, r1
 8013a68:	bf44      	itt	mi
 8013a6a:	4649      	movmi	r1, r9
 8013a6c:	4653      	movmi	r3, sl
 8013a6e:	eb11 0904 	adds.w	r9, r1, r4
 8013a72:	4cc3      	ldr	r4, [pc, #780]	; (8013d80 <Argus_Cal_Update+0x1548>)
 8013a74:	bf5c      	itt	pl
 8013a76:	4649      	movpl	r1, r9
 8013a78:	005b      	lslpl	r3, r3, #1
 8013a7a:	eb11 0904 	adds.w	r9, r1, r4
 8013a7e:	4cc1      	ldr	r4, [pc, #772]	; (8013d84 <Argus_Cal_Update+0x154c>)
 8013a80:	bf5c      	itt	pl
 8013a82:	4649      	movpl	r1, r9
 8013a84:	eb03 0353 	addpl.w	r3, r3, r3, lsr #1
 8013a88:	eb11 0904 	adds.w	r9, r1, r4
 8013a8c:	bf58      	it	pl
 8013a8e:	4649      	movpl	r1, r9
 8013a90:	f5a1 19f1 	sub.w	r9, r1, #1974272	; 0x1e2000
 8013a94:	f2a9 7907 	subw	r9, r9, #1799	; 0x707
 8013a98:	bf58      	it	pl
 8013a9a:	eb03 0393 	addpl.w	r3, r3, r3, lsr #2
 8013a9e:	f1b9 0f00 	cmp.w	r9, #0
 8013aa2:	bfa8      	it	ge
 8013aa4:	4649      	movge	r1, r9
 8013aa6:	f5a1 2978 	sub.w	r9, r1, #1015808	; 0xf8000
 8013aaa:	f5a9 69a3 	sub.w	r9, r9, #1304	; 0x518
 8013aae:	bfa8      	it	ge
 8013ab0:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 8013ab4:	f1b9 0f00 	cmp.w	r9, #0
 8013ab8:	bfa8      	it	ge
 8013aba:	4649      	movge	r1, r9
 8013abc:	f5a1 29fc 	sub.w	r9, r1, #516096	; 0x7e000
 8013ac0:	f1a9 09a7 	sub.w	r9, r9, #167	; 0xa7
 8013ac4:	bfa8      	it	ge
 8013ac6:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 8013aca:	f1b9 0f00 	cmp.w	r9, #0
 8013ace:	bfa8      	it	ge
 8013ad0:	4649      	movge	r1, r9
 8013ad2:	f5a1 397e 	sub.w	r9, r1, #260096	; 0x3f800
 8013ad6:	f1a9 0915 	sub.w	r9, r9, #21
 8013ada:	bfa8      	it	ge
 8013adc:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 8013ae0:	f1b9 0f00 	cmp.w	r9, #0
 8013ae4:	bfa8      	it	ge
 8013ae6:	4649      	movge	r1, r9
 8013ae8:	f5a1 39ff 	sub.w	r9, r1, #130560	; 0x1fe00
 8013aec:	f1a9 0903 	sub.w	r9, r9, #3
 8013af0:	bfa8      	it	ge
 8013af2:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 8013af6:	f1b9 0f00 	cmp.w	r9, #0
 8013afa:	bfa8      	it	ge
 8013afc:	4649      	movge	r1, r9
 8013afe:	f5a1 497f 	sub.w	r9, r1, #65280	; 0xff00
 8013b02:	f1a9 0980 	sub.w	r9, r9, #128	; 0x80
 8013b06:	bfa8      	it	ge
 8013b08:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 8013b0c:	f1b9 0f00 	cmp.w	r9, #0
 8013b10:	bfa8      	it	ge
 8013b12:	4649      	movge	r1, r9
 8013b14:	f5a1 49ff 	sub.w	r9, r1, #32640	; 0x7f80
 8013b18:	f1a9 0960 	sub.w	r9, r9, #96	; 0x60
 8013b1c:	bfa8      	it	ge
 8013b1e:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 8013b22:	f1b9 0f00 	cmp.w	r9, #0
 8013b26:	bfa8      	it	ge
 8013b28:	4649      	movge	r1, r9
 8013b2a:	f5a1 597f 	sub.w	r9, r1, #16320	; 0x3fc0
 8013b2e:	f1a9 0938 	sub.w	r9, r9, #56	; 0x38
 8013b32:	bfa8      	it	ge
 8013b34:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 8013b38:	f1b9 0f00 	cmp.w	r9, #0
 8013b3c:	bfa8      	it	ge
 8013b3e:	4649      	movge	r1, r9
 8013b40:	f5a1 59ff 	sub.w	r9, r1, #8160	; 0x1fe0
 8013b44:	f1a9 091e 	sub.w	r9, r9, #30
 8013b48:	bfa8      	it	ge
 8013b4a:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 8013b4e:	f1b9 0f00 	cmp.w	r9, #0
 8013b52:	bfa4      	itt	ge
 8013b54:	4649      	movge	r1, r9
 8013b56:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 8013b5a:	04cc      	lsls	r4, r1, #19
 8013b5c:	bf48      	it	mi
 8013b5e:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 8013b62:	050c      	lsls	r4, r1, #20
 8013b64:	bf48      	it	mi
 8013b66:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 8013b6a:	054c      	lsls	r4, r1, #21
 8013b6c:	bf48      	it	mi
 8013b6e:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 8013b72:	058c      	lsls	r4, r1, #22
 8013b74:	bf48      	it	mi
 8013b76:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 8013b7a:	05cc      	lsls	r4, r1, #23
 8013b7c:	bf48      	it	mi
 8013b7e:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 8013b82:	060c      	lsls	r4, r1, #24
 8013b84:	bf48      	it	mi
 8013b86:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 8013b8a:	064c      	lsls	r4, r1, #25
 8013b8c:	bf48      	it	mi
 8013b8e:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 8013b92:	068c      	lsls	r4, r1, #26
 8013b94:	bf48      	it	mi
 8013b96:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 8013b9a:	06cc      	lsls	r4, r1, #27
 8013b9c:	bf48      	it	mi
 8013b9e:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 8013ba2:	070c      	lsls	r4, r1, #28
 8013ba4:	bf48      	it	mi
 8013ba6:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 8013baa:	074c      	lsls	r4, r1, #29
 8013bac:	bf48      	it	mi
 8013bae:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 8013bb2:	078c      	lsls	r4, r1, #30
 8013bb4:	bf48      	it	mi
 8013bb6:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 8013bba:	07cc      	lsls	r4, r1, #31
 8013bbc:	bf48      	it	mi
 8013bbe:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 8013bc2:	1c59      	adds	r1, r3, #1
 8013bc4:	d065      	beq.n	8013c92 <Argus_Cal_Update+0x145a>
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	085b      	lsrs	r3, r3, #1
 8013bca:	f43f ac43 	beq.w	8013454 <Argus_Cal_Update+0xc1c>
 8013bce:	496e      	ldr	r1, [pc, #440]	; (8013d88 <Argus_Cal_Update+0x1550>)
 8013bd0:	428b      	cmp	r3, r1
 8013bd2:	f483 0b00 	eor.w	fp, r3, #8388608	; 0x800000
 8013bd6:	dc60      	bgt.n	8013c9a <Argus_Cal_Update+0x1462>
 8013bd8:	9c00      	ldr	r4, [sp, #0]
 8013bda:	4689      	mov	r9, r1
 8013bdc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8013be0:	005b      	lsls	r3, r3, #1
 8013be2:	454b      	cmp	r3, r9
 8013be4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013be8:	d9fa      	bls.n	8013be0 <Argus_Cal_Update+0x13a8>
 8013bea:	9400      	str	r4, [sp, #0]
 8013bec:	2900      	cmp	r1, #0
 8013bee:	d156      	bne.n	8013c9e <Argus_Cal_Update+0x1466>
 8013bf0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013bf4:	e42e      	b.n	8013454 <Argus_Cal_Update+0xc1c>
 8013bf6:	4a61      	ldr	r2, [pc, #388]	; (8013d7c <Argus_Cal_Update+0x1544>)
 8013bf8:	441a      	add	r2, r3
 8013bfa:	2a00      	cmp	r2, #0
 8013bfc:	bfa8      	it	ge
 8013bfe:	f04f 6380 	movge.w	r3, #67108864	; 0x4000000
 8013c02:	f6bf acf3 	bge.w	80135ec <Argus_Cal_Update+0xdb4>
 8013c06:	461a      	mov	r2, r3
 8013c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8013c0c:	e4ee      	b.n	80135ec <Argus_Cal_Update+0xdb4>
 8013c0e:	b178      	cbz	r0, 8013c30 <Argus_Cal_Update+0x13f8>
 8013c10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013c14:	2000      	movs	r0, #0
 8013c16:	e000      	b.n	8013c1a <Argus_Cal_Update+0x13e2>
 8013c18:	b151      	cbz	r1, 8013c30 <Argus_Cal_Update+0x13f8>
 8013c1a:	428b      	cmp	r3, r1
 8013c1c:	bf9c      	itt	ls
 8013c1e:	1ac9      	subls	r1, r1, r3
 8013c20:	4310      	orrls	r0, r2
 8013c22:	0852      	lsrs	r2, r2, #1
 8013c24:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013c28:	d1f6      	bne.n	8013c18 <Argus_Cal_Update+0x13e0>
 8013c2a:	428b      	cmp	r3, r1
 8013c2c:	bf98      	it	ls
 8013c2e:	3001      	addls	r0, #1
 8013c30:	2d00      	cmp	r5, #0
 8013c32:	bfb8      	it	lt
 8013c34:	4240      	neglt	r0, r0
 8013c36:	b285      	uxth	r5, r0
 8013c38:	e4a9      	b.n	801358e <Argus_Cal_Update+0xd56>
 8013c3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8013c3e:	e409      	b.n	8013454 <Argus_Cal_Update+0xc1c>
 8013c40:	4d52      	ldr	r5, [pc, #328]	; (8013d8c <Argus_Cal_Update+0x1554>)
 8013c42:	f7ff baba 	b.w	80131ba <Argus_Cal_Update+0x982>
 8013c46:	4952      	ldr	r1, [pc, #328]	; (8013d90 <Argus_Cal_Update+0x1558>)
 8013c48:	eb13 0901 	adds.w	r9, r3, r1
 8013c4c:	f100 81ed 	bmi.w	801402a <Argus_Cal_Update+0x17f2>
 8013c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013c54:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 8013c58:	4948      	ldr	r1, [pc, #288]	; (8013d7c <Argus_Cal_Update+0x1544>)
 8013c5a:	eb19 0101 	adds.w	r1, r9, r1
 8013c5e:	f57f ae09 	bpl.w	8013874 <Argus_Cal_Update+0x103c>
 8013c62:	4653      	mov	r3, sl
 8013c64:	4649      	mov	r1, r9
 8013c66:	e605      	b.n	8013874 <Argus_Cal_Update+0x103c>
 8013c68:	4b47      	ldr	r3, [pc, #284]	; (8013d88 <Argus_Cal_Update+0x1550>)
 8013c6a:	4299      	cmp	r1, r3
 8013c6c:	f481 0b00 	eor.w	fp, r1, #8388608	; 0x800000
 8013c70:	dc3f      	bgt.n	8013cf2 <Argus_Cal_Update+0x14ba>
 8013c72:	9c00      	ldr	r4, [sp, #0]
 8013c74:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8013c78:	0049      	lsls	r1, r1, #1
 8013c7a:	4299      	cmp	r1, r3
 8013c7c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8013c80:	d9fa      	bls.n	8013c78 <Argus_Cal_Update+0x1440>
 8013c82:	9400      	str	r4, [sp, #0]
 8013c84:	f1b9 0f00 	cmp.w	r9, #0
 8013c88:	d135      	bne.n	8013cf6 <Argus_Cal_Update+0x14be>
 8013c8a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013d94 <Argus_Cal_Update+0x155c>
 8013c8e:	2101      	movs	r1, #1
 8013c90:	e6a3      	b.n	80139da <Argus_Cal_Update+0x11a2>
 8013c92:	f8df b104 	ldr.w	fp, [pc, #260]	; 8013d98 <Argus_Cal_Update+0x1560>
 8013c96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013c9a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8013c9e:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 8013ca2:	9303      	str	r3, [sp, #12]
 8013ca4:	f04f 0a00 	mov.w	sl, #0
 8013ca8:	464b      	mov	r3, r9
 8013caa:	9c00      	ldr	r4, [sp, #0]
 8013cac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013cb0:	e002      	b.n	8013cb8 <Argus_Cal_Update+0x1480>
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	f000 81ad 	beq.w	8014012 <Argus_Cal_Update+0x17da>
 8013cb8:	454b      	cmp	r3, r9
 8013cba:	bf24      	itt	cs
 8013cbc:	eba3 0309 	subcs.w	r3, r3, r9
 8013cc0:	ea4a 0a01 	orrcs.w	sl, sl, r1
 8013cc4:	0849      	lsrs	r1, r1, #1
 8013cc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013cca:	d1f2      	bne.n	8013cb2 <Argus_Cal_Update+0x147a>
 8013ccc:	4649      	mov	r1, r9
 8013cce:	4699      	mov	r9, r3
 8013cd0:	4589      	cmp	r9, r1
 8013cd2:	9400      	str	r4, [sp, #0]
 8013cd4:	bf28      	it	cs
 8013cd6:	f10a 0a01 	addcs.w	sl, sl, #1
 8013cda:	f1bb 0f00 	cmp.w	fp, #0
 8013cde:	bfb8      	it	lt
 8013ce0:	f1ca 0a00 	rsblt	sl, sl, #0
 8013ce4:	4653      	mov	r3, sl
 8013ce6:	f7ff bbb5 	b.w	8013454 <Argus_Cal_Update+0xc1c>
 8013cea:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8013d98 <Argus_Cal_Update+0x1560>
 8013cee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8013cf2:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 8013cfc:	9303      	str	r3, [sp, #12]
 8013cfe:	9c00      	ldr	r4, [sp, #0]
 8013d00:	4653      	mov	r3, sl
 8013d02:	f04f 0a00 	mov.w	sl, #0
 8013d06:	e002      	b.n	8013d0e <Argus_Cal_Update+0x14d6>
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	f000 817d 	beq.w	8014008 <Argus_Cal_Update+0x17d0>
 8013d0e:	4299      	cmp	r1, r3
 8013d10:	bf9c      	itt	ls
 8013d12:	1a5b      	subls	r3, r3, r1
 8013d14:	ea4a 0a09 	orrls.w	sl, sl, r9
 8013d18:	ea5f 0959 	movs.w	r9, r9, lsr #1
 8013d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013d20:	d1f2      	bne.n	8013d08 <Argus_Cal_Update+0x14d0>
 8013d22:	46d1      	mov	r9, sl
 8013d24:	469a      	mov	sl, r3
 8013d26:	4551      	cmp	r1, sl
 8013d28:	464b      	mov	r3, r9
 8013d2a:	9400      	str	r4, [sp, #0]
 8013d2c:	bf98      	it	ls
 8013d2e:	3301      	addls	r3, #1
 8013d30:	f1bb 0f00 	cmp.w	fp, #0
 8013d34:	bfb8      	it	lt
 8013d36:	425b      	neglt	r3, r3
 8013d38:	b299      	uxth	r1, r3
 8013d3a:	0c1b      	lsrs	r3, r3, #16
 8013d3c:	fb01 f901 	mul.w	r9, r1, r1
 8013d40:	fb01 f103 	mul.w	r1, r1, r3
 8013d44:	eb01 4a19 	add.w	sl, r1, r9, lsr #16
 8013d48:	fb03 f303 	mul.w	r3, r3, r3
 8013d4c:	fa11 f18a 	uxtah	r1, r1, sl
 8013d50:	fa1f f989 	uxth.w	r9, r9
 8013d54:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8013d58:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8013d5c:	eb09 4101 	add.w	r1, r9, r1, lsl #16
 8013d60:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8013d64:	ea4f 4903 	mov.w	r9, r3, lsl #16
 8013d68:	bf28      	it	cs
 8013d6a:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 8013d6e:	f4ff ae34 	bcc.w	80139da <Argus_Cal_Update+0x11a2>
 8013d72:	444b      	add	r3, r9
 8013d74:	f7ff bb6e 	b.w	8013454 <Argus_Cal_Update+0xc1c>
 8013d78:	ff4e8de8 	.word	0xff4e8de8
 8013d7c:	fe9d1bd0 	.word	0xfe9d1bd0
 8013d80:	ff983370 	.word	0xff983370
 8013d84:	ffc6e010 	.word	0xffc6e010
 8013d88:	007fffff 	.word	0x007fffff
 8013d8c:	0002b7e1 	.word	0x0002b7e1
 8013d90:	fd3a37a0 	.word	0xfd3a37a0
 8013d94:	ffff0000 	.word	0xffff0000
 8013d98:	80800000 	.word	0x80800000
 8013d9c:	4aa9      	ldr	r2, [pc, #676]	; (8014044 <Argus_Cal_Update+0x180c>)
 8013d9e:	01db      	lsls	r3, r3, #7
 8013da0:	441a      	add	r2, r3
 8013da2:	2a00      	cmp	r2, #0
 8013da4:	f2c0 80c9 	blt.w	8013f3a <Argus_Cal_Update+0x1702>
 8013da8:	2300      	movs	r3, #0
 8013daa:	49a7      	ldr	r1, [pc, #668]	; (8014048 <Argus_Cal_Update+0x1810>)
 8013dac:	4411      	add	r1, r2
 8013dae:	2900      	cmp	r1, #0
 8013db0:	bfa8      	it	ge
 8013db2:	460a      	movge	r2, r1
 8013db4:	49a5      	ldr	r1, [pc, #660]	; (801404c <Argus_Cal_Update+0x1814>)
 8013db6:	4411      	add	r1, r2
 8013db8:	bfa8      	it	ge
 8013dba:	005b      	lslge	r3, r3, #1
 8013dbc:	2900      	cmp	r1, #0
 8013dbe:	bfa8      	it	ge
 8013dc0:	460a      	movge	r2, r1
 8013dc2:	49a3      	ldr	r1, [pc, #652]	; (8014050 <Argus_Cal_Update+0x1818>)
 8013dc4:	4411      	add	r1, r2
 8013dc6:	bfa8      	it	ge
 8013dc8:	eb03 0353 	addge.w	r3, r3, r3, lsr #1
 8013dcc:	2900      	cmp	r1, #0
 8013dce:	bfa8      	it	ge
 8013dd0:	460a      	movge	r2, r1
 8013dd2:	f5a2 11f1 	sub.w	r1, r2, #1974272	; 0x1e2000
 8013dd6:	f2a1 7107 	subw	r1, r1, #1799	; 0x707
 8013dda:	bfa8      	it	ge
 8013ddc:	eb03 0393 	addge.w	r3, r3, r3, lsr #2
 8013de0:	2900      	cmp	r1, #0
 8013de2:	bfa8      	it	ge
 8013de4:	460a      	movge	r2, r1
 8013de6:	f5a2 2178 	sub.w	r1, r2, #1015808	; 0xf8000
 8013dea:	f5a1 61a3 	sub.w	r1, r1, #1304	; 0x518
 8013dee:	bfa8      	it	ge
 8013df0:	eb03 03d3 	addge.w	r3, r3, r3, lsr #3
 8013df4:	2900      	cmp	r1, #0
 8013df6:	bfa8      	it	ge
 8013df8:	460a      	movge	r2, r1
 8013dfa:	f5a2 21fc 	sub.w	r1, r2, #516096	; 0x7e000
 8013dfe:	f1a1 01a7 	sub.w	r1, r1, #167	; 0xa7
 8013e02:	bfa8      	it	ge
 8013e04:	eb03 1313 	addge.w	r3, r3, r3, lsr #4
 8013e08:	2900      	cmp	r1, #0
 8013e0a:	bfa8      	it	ge
 8013e0c:	460a      	movge	r2, r1
 8013e0e:	f5a2 317e 	sub.w	r1, r2, #260096	; 0x3f800
 8013e12:	f1a1 0115 	sub.w	r1, r1, #21
 8013e16:	bfa8      	it	ge
 8013e18:	eb03 1353 	addge.w	r3, r3, r3, lsr #5
 8013e1c:	2900      	cmp	r1, #0
 8013e1e:	bfa8      	it	ge
 8013e20:	460a      	movge	r2, r1
 8013e22:	f5a2 31ff 	sub.w	r1, r2, #130560	; 0x1fe00
 8013e26:	f1a1 0103 	sub.w	r1, r1, #3
 8013e2a:	bfa8      	it	ge
 8013e2c:	eb03 1393 	addge.w	r3, r3, r3, lsr #6
 8013e30:	2900      	cmp	r1, #0
 8013e32:	bfa8      	it	ge
 8013e34:	460a      	movge	r2, r1
 8013e36:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
 8013e3a:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 8013e3e:	bfa8      	it	ge
 8013e40:	eb03 13d3 	addge.w	r3, r3, r3, lsr #7
 8013e44:	2900      	cmp	r1, #0
 8013e46:	bfa8      	it	ge
 8013e48:	460a      	movge	r2, r1
 8013e4a:	f5a2 41ff 	sub.w	r1, r2, #32640	; 0x7f80
 8013e4e:	f1a1 0160 	sub.w	r1, r1, #96	; 0x60
 8013e52:	bfa8      	it	ge
 8013e54:	eb03 2313 	addge.w	r3, r3, r3, lsr #8
 8013e58:	2900      	cmp	r1, #0
 8013e5a:	bfa8      	it	ge
 8013e5c:	460a      	movge	r2, r1
 8013e5e:	f5a2 517f 	sub.w	r1, r2, #16320	; 0x3fc0
 8013e62:	f1a1 0138 	sub.w	r1, r1, #56	; 0x38
 8013e66:	bfa8      	it	ge
 8013e68:	eb03 2353 	addge.w	r3, r3, r3, lsr #9
 8013e6c:	2900      	cmp	r1, #0
 8013e6e:	bfa8      	it	ge
 8013e70:	460a      	movge	r2, r1
 8013e72:	f5a2 51ff 	sub.w	r1, r2, #8160	; 0x1fe0
 8013e76:	f1a1 011e 	sub.w	r1, r1, #30
 8013e7a:	bfa8      	it	ge
 8013e7c:	eb03 2393 	addge.w	r3, r3, r3, lsr #10
 8013e80:	2900      	cmp	r1, #0
 8013e82:	bfa4      	itt	ge
 8013e84:	460a      	movge	r2, r1
 8013e86:	eb03 23d3 	addge.w	r3, r3, r3, lsr #11
 8013e8a:	04d5      	lsls	r5, r2, #19
 8013e8c:	bf48      	it	mi
 8013e8e:	eb03 3313 	addmi.w	r3, r3, r3, lsr #12
 8013e92:	0510      	lsls	r0, r2, #20
 8013e94:	bf48      	it	mi
 8013e96:	eb03 3353 	addmi.w	r3, r3, r3, lsr #13
 8013e9a:	0551      	lsls	r1, r2, #21
 8013e9c:	bf48      	it	mi
 8013e9e:	eb03 3393 	addmi.w	r3, r3, r3, lsr #14
 8013ea2:	0595      	lsls	r5, r2, #22
 8013ea4:	bf48      	it	mi
 8013ea6:	eb03 33d3 	addmi.w	r3, r3, r3, lsr #15
 8013eaa:	05d0      	lsls	r0, r2, #23
 8013eac:	bf48      	it	mi
 8013eae:	eb03 4313 	addmi.w	r3, r3, r3, lsr #16
 8013eb2:	0611      	lsls	r1, r2, #24
 8013eb4:	bf48      	it	mi
 8013eb6:	eb03 4353 	addmi.w	r3, r3, r3, lsr #17
 8013eba:	0655      	lsls	r5, r2, #25
 8013ebc:	bf48      	it	mi
 8013ebe:	eb03 4393 	addmi.w	r3, r3, r3, lsr #18
 8013ec2:	0690      	lsls	r0, r2, #26
 8013ec4:	bf48      	it	mi
 8013ec6:	eb03 43d3 	addmi.w	r3, r3, r3, lsr #19
 8013eca:	06d1      	lsls	r1, r2, #27
 8013ecc:	bf48      	it	mi
 8013ece:	eb03 5313 	addmi.w	r3, r3, r3, lsr #20
 8013ed2:	0715      	lsls	r5, r2, #28
 8013ed4:	bf48      	it	mi
 8013ed6:	eb03 5353 	addmi.w	r3, r3, r3, lsr #21
 8013eda:	0750      	lsls	r0, r2, #29
 8013edc:	bf48      	it	mi
 8013ede:	eb03 5393 	addmi.w	r3, r3, r3, lsr #22
 8013ee2:	0791      	lsls	r1, r2, #30
 8013ee4:	bf48      	it	mi
 8013ee6:	eb03 53d3 	addmi.w	r3, r3, r3, lsr #23
 8013eea:	07d2      	lsls	r2, r2, #31
 8013eec:	bf48      	it	mi
 8013eee:	eb03 6313 	addmi.w	r3, r3, r3, lsr #24
 8013ef2:	1c5d      	adds	r5, r3, #1
 8013ef4:	d031      	beq.n	8013f5a <Argus_Cal_Update+0x1722>
 8013ef6:	3301      	adds	r3, #1
 8013ef8:	085b      	lsrs	r3, r3, #1
 8013efa:	d10e      	bne.n	8013f1a <Argus_Cal_Update+0x16e2>
 8013efc:	461a      	mov	r2, r3
 8013efe:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8013f02:	0c2d      	lsrs	r5, r5, #16
 8013f04:	441d      	add	r5, r3
 8013f06:	f7ff b958 	b.w	80131ba <Argus_Cal_Update+0x982>
 8013f0a:	f037 4300 	bics.w	r3, r7, #2147483648	; 0x80000000
 8013f0e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8013f12:	f47f ad74 	bne.w	80139fe <Argus_Cal_Update+0x11c6>
 8013f16:	461d      	mov	r5, r3
 8013f18:	e57c      	b.n	8013a14 <Argus_Cal_Update+0x11dc>
 8013f1a:	494e      	ldr	r1, [pc, #312]	; (8014054 <Argus_Cal_Update+0x181c>)
 8013f1c:	428b      	cmp	r3, r1
 8013f1e:	f483 0500 	eor.w	r5, r3, #8388608	; 0x800000
 8013f22:	dc1d      	bgt.n	8013f60 <Argus_Cal_Update+0x1728>
 8013f24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013f28:	005b      	lsls	r3, r3, #1
 8013f2a:	428b      	cmp	r3, r1
 8013f2c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013f30:	d9fa      	bls.n	8013f28 <Argus_Cal_Update+0x16f0>
 8013f32:	b9ba      	cbnz	r2, 8013f64 <Argus_Cal_Update+0x172c>
 8013f34:	4b48      	ldr	r3, [pc, #288]	; (8014058 <Argus_Cal_Update+0x1820>)
 8013f36:	2201      	movs	r2, #1
 8013f38:	e7e1      	b.n	8013efe <Argus_Cal_Update+0x16c6>
 8013f3a:	4948      	ldr	r1, [pc, #288]	; (801405c <Argus_Cal_Update+0x1824>)
 8013f3c:	4419      	add	r1, r3
 8013f3e:	2900      	cmp	r1, #0
 8013f40:	db79      	blt.n	8014036 <Argus_Cal_Update+0x17fe>
 8013f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013f46:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8013f4a:	4a45      	ldr	r2, [pc, #276]	; (8014060 <Argus_Cal_Update+0x1828>)
 8013f4c:	440a      	add	r2, r1
 8013f4e:	2a00      	cmp	r2, #0
 8013f50:	f6bf af2b 	bge.w	8013daa <Argus_Cal_Update+0x1572>
 8013f54:	4603      	mov	r3, r0
 8013f56:	460a      	mov	r2, r1
 8013f58:	e727      	b.n	8013daa <Argus_Cal_Update+0x1572>
 8013f5a:	4d42      	ldr	r5, [pc, #264]	; (8014064 <Argus_Cal_Update+0x182c>)
 8013f5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013f60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013f64:	2100      	movs	r1, #0
 8013f66:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8013f6a:	e000      	b.n	8013f6e <Argus_Cal_Update+0x1736>
 8013f6c:	b150      	cbz	r0, 8013f84 <Argus_Cal_Update+0x174c>
 8013f6e:	4283      	cmp	r3, r0
 8013f70:	bf9c      	itt	ls
 8013f72:	1ac0      	subls	r0, r0, r3
 8013f74:	4311      	orrls	r1, r2
 8013f76:	0852      	lsrs	r2, r2, #1
 8013f78:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8013f7c:	d1f6      	bne.n	8013f6c <Argus_Cal_Update+0x1734>
 8013f7e:	4283      	cmp	r3, r0
 8013f80:	bf98      	it	ls
 8013f82:	3101      	addls	r1, #1
 8013f84:	2d00      	cmp	r5, #0
 8013f86:	bfb8      	it	lt
 8013f88:	4249      	neglt	r1, r1
 8013f8a:	0c0b      	lsrs	r3, r1, #16
 8013f8c:	b289      	uxth	r1, r1
 8013f8e:	fb01 f001 	mul.w	r0, r1, r1
 8013f92:	fb03 f101 	mul.w	r1, r3, r1
 8013f96:	eb01 4510 	add.w	r5, r1, r0, lsr #16
 8013f9a:	fa11 f285 	uxtah	r2, r1, r5
 8013f9e:	fb03 f303 	mul.w	r3, r3, r3
 8013fa2:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8013fa6:	0411      	lsls	r1, r2, #16
 8013fa8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8013fac:	fa11 f280 	uxtah	r2, r1, r0
 8013fb0:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8013fb4:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8013fb8:	bf28      	it	cs
 8013fba:	f44f 3580 	movcs.w	r5, #65536	; 0x10000
 8013fbe:	d39e      	bcc.n	8013efe <Argus_Cal_Update+0x16c6>
 8013fc0:	441d      	add	r5, r3
 8013fc2:	f7ff b8fa 	b.w	80131ba <Argus_Cal_Update+0x982>
 8013fc6:	4827      	ldr	r0, [pc, #156]	; (8014064 <Argus_Cal_Update+0x182c>)
 8013fc8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8013fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013fd0:	2100      	movs	r1, #0
 8013fd2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8013fd6:	e000      	b.n	8013fda <Argus_Cal_Update+0x17a2>
 8013fd8:	b152      	cbz	r2, 8013ff0 <Argus_Cal_Update+0x17b8>
 8013fda:	4295      	cmp	r5, r2
 8013fdc:	bf9c      	itt	ls
 8013fde:	1b52      	subls	r2, r2, r5
 8013fe0:	4319      	orrls	r1, r3
 8013fe2:	085b      	lsrs	r3, r3, #1
 8013fe4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013fe8:	d1f6      	bne.n	8013fd8 <Argus_Cal_Update+0x17a0>
 8013fea:	4295      	cmp	r5, r2
 8013fec:	bf98      	it	ls
 8013fee:	3101      	addls	r1, #1
 8013ff0:	2800      	cmp	r0, #0
 8013ff2:	bfb8      	it	lt
 8013ff4:	4249      	neglt	r1, r1
 8013ff6:	460d      	mov	r5, r1
 8013ff8:	f7ff b8df 	b.w	80131ba <Argus_Cal_Update+0x982>
 8013ffc:	46e6      	mov	lr, ip
 8013ffe:	f7ff bbf8 	b.w	80137f2 <Argus_Cal_Update+0xfba>
 8014002:	46e6      	mov	lr, ip
 8014004:	f7ff bbd1 	b.w	80137aa <Argus_Cal_Update+0xf72>
 8014008:	4653      	mov	r3, sl
 801400a:	9400      	str	r4, [sp, #0]
 801400c:	e690      	b.n	8013d30 <Argus_Cal_Update+0x14f8>
 801400e:	46e6      	mov	lr, ip
 8014010:	e411      	b.n	8013836 <Argus_Cal_Update+0xffe>
 8014012:	9400      	str	r4, [sp, #0]
 8014014:	e661      	b.n	8013cda <Argus_Cal_Update+0x14a2>
 8014016:	4608      	mov	r0, r1
 8014018:	f7ff bba6 	b.w	8013768 <Argus_Cal_Update+0xf30>
 801401c:	2d00      	cmp	r5, #0
 801401e:	f43f acfc 	beq.w	8013a1a <Argus_Cal_Update+0x11e2>
 8014022:	4602      	mov	r2, r0
 8014024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014028:	e4e9      	b.n	80139fe <Argus_Cal_Update+0x11c6>
 801402a:	4699      	mov	r9, r3
 801402c:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
 8014030:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8014034:	e610      	b.n	8013c58 <Argus_Cal_Update+0x1420>
 8014036:	4619      	mov	r1, r3
 8014038:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801403c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8014040:	e783      	b.n	8013f4a <Argus_Cal_Update+0x1712>
 8014042:	bf00      	nop
 8014044:	fa746f40 	.word	0xfa746f40
 8014048:	ff4e8de8 	.word	0xff4e8de8
 801404c:	ff983370 	.word	0xff983370
 8014050:	ffc6e010 	.word	0xffc6e010
 8014054:	007fffff 	.word	0x007fffff
 8014058:	ffff0000 	.word	0xffff0000
 801405c:	fd3a37a0 	.word	0xfd3a37a0
 8014060:	fe9d1bd0 	.word	0xfe9d1bd0
 8014064:	80800000 	.word	0x80800000

08014068 <Argus_Cal_SetCalibrationSync>:
 8014068:	b538      	push	{r3, r4, r5, lr}
 801406a:	4604      	mov	r4, r0
 801406c:	f8d0 04f4 	ldr.w	r0, [r0, #1268]	; 0x4f4
 8014070:	460d      	mov	r5, r1
 8014072:	f7fa ffcd 	bl	800f010 <Argus_Dev_HasUpdateFlag>
 8014076:	b9d0      	cbnz	r0, 80140ae <Argus_Cal_SetCalibrationSync+0x46>
 8014078:	4629      	mov	r1, r5
 801407a:	4620      	mov	r0, r4
 801407c:	f7fd fa30 	bl	80114e0 <Argus_Cal_PrepareCal>
 8014080:	2800      	cmp	r0, #0
 8014082:	db19      	blt.n	80140b8 <Argus_Cal_SetCalibrationSync+0x50>
 8014084:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 8014088:	f7fb f874 	bl	800f174 <Argus_Dev_GetChipID>
 801408c:	4629      	mov	r1, r5
 801408e:	f001 fdb3 	bl	8015bf8 <Argus_Cal_WriteToNVM>
 8014092:	2800      	cmp	r0, #0
 8014094:	db10      	blt.n	80140b8 <Argus_Cal_SetCalibrationSync+0x50>
 8014096:	4620      	mov	r0, r4
 8014098:	f7fe fbce 	bl	8012838 <Argus_Cal_Update>
 801409c:	2800      	cmp	r0, #0
 801409e:	db0b      	blt.n	80140b8 <Argus_Cal_SetCalibrationSync+0x50>
 80140a0:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 80140a4:	2101      	movs	r1, #1
 80140a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140aa:	f7fb baa7 	b.w	800f5fc <Argus_Dev_UpdateSync>
 80140ae:	4803      	ldr	r0, [pc, #12]	; (80140bc <Argus_Cal_SetCalibrationSync+0x54>)
 80140b0:	f7ec fece 	bl	8000e50 <print>
 80140b4:	f06f 00be 	mvn.w	r0, #190	; 0xbe
 80140b8:	bd38      	pop	{r3, r4, r5, pc}
 80140ba:	bf00      	nop
 80140bc:	0801b068 	.word	0x0801b068

080140c0 <Argus_Cal_GetTemperature>:
 80140c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80140c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80140c6:	4298      	cmp	r0, r3
 80140c8:	bf08      	it	eq
 80140ca:	f44f 10f0 	moveq.w	r0, #1966080	; 0x1e0000
 80140ce:	4770      	bx	lr

080140d0 <Argus_Cal_GetChargePumpVoltage>:
 80140d0:	b470      	push	{r4, r5, r6}
 80140d2:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80140d4:	f890 61f0 	ldrb.w	r6, [r0, #496]	; 0x1f0
 80140d8:	f890 51f1 	ldrb.w	r5, [r0, #497]	; 0x1f1
 80140dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80140e0:	429c      	cmp	r4, r3
 80140e2:	d011      	beq.n	8014108 <Argus_Cal_GetChargePumpVoltage+0x38>
 80140e4:	f5a4 14f0 	sub.w	r4, r4, #1966080	; 0x1e0000
 80140e8:	f890 01cc 	ldrb.w	r0, [r0, #460]	; 0x1cc
 80140ec:	1324      	asrs	r4, r4, #12
 80140ee:	fb00 f304 	mul.w	r3, r0, r4
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	db0c      	blt.n	8014110 <Argus_Cal_GetChargePumpVoltage+0x40>
 80140f6:	f503 6080 	add.w	r0, r3, #1024	; 0x400
 80140fa:	0ac3      	lsrs	r3, r0, #11
 80140fc:	442b      	add	r3, r5
 80140fe:	b2db      	uxtb	r3, r3
 8014100:	42b3      	cmp	r3, r6
 8014102:	bf38      	it	cc
 8014104:	4633      	movcc	r3, r6
 8014106:	461d      	mov	r5, r3
 8014108:	700e      	strb	r6, [r1, #0]
 801410a:	7015      	strb	r5, [r2, #0]
 801410c:	bc70      	pop	{r4, r5, r6}
 801410e:	4770      	bx	lr
 8014110:	f5c3 6080 	rsb	r0, r3, #1024	; 0x400
 8014114:	0ac0      	lsrs	r0, r0, #11
 8014116:	4243      	negs	r3, r0
 8014118:	e7f0      	b.n	80140fc <Argus_Cal_GetChargePumpVoltage+0x2c>
 801411a:	bf00      	nop

0801411c <Argus_Cal_ApplyFrequencyTemperatureCompensation>:
 801411c:	b570      	push	{r4, r5, r6, lr}
 801411e:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8014120:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014124:	429d      	cmp	r5, r3
 8014126:	d002      	beq.n	801412e <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x12>
 8014128:	f890 31b4 	ldrb.w	r3, [r0, #436]	; 0x1b4
 801412c:	b903      	cbnz	r3, 8014130 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x14>
 801412e:	bd70      	pop	{r4, r5, r6, pc}
 8014130:	460d      	mov	r5, r1
 8014132:	4606      	mov	r6, r0
 8014134:	f8d0 04f4 	ldr.w	r0, [r0, #1268]	; 0x4f4
 8014138:	4614      	mov	r4, r2
 801413a:	f7fb f847 	bl	800f1cc <Argus_Dev_GetCfg>
 801413e:	8a2b      	ldrh	r3, [r5, #16]
 8014140:	079a      	lsls	r2, r3, #30
 8014142:	d45e      	bmi.n	8014202 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xe6>
 8014144:	f890 2073 	ldrb.w	r2, [r0, #115]	; 0x73
 8014148:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
 801414c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8014150:	094a      	lsrs	r2, r1, #5
 8014152:	6d31      	ldr	r1, [r6, #80]	; 0x50
 8014154:	f896 31b4 	ldrb.w	r3, [r6, #436]	; 0x1b4
 8014158:	f5a1 11f0 	sub.w	r1, r1, #1966080	; 0x1e0000
 801415c:	fb03 f301 	mul.w	r3, r3, r1
 8014160:	2b00      	cmp	r3, #0
 8014162:	db5a      	blt.n	801421a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xfe>
 8014164:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8014168:	0c9b      	lsrs	r3, r3, #18
 801416a:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 801416e:	fb02 f303 	mul.w	r3, r2, r3
 8014172:	f995 100f 	ldrsb.w	r1, [r5, #15]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d054      	beq.n	8014224 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x108>
 801417a:	4411      	add	r1, r2
 801417c:	0409      	lsls	r1, r1, #16
 801417e:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8014182:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8014186:	429a      	cmp	r2, r3
 8014188:	4618      	mov	r0, r3
 801418a:	ea81 0603 	eor.w	r6, r1, r3
 801418e:	d95c      	bls.n	801424a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x12e>
 8014190:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8014194:	e001      	b.n	801419a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x7e>
 8014196:	460d      	mov	r5, r1
 8014198:	4618      	mov	r0, r3
 801419a:	0043      	lsls	r3, r0, #1
 801419c:	429a      	cmp	r2, r3
 801419e:	ea4f 0145 	mov.w	r1, r5, lsl #1
 80141a2:	d8f8      	bhi.n	8014196 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x7a>
 80141a4:	2900      	cmp	r1, #0
 80141a6:	d140      	bne.n	801422a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x10e>
 80141a8:	2e00      	cmp	r6, #0
 80141aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141ae:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80141b2:	bfac      	ite	ge
 80141b4:	4619      	movge	r1, r3
 80141b6:	f44f 4000 	movlt.w	r0, #32768	; 0x8000
 80141ba:	6822      	ldr	r2, [r4, #0]
 80141bc:	0c16      	lsrs	r6, r2, #16
 80141be:	b292      	uxth	r2, r2
 80141c0:	fb01 f502 	mul.w	r5, r1, r2
 80141c4:	fb01 f306 	mul.w	r3, r1, r6
 80141c8:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 80141cc:	fb00 f202 	mul.w	r2, r0, r2
 80141d0:	fa12 f283 	uxtah	r2, r2, r3
 80141d4:	0411      	lsls	r1, r2, #16
 80141d6:	fa11 f585 	uxtah	r5, r1, r5
 80141da:	fb00 f006 	mul.w	r0, r0, r6
 80141de:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
 80141e2:	eb00 4313 	add.w	r3, r0, r3, lsr #16
 80141e6:	bf38      	it	cc
 80141e8:	f505 4500 	addcc.w	r5, r5, #32768	; 0x8000
 80141ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80141f0:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80141f4:	bf34      	ite	cc
 80141f6:	0c2d      	lsrcc	r5, r5, #16
 80141f8:	f44f 3580 	movcs.w	r5, #65536	; 0x10000
 80141fc:	442b      	add	r3, r5
 80141fe:	6023      	str	r3, [r4, #0]
 8014200:	bd70      	pop	{r4, r5, r6, pc}
 8014202:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 8014206:	075b      	lsls	r3, r3, #29
 8014208:	bf4b      	itete	mi
 801420a:	eb00 0042 	addmi.w	r0, r0, r2, lsl #1
 801420e:	3257      	addpl	r2, #87	; 0x57
 8014210:	f8b0 20b2 	ldrhmi.w	r2, [r0, #178]	; 0xb2
 8014214:	f830 2012 	ldrhpl.w	r2, [r0, r2, lsl #1]
 8014218:	e79b      	b.n	8014152 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x36>
 801421a:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 801421e:	0c9b      	lsrs	r3, r3, #18
 8014220:	425b      	negs	r3, r3
 8014222:	e7a2      	b.n	801416a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x4e>
 8014224:	4619      	mov	r1, r3
 8014226:	4618      	mov	r0, r3
 8014228:	e7c7      	b.n	80141ba <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x9e>
 801422a:	2b00      	cmp	r3, #0
 801422c:	da10      	bge.n	8014250 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x134>
 801422e:	f035 4100 	bics.w	r1, r5, #2147483648	; 0x80000000
 8014232:	4603      	mov	r3, r0
 8014234:	d10c      	bne.n	8014250 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x134>
 8014236:	4608      	mov	r0, r1
 8014238:	4293      	cmp	r3, r2
 801423a:	bf98      	it	ls
 801423c:	3001      	addls	r0, #1
 801423e:	2e00      	cmp	r6, #0
 8014240:	bfb8      	it	lt
 8014242:	4240      	neglt	r0, r0
 8014244:	b281      	uxth	r1, r0
 8014246:	0c00      	lsrs	r0, r0, #16
 8014248:	e7b7      	b.n	80141ba <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x9e>
 801424a:	b172      	cbz	r2, 801426a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x14e>
 801424c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8014250:	2000      	movs	r0, #0
 8014252:	e001      	b.n	8014258 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x13c>
 8014254:	2a00      	cmp	r2, #0
 8014256:	d0f2      	beq.n	801423e <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x122>
 8014258:	4293      	cmp	r3, r2
 801425a:	bf9c      	itt	ls
 801425c:	1ad2      	subls	r2, r2, r3
 801425e:	4308      	orrls	r0, r1
 8014260:	0849      	lsrs	r1, r1, #1
 8014262:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014266:	d1f5      	bne.n	8014254 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x138>
 8014268:	e7e6      	b.n	8014238 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x11c>
 801426a:	4610      	mov	r0, r2
 801426c:	e7e7      	b.n	801423e <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x122>
 801426e:	bf00      	nop

08014270 <Argus_Cal_ApplyAuxCalibration>:
 8014270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014272:	460e      	mov	r6, r1
 8014274:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8014278:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801427c:	4299      	cmp	r1, r3
 801427e:	4604      	mov	r4, r0
 8014280:	4615      	mov	r5, r2
 8014282:	f000 8081 	beq.w	8014388 <Argus_Cal_ApplyAuxCalibration+0x118>
 8014286:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 801428a:	f8b0 31de 	ldrh.w	r3, [r0, #478]	; 0x1de
 801428e:	b289      	uxth	r1, r1
 8014290:	1a89      	subs	r1, r1, r2
 8014292:	fb03 f301 	mul.w	r3, r3, r1
 8014296:	2b00      	cmp	r3, #0
 8014298:	db71      	blt.n	801437e <Argus_Cal_ApplyAuxCalibration+0x10e>
 801429a:	3304      	adds	r3, #4
 801429c:	08db      	lsrs	r3, r3, #3
 801429e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80142a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80142a4:	4291      	cmp	r1, r2
 80142a6:	f503 13f0 	add.w	r3, r3, #1966080	; 0x1e0000
 80142aa:	d01f      	beq.n	80142ec <Argus_Cal_ApplyAuxCalibration+0x7c>
 80142ac:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 80142b0:	b1e2      	cbz	r2, 80142ec <Argus_Cal_ApplyAuxCalibration+0x7c>
 80142b2:	4299      	cmp	r1, r3
 80142b4:	f280 8082 	bge.w	80143bc <Argus_Cal_ApplyAuxCalibration+0x14c>
 80142b8:	1a5b      	subs	r3, r3, r1
 80142ba:	b298      	uxth	r0, r3
 80142bc:	0c1b      	lsrs	r3, r3, #16
 80142be:	fb02 f000 	mul.w	r0, r2, r0
 80142c2:	fb02 f303 	mul.w	r3, r2, r3
 80142c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80142ca:	041a      	lsls	r2, r3, #16
 80142cc:	fa12 f080 	uxtah	r0, r2, r0
 80142d0:	f110 0f81 	cmn.w	r0, #129	; 0x81
 80142d4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80142d8:	bf98      	it	ls
 80142da:	3080      	addls	r0, #128	; 0x80
 80142dc:	ea4f 6303 	mov.w	r3, r3, lsl #24
 80142e0:	bf94      	ite	ls
 80142e2:	0a00      	lsrls	r0, r0, #8
 80142e4:	f04f 7080 	movhi.w	r0, #16777216	; 0x1000000
 80142e8:	440b      	add	r3, r1
 80142ea:	4403      	add	r3, r0
 80142ec:	6523      	str	r3, [r4, #80]	; 0x50
 80142ee:	131b      	asrs	r3, r3, #12
 80142f0:	8073      	strh	r3, [r6, #2]
 80142f2:	4620      	mov	r0, r4
 80142f4:	f7fc fa54 	bl	80107a0 <EvaluateAPDVoltage>
 80142f8:	f894 31da 	ldrb.w	r3, [r4, #474]	; 0x1da
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d03d      	beq.n	801437c <Argus_Cal_ApplyAuxCalibration+0x10c>
 8014300:	88b2      	ldrh	r2, [r6, #4]
 8014302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014306:	429a      	cmp	r2, r3
 8014308:	d02b      	beq.n	8014362 <Argus_Cal_ApplyAuxCalibration+0xf2>
 801430a:	f894 21e0 	ldrb.w	r2, [r4, #480]	; 0x1e0
 801430e:	b122      	cbz	r2, 801431a <Argus_Cal_ApplyAuxCalibration+0xaa>
 8014310:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8014312:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014316:	4299      	cmp	r1, r3
 8014318:	d16c      	bne.n	80143f4 <Argus_Cal_ApplyAuxCalibration+0x184>
 801431a:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
 801431e:	b303      	cbz	r3, 8014362 <Argus_Cal_ApplyAuxCalibration+0xf2>
 8014320:	88b2      	ldrh	r2, [r6, #4]
 8014322:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8014326:	428a      	cmp	r2, r1
 8014328:	d81b      	bhi.n	8014362 <Argus_Cal_ApplyAuxCalibration+0xf2>
 801432a:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
 801432e:	f8b4 01ec 	ldrh.w	r0, [r4, #492]	; 0x1ec
 8014332:	076d      	lsls	r5, r5, #29
 8014334:	f1a1 0710 	sub.w	r7, r1, #16
 8014338:	f101 0c10 	add.w	ip, r1, #16
 801433c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8014340:	d55c      	bpl.n	80143fc <Argus_Cal_ApplyAuxCalibration+0x18c>
 8014342:	fb07 f303 	mul.w	r3, r7, r3
 8014346:	fb0c 3302 	mla	r3, ip, r2, r3
 801434a:	1a1b      	subs	r3, r3, r0
 801434c:	fb93 f3f1 	sdiv	r3, r3, r1
 8014350:	b29b      	uxth	r3, r3
 8014352:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014356:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801435a:	428b      	cmp	r3, r1
 801435c:	bf08      	it	eq
 801435e:	4613      	moveq	r3, r2
 8014360:	80b3      	strh	r3, [r6, #4]
 8014362:	8832      	ldrh	r2, [r6, #0]
 8014364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014368:	429a      	cmp	r2, r3
 801436a:	d014      	beq.n	8014396 <Argus_Cal_ApplyAuxCalibration+0x126>
 801436c:	f894 21e0 	ldrb.w	r2, [r4, #480]	; 0x1e0
 8014370:	b122      	cbz	r2, 801437c <Argus_Cal_ApplyAuxCalibration+0x10c>
 8014372:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8014374:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014378:	4299      	cmp	r1, r3
 801437a:	d109      	bne.n	8014390 <Argus_Cal_ApplyAuxCalibration+0x120>
 801437c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801437e:	f1c3 0304 	rsb	r3, r3, #4
 8014382:	08db      	lsrs	r3, r3, #3
 8014384:	425b      	negs	r3, r3
 8014386:	e78a      	b.n	801429e <Argus_Cal_ApplyAuxCalibration+0x2e>
 8014388:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801438c:	6503      	str	r3, [r0, #80]	; 0x50
 801438e:	e7b3      	b.n	80142f8 <Argus_Cal_ApplyAuxCalibration+0x88>
 8014390:	4630      	mov	r0, r6
 8014392:	f7fc f9bd 	bl	8010710 <ApplyVoltageTemperatureCompensation.part.6>
 8014396:	88f2      	ldrh	r2, [r6, #6]
 8014398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801439c:	429a      	cmp	r2, r3
 801439e:	d0ed      	beq.n	801437c <Argus_Cal_ApplyAuxCalibration+0x10c>
 80143a0:	f894 21e0 	ldrb.w	r2, [r4, #480]	; 0x1e0
 80143a4:	2a00      	cmp	r2, #0
 80143a6:	d0e9      	beq.n	801437c <Argus_Cal_ApplyAuxCalibration+0x10c>
 80143a8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80143aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80143ae:	4299      	cmp	r1, r3
 80143b0:	d0e4      	beq.n	801437c <Argus_Cal_ApplyAuxCalibration+0x10c>
 80143b2:	1db0      	adds	r0, r6, #6
 80143b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80143b8:	f7fc b9aa 	b.w	8010710 <ApplyVoltageTemperatureCompensation.part.6>
 80143bc:	1acb      	subs	r3, r1, r3
 80143be:	b298      	uxth	r0, r3
 80143c0:	0c1b      	lsrs	r3, r3, #16
 80143c2:	fb02 f000 	mul.w	r0, r2, r0
 80143c6:	fb02 f303 	mul.w	r3, r2, r3
 80143ca:	eb03 4210 	add.w	r2, r3, r0, lsr #16
 80143ce:	0413      	lsls	r3, r2, #16
 80143d0:	fa13 f080 	uxtah	r0, r3, r0
 80143d4:	f110 0f81 	cmn.w	r0, #129	; 0x81
 80143d8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80143dc:	bf98      	it	ls
 80143de:	f100 0380 	addls.w	r3, r0, #128	; 0x80
 80143e2:	ea4f 6202 	mov.w	r2, r2, lsl #24
 80143e6:	bf94      	ite	ls
 80143e8:	0a1b      	lsrls	r3, r3, #8
 80143ea:	f04f 7380 	movhi.w	r3, #16777216	; 0x1000000
 80143ee:	1a8a      	subs	r2, r1, r2
 80143f0:	1ad3      	subs	r3, r2, r3
 80143f2:	e77b      	b.n	80142ec <Argus_Cal_ApplyAuxCalibration+0x7c>
 80143f4:	1d30      	adds	r0, r6, #4
 80143f6:	f7fc f98b 	bl	8010710 <ApplyVoltageTemperatureCompensation.part.6>
 80143fa:	e78e      	b.n	801431a <Argus_Cal_ApplyAuxCalibration+0xaa>
 80143fc:	fb07 f202 	mul.w	r2, r7, r2
 8014400:	fb0c 2313 	mls	r3, ip, r3, r2
 8014404:	4403      	add	r3, r0
 8014406:	fb93 f3f1 	sdiv	r3, r3, r1
 801440a:	b29b      	uxth	r3, r3
 801440c:	e7a1      	b.n	8014352 <Argus_Cal_ApplyAuxCalibration+0xe2>
 801440e:	bf00      	nop

08014410 <Argus_Cal_GetGlobalRangeOffset>:
 8014410:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014416:	f001 0401 	and.w	r4, r1, #1
 801441a:	fb03 0404 	mla	r4, r3, r4, r0
 801441e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8014422:	b10b      	cbz	r3, 8014428 <Argus_Cal_GetGlobalRangeOffset+0x18>
 8014424:	f8d4 322c 	ldr.w	r3, [r4, #556]	; 0x22c
 8014428:	f890 51bc 	ldrb.w	r5, [r0, #444]	; 0x1bc
 801442c:	b11d      	cbz	r5, 8014436 <Argus_Cal_GetGlobalRangeOffset+0x26>
 801442e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8014432:	42a2      	cmp	r2, r4
 8014434:	d10b      	bne.n	801444e <Argus_Cal_GetGlobalRangeOffset+0x3e>
 8014436:	f890 21d0 	ldrb.w	r2, [r0, #464]	; 0x1d0
 801443a:	b122      	cbz	r2, 8014446 <Argus_Cal_GetGlobalRangeOffset+0x36>
 801443c:	f3c1 3101 	ubfx	r1, r1, #12, #2
 8014440:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8014444:	4413      	add	r3, r2
 8014446:	f8d0 01fc 	ldr.w	r0, [r0, #508]	; 0x1fc
 801444a:	4418      	add	r0, r3
 801444c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801444e:	f8b0 41ec 	ldrh.w	r4, [r0, #492]	; 0x1ec
 8014452:	f8b0 504e 	ldrh.w	r5, [r0, #78]	; 0x4e
 8014456:	1aa2      	subs	r2, r4, r2
 8014458:	fb02 f205 	mul.w	r2, r2, r5
 801445c:	1112      	asrs	r2, r2, #4
 801445e:	f000 80db 	beq.w	8014618 <Argus_Cal_GetGlobalRangeOffset+0x208>
 8014462:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8014466:	f000 810f 	beq.w	8014688 <Argus_Cal_GetGlobalRangeOffset+0x278>
 801446a:	4c89      	ldr	r4, [pc, #548]	; (8014690 <Argus_Cal_GetGlobalRangeOffset+0x280>)
 801446c:	42a2      	cmp	r2, r4
 801446e:	f300 810b 	bgt.w	8014688 <Argus_Cal_GetGlobalRangeOffset+0x278>
 8014472:	4c88      	ldr	r4, [pc, #544]	; (8014694 <Argus_Cal_GetGlobalRangeOffset+0x284>)
 8014474:	42a2      	cmp	r2, r4
 8014476:	f2c0 81f4 	blt.w	8014862 <Argus_Cal_GetGlobalRangeOffset+0x452>
 801447a:	2a00      	cmp	r2, #0
 801447c:	f340 81f4 	ble.w	8014868 <Argus_Cal_GetGlobalRangeOffset+0x458>
 8014480:	4d85      	ldr	r5, [pc, #532]	; (8014698 <Argus_Cal_GetGlobalRangeOffset+0x288>)
 8014482:	0214      	lsls	r4, r2, #8
 8014484:	42ac      	cmp	r4, r5
 8014486:	f300 8113 	bgt.w	80146b0 <Argus_Cal_GetGlobalRangeOffset+0x2a0>
 801448a:	4a84      	ldr	r2, [pc, #528]	; (801469c <Argus_Cal_GetGlobalRangeOffset+0x28c>)
 801448c:	4d84      	ldr	r5, [pc, #528]	; (80146a0 <Argus_Cal_GetGlobalRangeOffset+0x290>)
 801448e:	4422      	add	r2, r4
 8014490:	2a00      	cmp	r2, #0
 8014492:	bfa8      	it	ge
 8014494:	4614      	movge	r4, r2
 8014496:	4425      	add	r5, r4
 8014498:	bfad      	iteet	ge
 801449a:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
 801449e:	f04f 6280 	movlt.w	r2, #67108864	; 0x4000000
 80144a2:	f04f 7680 	movlt.w	r6, #16777216	; 0x1000000
 80144a6:	f04f 5680 	movge.w	r6, #268435456	; 0x10000000
 80144aa:	2d00      	cmp	r5, #0
 80144ac:	bfb8      	it	lt
 80144ae:	4625      	movlt	r5, r4
 80144b0:	4c7c      	ldr	r4, [pc, #496]	; (80146a4 <Argus_Cal_GetGlobalRangeOffset+0x294>)
 80144b2:	442c      	add	r4, r5
 80144b4:	bfb8      	it	lt
 80144b6:	4632      	movlt	r2, r6
 80144b8:	2c00      	cmp	r4, #0
 80144ba:	bfa8      	it	ge
 80144bc:	4625      	movge	r5, r4
 80144be:	4c7a      	ldr	r4, [pc, #488]	; (80146a8 <Argus_Cal_GetGlobalRangeOffset+0x298>)
 80144c0:	442c      	add	r4, r5
 80144c2:	bfa8      	it	ge
 80144c4:	0052      	lslge	r2, r2, #1
 80144c6:	2c00      	cmp	r4, #0
 80144c8:	bfa8      	it	ge
 80144ca:	4625      	movge	r5, r4
 80144cc:	4c77      	ldr	r4, [pc, #476]	; (80146ac <Argus_Cal_GetGlobalRangeOffset+0x29c>)
 80144ce:	442c      	add	r4, r5
 80144d0:	bfa8      	it	ge
 80144d2:	eb02 0252 	addge.w	r2, r2, r2, lsr #1
 80144d6:	2c00      	cmp	r4, #0
 80144d8:	bfa8      	it	ge
 80144da:	4625      	movge	r5, r4
 80144dc:	f5a5 14f1 	sub.w	r4, r5, #1974272	; 0x1e2000
 80144e0:	f2a4 7407 	subw	r4, r4, #1799	; 0x707
 80144e4:	bfa8      	it	ge
 80144e6:	eb02 0292 	addge.w	r2, r2, r2, lsr #2
 80144ea:	2c00      	cmp	r4, #0
 80144ec:	bfa8      	it	ge
 80144ee:	4625      	movge	r5, r4
 80144f0:	f5a5 2478 	sub.w	r4, r5, #1015808	; 0xf8000
 80144f4:	f5a4 64a3 	sub.w	r4, r4, #1304	; 0x518
 80144f8:	bfa8      	it	ge
 80144fa:	eb02 02d2 	addge.w	r2, r2, r2, lsr #3
 80144fe:	2c00      	cmp	r4, #0
 8014500:	bfa8      	it	ge
 8014502:	4625      	movge	r5, r4
 8014504:	f5a5 24fc 	sub.w	r4, r5, #516096	; 0x7e000
 8014508:	f1a4 04a7 	sub.w	r4, r4, #167	; 0xa7
 801450c:	bfa8      	it	ge
 801450e:	eb02 1212 	addge.w	r2, r2, r2, lsr #4
 8014512:	2c00      	cmp	r4, #0
 8014514:	bfa8      	it	ge
 8014516:	4625      	movge	r5, r4
 8014518:	f5a5 347e 	sub.w	r4, r5, #260096	; 0x3f800
 801451c:	f1a4 0415 	sub.w	r4, r4, #21
 8014520:	bfa8      	it	ge
 8014522:	eb02 1252 	addge.w	r2, r2, r2, lsr #5
 8014526:	2c00      	cmp	r4, #0
 8014528:	bfa8      	it	ge
 801452a:	4625      	movge	r5, r4
 801452c:	f5a5 34ff 	sub.w	r4, r5, #130560	; 0x1fe00
 8014530:	f1a4 0403 	sub.w	r4, r4, #3
 8014534:	bfa8      	it	ge
 8014536:	eb02 1292 	addge.w	r2, r2, r2, lsr #6
 801453a:	2c00      	cmp	r4, #0
 801453c:	bfa8      	it	ge
 801453e:	4625      	movge	r5, r4
 8014540:	f5a5 447f 	sub.w	r4, r5, #65280	; 0xff00
 8014544:	f1a4 0480 	sub.w	r4, r4, #128	; 0x80
 8014548:	bfa8      	it	ge
 801454a:	eb02 12d2 	addge.w	r2, r2, r2, lsr #7
 801454e:	2c00      	cmp	r4, #0
 8014550:	bfa8      	it	ge
 8014552:	4625      	movge	r5, r4
 8014554:	f5a5 44ff 	sub.w	r4, r5, #32640	; 0x7f80
 8014558:	f1a4 0460 	sub.w	r4, r4, #96	; 0x60
 801455c:	bfa8      	it	ge
 801455e:	eb02 2212 	addge.w	r2, r2, r2, lsr #8
 8014562:	2c00      	cmp	r4, #0
 8014564:	bfa8      	it	ge
 8014566:	4625      	movge	r5, r4
 8014568:	f5a5 547f 	sub.w	r4, r5, #16320	; 0x3fc0
 801456c:	f1a4 0438 	sub.w	r4, r4, #56	; 0x38
 8014570:	bfa8      	it	ge
 8014572:	eb02 2252 	addge.w	r2, r2, r2, lsr #9
 8014576:	2c00      	cmp	r4, #0
 8014578:	bfa8      	it	ge
 801457a:	4625      	movge	r5, r4
 801457c:	f5a5 54ff 	sub.w	r4, r5, #8160	; 0x1fe0
 8014580:	f1a4 041e 	sub.w	r4, r4, #30
 8014584:	bfa8      	it	ge
 8014586:	eb02 2292 	addge.w	r2, r2, r2, lsr #10
 801458a:	2c00      	cmp	r4, #0
 801458c:	bfa4      	itt	ge
 801458e:	4625      	movge	r5, r4
 8014590:	eb02 22d2 	addge.w	r2, r2, r2, lsr #11
 8014594:	04ec      	lsls	r4, r5, #19
 8014596:	bf48      	it	mi
 8014598:	eb02 3212 	addmi.w	r2, r2, r2, lsr #12
 801459c:	052f      	lsls	r7, r5, #20
 801459e:	bf48      	it	mi
 80145a0:	eb02 3252 	addmi.w	r2, r2, r2, lsr #13
 80145a4:	056e      	lsls	r6, r5, #21
 80145a6:	bf48      	it	mi
 80145a8:	eb02 3292 	addmi.w	r2, r2, r2, lsr #14
 80145ac:	05ac      	lsls	r4, r5, #22
 80145ae:	bf48      	it	mi
 80145b0:	eb02 32d2 	addmi.w	r2, r2, r2, lsr #15
 80145b4:	05ef      	lsls	r7, r5, #23
 80145b6:	bf48      	it	mi
 80145b8:	eb02 4212 	addmi.w	r2, r2, r2, lsr #16
 80145bc:	062e      	lsls	r6, r5, #24
 80145be:	bf48      	it	mi
 80145c0:	eb02 4252 	addmi.w	r2, r2, r2, lsr #17
 80145c4:	066c      	lsls	r4, r5, #25
 80145c6:	bf48      	it	mi
 80145c8:	eb02 4292 	addmi.w	r2, r2, r2, lsr #18
 80145cc:	06af      	lsls	r7, r5, #26
 80145ce:	bf48      	it	mi
 80145d0:	eb02 42d2 	addmi.w	r2, r2, r2, lsr #19
 80145d4:	06ee      	lsls	r6, r5, #27
 80145d6:	bf48      	it	mi
 80145d8:	eb02 5212 	addmi.w	r2, r2, r2, lsr #20
 80145dc:	072c      	lsls	r4, r5, #28
 80145de:	bf48      	it	mi
 80145e0:	eb02 5252 	addmi.w	r2, r2, r2, lsr #21
 80145e4:	076f      	lsls	r7, r5, #29
 80145e6:	bf48      	it	mi
 80145e8:	eb02 5292 	addmi.w	r2, r2, r2, lsr #22
 80145ec:	07ae      	lsls	r6, r5, #30
 80145ee:	bf48      	it	mi
 80145f0:	eb02 52d2 	addmi.w	r2, r2, r2, lsr #23
 80145f4:	07ec      	lsls	r4, r5, #31
 80145f6:	bf48      	it	mi
 80145f8:	eb02 6212 	addmi.w	r2, r2, r2, lsr #24
 80145fc:	f112 0f81 	cmn.w	r2, #129	; 0x81
 8014600:	d842      	bhi.n	8014688 <Argus_Cal_GetGlobalRangeOffset+0x278>
 8014602:	3280      	adds	r2, #128	; 0x80
 8014604:	0a12      	lsrs	r2, r2, #8
 8014606:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 801460a:	bf28      	it	cs
 801460c:	f44f 3200 	movcs.w	r2, #131072	; 0x20000
 8014610:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014614:	b292      	uxth	r2, r2
 8014616:	e001      	b.n	801461c <Argus_Cal_GetGlobalRangeOffset+0x20c>
 8014618:	f04f 0c01 	mov.w	ip, #1
 801461c:	f8d0 41f4 	ldr.w	r4, [r0, #500]	; 0x1f4
 8014620:	2c00      	cmp	r4, #0
 8014622:	bfb8      	it	lt
 8014624:	4264      	neglt	r4, r4
 8014626:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 801462a:	b2a4      	uxth	r4, r4
 801462c:	fb02 f704 	mul.w	r7, r2, r4
 8014630:	fb02 f60e 	mul.w	r6, r2, lr
 8014634:	eb06 4617 	add.w	r6, r6, r7, lsr #16
 8014638:	fb0c f404 	mul.w	r4, ip, r4
 801463c:	fa14 f486 	uxtah	r4, r4, r6
 8014640:	fb0c f20e 	mul.w	r2, ip, lr
 8014644:	eb02 4216 	add.w	r2, r2, r6, lsr #16
 8014648:	ea4f 4604 	mov.w	r6, r4, lsl #16
 801464c:	fa16 f787 	uxtah	r7, r6, r7
 8014650:	bfb4      	ite	lt
 8014652:	f04f 35ff 	movlt.w	r5, #4294967295
 8014656:	2501      	movge	r5, #1
 8014658:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801465c:	f517 4f00 	cmn.w	r7, #32768	; 0x8000
 8014660:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8014664:	d20d      	bcs.n	8014682 <Argus_Cal_GetGlobalRangeOffset+0x272>
 8014666:	f507 4700 	add.w	r7, r7, #32768	; 0x8000
 801466a:	0c3f      	lsrs	r7, r7, #16
 801466c:	443a      	add	r2, r7
 801466e:	2d01      	cmp	r5, #1
 8014670:	bf18      	it	ne
 8014672:	4252      	negne	r2, r2
 8014674:	4413      	add	r3, r2
 8014676:	f890 21d0 	ldrb.w	r2, [r0, #464]	; 0x1d0
 801467a:	2a00      	cmp	r2, #0
 801467c:	f43f aee3 	beq.w	8014446 <Argus_Cal_GetGlobalRangeOffset+0x36>
 8014680:	e6dc      	b.n	801443c <Argus_Cal_GetGlobalRangeOffset+0x2c>
 8014682:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8014686:	e7f1      	b.n	801466c <Argus_Cal_GetGlobalRangeOffset+0x25c>
 8014688:	2200      	movs	r2, #0
 801468a:	f04f 0c02 	mov.w	ip, #2
 801468e:	e7c5      	b.n	801461c <Argus_Cal_GetGlobalRangeOffset+0x20c>
 8014690:	000b1721 	.word	0x000b1721
 8014694:	fff4376c 	.word	0xfff4376c
 8014698:	058b90be 	.word	0x058b90be
 801469c:	fd3a37a0 	.word	0xfd3a37a0
 80146a0:	fe9d1bd0 	.word	0xfe9d1bd0
 80146a4:	ff4e8de8 	.word	0xff4e8de8
 80146a8:	ff983370 	.word	0xff983370
 80146ac:	ffc6e010 	.word	0xffc6e010
 80146b0:	4dd2      	ldr	r5, [pc, #840]	; (80149fc <Argus_Cal_GetGlobalRangeOffset+0x5ec>)
 80146b2:	4cd3      	ldr	r4, [pc, #844]	; (8014a00 <Argus_Cal_GetGlobalRangeOffset+0x5f0>)
 80146b4:	01d2      	lsls	r2, r2, #7
 80146b6:	4415      	add	r5, r2
 80146b8:	2d00      	cmp	r5, #0
 80146ba:	bfa8      	it	ge
 80146bc:	462a      	movge	r2, r5
 80146be:	4414      	add	r4, r2
 80146c0:	bfad      	iteet	ge
 80146c2:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 80146c6:	f04f 6580 	movlt.w	r5, #67108864	; 0x4000000
 80146ca:	f04f 7680 	movlt.w	r6, #16777216	; 0x1000000
 80146ce:	f04f 5680 	movge.w	r6, #268435456	; 0x10000000
 80146d2:	2c00      	cmp	r4, #0
 80146d4:	bfb8      	it	lt
 80146d6:	4614      	movlt	r4, r2
 80146d8:	4aca      	ldr	r2, [pc, #808]	; (8014a04 <Argus_Cal_GetGlobalRangeOffset+0x5f4>)
 80146da:	4422      	add	r2, r4
 80146dc:	bfb8      	it	lt
 80146de:	4635      	movlt	r5, r6
 80146e0:	2a00      	cmp	r2, #0
 80146e2:	bfa8      	it	ge
 80146e4:	4614      	movge	r4, r2
 80146e6:	4ac8      	ldr	r2, [pc, #800]	; (8014a08 <Argus_Cal_GetGlobalRangeOffset+0x5f8>)
 80146e8:	4422      	add	r2, r4
 80146ea:	bfa8      	it	ge
 80146ec:	006d      	lslge	r5, r5, #1
 80146ee:	2a00      	cmp	r2, #0
 80146f0:	bfa8      	it	ge
 80146f2:	4614      	movge	r4, r2
 80146f4:	4ac5      	ldr	r2, [pc, #788]	; (8014a0c <Argus_Cal_GetGlobalRangeOffset+0x5fc>)
 80146f6:	4422      	add	r2, r4
 80146f8:	bfa8      	it	ge
 80146fa:	eb05 0555 	addge.w	r5, r5, r5, lsr #1
 80146fe:	2a00      	cmp	r2, #0
 8014700:	bfa8      	it	ge
 8014702:	4614      	movge	r4, r2
 8014704:	f5a4 12f1 	sub.w	r2, r4, #1974272	; 0x1e2000
 8014708:	f2a2 7207 	subw	r2, r2, #1799	; 0x707
 801470c:	bfa8      	it	ge
 801470e:	eb05 0595 	addge.w	r5, r5, r5, lsr #2
 8014712:	2a00      	cmp	r2, #0
 8014714:	bfa8      	it	ge
 8014716:	4614      	movge	r4, r2
 8014718:	f5a4 2278 	sub.w	r2, r4, #1015808	; 0xf8000
 801471c:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 8014720:	bfa8      	it	ge
 8014722:	eb05 05d5 	addge.w	r5, r5, r5, lsr #3
 8014726:	2a00      	cmp	r2, #0
 8014728:	bfa8      	it	ge
 801472a:	4614      	movge	r4, r2
 801472c:	f5a4 22fc 	sub.w	r2, r4, #516096	; 0x7e000
 8014730:	f1a2 02a7 	sub.w	r2, r2, #167	; 0xa7
 8014734:	bfa8      	it	ge
 8014736:	eb05 1515 	addge.w	r5, r5, r5, lsr #4
 801473a:	2a00      	cmp	r2, #0
 801473c:	bfa8      	it	ge
 801473e:	4614      	movge	r4, r2
 8014740:	f5a4 327e 	sub.w	r2, r4, #260096	; 0x3f800
 8014744:	f1a2 0215 	sub.w	r2, r2, #21
 8014748:	bfa8      	it	ge
 801474a:	eb05 1555 	addge.w	r5, r5, r5, lsr #5
 801474e:	2a00      	cmp	r2, #0
 8014750:	bfa8      	it	ge
 8014752:	4614      	movge	r4, r2
 8014754:	f5a4 32ff 	sub.w	r2, r4, #130560	; 0x1fe00
 8014758:	f1a2 0203 	sub.w	r2, r2, #3
 801475c:	bfa8      	it	ge
 801475e:	eb05 1595 	addge.w	r5, r5, r5, lsr #6
 8014762:	2a00      	cmp	r2, #0
 8014764:	bfa8      	it	ge
 8014766:	4614      	movge	r4, r2
 8014768:	f5a4 427f 	sub.w	r2, r4, #65280	; 0xff00
 801476c:	f1a2 0280 	sub.w	r2, r2, #128	; 0x80
 8014770:	bfa8      	it	ge
 8014772:	eb05 15d5 	addge.w	r5, r5, r5, lsr #7
 8014776:	2a00      	cmp	r2, #0
 8014778:	bfa8      	it	ge
 801477a:	4614      	movge	r4, r2
 801477c:	f5a4 42ff 	sub.w	r2, r4, #32640	; 0x7f80
 8014780:	f1a2 0260 	sub.w	r2, r2, #96	; 0x60
 8014784:	bfa8      	it	ge
 8014786:	eb05 2515 	addge.w	r5, r5, r5, lsr #8
 801478a:	2a00      	cmp	r2, #0
 801478c:	bfa8      	it	ge
 801478e:	4614      	movge	r4, r2
 8014790:	f5a4 527f 	sub.w	r2, r4, #16320	; 0x3fc0
 8014794:	f1a2 0238 	sub.w	r2, r2, #56	; 0x38
 8014798:	bfa8      	it	ge
 801479a:	eb05 2555 	addge.w	r5, r5, r5, lsr #9
 801479e:	2a00      	cmp	r2, #0
 80147a0:	bfa8      	it	ge
 80147a2:	4614      	movge	r4, r2
 80147a4:	f5a4 52ff 	sub.w	r2, r4, #8160	; 0x1fe0
 80147a8:	f1a2 021e 	sub.w	r2, r2, #30
 80147ac:	bfa8      	it	ge
 80147ae:	eb05 2595 	addge.w	r5, r5, r5, lsr #10
 80147b2:	2a00      	cmp	r2, #0
 80147b4:	bfa4      	itt	ge
 80147b6:	4614      	movge	r4, r2
 80147b8:	eb05 25d5 	addge.w	r5, r5, r5, lsr #11
 80147bc:	04e2      	lsls	r2, r4, #19
 80147be:	bf48      	it	mi
 80147c0:	eb05 3515 	addmi.w	r5, r5, r5, lsr #12
 80147c4:	0527      	lsls	r7, r4, #20
 80147c6:	bf48      	it	mi
 80147c8:	eb05 3555 	addmi.w	r5, r5, r5, lsr #13
 80147cc:	0566      	lsls	r6, r4, #21
 80147ce:	bf48      	it	mi
 80147d0:	eb05 3595 	addmi.w	r5, r5, r5, lsr #14
 80147d4:	05a2      	lsls	r2, r4, #22
 80147d6:	bf48      	it	mi
 80147d8:	eb05 35d5 	addmi.w	r5, r5, r5, lsr #15
 80147dc:	05e7      	lsls	r7, r4, #23
 80147de:	bf48      	it	mi
 80147e0:	eb05 4515 	addmi.w	r5, r5, r5, lsr #16
 80147e4:	0626      	lsls	r6, r4, #24
 80147e6:	bf48      	it	mi
 80147e8:	eb05 4555 	addmi.w	r5, r5, r5, lsr #17
 80147ec:	0662      	lsls	r2, r4, #25
 80147ee:	bf48      	it	mi
 80147f0:	eb05 4595 	addmi.w	r5, r5, r5, lsr #18
 80147f4:	06a7      	lsls	r7, r4, #26
 80147f6:	bf48      	it	mi
 80147f8:	eb05 45d5 	addmi.w	r5, r5, r5, lsr #19
 80147fc:	06e6      	lsls	r6, r4, #27
 80147fe:	bf48      	it	mi
 8014800:	eb05 5515 	addmi.w	r5, r5, r5, lsr #20
 8014804:	0722      	lsls	r2, r4, #28
 8014806:	bf48      	it	mi
 8014808:	eb05 5555 	addmi.w	r5, r5, r5, lsr #21
 801480c:	0767      	lsls	r7, r4, #29
 801480e:	bf48      	it	mi
 8014810:	eb05 5595 	addmi.w	r5, r5, r5, lsr #22
 8014814:	07a6      	lsls	r6, r4, #30
 8014816:	bf48      	it	mi
 8014818:	eb05 55d5 	addmi.w	r5, r5, r5, lsr #23
 801481c:	07e2      	lsls	r2, r4, #31
 801481e:	bf48      	it	mi
 8014820:	eb05 6515 	addmi.w	r5, r5, r5, lsr #24
 8014824:	0c2c      	lsrs	r4, r5, #16
 8014826:	b2aa      	uxth	r2, r5
 8014828:	fb02 f502 	mul.w	r5, r2, r2
 801482c:	fb02 f204 	mul.w	r2, r2, r4
 8014830:	eb02 4615 	add.w	r6, r2, r5, lsr #16
 8014834:	fa12 f286 	uxtah	r2, r2, r6
 8014838:	0417      	lsls	r7, r2, #16
 801483a:	fb04 f404 	mul.w	r4, r4, r4
 801483e:	fa17 f585 	uxtah	r5, r7, r5
 8014842:	eb04 4416 	add.w	r4, r4, r6, lsr #16
 8014846:	2d00      	cmp	r5, #0
 8014848:	eb04 4212 	add.w	r2, r4, r2, lsr #16
 801484c:	da00      	bge.n	8014850 <Argus_Cal_GetGlobalRangeOffset+0x440>
 801484e:	3201      	adds	r2, #1
 8014850:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8014854:	bf28      	it	cs
 8014856:	f44f 3200 	movcs.w	r2, #131072	; 0x20000
 801485a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801485e:	b292      	uxth	r2, r2
 8014860:	e6dc      	b.n	801461c <Argus_Cal_GetGlobalRangeOffset+0x20c>
 8014862:	2200      	movs	r2, #0
 8014864:	4694      	mov	ip, r2
 8014866:	e6d9      	b.n	801461c <Argus_Cal_GetGlobalRangeOffset+0x20c>
 8014868:	4252      	negs	r2, r2
 801486a:	4c69      	ldr	r4, [pc, #420]	; (8014a10 <Argus_Cal_GetGlobalRangeOffset+0x600>)
 801486c:	0215      	lsls	r5, r2, #8
 801486e:	42a5      	cmp	r5, r4
 8014870:	f300 80d0 	bgt.w	8014a14 <Argus_Cal_GetGlobalRangeOffset+0x604>
 8014874:	4a61      	ldr	r2, [pc, #388]	; (80149fc <Argus_Cal_GetGlobalRangeOffset+0x5ec>)
 8014876:	4c62      	ldr	r4, [pc, #392]	; (8014a00 <Argus_Cal_GetGlobalRangeOffset+0x5f0>)
 8014878:	442a      	add	r2, r5
 801487a:	2a00      	cmp	r2, #0
 801487c:	bfa8      	it	ge
 801487e:	4615      	movge	r5, r2
 8014880:	442c      	add	r4, r5
 8014882:	bfad      	iteet	ge
 8014884:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
 8014888:	f04f 6280 	movlt.w	r2, #67108864	; 0x4000000
 801488c:	f04f 7680 	movlt.w	r6, #16777216	; 0x1000000
 8014890:	f04f 5680 	movge.w	r6, #268435456	; 0x10000000
 8014894:	2c00      	cmp	r4, #0
 8014896:	bfb8      	it	lt
 8014898:	462c      	movlt	r4, r5
 801489a:	4d5a      	ldr	r5, [pc, #360]	; (8014a04 <Argus_Cal_GetGlobalRangeOffset+0x5f4>)
 801489c:	4425      	add	r5, r4
 801489e:	bfb8      	it	lt
 80148a0:	4632      	movlt	r2, r6
 80148a2:	2d00      	cmp	r5, #0
 80148a4:	bfa8      	it	ge
 80148a6:	462c      	movge	r4, r5
 80148a8:	4d57      	ldr	r5, [pc, #348]	; (8014a08 <Argus_Cal_GetGlobalRangeOffset+0x5f8>)
 80148aa:	4425      	add	r5, r4
 80148ac:	bfa8      	it	ge
 80148ae:	0052      	lslge	r2, r2, #1
 80148b0:	2d00      	cmp	r5, #0
 80148b2:	bfa8      	it	ge
 80148b4:	462c      	movge	r4, r5
 80148b6:	4d55      	ldr	r5, [pc, #340]	; (8014a0c <Argus_Cal_GetGlobalRangeOffset+0x5fc>)
 80148b8:	4425      	add	r5, r4
 80148ba:	bfa8      	it	ge
 80148bc:	eb02 0252 	addge.w	r2, r2, r2, lsr #1
 80148c0:	2d00      	cmp	r5, #0
 80148c2:	bfa8      	it	ge
 80148c4:	462c      	movge	r4, r5
 80148c6:	f5a4 15f1 	sub.w	r5, r4, #1974272	; 0x1e2000
 80148ca:	f2a5 7507 	subw	r5, r5, #1799	; 0x707
 80148ce:	bfa8      	it	ge
 80148d0:	eb02 0292 	addge.w	r2, r2, r2, lsr #2
 80148d4:	2d00      	cmp	r5, #0
 80148d6:	bfa8      	it	ge
 80148d8:	462c      	movge	r4, r5
 80148da:	f5a4 2578 	sub.w	r5, r4, #1015808	; 0xf8000
 80148de:	f5a5 65a3 	sub.w	r5, r5, #1304	; 0x518
 80148e2:	bfa8      	it	ge
 80148e4:	eb02 02d2 	addge.w	r2, r2, r2, lsr #3
 80148e8:	2d00      	cmp	r5, #0
 80148ea:	bfa8      	it	ge
 80148ec:	462c      	movge	r4, r5
 80148ee:	f5a4 25fc 	sub.w	r5, r4, #516096	; 0x7e000
 80148f2:	f1a5 05a7 	sub.w	r5, r5, #167	; 0xa7
 80148f6:	bfa8      	it	ge
 80148f8:	eb02 1212 	addge.w	r2, r2, r2, lsr #4
 80148fc:	2d00      	cmp	r5, #0
 80148fe:	bfa8      	it	ge
 8014900:	462c      	movge	r4, r5
 8014902:	f5a4 357e 	sub.w	r5, r4, #260096	; 0x3f800
 8014906:	f1a5 0515 	sub.w	r5, r5, #21
 801490a:	bfa8      	it	ge
 801490c:	eb02 1252 	addge.w	r2, r2, r2, lsr #5
 8014910:	2d00      	cmp	r5, #0
 8014912:	bfa8      	it	ge
 8014914:	462c      	movge	r4, r5
 8014916:	f5a4 35ff 	sub.w	r5, r4, #130560	; 0x1fe00
 801491a:	f1a5 0503 	sub.w	r5, r5, #3
 801491e:	bfa8      	it	ge
 8014920:	eb02 1292 	addge.w	r2, r2, r2, lsr #6
 8014924:	2d00      	cmp	r5, #0
 8014926:	bfa8      	it	ge
 8014928:	462c      	movge	r4, r5
 801492a:	f5a4 457f 	sub.w	r5, r4, #65280	; 0xff00
 801492e:	f1a5 0580 	sub.w	r5, r5, #128	; 0x80
 8014932:	bfa8      	it	ge
 8014934:	eb02 12d2 	addge.w	r2, r2, r2, lsr #7
 8014938:	2d00      	cmp	r5, #0
 801493a:	bfa8      	it	ge
 801493c:	462c      	movge	r4, r5
 801493e:	f5a4 45ff 	sub.w	r5, r4, #32640	; 0x7f80
 8014942:	f1a5 0560 	sub.w	r5, r5, #96	; 0x60
 8014946:	bfa8      	it	ge
 8014948:	eb02 2212 	addge.w	r2, r2, r2, lsr #8
 801494c:	2d00      	cmp	r5, #0
 801494e:	bfa8      	it	ge
 8014950:	462c      	movge	r4, r5
 8014952:	f5a4 557f 	sub.w	r5, r4, #16320	; 0x3fc0
 8014956:	f1a5 0538 	sub.w	r5, r5, #56	; 0x38
 801495a:	bfa8      	it	ge
 801495c:	eb02 2252 	addge.w	r2, r2, r2, lsr #9
 8014960:	2d00      	cmp	r5, #0
 8014962:	bfa8      	it	ge
 8014964:	462c      	movge	r4, r5
 8014966:	f5a4 55ff 	sub.w	r5, r4, #8160	; 0x1fe0
 801496a:	f1a5 051e 	sub.w	r5, r5, #30
 801496e:	bfa8      	it	ge
 8014970:	eb02 2292 	addge.w	r2, r2, r2, lsr #10
 8014974:	2d00      	cmp	r5, #0
 8014976:	bfa4      	itt	ge
 8014978:	462c      	movge	r4, r5
 801497a:	eb02 22d2 	addge.w	r2, r2, r2, lsr #11
 801497e:	04e7      	lsls	r7, r4, #19
 8014980:	bf48      	it	mi
 8014982:	eb02 3212 	addmi.w	r2, r2, r2, lsr #12
 8014986:	0526      	lsls	r6, r4, #20
 8014988:	bf48      	it	mi
 801498a:	eb02 3252 	addmi.w	r2, r2, r2, lsr #13
 801498e:	0565      	lsls	r5, r4, #21
 8014990:	bf48      	it	mi
 8014992:	eb02 3292 	addmi.w	r2, r2, r2, lsr #14
 8014996:	05a7      	lsls	r7, r4, #22
 8014998:	bf48      	it	mi
 801499a:	eb02 32d2 	addmi.w	r2, r2, r2, lsr #15
 801499e:	05e6      	lsls	r6, r4, #23
 80149a0:	bf48      	it	mi
 80149a2:	eb02 4212 	addmi.w	r2, r2, r2, lsr #16
 80149a6:	0625      	lsls	r5, r4, #24
 80149a8:	bf48      	it	mi
 80149aa:	eb02 4252 	addmi.w	r2, r2, r2, lsr #17
 80149ae:	0667      	lsls	r7, r4, #25
 80149b0:	bf48      	it	mi
 80149b2:	eb02 4292 	addmi.w	r2, r2, r2, lsr #18
 80149b6:	06a6      	lsls	r6, r4, #26
 80149b8:	bf48      	it	mi
 80149ba:	eb02 42d2 	addmi.w	r2, r2, r2, lsr #19
 80149be:	06e5      	lsls	r5, r4, #27
 80149c0:	bf48      	it	mi
 80149c2:	eb02 5212 	addmi.w	r2, r2, r2, lsr #20
 80149c6:	0727      	lsls	r7, r4, #28
 80149c8:	bf48      	it	mi
 80149ca:	eb02 5252 	addmi.w	r2, r2, r2, lsr #21
 80149ce:	0766      	lsls	r6, r4, #29
 80149d0:	bf48      	it	mi
 80149d2:	eb02 5292 	addmi.w	r2, r2, r2, lsr #22
 80149d6:	07a5      	lsls	r5, r4, #30
 80149d8:	bf48      	it	mi
 80149da:	eb02 52d2 	addmi.w	r2, r2, r2, lsr #23
 80149de:	07e7      	lsls	r7, r4, #31
 80149e0:	bf48      	it	mi
 80149e2:	eb02 6212 	addmi.w	r2, r2, r2, lsr #24
 80149e6:	1c56      	adds	r6, r2, #1
 80149e8:	f000 814d 	beq.w	8014c86 <Argus_Cal_GetGlobalRangeOffset+0x876>
 80149ec:	3201      	adds	r2, #1
 80149ee:	ea5f 0c52 	movs.w	ip, r2, lsr #1
 80149f2:	f040 80e6 	bne.w	8014bc2 <Argus_Cal_GetGlobalRangeOffset+0x7b2>
 80149f6:	4662      	mov	r2, ip
 80149f8:	e610      	b.n	801461c <Argus_Cal_GetGlobalRangeOffset+0x20c>
 80149fa:	bf00      	nop
 80149fc:	fd3a37a0 	.word	0xfd3a37a0
 8014a00:	fe9d1bd0 	.word	0xfe9d1bd0
 8014a04:	ff4e8de8 	.word	0xff4e8de8
 8014a08:	ff983370 	.word	0xff983370
 8014a0c:	ffc6e010 	.word	0xffc6e010
 8014a10:	058b90be 	.word	0x058b90be
 8014a14:	4ca2      	ldr	r4, [pc, #648]	; (8014ca0 <Argus_Cal_GetGlobalRangeOffset+0x890>)
 8014a16:	01d2      	lsls	r2, r2, #7
 8014a18:	4414      	add	r4, r2
 8014a1a:	2c00      	cmp	r4, #0
 8014a1c:	f2c0 80b0 	blt.w	8014b80 <Argus_Cal_GetGlobalRangeOffset+0x770>
 8014a20:	2200      	movs	r2, #0
 8014a22:	4da0      	ldr	r5, [pc, #640]	; (8014ca4 <Argus_Cal_GetGlobalRangeOffset+0x894>)
 8014a24:	4425      	add	r5, r4
 8014a26:	2d00      	cmp	r5, #0
 8014a28:	bfa8      	it	ge
 8014a2a:	462c      	movge	r4, r5
 8014a2c:	4d9e      	ldr	r5, [pc, #632]	; (8014ca8 <Argus_Cal_GetGlobalRangeOffset+0x898>)
 8014a2e:	4425      	add	r5, r4
 8014a30:	bfa8      	it	ge
 8014a32:	0052      	lslge	r2, r2, #1
 8014a34:	2d00      	cmp	r5, #0
 8014a36:	bfa8      	it	ge
 8014a38:	462c      	movge	r4, r5
 8014a3a:	4d9c      	ldr	r5, [pc, #624]	; (8014cac <Argus_Cal_GetGlobalRangeOffset+0x89c>)
 8014a3c:	4425      	add	r5, r4
 8014a3e:	bfa8      	it	ge
 8014a40:	eb02 0252 	addge.w	r2, r2, r2, lsr #1
 8014a44:	2d00      	cmp	r5, #0
 8014a46:	bfa8      	it	ge
 8014a48:	462c      	movge	r4, r5
 8014a4a:	f5a4 15f1 	sub.w	r5, r4, #1974272	; 0x1e2000
 8014a4e:	f2a5 7507 	subw	r5, r5, #1799	; 0x707
 8014a52:	bfa8      	it	ge
 8014a54:	eb02 0292 	addge.w	r2, r2, r2, lsr #2
 8014a58:	2d00      	cmp	r5, #0
 8014a5a:	bfa8      	it	ge
 8014a5c:	462c      	movge	r4, r5
 8014a5e:	f5a4 2578 	sub.w	r5, r4, #1015808	; 0xf8000
 8014a62:	f5a5 65a3 	sub.w	r5, r5, #1304	; 0x518
 8014a66:	bfa8      	it	ge
 8014a68:	eb02 02d2 	addge.w	r2, r2, r2, lsr #3
 8014a6c:	2d00      	cmp	r5, #0
 8014a6e:	bfa8      	it	ge
 8014a70:	462c      	movge	r4, r5
 8014a72:	f5a4 25fc 	sub.w	r5, r4, #516096	; 0x7e000
 8014a76:	f1a5 05a7 	sub.w	r5, r5, #167	; 0xa7
 8014a7a:	bfa8      	it	ge
 8014a7c:	eb02 1212 	addge.w	r2, r2, r2, lsr #4
 8014a80:	2d00      	cmp	r5, #0
 8014a82:	bfa8      	it	ge
 8014a84:	462c      	movge	r4, r5
 8014a86:	f5a4 357e 	sub.w	r5, r4, #260096	; 0x3f800
 8014a8a:	f1a5 0515 	sub.w	r5, r5, #21
 8014a8e:	bfa8      	it	ge
 8014a90:	eb02 1252 	addge.w	r2, r2, r2, lsr #5
 8014a94:	2d00      	cmp	r5, #0
 8014a96:	bfa8      	it	ge
 8014a98:	462c      	movge	r4, r5
 8014a9a:	f5a4 35ff 	sub.w	r5, r4, #130560	; 0x1fe00
 8014a9e:	f1a5 0503 	sub.w	r5, r5, #3
 8014aa2:	bfa8      	it	ge
 8014aa4:	eb02 1292 	addge.w	r2, r2, r2, lsr #6
 8014aa8:	2d00      	cmp	r5, #0
 8014aaa:	bfa8      	it	ge
 8014aac:	462c      	movge	r4, r5
 8014aae:	f5a4 457f 	sub.w	r5, r4, #65280	; 0xff00
 8014ab2:	f1a5 0580 	sub.w	r5, r5, #128	; 0x80
 8014ab6:	bfa8      	it	ge
 8014ab8:	eb02 12d2 	addge.w	r2, r2, r2, lsr #7
 8014abc:	2d00      	cmp	r5, #0
 8014abe:	bfa8      	it	ge
 8014ac0:	462c      	movge	r4, r5
 8014ac2:	f5a4 45ff 	sub.w	r5, r4, #32640	; 0x7f80
 8014ac6:	f1a5 0560 	sub.w	r5, r5, #96	; 0x60
 8014aca:	bfa8      	it	ge
 8014acc:	eb02 2212 	addge.w	r2, r2, r2, lsr #8
 8014ad0:	2d00      	cmp	r5, #0
 8014ad2:	bfa8      	it	ge
 8014ad4:	462c      	movge	r4, r5
 8014ad6:	f5a4 557f 	sub.w	r5, r4, #16320	; 0x3fc0
 8014ada:	f1a5 0538 	sub.w	r5, r5, #56	; 0x38
 8014ade:	bfa8      	it	ge
 8014ae0:	eb02 2252 	addge.w	r2, r2, r2, lsr #9
 8014ae4:	2d00      	cmp	r5, #0
 8014ae6:	bfa8      	it	ge
 8014ae8:	462c      	movge	r4, r5
 8014aea:	f5a4 55ff 	sub.w	r5, r4, #8160	; 0x1fe0
 8014aee:	f1a5 051e 	sub.w	r5, r5, #30
 8014af2:	bfa8      	it	ge
 8014af4:	eb02 2292 	addge.w	r2, r2, r2, lsr #10
 8014af8:	2d00      	cmp	r5, #0
 8014afa:	bfa4      	itt	ge
 8014afc:	462c      	movge	r4, r5
 8014afe:	eb02 22d2 	addge.w	r2, r2, r2, lsr #11
 8014b02:	04e5      	lsls	r5, r4, #19
 8014b04:	bf48      	it	mi
 8014b06:	eb02 3212 	addmi.w	r2, r2, r2, lsr #12
 8014b0a:	0527      	lsls	r7, r4, #20
 8014b0c:	bf48      	it	mi
 8014b0e:	eb02 3252 	addmi.w	r2, r2, r2, lsr #13
 8014b12:	0566      	lsls	r6, r4, #21
 8014b14:	bf48      	it	mi
 8014b16:	eb02 3292 	addmi.w	r2, r2, r2, lsr #14
 8014b1a:	05a5      	lsls	r5, r4, #22
 8014b1c:	bf48      	it	mi
 8014b1e:	eb02 32d2 	addmi.w	r2, r2, r2, lsr #15
 8014b22:	05e7      	lsls	r7, r4, #23
 8014b24:	bf48      	it	mi
 8014b26:	eb02 4212 	addmi.w	r2, r2, r2, lsr #16
 8014b2a:	0626      	lsls	r6, r4, #24
 8014b2c:	bf48      	it	mi
 8014b2e:	eb02 4252 	addmi.w	r2, r2, r2, lsr #17
 8014b32:	0665      	lsls	r5, r4, #25
 8014b34:	bf48      	it	mi
 8014b36:	eb02 4292 	addmi.w	r2, r2, r2, lsr #18
 8014b3a:	06a7      	lsls	r7, r4, #26
 8014b3c:	bf48      	it	mi
 8014b3e:	eb02 42d2 	addmi.w	r2, r2, r2, lsr #19
 8014b42:	06e6      	lsls	r6, r4, #27
 8014b44:	bf48      	it	mi
 8014b46:	eb02 5212 	addmi.w	r2, r2, r2, lsr #20
 8014b4a:	0725      	lsls	r5, r4, #28
 8014b4c:	bf48      	it	mi
 8014b4e:	eb02 5252 	addmi.w	r2, r2, r2, lsr #21
 8014b52:	0767      	lsls	r7, r4, #29
 8014b54:	bf48      	it	mi
 8014b56:	eb02 5292 	addmi.w	r2, r2, r2, lsr #22
 8014b5a:	07a6      	lsls	r6, r4, #30
 8014b5c:	bf48      	it	mi
 8014b5e:	eb02 52d2 	addmi.w	r2, r2, r2, lsr #23
 8014b62:	07e5      	lsls	r5, r4, #31
 8014b64:	bf48      	it	mi
 8014b66:	eb02 6212 	addmi.w	r2, r2, r2, lsr #24
 8014b6a:	1c54      	adds	r4, r2, #1
 8014b6c:	d056      	beq.n	8014c1c <Argus_Cal_GetGlobalRangeOffset+0x80c>
 8014b6e:	3201      	adds	r2, #1
 8014b70:	0852      	lsrs	r2, r2, #1
 8014b72:	d116      	bne.n	8014ba2 <Argus_Cal_GetGlobalRangeOffset+0x792>
 8014b74:	4614      	mov	r4, r2
 8014b76:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 8014b7a:	0c24      	lsrs	r4, r4, #16
 8014b7c:	4422      	add	r2, r4
 8014b7e:	e667      	b.n	8014850 <Argus_Cal_GetGlobalRangeOffset+0x440>
 8014b80:	4d4b      	ldr	r5, [pc, #300]	; (8014cb0 <Argus_Cal_GetGlobalRangeOffset+0x8a0>)
 8014b82:	4415      	add	r5, r2
 8014b84:	2d00      	cmp	r5, #0
 8014b86:	f2c0 8084 	blt.w	8014c92 <Argus_Cal_GetGlobalRangeOffset+0x882>
 8014b8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014b8e:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8014b92:	4c48      	ldr	r4, [pc, #288]	; (8014cb4 <Argus_Cal_GetGlobalRangeOffset+0x8a4>)
 8014b94:	442c      	add	r4, r5
 8014b96:	2c00      	cmp	r4, #0
 8014b98:	f6bf af43 	bge.w	8014a22 <Argus_Cal_GetGlobalRangeOffset+0x612>
 8014b9c:	4632      	mov	r2, r6
 8014b9e:	462c      	mov	r4, r5
 8014ba0:	e73f      	b.n	8014a22 <Argus_Cal_GetGlobalRangeOffset+0x612>
 8014ba2:	4d45      	ldr	r5, [pc, #276]	; (8014cb8 <Argus_Cal_GetGlobalRangeOffset+0x8a8>)
 8014ba4:	42aa      	cmp	r2, r5
 8014ba6:	f482 0700 	eor.w	r7, r2, #8388608	; 0x800000
 8014baa:	dc3a      	bgt.n	8014c22 <Argus_Cal_GetGlobalRangeOffset+0x812>
 8014bac:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8014bb0:	0052      	lsls	r2, r2, #1
 8014bb2:	42aa      	cmp	r2, r5
 8014bb4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8014bb8:	d9fa      	bls.n	8014bb0 <Argus_Cal_GetGlobalRangeOffset+0x7a0>
 8014bba:	bba4      	cbnz	r4, 8014c26 <Argus_Cal_GetGlobalRangeOffset+0x816>
 8014bbc:	4a3f      	ldr	r2, [pc, #252]	; (8014cbc <Argus_Cal_GetGlobalRangeOffset+0x8ac>)
 8014bbe:	2401      	movs	r4, #1
 8014bc0:	e7d9      	b.n	8014b76 <Argus_Cal_GetGlobalRangeOffset+0x766>
 8014bc2:	4c3d      	ldr	r4, [pc, #244]	; (8014cb8 <Argus_Cal_GetGlobalRangeOffset+0x8a8>)
 8014bc4:	45a4      	cmp	ip, r4
 8014bc6:	f48c 0600 	eor.w	r6, ip, #8388608	; 0x800000
 8014bca:	dc5f      	bgt.n	8014c8c <Argus_Cal_GetGlobalRangeOffset+0x87c>
 8014bcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014bd0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8014bd4:	45a4      	cmp	ip, r4
 8014bd6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014bda:	d9f9      	bls.n	8014bd0 <Argus_Cal_GetGlobalRangeOffset+0x7c0>
 8014bdc:	2a00      	cmp	r2, #0
 8014bde:	f43f ad54 	beq.w	801468a <Argus_Cal_GetGlobalRangeOffset+0x27a>
 8014be2:	2500      	movs	r5, #0
 8014be4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8014be8:	e000      	b.n	8014bec <Argus_Cal_GetGlobalRangeOffset+0x7dc>
 8014bea:	b15c      	cbz	r4, 8014c04 <Argus_Cal_GetGlobalRangeOffset+0x7f4>
 8014bec:	45a4      	cmp	ip, r4
 8014bee:	bf9c      	itt	ls
 8014bf0:	eba4 040c 	subls.w	r4, r4, ip
 8014bf4:	4315      	orrls	r5, r2
 8014bf6:	0852      	lsrs	r2, r2, #1
 8014bf8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8014bfc:	d1f5      	bne.n	8014bea <Argus_Cal_GetGlobalRangeOffset+0x7da>
 8014bfe:	45a4      	cmp	ip, r4
 8014c00:	bf98      	it	ls
 8014c02:	3501      	addls	r5, #1
 8014c04:	2e00      	cmp	r6, #0
 8014c06:	bfb8      	it	lt
 8014c08:	426d      	neglt	r5, r5
 8014c0a:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8014c0e:	bf28      	it	cs
 8014c10:	f44f 3500 	movcs.w	r5, #131072	; 0x20000
 8014c14:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8014c18:	b2aa      	uxth	r2, r5
 8014c1a:	e4ff      	b.n	801461c <Argus_Cal_GetGlobalRangeOffset+0x20c>
 8014c1c:	4f28      	ldr	r7, [pc, #160]	; (8014cc0 <Argus_Cal_GetGlobalRangeOffset+0x8b0>)
 8014c1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014c22:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8014c26:	2500      	movs	r5, #0
 8014c28:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 8014c2c:	e000      	b.n	8014c30 <Argus_Cal_GetGlobalRangeOffset+0x820>
 8014c2e:	b156      	cbz	r6, 8014c46 <Argus_Cal_GetGlobalRangeOffset+0x836>
 8014c30:	4296      	cmp	r6, r2
 8014c32:	bf24      	itt	cs
 8014c34:	1ab6      	subcs	r6, r6, r2
 8014c36:	4325      	orrcs	r5, r4
 8014c38:	0864      	lsrs	r4, r4, #1
 8014c3a:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8014c3e:	d1f6      	bne.n	8014c2e <Argus_Cal_GetGlobalRangeOffset+0x81e>
 8014c40:	42b2      	cmp	r2, r6
 8014c42:	bf98      	it	ls
 8014c44:	3501      	addls	r5, #1
 8014c46:	2f00      	cmp	r7, #0
 8014c48:	bfb8      	it	lt
 8014c4a:	426d      	neglt	r5, r5
 8014c4c:	0c2a      	lsrs	r2, r5, #16
 8014c4e:	b2ad      	uxth	r5, r5
 8014c50:	fb02 f405 	mul.w	r4, r2, r5
 8014c54:	fb05 f505 	mul.w	r5, r5, r5
 8014c58:	eb04 4615 	add.w	r6, r4, r5, lsr #16
 8014c5c:	fa14 f486 	uxtah	r4, r4, r6
 8014c60:	0c36      	lsrs	r6, r6, #16
 8014c62:	fb02 6202 	mla	r2, r2, r2, r6
 8014c66:	0426      	lsls	r6, r4, #16
 8014c68:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8014c6c:	fa16 f485 	uxtah	r4, r6, r5
 8014c70:	f514 4f00 	cmn.w	r4, #32768	; 0x8000
 8014c74:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8014c78:	bf28      	it	cs
 8014c7a:	f44f 3480 	movcs.w	r4, #65536	; 0x10000
 8014c7e:	f4ff af7a 	bcc.w	8014b76 <Argus_Cal_GetGlobalRangeOffset+0x766>
 8014c82:	4422      	add	r2, r4
 8014c84:	e5e4      	b.n	8014850 <Argus_Cal_GetGlobalRangeOffset+0x440>
 8014c86:	4e0e      	ldr	r6, [pc, #56]	; (8014cc0 <Argus_Cal_GetGlobalRangeOffset+0x8b0>)
 8014c88:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8014c8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014c90:	e7a7      	b.n	8014be2 <Argus_Cal_GetGlobalRangeOffset+0x7d2>
 8014c92:	4615      	mov	r5, r2
 8014c94:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8014c98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8014c9c:	e779      	b.n	8014b92 <Argus_Cal_GetGlobalRangeOffset+0x782>
 8014c9e:	bf00      	nop
 8014ca0:	fa746f40 	.word	0xfa746f40
 8014ca4:	ff4e8de8 	.word	0xff4e8de8
 8014ca8:	ff983370 	.word	0xff983370
 8014cac:	ffc6e010 	.word	0xffc6e010
 8014cb0:	fd3a37a0 	.word	0xfd3a37a0
 8014cb4:	fe9d1bd0 	.word	0xfe9d1bd0
 8014cb8:	007fffff 	.word	0x007fffff
 8014cbc:	ffff0000 	.word	0xffff0000
 8014cc0:	80800000 	.word	0x80800000

08014cc4 <Argus_Cal_ApplyCalibration>:
 8014cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cc8:	f8b1 801c 	ldrh.w	r8, [r1, #28]
 8014ccc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014cd0:	f008 0701 	and.w	r7, r8, #1
 8014cd4:	fb03 0307 	mla	r3, r3, r7, r0
 8014cd8:	460d      	mov	r5, r1
 8014cda:	f893 221c 	ldrb.w	r2, [r3, #540]	; 0x21c
 8014cde:	4606      	mov	r6, r0
 8014ce0:	2a00      	cmp	r2, #0
 8014ce2:	f000 80de 	beq.w	8014ea2 <Argus_Cal_ApplyCalibration+0x1de>
 8014ce6:	f8b3 4224 	ldrh.w	r4, [r3, #548]	; 0x224
 8014cea:	f8b5 23c8 	ldrh.w	r2, [r5, #968]	; 0x3c8
 8014cee:	4641      	mov	r1, r8
 8014cf0:	4630      	mov	r0, r6
 8014cf2:	f7ff fb8d 	bl	8014410 <Argus_Cal_GetGlobalRangeOffset>
 8014cf6:	f018 0f08 	tst.w	r8, #8
 8014cfa:	bf14      	ite	ne
 8014cfc:	2109      	movne	r1, #9
 8014cfe:	21a1      	moveq	r1, #161	; 0xa1
 8014d00:	462b      	mov	r3, r5
 8014d02:	46b4      	mov	ip, r6
 8014d04:	f505 7ec0 	add.w	lr, r5, #384	; 0x180
 8014d08:	e063      	b.n	8014dd2 <Argus_Cal_ApplyCalibration+0x10e>
 8014d0a:	f3c8 090e 	ubfx	r9, r8, #0, #15
 8014d0e:	ea4f 32d8 	mov.w	r2, r8, lsr #15
 8014d12:	fb04 f909 	mul.w	r9, r4, r9
 8014d16:	f509 4880 	add.w	r8, r9, #16384	; 0x4000
 8014d1a:	fb04 f202 	mul.w	r2, r4, r2
 8014d1e:	eb02 32d8 	add.w	r2, r2, r8, lsr #15
 8014d22:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
 8014d26:	f893 2250 	ldrb.w	r2, [r3, #592]	; 0x250
 8014d2a:	4211      	tst	r1, r2
 8014d2c:	d116      	bne.n	8014d5c <Argus_Cal_ApplyCalibration+0x98>
 8014d2e:	f9bc 215a 	ldrsh.w	r2, [ip, #346]	; 0x15a
 8014d32:	f8d3 9248 	ldr.w	r9, [r3, #584]	; 0x248
 8014d36:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
 8014d3a:	ebb9 0802 	subs.w	r8, r9, r2
 8014d3e:	d473      	bmi.n	8014e28 <Argus_Cal_ApplyCalibration+0x164>
 8014d40:	f3c8 090e 	ubfx	r9, r8, #0, #15
 8014d44:	ea4f 32d8 	mov.w	r2, r8, lsr #15
 8014d48:	fb04 f909 	mul.w	r9, r4, r9
 8014d4c:	f509 4880 	add.w	r8, r9, #16384	; 0x4000
 8014d50:	fb04 f202 	mul.w	r2, r4, r2
 8014d54:	eb02 32d8 	add.w	r2, r2, r8, lsr #15
 8014d58:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 8014d5c:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8014d60:	4211      	tst	r1, r2
 8014d62:	d116      	bne.n	8014d92 <Argus_Cal_ApplyCalibration+0xce>
 8014d64:	f9bc 215c 	ldrsh.w	r2, [ip, #348]	; 0x15c
 8014d68:	f8d3 9254 	ldr.w	r9, [r3, #596]	; 0x254
 8014d6c:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
 8014d70:	ebb9 0802 	subs.w	r8, r9, r2
 8014d74:	d467      	bmi.n	8014e46 <Argus_Cal_ApplyCalibration+0x182>
 8014d76:	f3c8 090e 	ubfx	r9, r8, #0, #15
 8014d7a:	ea4f 32d8 	mov.w	r2, r8, lsr #15
 8014d7e:	fb04 f909 	mul.w	r9, r4, r9
 8014d82:	f509 4880 	add.w	r8, r9, #16384	; 0x4000
 8014d86:	fb04 f202 	mul.w	r2, r4, r2
 8014d8a:	eb02 32d8 	add.w	r2, r2, r8, lsr #15
 8014d8e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8014d92:	f893 2268 	ldrb.w	r2, [r3, #616]	; 0x268
 8014d96:	4211      	tst	r1, r2
 8014d98:	d116      	bne.n	8014dc8 <Argus_Cal_ApplyCalibration+0x104>
 8014d9a:	f9bc 215e 	ldrsh.w	r2, [ip, #350]	; 0x15e
 8014d9e:	f8d3 9260 	ldr.w	r9, [r3, #608]	; 0x260
 8014da2:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
 8014da6:	ebb9 0802 	subs.w	r8, r9, r2
 8014daa:	d42e      	bmi.n	8014e0a <Argus_Cal_ApplyCalibration+0x146>
 8014dac:	f3c8 090e 	ubfx	r9, r8, #0, #15
 8014db0:	ea4f 32d8 	mov.w	r2, r8, lsr #15
 8014db4:	fb04 f909 	mul.w	r9, r4, r9
 8014db8:	f509 4880 	add.w	r8, r9, #16384	; 0x4000
 8014dbc:	fb04 f202 	mul.w	r2, r4, r2
 8014dc0:	eb02 32d8 	add.w	r2, r2, r8, lsr #15
 8014dc4:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8014dc8:	3330      	adds	r3, #48	; 0x30
 8014dca:	4573      	cmp	r3, lr
 8014dcc:	f10c 0c08 	add.w	ip, ip, #8
 8014dd0:	d048      	beq.n	8014e64 <Argus_Cal_ApplyCalibration+0x1a0>
 8014dd2:	f893 2244 	ldrb.w	r2, [r3, #580]	; 0x244
 8014dd6:	4211      	tst	r1, r2
 8014dd8:	d1a5      	bne.n	8014d26 <Argus_Cal_ApplyCalibration+0x62>
 8014dda:	f9bc 2158 	ldrsh.w	r2, [ip, #344]	; 0x158
 8014dde:	f8d3 923c 	ldr.w	r9, [r3, #572]	; 0x23c
 8014de2:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
 8014de6:	ebb9 0802 	subs.w	r8, r9, r2
 8014dea:	d58e      	bpl.n	8014d0a <Argus_Cal_ApplyCalibration+0x46>
 8014dec:	eba2 0209 	sub.w	r2, r2, r9
 8014df0:	f3c2 080e 	ubfx	r8, r2, #0, #15
 8014df4:	fb04 f808 	mul.w	r8, r4, r8
 8014df8:	0bd2      	lsrs	r2, r2, #15
 8014dfa:	f508 4880 	add.w	r8, r8, #16384	; 0x4000
 8014dfe:	fb04 f202 	mul.w	r2, r4, r2
 8014e02:	eb02 32d8 	add.w	r2, r2, r8, lsr #15
 8014e06:	4252      	negs	r2, r2
 8014e08:	e78b      	b.n	8014d22 <Argus_Cal_ApplyCalibration+0x5e>
 8014e0a:	eba2 0209 	sub.w	r2, r2, r9
 8014e0e:	f3c2 080e 	ubfx	r8, r2, #0, #15
 8014e12:	fb04 f808 	mul.w	r8, r4, r8
 8014e16:	0bd2      	lsrs	r2, r2, #15
 8014e18:	f508 4880 	add.w	r8, r8, #16384	; 0x4000
 8014e1c:	fb04 f202 	mul.w	r2, r4, r2
 8014e20:	eb02 32d8 	add.w	r2, r2, r8, lsr #15
 8014e24:	4252      	negs	r2, r2
 8014e26:	e7cd      	b.n	8014dc4 <Argus_Cal_ApplyCalibration+0x100>
 8014e28:	eba2 0209 	sub.w	r2, r2, r9
 8014e2c:	f3c2 080e 	ubfx	r8, r2, #0, #15
 8014e30:	fb04 f808 	mul.w	r8, r4, r8
 8014e34:	0bd2      	lsrs	r2, r2, #15
 8014e36:	f508 4880 	add.w	r8, r8, #16384	; 0x4000
 8014e3a:	fb04 f202 	mul.w	r2, r4, r2
 8014e3e:	eb02 32d8 	add.w	r2, r2, r8, lsr #15
 8014e42:	4252      	negs	r2, r2
 8014e44:	e788      	b.n	8014d58 <Argus_Cal_ApplyCalibration+0x94>
 8014e46:	eba2 0209 	sub.w	r2, r2, r9
 8014e4a:	f3c2 080e 	ubfx	r8, r2, #0, #15
 8014e4e:	fb04 f808 	mul.w	r8, r4, r8
 8014e52:	0bd2      	lsrs	r2, r2, #15
 8014e54:	f508 4880 	add.w	r8, r8, #16384	; 0x4000
 8014e58:	fb04 f202 	mul.w	r2, r4, r2
 8014e5c:	eb02 32d8 	add.w	r2, r2, r8, lsr #15
 8014e60:	4252      	negs	r2, r2
 8014e62:	e794      	b.n	8014d8e <Argus_Cal_ApplyCalibration+0xca>
 8014e64:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
 8014e68:	4219      	tst	r1, r3
 8014e6a:	d118      	bne.n	8014e9e <Argus_Cal_ApplyCalibration+0x1da>
 8014e6c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014e70:	fb03 6607 	mla	r6, r3, r7, r6
 8014e74:	f8d5 2230 	ldr.w	r2, [r5, #560]	; 0x230
 8014e78:	f9b6 3270 	ldrsh.w	r3, [r6, #624]	; 0x270
 8014e7c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8014e80:	1a13      	subs	r3, r2, r0
 8014e82:	d411      	bmi.n	8014ea8 <Argus_Cal_ApplyCalibration+0x1e4>
 8014e84:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8014e88:	fb04 f202 	mul.w	r2, r4, r2
 8014e8c:	0bdb      	lsrs	r3, r3, #15
 8014e8e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8014e92:	fb04 f303 	mul.w	r3, r4, r3
 8014e96:	eb03 33d2 	add.w	r3, r3, r2, lsr #15
 8014e9a:	f8c5 3230 	str.w	r3, [r5, #560]	; 0x230
 8014e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ea2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8014ea6:	e720      	b.n	8014cea <Argus_Cal_ApplyCalibration+0x26>
 8014ea8:	1a80      	subs	r0, r0, r2
 8014eaa:	f3c0 020e 	ubfx	r2, r0, #0, #15
 8014eae:	fb04 f202 	mul.w	r2, r4, r2
 8014eb2:	0bc3      	lsrs	r3, r0, #15
 8014eb4:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8014eb8:	fb04 f303 	mul.w	r3, r4, r3
 8014ebc:	eb03 33d2 	add.w	r3, r3, r2, lsr #15
 8014ec0:	425b      	negs	r3, r3
 8014ec2:	e7ea      	b.n	8014e9a <Argus_Cal_ApplyCalibration+0x1d6>

08014ec4 <Argus_Cal_GetPhaseOffset>:
 8014ec4:	f001 0101 	and.w	r1, r1, #1
 8014ec8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014ecc:	fb03 0101 	mla	r1, r3, r1, r0
 8014ed0:	f891 021c 	ldrb.w	r0, [r1, #540]	; 0x21c
 8014ed4:	b108      	cbz	r0, 8014eda <Argus_Cal_GetPhaseOffset+0x16>
 8014ed6:	f8b1 0228 	ldrh.w	r0, [r1, #552]	; 0x228
 8014eda:	4770      	bx	lr

08014edc <Argus_Cal_GetPhaseOffsetRefPx>:
 8014edc:	f001 0101 	and.w	r1, r1, #1
 8014ee0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014ee4:	fb03 0101 	mla	r1, r3, r1, r0
 8014ee8:	f891 021c 	ldrb.w	r0, [r1, #540]	; 0x21c
 8014eec:	b108      	cbz	r0, 8014ef2 <Argus_Cal_GetPhaseOffsetRefPx+0x16>
 8014eee:	f8b1 022a 	ldrh.w	r0, [r1, #554]	; 0x22a
 8014ef2:	4770      	bx	lr

08014ef4 <Argus_Cal_GetSCSlope>:
 8014ef4:	f001 0101 	and.w	r1, r1, #1
 8014ef8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014efc:	fb03 0101 	mla	r1, r3, r1, r0
 8014f00:	f891 021c 	ldrb.w	r0, [r1, #540]	; 0x21c
 8014f04:	b128      	cbz	r0, 8014f12 <Argus_Cal_GetSCSlope+0x1e>
 8014f06:	f8b1 0226 	ldrh.w	r0, [r1, #550]	; 0x226
 8014f0a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8014f0e:	bf08      	it	eq
 8014f10:	2000      	moveq	r0, #0
 8014f12:	4770      	bx	lr

08014f14 <Argus_Cal_GetPixelDecompFactor>:
 8014f14:	f890 31d8 	ldrb.w	r3, [r0, #472]	; 0x1d8
 8014f18:	b12b      	cbz	r3, 8014f26 <Argus_Cal_GetPixelDecompFactor+0x12>
 8014f1a:	f3c1 1187 	ubfx	r1, r1, #6, #8
 8014f1e:	b921      	cbnz	r1, 8014f2a <Argus_Cal_GetPixelDecompFactor+0x16>
 8014f20:	4401      	add	r1, r0
 8014f22:	7c08      	ldrb	r0, [r1, #16]
 8014f24:	4770      	bx	lr
 8014f26:	4618      	mov	r0, r3
 8014f28:	4770      	bx	lr
 8014f2a:	2920      	cmp	r1, #32
 8014f2c:	bf28      	it	cs
 8014f2e:	2120      	movcs	r1, #32
 8014f30:	3901      	subs	r1, #1
 8014f32:	4401      	add	r1, r0
 8014f34:	7c08      	ldrb	r0, [r1, #16]
 8014f36:	4770      	bx	lr

08014f38 <Argus_Cal_GetXtalkTable>:
 8014f38:	f001 0106 	and.w	r1, r1, #6
 8014f3c:	2906      	cmp	r1, #6
 8014f3e:	bf0c      	ite	eq
 8014f40:	21d8      	moveq	r1, #216	; 0xd8
 8014f42:	2158      	movne	r1, #88	; 0x58
 8014f44:	4408      	add	r0, r1
 8014f46:	4770      	bx	lr

08014f48 <Argus_Cal_GetRefPxXtalk>:
 8014f48:	f001 0101 	and.w	r1, r1, #1
 8014f4c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014f50:	fb03 0001 	mla	r0, r3, r1, r0
 8014f54:	f200 3072 	addw	r0, r0, #882	; 0x372
 8014f58:	4770      	bx	lr
 8014f5a:	bf00      	nop

08014f5c <Argus_Cal_GetInternalPixelRangeOffsets>:
 8014f5c:	b570      	push	{r4, r5, r6, lr}
 8014f5e:	f8d0 04f4 	ldr.w	r0, [r0, #1268]	; 0x4f4
 8014f62:	460c      	mov	r4, r1
 8014f64:	4615      	mov	r5, r2
 8014f66:	f7fa f903 	bl	800f170 <Argus_Dev_GetModule>
 8014f6a:	2800      	cmp	r0, #0
 8014f6c:	f000 808e 	beq.w	801508c <Argus_Cal_GetInternalPixelRangeOffsets+0x130>
 8014f70:	2807      	cmp	r0, #7
 8014f72:	f200 8088 	bhi.w	8015086 <Argus_Cal_GetInternalPixelRangeOffsets+0x12a>
 8014f76:	1e6e      	subs	r6, r5, #1
 8014f78:	2e01      	cmp	r6, #1
 8014f7a:	f200 8090 	bhi.w	801509e <Argus_Cal_GetInternalPixelRangeOffsets+0x142>
 8014f7e:	2240      	movs	r2, #64	; 0x40
 8014f80:	2100      	movs	r1, #0
 8014f82:	4620      	mov	r0, r4
 8014f84:	f002 fbcc 	bl	8017720 <memset>
 8014f88:	4b46      	ldr	r3, [pc, #280]	; (80150a4 <Argus_Cal_GetInternalPixelRangeOffsets+0x148>)
 8014f8a:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 8014f8e:	8022      	strh	r2, [r4, #0]
 8014f90:	eb03 0246 	add.w	r2, r3, r6, lsl #1
 8014f94:	1de9      	adds	r1, r5, #7
 8014f96:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8014f9a:	8060      	strh	r0, [r4, #2]
 8014f9c:	f9b2 0008 	ldrsh.w	r0, [r2, #8]
 8014fa0:	80a0      	strh	r0, [r4, #4]
 8014fa2:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8014fa6:	80e2      	strh	r2, [r4, #6]
 8014fa8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8014fac:	8120      	strh	r0, [r4, #8]
 8014fae:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8014fb2:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8014fb6:	8161      	strh	r1, [r4, #10]
 8014fb8:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8014fbc:	81a1      	strh	r1, [r4, #12]
 8014fbe:	f105 010f 	add.w	r1, r5, #15
 8014fc2:	f9b2 000c 	ldrsh.w	r0, [r2, #12]
 8014fc6:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8014fca:	81e0      	strh	r0, [r4, #14]
 8014fcc:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8014fd0:	8222      	strh	r2, [r4, #16]
 8014fd2:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8014fd6:	8262      	strh	r2, [r4, #18]
 8014fd8:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
 8014fdc:	82a2      	strh	r2, [r4, #20]
 8014fde:	f105 0217 	add.w	r2, r5, #23
 8014fe2:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8014fe6:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8014fea:	82e0      	strh	r0, [r4, #22]
 8014fec:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8014ff0:	8321      	strh	r1, [r4, #24]
 8014ff2:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8014ff6:	8361      	strh	r1, [r4, #26]
 8014ff8:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8014ffc:	83a1      	strh	r1, [r4, #28]
 8014ffe:	f105 011f 	add.w	r1, r5, #31
 8015002:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8015006:	83e2      	strh	r2, [r4, #30]
 8015008:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801500c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8015010:	8421      	strh	r1, [r4, #32]
 8015012:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8015016:	8461      	strh	r1, [r4, #34]	; 0x22
 8015018:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 801501c:	84a1      	strh	r1, [r4, #36]	; 0x24
 801501e:	f105 0127 	add.w	r1, r5, #39	; 0x27
 8015022:	f9b2 000c 	ldrsh.w	r0, [r2, #12]
 8015026:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801502a:	84e0      	strh	r0, [r4, #38]	; 0x26
 801502c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8015030:	8522      	strh	r2, [r4, #40]	; 0x28
 8015032:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8015036:	8562      	strh	r2, [r4, #42]	; 0x2a
 8015038:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
 801503c:	85a2      	strh	r2, [r4, #44]	; 0x2c
 801503e:	f105 022f 	add.w	r2, r5, #47	; 0x2f
 8015042:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8015046:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801504a:	85e0      	strh	r0, [r4, #46]	; 0x2e
 801504c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8015050:	8621      	strh	r1, [r4, #48]	; 0x30
 8015052:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8015056:	8661      	strh	r1, [r4, #50]	; 0x32
 8015058:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 801505c:	86a1      	strh	r1, [r4, #52]	; 0x34
 801505e:	3537      	adds	r5, #55	; 0x37
 8015060:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 8015064:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8015068:	86e1      	strh	r1, [r4, #54]	; 0x36
 801506a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801506e:	8722      	strh	r2, [r4, #56]	; 0x38
 8015070:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8015074:	8762      	strh	r2, [r4, #58]	; 0x3a
 8015076:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801507a:	87a2      	strh	r2, [r4, #60]	; 0x3c
 801507c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8015080:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8015082:	2000      	movs	r0, #0
 8015084:	bd70      	pop	{r4, r5, r6, pc}
 8015086:	f06f 00c6 	mvn.w	r0, #198	; 0xc6
 801508a:	bd70      	pop	{r4, r5, r6, pc}
 801508c:	3d01      	subs	r5, #1
 801508e:	2d01      	cmp	r5, #1
 8015090:	d805      	bhi.n	801509e <Argus_Cal_GetInternalPixelRangeOffsets+0x142>
 8015092:	4601      	mov	r1, r0
 8015094:	2240      	movs	r2, #64	; 0x40
 8015096:	4620      	mov	r0, r4
 8015098:	f002 fb42 	bl	8017720 <memset>
 801509c:	e7f1      	b.n	8015082 <Argus_Cal_GetInternalPixelRangeOffsets+0x126>
 801509e:	f06f 0068 	mvn.w	r0, #104	; 0x68
 80150a2:	bd70      	pop	{r4, r5, r6, pc}
 80150a4:	0801b100 	.word	0x0801b100

080150a8 <Argus_Cal_GetInternalXtalkVectorTable>:
 80150a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150ac:	4604      	mov	r4, r0
 80150ae:	f8d0 04f4 	ldr.w	r0, [r0, #1268]	; 0x4f4
 80150b2:	4688      	mov	r8, r1
 80150b4:	4616      	mov	r6, r2
 80150b6:	f7fa f861 	bl	800f17c <Argus_Dev_GetLaserType>
 80150ba:	2803      	cmp	r0, #3
 80150bc:	f200 81e3 	bhi.w	8015486 <Argus_Cal_GetInternalXtalkVectorTable+0x3de>
 80150c0:	4603      	mov	r3, r0
 80150c2:	4ae4      	ldr	r2, [pc, #912]	; (8015454 <Argus_Cal_GetInternalXtalkVectorTable+0x3ac>)
 80150c4:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
 80150c8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80150cc:	f7f3 fa44 	bl	8008558 <Argus_Cfg_GetConfigurationPtr>
 80150d0:	3e01      	subs	r6, #1
 80150d2:	eb06 1386 	add.w	r3, r6, r6, lsl #6
 80150d6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80150da:	f893 90d4 	ldrb.w	r9, [r3, #212]	; 0xd4
 80150de:	f1b9 0f02 	cmp.w	r9, #2
 80150e2:	f200 81cd 	bhi.w	8015480 <Argus_Cal_GetInternalXtalkVectorTable+0x3d8>
 80150e6:	2e01      	cmp	r6, #1
 80150e8:	f200 81ca 	bhi.w	8015480 <Argus_Cal_GetInternalXtalkVectorTable+0x3d8>
 80150ec:	2100      	movs	r1, #0
 80150ee:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80150f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80150f6:	4640      	mov	r0, r8
 80150f8:	f002 fb12 	bl	8017720 <memset>
 80150fc:	444f      	add	r7, r9
 80150fe:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8015102:	fb01 4106 	mla	r1, r1, r6, r4
 8015106:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 801510a:	f108 0680 	add.w	r6, r8, #128	; 0x80
 801510e:	f508 7cc0 	add.w	ip, r8, #384	; 0x180
 8015112:	f1a6 0380 	sub.w	r3, r6, #128	; 0x80
 8015116:	4638      	mov	r0, r7
 8015118:	e147      	b.n	80153aa <Argus_Cal_GetInternalXtalkVectorTable+0x302>
 801511a:	fa1f f88e 	uxth.w	r8, lr
 801511e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8015122:	fb02 f808 	mul.w	r8, r2, r8
 8015126:	fb02 f20e 	mul.w	r2, r2, lr
 801512a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801512e:	fa1f f888 	uxth.w	r8, r8
 8015132:	eb08 4802 	add.w	r8, r8, r2, lsl #16
 8015136:	f118 0f41 	cmn.w	r8, #65	; 0x41
 801513a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801513e:	ea4f 6242 	mov.w	r2, r2, lsl #25
 8015142:	f240 818e 	bls.w	8015462 <Argus_Cal_GetInternalXtalkVectorTable+0x3ba>
 8015146:	f102 7200 	add.w	r2, r2, #33554432	; 0x2000000
 801514a:	801a      	strh	r2, [r3, #0]
 801514c:	f9b4 e20e 	ldrsh.w	lr, [r4, #526]	; 0x20e
 8015150:	f891 2377 	ldrb.w	r2, [r1, #887]	; 0x377
 8015154:	f1be 0f00 	cmp.w	lr, #0
 8015158:	f2c0 8159 	blt.w	801540e <Argus_Cal_GetInternalXtalkVectorTable+0x366>
 801515c:	fa1f f88e 	uxth.w	r8, lr
 8015160:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8015164:	fb02 f808 	mul.w	r8, r2, r8
 8015168:	fb02 f20e 	mul.w	r2, r2, lr
 801516c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015170:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8015174:	fa1e f888 	uxtah	r8, lr, r8
 8015178:	0c12      	lsrs	r2, r2, #16
 801517a:	f118 0f41 	cmn.w	r8, #65	; 0x41
 801517e:	ea4f 6242 	mov.w	r2, r2, lsl #25
 8015182:	f240 8161 	bls.w	8015448 <Argus_Cal_GetInternalXtalkVectorTable+0x3a0>
 8015186:	f102 7200 	add.w	r2, r2, #33554432	; 0x2000000
 801518a:	805a      	strh	r2, [r3, #2]
 801518c:	b17d      	cbz	r5, 80151ae <Argus_Cal_GetInternalXtalkVectorTable+0x106>
 801518e:	f994 e206 	ldrsb.w	lr, [r4, #518]	; 0x206
 8015192:	f11e 0f04 	cmn.w	lr, #4
 8015196:	d00a      	beq.n	80151ae <Argus_Cal_GetInternalXtalkVectorTable+0x106>
 8015198:	f8b0 8000 	ldrh.w	r8, [r0]
 801519c:	f8b3 e000 	ldrh.w	lr, [r3]
 80151a0:	44c6      	add	lr, r8
 80151a2:	f8a3 e000 	strh.w	lr, [r3]
 80151a6:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 80151aa:	4472      	add	r2, lr
 80151ac:	805a      	strh	r2, [r3, #2]
 80151ae:	f9b4 e20c 	ldrsh.w	lr, [r4, #524]	; 0x20c
 80151b2:	f891 2376 	ldrb.w	r2, [r1, #886]	; 0x376
 80151b6:	f1be 0f00 	cmp.w	lr, #0
 80151ba:	f2c0 812f 	blt.w	801541c <Argus_Cal_GetInternalXtalkVectorTable+0x374>
 80151be:	fa1f f88e 	uxth.w	r8, lr
 80151c2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80151c6:	fb02 f808 	mul.w	r8, r2, r8
 80151ca:	fb02 f20e 	mul.w	r2, r2, lr
 80151ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80151d2:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80151d6:	fa1e f888 	uxtah	r8, lr, r8
 80151da:	0c12      	lsrs	r2, r2, #16
 80151dc:	f118 0f41 	cmn.w	r8, #65	; 0x41
 80151e0:	ea4f 6242 	mov.w	r2, r2, lsl #25
 80151e4:	f240 8138 	bls.w	8015458 <Argus_Cal_GetInternalXtalkVectorTable+0x3b0>
 80151e8:	f102 7200 	add.w	r2, r2, #33554432	; 0x2000000
 80151ec:	809a      	strh	r2, [r3, #4]
 80151ee:	f9b4 e20e 	ldrsh.w	lr, [r4, #526]	; 0x20e
 80151f2:	f891 2377 	ldrb.w	r2, [r1, #887]	; 0x377
 80151f6:	f1be 0f00 	cmp.w	lr, #0
 80151fa:	f2c0 8101 	blt.w	8015400 <Argus_Cal_GetInternalXtalkVectorTable+0x358>
 80151fe:	fa1f f88e 	uxth.w	r8, lr
 8015202:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8015206:	fb02 f808 	mul.w	r8, r2, r8
 801520a:	fb02 f20e 	mul.w	r2, r2, lr
 801520e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015212:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8015216:	fa1e f888 	uxtah	r8, lr, r8
 801521a:	0c12      	lsrs	r2, r2, #16
 801521c:	f118 0f41 	cmn.w	r8, #65	; 0x41
 8015220:	ea4f 6242 	mov.w	r2, r2, lsl #25
 8015224:	f240 810b 	bls.w	801543e <Argus_Cal_GetInternalXtalkVectorTable+0x396>
 8015228:	f102 7200 	add.w	r2, r2, #33554432	; 0x2000000
 801522c:	80da      	strh	r2, [r3, #6]
 801522e:	b17d      	cbz	r5, 8015250 <Argus_Cal_GetInternalXtalkVectorTable+0x1a8>
 8015230:	f994 e206 	ldrsb.w	lr, [r4, #518]	; 0x206
 8015234:	f11e 0f04 	cmn.w	lr, #4
 8015238:	d00a      	beq.n	8015250 <Argus_Cal_GetInternalXtalkVectorTable+0x1a8>
 801523a:	f8b0 8018 	ldrh.w	r8, [r0, #24]
 801523e:	f8b3 e004 	ldrh.w	lr, [r3, #4]
 8015242:	44c6      	add	lr, r8
 8015244:	f8a3 e004 	strh.w	lr, [r3, #4]
 8015248:	f8b0 e01a 	ldrh.w	lr, [r0, #26]
 801524c:	4472      	add	r2, lr
 801524e:	80da      	strh	r2, [r3, #6]
 8015250:	f9b4 e20c 	ldrsh.w	lr, [r4, #524]	; 0x20c
 8015254:	f891 2376 	ldrb.w	r2, [r1, #886]	; 0x376
 8015258:	f1be 0f00 	cmp.w	lr, #0
 801525c:	f2c0 80c9 	blt.w	80153f2 <Argus_Cal_GetInternalXtalkVectorTable+0x34a>
 8015260:	fa1f f88e 	uxth.w	r8, lr
 8015264:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8015268:	fb02 f808 	mul.w	r8, r2, r8
 801526c:	fb02 f20e 	mul.w	r2, r2, lr
 8015270:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015274:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8015278:	fa1e f888 	uxtah	r8, lr, r8
 801527c:	0c12      	lsrs	r2, r2, #16
 801527e:	f118 0f41 	cmn.w	r8, #65	; 0x41
 8015282:	ea4f 6242 	mov.w	r2, r2, lsl #25
 8015286:	f240 80f6 	bls.w	8015476 <Argus_Cal_GetInternalXtalkVectorTable+0x3ce>
 801528a:	f102 7200 	add.w	r2, r2, #33554432	; 0x2000000
 801528e:	811a      	strh	r2, [r3, #8]
 8015290:	f9b4 e20e 	ldrsh.w	lr, [r4, #526]	; 0x20e
 8015294:	f891 2377 	ldrb.w	r2, [r1, #887]	; 0x377
 8015298:	f1be 0f00 	cmp.w	lr, #0
 801529c:	f2c0 80a2 	blt.w	80153e4 <Argus_Cal_GetInternalXtalkVectorTable+0x33c>
 80152a0:	fa1f f88e 	uxth.w	r8, lr
 80152a4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80152a8:	fb02 f808 	mul.w	r8, r2, r8
 80152ac:	fb02 f20e 	mul.w	r2, r2, lr
 80152b0:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80152b4:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80152b8:	fa1e f888 	uxtah	r8, lr, r8
 80152bc:	0c12      	lsrs	r2, r2, #16
 80152be:	f118 0f41 	cmn.w	r8, #65	; 0x41
 80152c2:	ea4f 6242 	mov.w	r2, r2, lsl #25
 80152c6:	f240 80d1 	bls.w	801546c <Argus_Cal_GetInternalXtalkVectorTable+0x3c4>
 80152ca:	f102 7200 	add.w	r2, r2, #33554432	; 0x2000000
 80152ce:	815a      	strh	r2, [r3, #10]
 80152d0:	b17d      	cbz	r5, 80152f2 <Argus_Cal_GetInternalXtalkVectorTable+0x24a>
 80152d2:	f994 e206 	ldrsb.w	lr, [r4, #518]	; 0x206
 80152d6:	f11e 0f04 	cmn.w	lr, #4
 80152da:	d00a      	beq.n	80152f2 <Argus_Cal_GetInternalXtalkVectorTable+0x24a>
 80152dc:	f8b0 8030 	ldrh.w	r8, [r0, #48]	; 0x30
 80152e0:	f8b3 e008 	ldrh.w	lr, [r3, #8]
 80152e4:	44c6      	add	lr, r8
 80152e6:	f8a3 e008 	strh.w	lr, [r3, #8]
 80152ea:	f8b0 e032 	ldrh.w	lr, [r0, #50]	; 0x32
 80152ee:	4472      	add	r2, lr
 80152f0:	815a      	strh	r2, [r3, #10]
 80152f2:	f9b4 e20c 	ldrsh.w	lr, [r4, #524]	; 0x20c
 80152f6:	f891 2376 	ldrb.w	r2, [r1, #886]	; 0x376
 80152fa:	f1be 0f00 	cmp.w	lr, #0
 80152fe:	db6a      	blt.n	80153d6 <Argus_Cal_GetInternalXtalkVectorTable+0x32e>
 8015300:	fa1f f88e 	uxth.w	r8, lr
 8015304:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8015308:	fb02 f808 	mul.w	r8, r2, r8
 801530c:	fb02 f20e 	mul.w	r2, r2, lr
 8015310:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015314:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8015318:	fa1e f888 	uxtah	r8, lr, r8
 801531c:	f118 0f41 	cmn.w	r8, #65	; 0x41
 8015320:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8015324:	ea4f 6242 	mov.w	r2, r2, lsl #25
 8015328:	bf96      	itet	ls
 801532a:	f108 0840 	addls.w	r8, r8, #64	; 0x40
 801532e:	f102 7200 	addhi.w	r2, r2, #33554432	; 0x2000000
 8015332:	eb02 12d8 	addls.w	r2, r2, r8, lsr #7
 8015336:	819a      	strh	r2, [r3, #12]
 8015338:	f9b4 e20e 	ldrsh.w	lr, [r4, #526]	; 0x20e
 801533c:	f891 2377 	ldrb.w	r2, [r1, #887]	; 0x377
 8015340:	f1be 0f00 	cmp.w	lr, #0
 8015344:	db40      	blt.n	80153c8 <Argus_Cal_GetInternalXtalkVectorTable+0x320>
 8015346:	fa1f f88e 	uxth.w	r8, lr
 801534a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801534e:	fb02 f808 	mul.w	r8, r2, r8
 8015352:	fb02 f20e 	mul.w	r2, r2, lr
 8015356:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801535a:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801535e:	fa1e f888 	uxtah	r8, lr, r8
 8015362:	f118 0f41 	cmn.w	r8, #65	; 0x41
 8015366:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801536a:	ea4f 6242 	mov.w	r2, r2, lsl #25
 801536e:	bf96      	itet	ls
 8015370:	f108 0840 	addls.w	r8, r8, #64	; 0x40
 8015374:	f102 7200 	addhi.w	r2, r2, #33554432	; 0x2000000
 8015378:	eb02 12d8 	addls.w	r2, r2, r8, lsr #7
 801537c:	81da      	strh	r2, [r3, #14]
 801537e:	b17d      	cbz	r5, 80153a0 <Argus_Cal_GetInternalXtalkVectorTable+0x2f8>
 8015380:	f994 e206 	ldrsb.w	lr, [r4, #518]	; 0x206
 8015384:	f11e 0f04 	cmn.w	lr, #4
 8015388:	d00a      	beq.n	80153a0 <Argus_Cal_GetInternalXtalkVectorTable+0x2f8>
 801538a:	f8b0 8048 	ldrh.w	r8, [r0, #72]	; 0x48
 801538e:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 8015392:	44c6      	add	lr, r8
 8015394:	f8a3 e00c 	strh.w	lr, [r3, #12]
 8015398:	f8b0 e04a 	ldrh.w	lr, [r0, #74]	; 0x4a
 801539c:	4472      	add	r2, lr
 801539e:	81da      	strh	r2, [r3, #14]
 80153a0:	3310      	adds	r3, #16
 80153a2:	42b3      	cmp	r3, r6
 80153a4:	f100 0060 	add.w	r0, r0, #96	; 0x60
 80153a8:	d03f      	beq.n	801542a <Argus_Cal_GetInternalXtalkVectorTable+0x382>
 80153aa:	f9b4 e20c 	ldrsh.w	lr, [r4, #524]	; 0x20c
 80153ae:	f891 2376 	ldrb.w	r2, [r1, #886]	; 0x376
 80153b2:	f1be 0f00 	cmp.w	lr, #0
 80153b6:	f6bf aeb0 	bge.w	801511a <Argus_Cal_GetInternalXtalkVectorTable+0x72>
 80153ba:	fb0e f202 	mul.w	r2, lr, r2
 80153be:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 80153c2:	09d2      	lsrs	r2, r2, #7
 80153c4:	4252      	negs	r2, r2
 80153c6:	e6c0      	b.n	801514a <Argus_Cal_GetInternalXtalkVectorTable+0xa2>
 80153c8:	fb0e f202 	mul.w	r2, lr, r2
 80153cc:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 80153d0:	09d2      	lsrs	r2, r2, #7
 80153d2:	4252      	negs	r2, r2
 80153d4:	e7d2      	b.n	801537c <Argus_Cal_GetInternalXtalkVectorTable+0x2d4>
 80153d6:	fb0e f202 	mul.w	r2, lr, r2
 80153da:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 80153de:	09d2      	lsrs	r2, r2, #7
 80153e0:	4252      	negs	r2, r2
 80153e2:	e7a8      	b.n	8015336 <Argus_Cal_GetInternalXtalkVectorTable+0x28e>
 80153e4:	fb0e f202 	mul.w	r2, lr, r2
 80153e8:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 80153ec:	09d2      	lsrs	r2, r2, #7
 80153ee:	4252      	negs	r2, r2
 80153f0:	e76d      	b.n	80152ce <Argus_Cal_GetInternalXtalkVectorTable+0x226>
 80153f2:	fb0e f202 	mul.w	r2, lr, r2
 80153f6:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 80153fa:	09d2      	lsrs	r2, r2, #7
 80153fc:	4252      	negs	r2, r2
 80153fe:	e746      	b.n	801528e <Argus_Cal_GetInternalXtalkVectorTable+0x1e6>
 8015400:	fb0e f202 	mul.w	r2, lr, r2
 8015404:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8015408:	09d2      	lsrs	r2, r2, #7
 801540a:	4252      	negs	r2, r2
 801540c:	e70e      	b.n	801522c <Argus_Cal_GetInternalXtalkVectorTable+0x184>
 801540e:	fb0e f202 	mul.w	r2, lr, r2
 8015412:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8015416:	09d2      	lsrs	r2, r2, #7
 8015418:	4252      	negs	r2, r2
 801541a:	e6b6      	b.n	801518a <Argus_Cal_GetInternalXtalkVectorTable+0xe2>
 801541c:	fb0e f202 	mul.w	r2, lr, r2
 8015420:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8015424:	09d2      	lsrs	r2, r2, #7
 8015426:	4252      	negs	r2, r2
 8015428:	e6e0      	b.n	80151ec <Argus_Cal_GetInternalXtalkVectorTable+0x144>
 801542a:	f103 0680 	add.w	r6, r3, #128	; 0x80
 801542e:	4566      	cmp	r6, ip
 8015430:	f507 7740 	add.w	r7, r7, #768	; 0x300
 8015434:	f47f ae6d 	bne.w	8015112 <Argus_Cal_GetInternalXtalkVectorTable+0x6a>
 8015438:	2000      	movs	r0, #0
 801543a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801543e:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8015442:	eb02 12d8 	add.w	r2, r2, r8, lsr #7
 8015446:	e6f1      	b.n	801522c <Argus_Cal_GetInternalXtalkVectorTable+0x184>
 8015448:	f108 0840 	add.w	r8, r8, #64	; 0x40
 801544c:	eb02 12d8 	add.w	r2, r2, r8, lsr #7
 8015450:	e69b      	b.n	801518a <Argus_Cal_GetInternalXtalkVectorTable+0xe2>
 8015452:	bf00      	nop
 8015454:	0801b0f0 	.word	0x0801b0f0
 8015458:	f108 0840 	add.w	r8, r8, #64	; 0x40
 801545c:	eb02 12d8 	add.w	r2, r2, r8, lsr #7
 8015460:	e6c4      	b.n	80151ec <Argus_Cal_GetInternalXtalkVectorTable+0x144>
 8015462:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8015466:	eb02 12d8 	add.w	r2, r2, r8, lsr #7
 801546a:	e66e      	b.n	801514a <Argus_Cal_GetInternalXtalkVectorTable+0xa2>
 801546c:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8015470:	eb02 12d8 	add.w	r2, r2, r8, lsr #7
 8015474:	e72b      	b.n	80152ce <Argus_Cal_GetInternalXtalkVectorTable+0x226>
 8015476:	f108 0840 	add.w	r8, r8, #64	; 0x40
 801547a:	eb02 12d8 	add.w	r2, r2, r8, lsr #7
 801547e:	e706      	b.n	801528e <Argus_Cal_GetInternalXtalkVectorTable+0x1e6>
 8015480:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8015484:	e7d9      	b.n	801543a <Argus_Cal_GetInternalXtalkVectorTable+0x392>
 8015486:	f06f 00c6 	mvn.w	r0, #198	; 0xc6
 801548a:	e7d6      	b.n	801543a <Argus_Cal_GetInternalXtalkVectorTable+0x392>

0801548c <Argus_Cal_GetDefaultCalibration>:
 801548c:	2907      	cmp	r1, #7
 801548e:	f200 8121 	bhi.w	80156d4 <Argus_Cal_GetDefaultCalibration+0x248>
 8015492:	2a03      	cmp	r2, #3
 8015494:	f200 811b 	bhi.w	80156ce <Argus_Cal_GetDefaultCalibration+0x242>
 8015498:	b570      	push	{r4, r5, r6, lr}
 801549a:	f44f 724f 	mov.w	r2, #828	; 0x33c
 801549e:	460d      	mov	r5, r1
 80154a0:	2100      	movs	r1, #0
 80154a2:	4604      	mov	r4, r0
 80154a4:	f002 f93c 	bl	8017720 <memset>
 80154a8:	2d04      	cmp	r5, #4
 80154aa:	f04f 0301 	mov.w	r3, #1
 80154ae:	498b      	ldr	r1, [pc, #556]	; (80156dc <Argus_Cal_GetDefaultCalibration+0x250>)
 80154b0:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 80154b4:	bf14      	ite	ne
 80154b6:	2210      	movne	r2, #16
 80154b8:	2240      	moveq	r2, #64	; 0x40
 80154ba:	2d05      	cmp	r5, #5
 80154bc:	67a1      	str	r1, [r4, #120]	; 0x78
 80154be:	f000 80dd 	beq.w	801567c <Argus_Cal_GetDefaultCalibration+0x1f0>
 80154c2:	2d04      	cmp	r5, #4
 80154c4:	f000 80ae 	beq.w	8015624 <Argus_Cal_GetDefaultCalibration+0x198>
 80154c8:	2d03      	cmp	r5, #3
 80154ca:	f000 80e4 	beq.w	8015696 <Argus_Cal_GetDefaultCalibration+0x20a>
 80154ce:	2d00      	cmp	r5, #0
 80154d0:	f24a 33d7 	movw	r3, #41943	; 0xa3d7
 80154d4:	bf08      	it	eq
 80154d6:	2300      	moveq	r3, #0
 80154d8:	2000      	movs	r0, #0
 80154da:	2140      	movs	r1, #64	; 0x40
 80154dc:	67e3      	str	r3, [r4, #124]	; 0x7c
 80154de:	6720      	str	r0, [r4, #112]	; 0x70
 80154e0:	1a2b      	subs	r3, r5, r0
 80154e2:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
 80154e6:	487e      	ldr	r0, [pc, #504]	; (80156e0 <Argus_Cal_GetDefaultCalibration+0x254>)
 80154e8:	497e      	ldr	r1, [pc, #504]	; (80156e4 <Argus_Cal_GetDefaultCalibration+0x258>)
 80154ea:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
 80154ee:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
 80154f2:	f04f 0010 	mov.w	r0, #16
 80154f6:	f04f 019a 	mov.w	r1, #154	; 0x9a
 80154fa:	f04f 2680 	mov.w	r6, #2147516416	; 0x80008000
 80154fe:	bf18      	it	ne
 8015500:	2301      	movne	r3, #1
 8015502:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
 8015506:	f884 11c9 	strb.w	r1, [r4, #457]	; 0x1c9
 801550a:	f246 6066 	movw	r0, #26214	; 0x6666
 801550e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8015512:	6766      	str	r6, [r4, #116]	; 0x74
 8015514:	f884 31c8 	strb.w	r3, [r4, #456]	; 0x1c8
 8015518:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
 801551c:	f8a4 11c6 	strh.w	r1, [r4, #454]	; 0x1c6
 8015520:	2100      	movs	r1, #0
 8015522:	f8a4 11c2 	strh.w	r1, [r4, #450]	; 0x1c2
 8015526:	2001      	movs	r0, #1
 8015528:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 801552c:	2d05      	cmp	r5, #5
 801552e:	f8a4 21c4 	strh.w	r2, [r4, #452]	; 0x1c4
 8015532:	f884 01d4 	strb.w	r0, [r4, #468]	; 0x1d4
 8015536:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
 801553a:	f000 80aa 	beq.w	8015692 <Argus_Cal_GetDefaultCalibration+0x206>
 801553e:	2d04      	cmp	r5, #4
 8015540:	f04f 0100 	mov.w	r1, #0
 8015544:	f000 809d 	beq.w	8015682 <Argus_Cal_GetDefaultCalibration+0x1f6>
 8015548:	2d03      	cmp	r5, #3
 801554a:	f000 80b8 	beq.w	80156be <Argus_Cal_GetDefaultCalibration+0x232>
 801554e:	f8c4 11e4 	str.w	r1, [r4, #484]	; 0x1e4
 8015552:	f04f 2080 	mov.w	r0, #2147516416	; 0x80008000
 8015556:	2100      	movs	r1, #0
 8015558:	e9c4 1076 	strd	r1, r0, [r4, #472]	; 0x1d8
 801555c:	2126      	movs	r1, #38	; 0x26
 801555e:	4860      	ldr	r0, [pc, #384]	; (80156e0 <Argus_Cal_GetDefaultCalibration+0x254>)
 8015560:	f884 11d5 	strb.w	r1, [r4, #469]	; 0x1d5
 8015564:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
 8015568:	495e      	ldr	r1, [pc, #376]	; (80156e4 <Argus_Cal_GetDefaultCalibration+0x258>)
 801556a:	f8c4 0334 	str.w	r0, [r4, #820]	; 0x334
 801556e:	2310      	movs	r3, #16
 8015570:	209a      	movs	r0, #154	; 0x9a
 8015572:	f8c4 1338 	str.w	r1, [r4, #824]	; 0x338
 8015576:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332
 801557a:	f644 41cd 	movw	r1, #19661	; 0x4ccd
 801557e:	f248 0380 	movw	r3, #32896	; 0x8080
 8015582:	2d04      	cmp	r5, #4
 8015584:	f884 0331 	strb.w	r0, [r4, #817]	; 0x331
 8015588:	f8a4 1228 	strh.w	r1, [r4, #552]	; 0x228
 801558c:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
 8015590:	f000 808a 	beq.w	80156a8 <Argus_Cal_GetDefaultCalibration+0x21c>
 8015594:	2300      	movs	r3, #0
 8015596:	2d05      	cmp	r5, #5
 8015598:	f8a4 232c 	strh.w	r2, [r4, #812]	; 0x32c
 801559c:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
 80155a0:	60a3      	str	r3, [r4, #8]
 80155a2:	d059      	beq.n	8015658 <Argus_Cal_GetDefaultCalibration+0x1cc>
 80155a4:	1eeb      	subs	r3, r5, #3
 80155a6:	2b01      	cmp	r3, #1
 80155a8:	f240 8087 	bls.w	80156ba <Argus_Cal_GetDefaultCalibration+0x22e>
 80155ac:	4b4e      	ldr	r3, [pc, #312]	; (80156e8 <Argus_Cal_GetDefaultCalibration+0x25c>)
 80155ae:	6023      	str	r3, [r4, #0]
 80155b0:	2301      	movs	r3, #1
 80155b2:	f240 511a 	movw	r1, #1306	; 0x51a
 80155b6:	2202      	movs	r2, #2
 80155b8:	429d      	cmp	r5, r3
 80155ba:	80a1      	strh	r1, [r4, #4]
 80155bc:	71a2      	strb	r2, [r4, #6]
 80155be:	7323      	strb	r3, [r4, #12]
 80155c0:	d153      	bne.n	801566a <Argus_Cal_GetDefaultCalibration+0x1de>
 80155c2:	f641 0318 	movw	r3, #6168	; 0x1818
 80155c6:	4a49      	ldr	r2, [pc, #292]	; (80156ec <Argus_Cal_GetDefaultCalibration+0x260>)
 80155c8:	82e3      	strh	r3, [r4, #22]
 80155ca:	2340      	movs	r3, #64	; 0x40
 80155cc:	7723      	strb	r3, [r4, #28]
 80155ce:	61a2      	str	r2, [r4, #24]
 80155d0:	230d      	movs	r3, #13
 80155d2:	4947      	ldr	r1, [pc, #284]	; (80156f0 <Argus_Cal_GetDefaultCalibration+0x264>)
 80155d4:	4a47      	ldr	r2, [pc, #284]	; (80156f4 <Argus_Cal_GetDefaultCalibration+0x268>)
 80155d6:	6121      	str	r1, [r4, #16]
 80155d8:	f243 3628 	movw	r6, #13096	; 0x3328
 80155dc:	f247 1101 	movw	r1, #28929	; 0x7101
 80155e0:	4845      	ldr	r0, [pc, #276]	; (80156f8 <Argus_Cal_GetDefaultCalibration+0x26c>)
 80155e2:	7363      	strb	r3, [r4, #13]
 80155e4:	f44f 457a 	mov.w	r5, #64000	; 0xfa00
 80155e8:	2301      	movs	r3, #1
 80155ea:	81e6      	strh	r6, [r4, #14]
 80155ec:	8521      	strh	r1, [r4, #40]	; 0x28
 80155ee:	2609      	movs	r6, #9
 80155f0:	2125      	movs	r1, #37	; 0x25
 80155f2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80155f4:	4a41      	ldr	r2, [pc, #260]	; (80156fc <Argus_Cal_GetDefaultCalibration+0x270>)
 80155f6:	82a5      	strh	r5, [r4, #20]
 80155f8:	f884 3020 	strb.w	r3, [r4, #32]
 80155fc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 8015600:	4d3f      	ldr	r5, [pc, #252]	; (8015700 <Argus_Cal_GetDefaultCalibration+0x274>)
 8015602:	6260      	str	r0, [r4, #36]	; 0x24
 8015604:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
 8015608:	f44f 700c 	mov.w	r0, #560	; 0x230
 801560c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 8015610:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015614:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
 8015618:	f8c4 5032 	str.w	r5, [r4, #50]	; 0x32
 801561c:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
 8015620:	2000      	movs	r0, #0
 8015622:	bd70      	pop	{r4, r5, r6, pc}
 8015624:	2100      	movs	r1, #0
 8015626:	f04f 2080 	mov.w	r0, #2147516416	; 0x80008000
 801562a:	67e1      	str	r1, [r4, #124]	; 0x7c
 801562c:	4935      	ldr	r1, [pc, #212]	; (8015704 <Argus_Cal_GetDefaultCalibration+0x278>)
 801562e:	6760      	str	r0, [r4, #116]	; 0x74
 8015630:	2040      	movs	r0, #64	; 0x40
 8015632:	6721      	str	r1, [r4, #112]	; 0x70
 8015634:	f246 6166 	movw	r1, #26214	; 0x6666
 8015638:	f884 006d 	strb.w	r0, [r4, #109]	; 0x6d
 801563c:	f8a4 10c0 	strh.w	r1, [r4, #192]	; 0xc0
 8015640:	f44f 4081 	mov.w	r0, #16512	; 0x4080
 8015644:	4930      	ldr	r1, [pc, #192]	; (8015708 <Argus_Cal_GetDefaultCalibration+0x27c>)
 8015646:	f8a4 01c6 	strh.w	r0, [r4, #454]	; 0x1c6
 801564a:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
 801564e:	4824      	ldr	r0, [pc, #144]	; (80156e0 <Argus_Cal_GetDefaultCalibration+0x254>)
 8015650:	4924      	ldr	r1, [pc, #144]	; (80156e4 <Argus_Cal_GetDefaultCalibration+0x258>)
 8015652:	e9c4 0173 	strd	r0, r1, [r4, #460]	; 0x1cc
 8015656:	e763      	b.n	8015520 <Argus_Cal_GetDefaultCalibration+0x94>
 8015658:	4b2c      	ldr	r3, [pc, #176]	; (801570c <Argus_Cal_GetDefaultCalibration+0x280>)
 801565a:	6023      	str	r3, [r4, #0]
 801565c:	f240 511a 	movw	r1, #1306	; 0x51a
 8015660:	2202      	movs	r2, #2
 8015662:	2301      	movs	r3, #1
 8015664:	80a1      	strh	r1, [r4, #4]
 8015666:	71a2      	strb	r2, [r4, #6]
 8015668:	7323      	strb	r3, [r4, #12]
 801566a:	f642 0315 	movw	r3, #10261	; 0x2815
 801566e:	4a28      	ldr	r2, [pc, #160]	; (8015710 <Argus_Cal_GetDefaultCalibration+0x284>)
 8015670:	82e3      	strh	r3, [r4, #22]
 8015672:	2340      	movs	r3, #64	; 0x40
 8015674:	7723      	strb	r3, [r4, #28]
 8015676:	61a2      	str	r2, [r4, #24]
 8015678:	230e      	movs	r3, #14
 801567a:	e7aa      	b.n	80155d2 <Argus_Cal_GetDefaultCalibration+0x146>
 801567c:	f248 3312 	movw	r3, #33554	; 0x8312
 8015680:	e72a      	b.n	80154d8 <Argus_Cal_GetDefaultCalibration+0x4c>
 8015682:	f04f 2080 	mov.w	r0, #2147516416	; 0x80008000
 8015686:	f8c4 11e4 	str.w	r1, [r4, #484]	; 0x1e4
 801568a:	e9c4 1076 	strd	r1, r0, [r4, #472]	; 0x1d8
 801568e:	2133      	movs	r1, #51	; 0x33
 8015690:	e765      	b.n	801555e <Argus_Cal_GetDefaultCalibration+0xd2>
 8015692:	4920      	ldr	r1, [pc, #128]	; (8015714 <Argus_Cal_GetDefaultCalibration+0x288>)
 8015694:	e75b      	b.n	801554e <Argus_Cal_GetDefaultCalibration+0xc2>
 8015696:	f246 214e 	movw	r1, #25166	; 0x624e
 801569a:	f04f 2080 	mov.w	r0, #2147516416	; 0x80008000
 801569e:	67e1      	str	r1, [r4, #124]	; 0x7c
 80156a0:	6760      	str	r0, [r4, #116]	; 0x74
 80156a2:	4918      	ldr	r1, [pc, #96]	; (8015704 <Argus_Cal_GetDefaultCalibration+0x278>)
 80156a4:	2048      	movs	r0, #72	; 0x48
 80156a6:	e7c4      	b.n	8015632 <Argus_Cal_GetDefaultCalibration+0x1a6>
 80156a8:	4b1b      	ldr	r3, [pc, #108]	; (8015718 <Argus_Cal_GetDefaultCalibration+0x28c>)
 80156aa:	f8c4 332a 	str.w	r3, [r4, #810]	; 0x32a
 80156ae:	2300      	movs	r3, #0
 80156b0:	60a3      	str	r3, [r4, #8]
 80156b2:	1eeb      	subs	r3, r5, #3
 80156b4:	2b01      	cmp	r3, #1
 80156b6:	f63f af79 	bhi.w	80155ac <Argus_Cal_GetDefaultCalibration+0x120>
 80156ba:	4b18      	ldr	r3, [pc, #96]	; (801571c <Argus_Cal_GetDefaultCalibration+0x290>)
 80156bc:	e7cd      	b.n	801565a <Argus_Cal_GetDefaultCalibration+0x1ce>
 80156be:	f04f 2080 	mov.w	r0, #2147516416	; 0x80008000
 80156c2:	f8c4 11e4 	str.w	r1, [r4, #484]	; 0x1e4
 80156c6:	e9c4 1076 	strd	r1, r0, [r4, #472]	; 0x1d8
 80156ca:	2138      	movs	r1, #56	; 0x38
 80156cc:	e747      	b.n	801555e <Argus_Cal_GetDefaultCalibration+0xd2>
 80156ce:	f06f 00c5 	mvn.w	r0, #197	; 0xc5
 80156d2:	4770      	bx	lr
 80156d4:	f06f 00c6 	mvn.w	r0, #198	; 0xc6
 80156d8:	4770      	bx	lr
 80156da:	bf00      	nop
 80156dc:	eccd0000 	.word	0xeccd0000
 80156e0:	01480148 	.word	0x01480148
 80156e4:	ff5cfeb8 	.word	0xff5cfeb8
 80156e8:	0023a5e3 	.word	0x0023a5e3
 80156ec:	00066666 	.word	0x00066666
 80156f0:	01e0b860 	.word	0x01e0b860
 80156f4:	60009560 	.word	0x60009560
 80156f8:	00070a3d 	.word	0x00070a3d
 80156fc:	01400100 	.word	0x01400100
 8015700:	06400040 	.word	0x06400040
 8015704:	0001eb85 	.word	0x0001eb85
 8015708:	00109a01 	.word	0x00109a01
 801570c:	00233333 	.word	0x00233333
 8015710:	00020c4a 	.word	0x00020c4a
 8015714:	ffff3b64 	.word	0xffff3b64
 8015718:	00680018 	.word	0x00680018
 801571c:	00240831 	.word	0x00240831

08015720 <Argus_Cal_GetCurrentDefaultCalibration>:
 8015720:	b570      	push	{r4, r5, r6, lr}
 8015722:	4605      	mov	r5, r0
 8015724:	f8d0 04f4 	ldr.w	r0, [r0, #1268]	; 0x4f4
 8015728:	460e      	mov	r6, r1
 801572a:	f7f9 fd25 	bl	800f178 <Argus_Dev_GetChipVersion>
 801572e:	b158      	cbz	r0, 8015748 <Argus_Cal_GetCurrentDefaultCalibration+0x28>
 8015730:	4604      	mov	r4, r0
 8015732:	f8d5 04f4 	ldr.w	r0, [r5, #1268]	; 0x4f4
 8015736:	f7f9 fd1b 	bl	800f170 <Argus_Dev_GetModule>
 801573a:	4622      	mov	r2, r4
 801573c:	4601      	mov	r1, r0
 801573e:	4630      	mov	r0, r6
 8015740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015744:	f7ff bea2 	b.w	801548c <Argus_Cal_GetDefaultCalibration>
 8015748:	f06f 0064 	mvn.w	r0, #100	; 0x64
 801574c:	bd70      	pop	{r4, r5, r6, pc}
 801574e:	bf00      	nop

08015750 <EEPROM_ReadChipId>:
 8015750:	7b43      	ldrb	r3, [r0, #13]
 8015752:	7b01      	ldrb	r1, [r0, #12]
 8015754:	7b82      	ldrb	r2, [r0, #14]
 8015756:	7bc0      	ldrb	r0, [r0, #15]
 8015758:	021b      	lsls	r3, r3, #8
 801575a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801575e:	4313      	orrs	r3, r2
 8015760:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8015764:	09c0      	lsrs	r0, r0, #7
 8015766:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 801576a:	4770      	bx	lr

0801576c <EEPROM_ReadModule>:
 801576c:	b430      	push	{r4, r5}
 801576e:	7b04      	ldrb	r4, [r0, #12]
 8015770:	7ac2      	ldrb	r2, [r0, #11]
 8015772:	7bc1      	ldrb	r1, [r0, #15]
 8015774:	7b43      	ldrb	r3, [r0, #13]
 8015776:	7b85      	ldrb	r5, [r0, #14]
 8015778:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
 801577c:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8015780:	b112      	cbz	r2, 8015788 <EEPROM_ReadModule+0x1c>
 8015782:	b2d0      	uxtb	r0, r2
 8015784:	bc30      	pop	{r4, r5}
 8015786:	4770      	bx	lr
 8015788:	021b      	lsls	r3, r3, #8
 801578a:	ea43 4004 	orr.w	r0, r3, r4, lsl #16
 801578e:	4328      	orrs	r0, r5
 8015790:	f3c0 0014 	ubfx	r0, r0, #0, #21
 8015794:	09c9      	lsrs	r1, r1, #7
 8015796:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 801579a:	f2a0 3003 	subw	r0, r0, #771	; 0x303
 801579e:	f5b0 7fe3 	cmp.w	r0, #454	; 0x1c6
 80157a2:	bf8c      	ite	hi
 80157a4:	2000      	movhi	r0, #0
 80157a6:	2001      	movls	r0, #1
 80157a8:	bc30      	pop	{r4, r5}
 80157aa:	4770      	bx	lr

080157ac <EEPROM_Decode>:
 80157ac:	b538      	push	{r3, r4, r5, lr}
 80157ae:	460c      	mov	r4, r1
 80157b0:	2216      	movs	r2, #22
 80157b2:	2100      	movs	r1, #0
 80157b4:	4605      	mov	r5, r0
 80157b6:	f001 ffb3 	bl	8017720 <memset>
 80157ba:	7b23      	ldrb	r3, [r4, #12]
 80157bc:	7ae0      	ldrb	r0, [r4, #11]
 80157be:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80157c2:	f3c0 1045 	ubfx	r0, r0, #5, #6
 80157c6:	2800      	cmp	r0, #0
 80157c8:	f040 8097 	bne.w	80158fa <EEPROM_Decode+0x14e>
 80157cc:	7b62      	ldrb	r2, [r4, #13]
 80157ce:	7ba1      	ldrb	r1, [r4, #14]
 80157d0:	041b      	lsls	r3, r3, #16
 80157d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80157d6:	7be2      	ldrb	r2, [r4, #15]
 80157d8:	430b      	orrs	r3, r1
 80157da:	f3c3 0314 	ubfx	r3, r3, #0, #21
 80157de:	09d2      	lsrs	r2, r2, #7
 80157e0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80157e4:	f2a3 3303 	subw	r3, r3, #771	; 0x303
 80157e8:	f5b3 7fe3 	cmp.w	r3, #454	; 0x1c6
 80157ec:	f200 8200 	bhi.w	8015bf0 <EEPROM_Decode+0x444>
 80157f0:	2301      	movs	r3, #1
 80157f2:	702b      	strb	r3, [r5, #0]
 80157f4:	7823      	ldrb	r3, [r4, #0]
 80157f6:	08db      	lsrs	r3, r3, #3
 80157f8:	06d8      	lsls	r0, r3, #27
 80157fa:	bf48      	it	mi
 80157fc:	f043 03e0 	orrmi.w	r3, r3, #224	; 0xe0
 8015800:	706b      	strb	r3, [r5, #1]
 8015802:	7822      	ldrb	r2, [r4, #0]
 8015804:	7863      	ldrb	r3, [r4, #1]
 8015806:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801580a:	09db      	lsrs	r3, r3, #7
 801580c:	f013 0f08 	tst.w	r3, #8
 8015810:	bf14      	ite	ne
 8015812:	22f0      	movne	r2, #240	; 0xf0
 8015814:	2200      	moveq	r2, #0
 8015816:	f003 030f 	and.w	r3, r3, #15
 801581a:	4313      	orrs	r3, r2
 801581c:	70ab      	strb	r3, [r5, #2]
 801581e:	7863      	ldrb	r3, [r4, #1]
 8015820:	089b      	lsrs	r3, r3, #2
 8015822:	f013 0f10 	tst.w	r3, #16
 8015826:	bf14      	ite	ne
 8015828:	22e0      	movne	r2, #224	; 0xe0
 801582a:	2200      	moveq	r2, #0
 801582c:	f003 031f 	and.w	r3, r3, #31
 8015830:	4313      	orrs	r3, r2
 8015832:	70eb      	strb	r3, [r5, #3]
 8015834:	7862      	ldrb	r2, [r4, #1]
 8015836:	78a3      	ldrb	r3, [r4, #2]
 8015838:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801583c:	085b      	lsrs	r3, r3, #1
 801583e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8015842:	bf14      	ite	ne
 8015844:	f44f 427e 	movne.w	r2, #65024	; 0xfe00
 8015848:	2200      	moveq	r2, #0
 801584a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801584e:	4313      	orrs	r3, r2
 8015850:	80ab      	strh	r3, [r5, #4]
 8015852:	78a2      	ldrb	r2, [r4, #2]
 8015854:	78e3      	ldrb	r3, [r4, #3]
 8015856:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801585a:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801585e:	71ab      	strb	r3, [r5, #6]
 8015860:	78e2      	ldrb	r2, [r4, #3]
 8015862:	7923      	ldrb	r3, [r4, #4]
 8015864:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015868:	099b      	lsrs	r3, r3, #6
 801586a:	71eb      	strb	r3, [r5, #7]
 801586c:	7963      	ldrb	r3, [r4, #5]
 801586e:	091b      	lsrs	r3, r3, #4
 8015870:	f013 0f04 	tst.w	r3, #4
 8015874:	bf14      	ite	ne
 8015876:	22f8      	movne	r2, #248	; 0xf8
 8015878:	2200      	moveq	r2, #0
 801587a:	f003 0307 	and.w	r3, r3, #7
 801587e:	4313      	orrs	r3, r2
 8015880:	726b      	strb	r3, [r5, #9]
 8015882:	7962      	ldrb	r2, [r4, #5]
 8015884:	79a3      	ldrb	r3, [r4, #6]
 8015886:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801588a:	09db      	lsrs	r3, r3, #7
 801588c:	f013 0f10 	tst.w	r3, #16
 8015890:	bf14      	ite	ne
 8015892:	22e0      	movne	r2, #224	; 0xe0
 8015894:	2200      	moveq	r2, #0
 8015896:	f003 031f 	and.w	r3, r3, #31
 801589a:	4313      	orrs	r3, r2
 801589c:	72ab      	strb	r3, [r5, #10]
 801589e:	79a3      	ldrb	r3, [r4, #6]
 80158a0:	08db      	lsrs	r3, r3, #3
 80158a2:	f013 0f08 	tst.w	r3, #8
 80158a6:	bf14      	ite	ne
 80158a8:	22f0      	movne	r2, #240	; 0xf0
 80158aa:	2200      	moveq	r2, #0
 80158ac:	f003 030f 	and.w	r3, r3, #15
 80158b0:	4313      	orrs	r3, r2
 80158b2:	72eb      	strb	r3, [r5, #11]
 80158b4:	79a2      	ldrb	r2, [r4, #6]
 80158b6:	79e3      	ldrb	r3, [r4, #7]
 80158b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80158bc:	08db      	lsrs	r3, r3, #3
 80158be:	732b      	strb	r3, [r5, #12]
 80158c0:	79e2      	ldrb	r2, [r4, #7]
 80158c2:	7a23      	ldrb	r3, [r4, #8]
 80158c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80158c8:	099b      	lsrs	r3, r3, #6
 80158ca:	f013 0f10 	tst.w	r3, #16
 80158ce:	bf14      	ite	ne
 80158d0:	22e0      	movne	r2, #224	; 0xe0
 80158d2:	2200      	moveq	r2, #0
 80158d4:	f003 031f 	and.w	r3, r3, #31
 80158d8:	4313      	orrs	r3, r2
 80158da:	736b      	strb	r3, [r5, #13]
 80158dc:	7a22      	ldrb	r2, [r4, #8]
 80158de:	7a63      	ldrb	r3, [r4, #9]
 80158e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80158e4:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 80158e8:	005a      	lsls	r2, r3, #1
 80158ea:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80158ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80158f2:	4313      	orrs	r3, r2
 80158f4:	742b      	strb	r3, [r5, #16]
 80158f6:	2000      	movs	r0, #0
 80158f8:	bd38      	pop	{r3, r4, r5, pc}
 80158fa:	b2c0      	uxtb	r0, r0
 80158fc:	1e43      	subs	r3, r0, #1
 80158fe:	7028      	strb	r0, [r5, #0]
 8015900:	2b06      	cmp	r3, #6
 8015902:	f200 8177 	bhi.w	8015bf4 <EEPROM_Decode+0x448>
 8015906:	a201      	add	r2, pc, #4	; (adr r2, 801590c <EEPROM_Decode+0x160>)
 8015908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801590c:	080157f5 	.word	0x080157f5
 8015910:	08015929 	.word	0x08015929
 8015914:	08015a67 	.word	0x08015a67
 8015918:	08015a67 	.word	0x08015a67
 801591c:	08015a67 	.word	0x08015a67
 8015920:	08015a67 	.word	0x08015a67
 8015924:	08015a67 	.word	0x08015a67
 8015928:	7823      	ldrb	r3, [r4, #0]
 801592a:	08db      	lsrs	r3, r3, #3
 801592c:	06d9      	lsls	r1, r3, #27
 801592e:	bf48      	it	mi
 8015930:	f043 03e0 	orrmi.w	r3, r3, #224	; 0xe0
 8015934:	706b      	strb	r3, [r5, #1]
 8015936:	7822      	ldrb	r2, [r4, #0]
 8015938:	7863      	ldrb	r3, [r4, #1]
 801593a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801593e:	09db      	lsrs	r3, r3, #7
 8015940:	f013 0f08 	tst.w	r3, #8
 8015944:	bf14      	ite	ne
 8015946:	22f0      	movne	r2, #240	; 0xf0
 8015948:	2200      	moveq	r2, #0
 801594a:	f003 030f 	and.w	r3, r3, #15
 801594e:	4313      	orrs	r3, r2
 8015950:	70ab      	strb	r3, [r5, #2]
 8015952:	7863      	ldrb	r3, [r4, #1]
 8015954:	089b      	lsrs	r3, r3, #2
 8015956:	f013 0f10 	tst.w	r3, #16
 801595a:	bf14      	ite	ne
 801595c:	22e0      	movne	r2, #224	; 0xe0
 801595e:	2200      	moveq	r2, #0
 8015960:	f003 031f 	and.w	r3, r3, #31
 8015964:	4313      	orrs	r3, r2
 8015966:	70eb      	strb	r3, [r5, #3]
 8015968:	7862      	ldrb	r2, [r4, #1]
 801596a:	78a3      	ldrb	r3, [r4, #2]
 801596c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015970:	085b      	lsrs	r3, r3, #1
 8015972:	f413 7f80 	tst.w	r3, #256	; 0x100
 8015976:	bf14      	ite	ne
 8015978:	f44f 427e 	movne.w	r2, #65024	; 0xfe00
 801597c:	2200      	moveq	r2, #0
 801597e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015982:	4313      	orrs	r3, r2
 8015984:	80ab      	strh	r3, [r5, #4]
 8015986:	78a2      	ldrb	r2, [r4, #2]
 8015988:	78e3      	ldrb	r3, [r4, #3]
 801598a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801598e:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8015992:	71ab      	strb	r3, [r5, #6]
 8015994:	78e2      	ldrb	r2, [r4, #3]
 8015996:	7923      	ldrb	r3, [r4, #4]
 8015998:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801599c:	099b      	lsrs	r3, r3, #6
 801599e:	71eb      	strb	r3, [r5, #7]
 80159a0:	7922      	ldrb	r2, [r4, #4]
 80159a2:	7963      	ldrb	r3, [r4, #5]
 80159a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80159a8:	099b      	lsrs	r3, r3, #6
 80159aa:	f013 0f10 	tst.w	r3, #16
 80159ae:	bf14      	ite	ne
 80159b0:	22e0      	movne	r2, #224	; 0xe0
 80159b2:	2200      	moveq	r2, #0
 80159b4:	f003 031f 	and.w	r3, r3, #31
 80159b8:	4313      	orrs	r3, r2
 80159ba:	73eb      	strb	r3, [r5, #15]
 80159bc:	7963      	ldrb	r3, [r4, #5]
 80159be:	08db      	lsrs	r3, r3, #3
 80159c0:	f013 0f04 	tst.w	r3, #4
 80159c4:	bf14      	ite	ne
 80159c6:	22f8      	movne	r2, #248	; 0xf8
 80159c8:	2200      	moveq	r2, #0
 80159ca:	f003 0307 	and.w	r3, r3, #7
 80159ce:	4313      	orrs	r3, r2
 80159d0:	726b      	strb	r3, [r5, #9]
 80159d2:	7962      	ldrb	r2, [r4, #5]
 80159d4:	79a3      	ldrb	r3, [r4, #6]
 80159d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80159da:	099b      	lsrs	r3, r3, #6
 80159dc:	f013 0f10 	tst.w	r3, #16
 80159e0:	bf14      	ite	ne
 80159e2:	22e0      	movne	r2, #224	; 0xe0
 80159e4:	2200      	moveq	r2, #0
 80159e6:	f003 031f 	and.w	r3, r3, #31
 80159ea:	4313      	orrs	r3, r2
 80159ec:	72ab      	strb	r3, [r5, #10]
 80159ee:	79a3      	ldrb	r3, [r4, #6]
 80159f0:	089b      	lsrs	r3, r3, #2
 80159f2:	f013 0f08 	tst.w	r3, #8
 80159f6:	bf14      	ite	ne
 80159f8:	22f0      	movne	r2, #240	; 0xf0
 80159fa:	2200      	moveq	r2, #0
 80159fc:	f003 030f 	and.w	r3, r3, #15
 8015a00:	4313      	orrs	r3, r2
 8015a02:	72eb      	strb	r3, [r5, #11]
 8015a04:	79a2      	ldrb	r2, [r4, #6]
 8015a06:	79e3      	ldrb	r3, [r4, #7]
 8015a08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015a0c:	091b      	lsrs	r3, r3, #4
 8015a0e:	f013 0f20 	tst.w	r3, #32
 8015a12:	bf14      	ite	ne
 8015a14:	22c0      	movne	r2, #192	; 0xc0
 8015a16:	2200      	moveq	r2, #0
 8015a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015a1c:	4313      	orrs	r3, r2
 8015a1e:	732b      	strb	r3, [r5, #12]
 8015a20:	79e2      	ldrb	r2, [r4, #7]
 8015a22:	7a23      	ldrb	r3, [r4, #8]
 8015a24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015a28:	099b      	lsrs	r3, r3, #6
 8015a2a:	f013 0f20 	tst.w	r3, #32
 8015a2e:	bf14      	ite	ne
 8015a30:	22c0      	movne	r2, #192	; 0xc0
 8015a32:	2200      	moveq	r2, #0
 8015a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015a38:	4313      	orrs	r3, r2
 8015a3a:	736b      	strb	r3, [r5, #13]
 8015a3c:	7a22      	ldrb	r2, [r4, #8]
 8015a3e:	7a63      	ldrb	r3, [r4, #9]
 8015a40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015a44:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8015a48:	005a      	lsls	r2, r3, #1
 8015a4a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8015a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a52:	4313      	orrs	r3, r2
 8015a54:	742b      	strb	r3, [r5, #16]
 8015a56:	7a62      	ldrb	r2, [r4, #9]
 8015a58:	7aa3      	ldrb	r3, [r4, #10]
 8015a5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015a5e:	09db      	lsrs	r3, r3, #7
 8015a60:	73ab      	strb	r3, [r5, #14]
 8015a62:	2000      	movs	r0, #0
 8015a64:	bd38      	pop	{r3, r4, r5, pc}
 8015a66:	7823      	ldrb	r3, [r4, #0]
 8015a68:	08db      	lsrs	r3, r3, #3
 8015a6a:	06da      	lsls	r2, r3, #27
 8015a6c:	bf48      	it	mi
 8015a6e:	f043 03e0 	orrmi.w	r3, r3, #224	; 0xe0
 8015a72:	706b      	strb	r3, [r5, #1]
 8015a74:	7822      	ldrb	r2, [r4, #0]
 8015a76:	7863      	ldrb	r3, [r4, #1]
 8015a78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015a7c:	09db      	lsrs	r3, r3, #7
 8015a7e:	f013 0f08 	tst.w	r3, #8
 8015a82:	bf14      	ite	ne
 8015a84:	22f0      	movne	r2, #240	; 0xf0
 8015a86:	2200      	moveq	r2, #0
 8015a88:	f003 030f 	and.w	r3, r3, #15
 8015a8c:	4313      	orrs	r3, r2
 8015a8e:	70ab      	strb	r3, [r5, #2]
 8015a90:	7863      	ldrb	r3, [r4, #1]
 8015a92:	089b      	lsrs	r3, r3, #2
 8015a94:	f013 0f10 	tst.w	r3, #16
 8015a98:	bf14      	ite	ne
 8015a9a:	22e0      	movne	r2, #224	; 0xe0
 8015a9c:	2200      	moveq	r2, #0
 8015a9e:	f003 031f 	and.w	r3, r3, #31
 8015aa2:	4313      	orrs	r3, r2
 8015aa4:	70eb      	strb	r3, [r5, #3]
 8015aa6:	7862      	ldrb	r2, [r4, #1]
 8015aa8:	78a3      	ldrb	r3, [r4, #2]
 8015aaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015aae:	085b      	lsrs	r3, r3, #1
 8015ab0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8015ab4:	bf14      	ite	ne
 8015ab6:	f44f 427e 	movne.w	r2, #65024	; 0xfe00
 8015aba:	2200      	moveq	r2, #0
 8015abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ac0:	4313      	orrs	r3, r2
 8015ac2:	80ab      	strh	r3, [r5, #4]
 8015ac4:	78a2      	ldrb	r2, [r4, #2]
 8015ac6:	78e3      	ldrb	r3, [r4, #3]
 8015ac8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015acc:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8015ad0:	71ab      	strb	r3, [r5, #6]
 8015ad2:	78e2      	ldrb	r2, [r4, #3]
 8015ad4:	7923      	ldrb	r3, [r4, #4]
 8015ad6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015ada:	099b      	lsrs	r3, r3, #6
 8015adc:	71eb      	strb	r3, [r5, #7]
 8015ade:	7923      	ldrb	r3, [r4, #4]
 8015ae0:	08db      	lsrs	r3, r3, #3
 8015ae2:	f013 0f04 	tst.w	r3, #4
 8015ae6:	bf14      	ite	ne
 8015ae8:	22f8      	movne	r2, #248	; 0xf8
 8015aea:	2200      	moveq	r2, #0
 8015aec:	f003 0307 	and.w	r3, r3, #7
 8015af0:	4313      	orrs	r3, r2
 8015af2:	722b      	strb	r3, [r5, #8]
 8015af4:	7922      	ldrb	r2, [r4, #4]
 8015af6:	7963      	ldrb	r3, [r4, #5]
 8015af8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015afc:	099b      	lsrs	r3, r3, #6
 8015afe:	f013 0f10 	tst.w	r3, #16
 8015b02:	bf14      	ite	ne
 8015b04:	22e0      	movne	r2, #224	; 0xe0
 8015b06:	2200      	moveq	r2, #0
 8015b08:	f003 031f 	and.w	r3, r3, #31
 8015b0c:	4313      	orrs	r3, r2
 8015b0e:	73eb      	strb	r3, [r5, #15]
 8015b10:	7963      	ldrb	r3, [r4, #5]
 8015b12:	08db      	lsrs	r3, r3, #3
 8015b14:	f013 0f04 	tst.w	r3, #4
 8015b18:	bf14      	ite	ne
 8015b1a:	22f8      	movne	r2, #248	; 0xf8
 8015b1c:	2200      	moveq	r2, #0
 8015b1e:	f003 0307 	and.w	r3, r3, #7
 8015b22:	4313      	orrs	r3, r2
 8015b24:	726b      	strb	r3, [r5, #9]
 8015b26:	7962      	ldrb	r2, [r4, #5]
 8015b28:	79a3      	ldrb	r3, [r4, #6]
 8015b2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015b2e:	099b      	lsrs	r3, r3, #6
 8015b30:	f013 0f10 	tst.w	r3, #16
 8015b34:	bf14      	ite	ne
 8015b36:	22e0      	movne	r2, #224	; 0xe0
 8015b38:	2200      	moveq	r2, #0
 8015b3a:	f003 031f 	and.w	r3, r3, #31
 8015b3e:	4313      	orrs	r3, r2
 8015b40:	72ab      	strb	r3, [r5, #10]
 8015b42:	79a3      	ldrb	r3, [r4, #6]
 8015b44:	089b      	lsrs	r3, r3, #2
 8015b46:	f013 0f08 	tst.w	r3, #8
 8015b4a:	bf14      	ite	ne
 8015b4c:	22f0      	movne	r2, #240	; 0xf0
 8015b4e:	2200      	moveq	r2, #0
 8015b50:	f003 030f 	and.w	r3, r3, #15
 8015b54:	4313      	orrs	r3, r2
 8015b56:	72eb      	strb	r3, [r5, #11]
 8015b58:	79a2      	ldrb	r2, [r4, #6]
 8015b5a:	79e3      	ldrb	r3, [r4, #7]
 8015b5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015b60:	091b      	lsrs	r3, r3, #4
 8015b62:	f013 0f20 	tst.w	r3, #32
 8015b66:	bf14      	ite	ne
 8015b68:	22c0      	movne	r2, #192	; 0xc0
 8015b6a:	2200      	moveq	r2, #0
 8015b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015b70:	4313      	orrs	r3, r2
 8015b72:	732b      	strb	r3, [r5, #12]
 8015b74:	79e2      	ldrb	r2, [r4, #7]
 8015b76:	7a23      	ldrb	r3, [r4, #8]
 8015b78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015b7c:	099b      	lsrs	r3, r3, #6
 8015b7e:	f013 0f20 	tst.w	r3, #32
 8015b82:	bf14      	ite	ne
 8015b84:	22c0      	movne	r2, #192	; 0xc0
 8015b86:	2200      	moveq	r2, #0
 8015b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015b8c:	4313      	orrs	r3, r2
 8015b8e:	736b      	strb	r3, [r5, #13]
 8015b90:	7a22      	ldrb	r2, [r4, #8]
 8015b92:	7a63      	ldrb	r3, [r4, #9]
 8015b94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015b98:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8015b9c:	005a      	lsls	r2, r3, #1
 8015b9e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8015ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015ba6:	4313      	orrs	r3, r2
 8015ba8:	742b      	strb	r3, [r5, #16]
 8015baa:	7a62      	ldrb	r2, [r4, #9]
 8015bac:	7aa3      	ldrb	r3, [r4, #10]
 8015bae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015bb2:	09db      	lsrs	r3, r3, #7
 8015bb4:	73ab      	strb	r3, [r5, #14]
 8015bb6:	7aa3      	ldrb	r3, [r4, #10]
 8015bb8:	085b      	lsrs	r3, r3, #1
 8015bba:	f013 0f20 	tst.w	r3, #32
 8015bbe:	bf14      	ite	ne
 8015bc0:	22c0      	movne	r2, #192	; 0xc0
 8015bc2:	2200      	moveq	r2, #0
 8015bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015bc8:	4313      	orrs	r3, r2
 8015bca:	b25b      	sxtb	r3, r3
 8015bcc:	826b      	strh	r3, [r5, #18]
 8015bce:	7aa2      	ldrb	r2, [r4, #10]
 8015bd0:	7ae3      	ldrb	r3, [r4, #11]
 8015bd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015bd6:	08db      	lsrs	r3, r3, #3
 8015bd8:	f013 0f20 	tst.w	r3, #32
 8015bdc:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8015be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015be4:	bf08      	it	eq
 8015be6:	2200      	moveq	r2, #0
 8015be8:	4313      	orrs	r3, r2
 8015bea:	82ab      	strh	r3, [r5, #20]
 8015bec:	2000      	movs	r0, #0
 8015bee:	bd38      	pop	{r3, r4, r5, pc}
 8015bf0:	7028      	strb	r0, [r5, #0]
 8015bf2:	bd38      	pop	{r3, r4, r5, pc}
 8015bf4:	206e      	movs	r0, #110	; 0x6e
 8015bf6:	bd38      	pop	{r3, r4, r5, pc}

08015bf8 <Argus_Cal_WriteToNVM>:
 8015bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bfc:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8015c00:	4606      	mov	r6, r0
 8015c02:	4689      	mov	r9, r1
 8015c04:	a802      	add	r0, sp, #8
 8015c06:	f44f 7240 	mov.w	r2, #768	; 0x300
 8015c0a:	2100      	movs	r1, #0
 8015c0c:	f001 fd88 	bl	8017720 <memset>
 8015c10:	2e00      	cmp	r6, #0
 8015c12:	f000 8098 	beq.w	8015d46 <Argus_Cal_WriteToNVM+0x14e>
 8015c16:	2400      	movs	r4, #0
 8015c18:	f04f 3aff 	mov.w	sl, #4294967295
 8015c1c:	4627      	mov	r7, r4
 8015c1e:	46a0      	mov	r8, r4
 8015c20:	f8cd a004 	str.w	sl, [sp, #4]
 8015c24:	4655      	mov	r5, sl
 8015c26:	aa02      	add	r2, sp, #8
 8015c28:	f44f 7140 	mov.w	r1, #768	; 0x300
 8015c2c:	4620      	mov	r0, r4
 8015c2e:	f001 fcf7 	bl	8017620 <NVM_Read>
 8015c32:	f110 0f09 	cmn.w	r0, #9
 8015c36:	4603      	mov	r3, r0
 8015c38:	f000 8085 	beq.w	8015d46 <Argus_Cal_WriteToNVM+0x14e>
 8015c3c:	2800      	cmp	r0, #0
 8015c3e:	f2c0 8083 	blt.w	8015d48 <Argus_Cal_WriteToNVM+0x150>
 8015c42:	9a04      	ldr	r2, [sp, #16]
 8015c44:	9b02      	ldr	r3, [sp, #8]
 8015c46:	ba12      	rev	r2, r2
 8015c48:	4297      	cmp	r7, r2
 8015c4a:	bf38      	it	cc
 8015c4c:	4617      	movcc	r7, r2
 8015c4e:	fa93 fb83 	rev.w	fp, r3
 8015c52:	f7ef ff19 	bl	8005a88 <Argus_GetAPIVersion>
 8015c56:	4583      	cmp	fp, r0
 8015c58:	d07b      	beq.n	8015d52 <Argus_Cal_WriteToNVM+0x15a>
 8015c5a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8015c5e:	bf08      	it	eq
 8015c60:	4625      	moveq	r5, r4
 8015c62:	9b03      	ldr	r3, [sp, #12]
 8015c64:	ba1b      	rev	r3, r3
 8015c66:	42b3      	cmp	r3, r6
 8015c68:	d103      	bne.n	8015c72 <Argus_Cal_WriteToNVM+0x7a>
 8015c6a:	9b04      	ldr	r3, [sp, #16]
 8015c6c:	4625      	mov	r5, r4
 8015c6e:	fa93 f883 	rev.w	r8, r3
 8015c72:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8015c76:	f5b4 6f40 	cmp.w	r4, #3072	; 0xc00
 8015c7a:	d1d4      	bne.n	8015c26 <Argus_Cal_WriteToNVM+0x2e>
 8015c7c:	9b01      	ldr	r3, [sp, #4]
 8015c7e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8015c82:	f1b5 3fff 	cmp.w	r5, #4294967295
 8015c86:	bf08      	it	eq
 8015c88:	461d      	moveq	r5, r3
 8015c8a:	2100      	movs	r1, #0
 8015c8c:	45b8      	cmp	r8, r7
 8015c8e:	a802      	add	r0, sp, #8
 8015c90:	bf38      	it	cc
 8015c92:	f107 0801 	addcc.w	r8, r7, #1
 8015c96:	f001 fd43 	bl	8017720 <memset>
 8015c9a:	f7ef fef5 	bl	8005a88 <Argus_GetAPIVersion>
 8015c9e:	0e00      	lsrs	r0, r0, #24
 8015ca0:	f88d 0008 	strb.w	r0, [sp, #8]
 8015ca4:	f7ef fef0 	bl	8005a88 <Argus_GetAPIVersion>
 8015ca8:	0c00      	lsrs	r0, r0, #16
 8015caa:	f88d 0009 	strb.w	r0, [sp, #9]
 8015cae:	f7ef feeb 	bl	8005a88 <Argus_GetAPIVersion>
 8015cb2:	0a00      	lsrs	r0, r0, #8
 8015cb4:	f88d 000a 	strb.w	r0, [sp, #10]
 8015cb8:	f7ef fee6 	bl	8005a88 <Argus_GetAPIVersion>
 8015cbc:	ba36      	rev	r6, r6
 8015cbe:	fa98 f388 	rev.w	r3, r8
 8015cc2:	f88d 000b 	strb.w	r0, [sp, #11]
 8015cc6:	2228      	movs	r2, #40	; 0x28
 8015cc8:	f109 0138 	add.w	r1, r9, #56	; 0x38
 8015ccc:	a806      	add	r0, sp, #24
 8015cce:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8015cd2:	f001 fd1a 	bl	801770a <memcpy>
 8015cd6:	2240      	movs	r2, #64	; 0x40
 8015cd8:	f109 0180 	add.w	r1, r9, #128	; 0x80
 8015cdc:	eb0d 0002 	add.w	r0, sp, r2
 8015ce0:	f001 fd13 	bl	801770a <memcpy>
 8015ce4:	2240      	movs	r2, #64	; 0x40
 8015ce6:	f509 71f4 	add.w	r1, r9, #488	; 0x1e8
 8015cea:	a820      	add	r0, sp, #128	; 0x80
 8015cec:	f001 fd0d 	bl	801770a <memcpy>
 8015cf0:	f44f 7283 	mov.w	r2, #262	; 0x106
 8015cf4:	f109 01c2 	add.w	r1, r9, #194	; 0xc2
 8015cf8:	a830      	add	r0, sp, #192	; 0xc0
 8015cfa:	f001 fd06 	bl	801770a <memcpy>
 8015cfe:	f209 212a 	addw	r1, r9, #554	; 0x22a
 8015d02:	f44f 7283 	mov.w	r2, #262	; 0x106
 8015d06:	f50d 70e3 	add.w	r0, sp, #454	; 0x1c6
 8015d0a:	f001 fcfe 	bl	801770a <memcpy>
 8015d0e:	aa02      	add	r2, sp, #8
 8015d10:	f44f 7140 	mov.w	r1, #768	; 0x300
 8015d14:	4628      	mov	r0, r5
 8015d16:	f001 fc7f 	bl	8017618 <NVM_Write>
 8015d1a:	f110 0f09 	cmn.w	r0, #9
 8015d1e:	4603      	mov	r3, r0
 8015d20:	d011      	beq.n	8015d46 <Argus_Cal_WriteToNVM+0x14e>
 8015d22:	2800      	cmp	r0, #0
 8015d24:	db10      	blt.n	8015d48 <Argus_Cal_WriteToNVM+0x150>
 8015d26:	490e      	ldr	r1, [pc, #56]	; (8015d60 <Argus_Cal_WriteToNVM+0x168>)
 8015d28:	9001      	str	r0, [sp, #4]
 8015d2a:	fb81 3105 	smull	r3, r1, r1, r5
 8015d2e:	17ed      	asrs	r5, r5, #31
 8015d30:	ebc5 11e1 	rsb	r1, r5, r1, asr #7
 8015d34:	480b      	ldr	r0, [pc, #44]	; (8015d64 <Argus_Cal_WriteToNVM+0x16c>)
 8015d36:	f7eb f88b 	bl	8000e50 <print>
 8015d3a:	9b01      	ldr	r3, [sp, #4]
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f50d 7d43 	add.w	sp, sp, #780	; 0x30c
 8015d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d46:	2300      	movs	r3, #0
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f50d 7d43 	add.w	sp, sp, #780	; 0x30c
 8015d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d52:	9b04      	ldr	r3, [sp, #16]
 8015d54:	ba1b      	rev	r3, r3
 8015d56:	4553      	cmp	r3, sl
 8015d58:	bf9c      	itt	ls
 8015d5a:	469a      	movls	sl, r3
 8015d5c:	9401      	strls	r4, [sp, #4]
 8015d5e:	e780      	b.n	8015c62 <Argus_Cal_WriteToNVM+0x6a>
 8015d60:	2aaaaaab 	.word	0x2aaaaaab
 8015d64:	0801c428 	.word	0x0801c428

08015d68 <Argus_Cal_AssembleData>:
 8015d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d6a:	f500 71d0 	add.w	r1, r0, #416	; 0x1a0
 8015d6e:	f2ad 6d44 	subw	sp, sp, #1604	; 0x644
 8015d72:	4604      	mov	r4, r0
 8015d74:	f8d0 04f4 	ldr.w	r0, [r0, #1268]	; 0x4f4
 8015d78:	f7f9 fdb8 	bl	800f8ec <Argus_Dev_ReadEEPROM>
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	db34      	blt.n	8015dea <Argus_Cal_AssembleData+0x82>
 8015d80:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8015d84:	2100      	movs	r1, #0
 8015d86:	a8c1      	add	r0, sp, #772	; 0x304
 8015d88:	f001 fcca 	bl	8017720 <memset>
 8015d8c:	a9c1      	add	r1, sp, #772	; 0x304
 8015d8e:	4620      	mov	r0, r4
 8015d90:	f7ff fcc6 	bl	8015720 <Argus_Cal_GetCurrentDefaultCalibration>
 8015d94:	2800      	cmp	r0, #0
 8015d96:	db28      	blt.n	8015dea <Argus_Cal_AssembleData+0x82>
 8015d98:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 8015d9c:	f7f9 f9ea 	bl	800f174 <Argus_Dev_GetChipID>
 8015da0:	2500      	movs	r5, #0
 8015da2:	4607      	mov	r7, r0
 8015da4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8015da8:	a801      	add	r0, sp, #4
 8015daa:	2100      	movs	r1, #0
 8015dac:	f001 fcb8 	bl	8017720 <memset>
 8015db0:	95cf      	str	r5, [sp, #828]	; 0x33c
 8015db2:	b1af      	cbz	r7, 8015de0 <Argus_Cal_AssembleData+0x78>
 8015db4:	4628      	mov	r0, r5
 8015db6:	aa01      	add	r2, sp, #4
 8015db8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8015dbc:	f001 fc30 	bl	8017620 <NVM_Read>
 8015dc0:	f110 0f09 	cmn.w	r0, #9
 8015dc4:	f505 7540 	add.w	r5, r5, #768	; 0x300
 8015dc8:	d00a      	beq.n	8015de0 <Argus_Cal_AssembleData+0x78>
 8015dca:	2800      	cmp	r0, #0
 8015dcc:	db3e      	blt.n	8015e4c <Argus_Cal_AssembleData+0xe4>
 8015dce:	9b01      	ldr	r3, [sp, #4]
 8015dd0:	ba1e      	rev	r6, r3
 8015dd2:	f7ef fe59 	bl	8005a88 <Argus_GetAPIVersion>
 8015dd6:	42b0      	cmp	r0, r6
 8015dd8:	d00a      	beq.n	8015df0 <Argus_Cal_AssembleData+0x88>
 8015dda:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8015dde:	d1e9      	bne.n	8015db4 <Argus_Cal_AssembleData+0x4c>
 8015de0:	a9c1      	add	r1, sp, #772	; 0x304
 8015de2:	4620      	mov	r0, r4
 8015de4:	f7fb fb7c 	bl	80114e0 <Argus_Cal_PrepareCal>
 8015de8:	b1e8      	cbz	r0, 8015e26 <Argus_Cal_AssembleData+0xbe>
 8015dea:	f20d 6d44 	addw	sp, sp, #1604	; 0x644
 8015dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015df0:	9b02      	ldr	r3, [sp, #8]
 8015df2:	ba1b      	rev	r3, r3
 8015df4:	429f      	cmp	r7, r3
 8015df6:	d1f0      	bne.n	8015dda <Argus_Cal_AssembleData+0x72>
 8015df8:	2228      	movs	r2, #40	; 0x28
 8015dfa:	a905      	add	r1, sp, #20
 8015dfc:	a8cf      	add	r0, sp, #828	; 0x33c
 8015dfe:	f001 fc84 	bl	801770a <memcpy>
 8015e02:	9bcf      	ldr	r3, [sp, #828]	; 0x33c
 8015e04:	0098      	lsls	r0, r3, #2
 8015e06:	d447      	bmi.n	8015e98 <Argus_Cal_AssembleData+0x130>
 8015e08:	0059      	lsls	r1, r3, #1
 8015e0a:	d43d      	bmi.n	8015e88 <Argus_Cal_AssembleData+0x120>
 8015e0c:	035a      	lsls	r2, r3, #13
 8015e0e:	d432      	bmi.n	8015e76 <Argus_Cal_AssembleData+0x10e>
 8015e10:	031b      	lsls	r3, r3, #12
 8015e12:	d5e5      	bpl.n	8015de0 <Argus_Cal_AssembleData+0x78>
 8015e14:	f44f 7283 	mov.w	r2, #262	; 0x106
 8015e18:	f50d 71e1 	add.w	r1, sp, #450	; 0x1c2
 8015e1c:	f20d 502e 	addw	r0, sp, #1326	; 0x52e
 8015e20:	f001 fc73 	bl	801770a <memcpy>
 8015e24:	e7dc      	b.n	8015de0 <Argus_Cal_AssembleData+0x78>
 8015e26:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 8015e2a:	f7f9 f9a1 	bl	800f170 <Argus_Dev_GetModule>
 8015e2e:	b198      	cbz	r0, 8015e58 <Argus_Cal_AssembleData+0xf0>
 8015e30:	f8d4 31e8 	ldr.w	r3, [r4, #488]	; 0x1e8
 8015e34:	f003 0303 	and.w	r3, r3, #3
 8015e38:	2b03      	cmp	r3, #3
 8015e3a:	d001      	beq.n	8015e40 <Argus_Cal_AssembleData+0xd8>
 8015e3c:	2801      	cmp	r0, #1
 8015e3e:	d914      	bls.n	8015e6a <Argus_Cal_AssembleData+0x102>
 8015e40:	4620      	mov	r0, r4
 8015e42:	f7fc fcf9 	bl	8012838 <Argus_Cal_Update>
 8015e46:	f20d 6d44 	addw	sp, sp, #1604	; 0x644
 8015e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e4c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8015e50:	d0c6      	beq.n	8015de0 <Argus_Cal_AssembleData+0x78>
 8015e52:	f20d 6d44 	addw	sp, sp, #1604	; 0x644
 8015e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e58:	4813      	ldr	r0, [pc, #76]	; (8015ea8 <Argus_Cal_AssembleData+0x140>)
 8015e5a:	f7ea fff9 	bl	8000e50 <print>
 8015e5e:	f8d4 31e8 	ldr.w	r3, [r4, #488]	; 0x1e8
 8015e62:	f003 0303 	and.w	r3, r3, #3
 8015e66:	2b03      	cmp	r3, #3
 8015e68:	d0ea      	beq.n	8015e40 <Argus_Cal_AssembleData+0xd8>
 8015e6a:	4620      	mov	r0, r4
 8015e6c:	f000 fa72 	bl	8016354 <Argus_Cal_ExecuteVsubCalibrationSequence>
 8015e70:	2800      	cmp	r0, #0
 8015e72:	d1ba      	bne.n	8015dea <Argus_Cal_AssembleData+0x82>
 8015e74:	e7e4      	b.n	8015e40 <Argus_Cal_AssembleData+0xd8>
 8015e76:	f44f 7283 	mov.w	r2, #262	; 0x106
 8015e7a:	a92f      	add	r1, sp, #188	; 0xbc
 8015e7c:	f20d 30c6 	addw	r0, sp, #966	; 0x3c6
 8015e80:	f001 fc43 	bl	801770a <memcpy>
 8015e84:	9bcf      	ldr	r3, [sp, #828]	; 0x33c
 8015e86:	e7c3      	b.n	8015e10 <Argus_Cal_AssembleData+0xa8>
 8015e88:	2240      	movs	r2, #64	; 0x40
 8015e8a:	a91f      	add	r1, sp, #124	; 0x7c
 8015e8c:	f20d 40ec 	addw	r0, sp, #1260	; 0x4ec
 8015e90:	f001 fc3b 	bl	801770a <memcpy>
 8015e94:	9bcf      	ldr	r3, [sp, #828]	; 0x33c
 8015e96:	e7b9      	b.n	8015e0c <Argus_Cal_AssembleData+0xa4>
 8015e98:	2240      	movs	r2, #64	; 0x40
 8015e9a:	a90f      	add	r1, sp, #60	; 0x3c
 8015e9c:	a8e1      	add	r0, sp, #900	; 0x384
 8015e9e:	f001 fc34 	bl	801770a <memcpy>
 8015ea2:	9bcf      	ldr	r3, [sp, #828]	; 0x33c
 8015ea4:	e7b0      	b.n	8015e08 <Argus_Cal_AssembleData+0xa0>
 8015ea6:	bf00      	nop
 8015ea8:	0801c380 	.word	0x0801c380

08015eac <GetStatusCallback>:
 8015eac:	6008      	str	r0, [r1, #0]
 8015eae:	4770      	bx	lr

08015eb0 <RunSequence.part.6>:
 8015eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eb4:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
 8015eb8:	4604      	mov	r4, r0
 8015eba:	4688      	mov	r8, r1
 8015ebc:	f8d0 04f0 	ldr.w	r0, [r0, #1264]	; 0x4f0
 8015ec0:	a903      	add	r1, sp, #12
 8015ec2:	4617      	mov	r7, r2
 8015ec4:	461e      	mov	r6, r3
 8015ec6:	f7f2 fb3d 	bl	8008544 <Argus_Cfg_GetConfiguration>
 8015eca:	1e05      	subs	r5, r0, #0
 8015ecc:	db3a      	blt.n	8015f44 <RunSequence.part.6+0x94>
 8015ece:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8015ed2:	2100      	movs	r1, #0
 8015ed4:	a887      	add	r0, sp, #540	; 0x21c
 8015ed6:	f001 fc23 	bl	8017720 <memset>
 8015eda:	a987      	add	r1, sp, #540	; 0x21c
 8015edc:	4620      	mov	r0, r4
 8015ede:	f7fa fd2b 	bl	8010938 <Argus_Cal_GetCalibration>
 8015ee2:	1e05      	subs	r5, r0, #0
 8015ee4:	db54      	blt.n	8015f90 <RunSequence.part.6+0xe0>
 8015ee6:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 8015eea:	f7f9 f897 	bl	800f01c <Argus_Dev_StartIgnoreEvalTasks>
 8015eee:	f8dd 3570 	ldr.w	r3, [sp, #1392]	; 0x570
 8015ef2:	9300      	str	r3, [sp, #0]
 8015ef4:	4641      	mov	r1, r8
 8015ef6:	ab87      	add	r3, sp, #540	; 0x21c
 8015ef8:	aa03      	add	r2, sp, #12
 8015efa:	4620      	mov	r0, r4
 8015efc:	47b8      	blx	r7
 8015efe:	1e05      	subs	r5, r0, #0
 8015f00:	db35      	blt.n	8015f6e <RunSequence.part.6+0xbe>
 8015f02:	a987      	add	r1, sp, #540	; 0x21c
 8015f04:	4620      	mov	r0, r4
 8015f06:	f7fe f8af 	bl	8014068 <Argus_Cal_SetCalibrationSync>
 8015f0a:	1e07      	subs	r7, r0, #0
 8015f0c:	db3a      	blt.n	8015f84 <RunSequence.part.6+0xd4>
 8015f0e:	a903      	add	r1, sp, #12
 8015f10:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
 8015f14:	f7f2 faaa 	bl	800846c <Argus_Cfg_SetConfigurationSync>
 8015f18:	f1b0 0800 	subs.w	r8, r0, #0
 8015f1c:	db21      	blt.n	8015f62 <RunSequence.part.6+0xb2>
 8015f1e:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 8015f22:	f7f9 f883 	bl	800f02c <Argus_Dev_StopIgnoreEvalTasks>
 8015f26:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 8015f2a:	21c3      	movs	r1, #195	; 0xc3
 8015f2c:	f7f8 fd1a 	bl	800e964 <Argus_Dev_ClearStatus>
 8015f30:	b91d      	cbnz	r5, 8015f3a <RunSequence.part.6+0x8a>
 8015f32:	2f00      	cmp	r7, #0
 8015f34:	bf14      	ite	ne
 8015f36:	463d      	movne	r5, r7
 8015f38:	4645      	moveq	r5, r8
 8015f3a:	4628      	mov	r0, r5
 8015f3c:	f50d 6dab 	add.w	sp, sp, #1368	; 0x558
 8015f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f44:	4631      	mov	r1, r6
 8015f46:	462a      	mov	r2, r5
 8015f48:	4819      	ldr	r0, [pc, #100]	; (8015fb0 <RunSequence.part.6+0x100>)
 8015f4a:	f7ea ff81 	bl	8000e50 <print>
 8015f4e:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 8015f52:	21c3      	movs	r1, #195	; 0xc3
 8015f54:	f7f8 fd06 	bl	800e964 <Argus_Dev_ClearStatus>
 8015f58:	4628      	mov	r0, r5
 8015f5a:	f50d 6dab 	add.w	sp, sp, #1368	; 0x558
 8015f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f62:	4631      	mov	r1, r6
 8015f64:	4642      	mov	r2, r8
 8015f66:	4813      	ldr	r0, [pc, #76]	; (8015fb4 <RunSequence.part.6+0x104>)
 8015f68:	f7ea ff72 	bl	8000e50 <print>
 8015f6c:	e7d7      	b.n	8015f1e <RunSequence.part.6+0x6e>
 8015f6e:	462a      	mov	r2, r5
 8015f70:	4631      	mov	r1, r6
 8015f72:	4811      	ldr	r0, [pc, #68]	; (8015fb8 <RunSequence.part.6+0x108>)
 8015f74:	f7ea ff6c 	bl	8000e50 <print>
 8015f78:	a987      	add	r1, sp, #540	; 0x21c
 8015f7a:	4620      	mov	r0, r4
 8015f7c:	f7fe f874 	bl	8014068 <Argus_Cal_SetCalibrationSync>
 8015f80:	1e07      	subs	r7, r0, #0
 8015f82:	dac4      	bge.n	8015f0e <RunSequence.part.6+0x5e>
 8015f84:	463a      	mov	r2, r7
 8015f86:	4631      	mov	r1, r6
 8015f88:	480c      	ldr	r0, [pc, #48]	; (8015fbc <RunSequence.part.6+0x10c>)
 8015f8a:	f7ea ff61 	bl	8000e50 <print>
 8015f8e:	e7be      	b.n	8015f0e <RunSequence.part.6+0x5e>
 8015f90:	4631      	mov	r1, r6
 8015f92:	462a      	mov	r2, r5
 8015f94:	480a      	ldr	r0, [pc, #40]	; (8015fc0 <RunSequence.part.6+0x110>)
 8015f96:	f7ea ff5b 	bl	8000e50 <print>
 8015f9a:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 8015f9e:	21c3      	movs	r1, #195	; 0xc3
 8015fa0:	f7f8 fce0 	bl	800e964 <Argus_Dev_ClearStatus>
 8015fa4:	4628      	mov	r0, r5
 8015fa6:	f50d 6dab 	add.w	sp, sp, #1368	; 0x558
 8015faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fae:	bf00      	nop
 8015fb0:	0801c544 	.word	0x0801c544
 8015fb4:	0801c65c 	.word	0x0801c65c
 8015fb8:	0801c5d4 	.word	0x0801c5d4
 8015fbc:	0801c60c 	.word	0x0801c60c
 8015fc0:	0801c58c 	.word	0x0801c58c

08015fc4 <VsubCal_Sequence>:
 8015fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8015fcc:	4611      	mov	r1, r2
 8015fce:	4605      	mov	r5, r0
 8015fd0:	f44f 7204 	mov.w	r2, #528	; 0x210
 8015fd4:	a80e      	add	r0, sp, #56	; 0x38
 8015fd6:	4699      	mov	r9, r3
 8015fd8:	f001 fb97 	bl	801770a <memcpy>
 8015fdc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8015fe0:	f8d5 04f4 	ldr.w	r0, [r5, #1268]	; 0x4f4
 8015fe4:	3b01      	subs	r3, #1
 8015fe6:	aa0e      	add	r2, sp, #56	; 0x38
 8015fe8:	eb03 1383 	add.w	r3, r3, r3, lsl #6
 8015fec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015ff0:	2600      	movs	r6, #0
 8015ff2:	2132      	movs	r1, #50	; 0x32
 8015ff4:	f883 60d4 	strb.w	r6, [r3, #212]	; 0xd4
 8015ff8:	f883 6043 	strb.w	r6, [r3, #67]	; 0x43
 8015ffc:	f7f9 f8f6 	bl	800f1ec <Argus_Dev_InvalidateRegister>
 8016000:	a90e      	add	r1, sp, #56	; 0x38
 8016002:	f8d5 04f0 	ldr.w	r0, [r5, #1264]	; 0x4f0
 8016006:	f7f2 fa31 	bl	800846c <Argus_Cfg_SetConfigurationSync>
 801600a:	1e04      	subs	r4, r0, #0
 801600c:	db45      	blt.n	801609a <VsubCal_Sequence+0xd6>
 801600e:	f10d 011e 	add.w	r1, sp, #30
 8016012:	f10d 021f 	add.w	r2, sp, #31
 8016016:	4628      	mov	r0, r5
 8016018:	f88d 601e 	strb.w	r6, [sp, #30]
 801601c:	f88d 601f 	strb.w	r6, [sp, #31]
 8016020:	f7fe f856 	bl	80140d0 <Argus_Cal_GetChargePumpVoltage>
 8016024:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8016028:	f899 300f 	ldrb.w	r3, [r9, #15]
 801602c:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8016030:	428b      	cmp	r3, r1
 8016032:	bf3c      	itt	cc
 8016034:	4619      	movcc	r1, r3
 8016036:	f88d 301f 	strbcc.w	r3, [sp, #31]
 801603a:	428a      	cmp	r2, r1
 801603c:	f080 80f2 	bcs.w	8016224 <VsubCal_Sequence+0x260>
 8016040:	2202      	movs	r2, #2
 8016042:	2300      	movs	r3, #0
 8016044:	a80c      	add	r0, sp, #48	; 0x30
 8016046:	9208      	str	r2, [sp, #32]
 8016048:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 801604c:	f7ef fa16 	bl	800547c <Time_GetNow>
 8016050:	aa08      	add	r2, sp, #32
 8016052:	49ba      	ldr	r1, [pc, #744]	; (801633c <VsubCal_Sequence+0x378>)
 8016054:	f8d5 04f4 	ldr.w	r0, [r5, #1268]	; 0x4f4
 8016058:	f7fa f938 	bl	80102cc <Argus_Dev_StartBglMeasurement>
 801605c:	1e04      	subs	r4, r0, #0
 801605e:	db17      	blt.n	8016090 <VsubCal_Sequence+0xcc>
 8016060:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016064:	a80c      	add	r0, sp, #48	; 0x30
 8016066:	f7ef fb4b 	bl	8005700 <Time_CheckTimeoutMSec>
 801606a:	4606      	mov	r6, r0
 801606c:	b950      	cbnz	r0, 8016084 <VsubCal_Sequence+0xc0>
 801606e:	9c08      	ldr	r4, [sp, #32]
 8016070:	2c02      	cmp	r4, #2
 8016072:	d117      	bne.n	80160a4 <VsubCal_Sequence+0xe0>
 8016074:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016078:	a80c      	add	r0, sp, #48	; 0x30
 801607a:	f7ef fb41 	bl	8005700 <Time_CheckTimeoutMSec>
 801607e:	4606      	mov	r6, r0
 8016080:	2800      	cmp	r0, #0
 8016082:	d0f4      	beq.n	801606e <VsubCal_Sequence+0xaa>
 8016084:	f06f 0405 	mvn.w	r4, #5
 8016088:	4621      	mov	r1, r4
 801608a:	48ad      	ldr	r0, [pc, #692]	; (8016340 <VsubCal_Sequence+0x37c>)
 801608c:	f7ea fee0 	bl	8000e50 <print>
 8016090:	f8d5 04f4 	ldr.w	r0, [r5, #1268]	; 0x4f4
 8016094:	21c3      	movs	r1, #195	; 0xc3
 8016096:	f7f8 fc65 	bl	800e964 <Argus_Dev_ClearStatus>
 801609a:	4620      	mov	r0, r4
 801609c:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80160a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160a4:	2c00      	cmp	r4, #0
 80160a6:	dbef      	blt.n	8016088 <VsubCal_Sequence+0xc4>
 80160a8:	f8d5 34f4 	ldr.w	r3, [r5, #1268]	; 0x4f4
 80160ac:	f8b9 2060 	ldrh.w	r2, [r9, #96]	; 0x60
 80160b0:	f8d3 a120 	ldr.w	sl, [r3, #288]	; 0x120
 80160b4:	fa1f f38a 	uxth.w	r3, sl
 80160b8:	429a      	cmp	r2, r3
 80160ba:	f0c0 80ba 	bcc.w	8016232 <VsubCal_Sequence+0x26e>
 80160be:	f89d 401e 	ldrb.w	r4, [sp, #30]
 80160c2:	f8b9 6064 	ldrh.w	r6, [r9, #100]	; 0x64
 80160c6:	2302      	movs	r3, #2
 80160c8:	2200      	movs	r2, #0
 80160ca:	a80c      	add	r0, sp, #48	; 0x30
 80160cc:	9309      	str	r3, [sp, #36]	; 0x24
 80160ce:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
 80160d2:	f7ef f9d3 	bl	800547c <Time_GetNow>
 80160d6:	9600      	str	r6, [sp, #0]
 80160d8:	4623      	mov	r3, r4
 80160da:	aa09      	add	r2, sp, #36	; 0x24
 80160dc:	4997      	ldr	r1, [pc, #604]	; (801633c <VsubCal_Sequence+0x378>)
 80160de:	f8d5 04f4 	ldr.w	r0, [r5, #1268]	; 0x4f4
 80160e2:	f7fa f9c7 	bl	8010474 <Argus_Dev_StartVsubMeasurement>
 80160e6:	1e04      	subs	r4, r0, #0
 80160e8:	da03      	bge.n	80160f2 <VsubCal_Sequence+0x12e>
 80160ea:	e7d6      	b.n	801609a <VsubCal_Sequence+0xd6>
 80160ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80160ee:	2c02      	cmp	r4, #2
 80160f0:	d111      	bne.n	8016116 <VsubCal_Sequence+0x152>
 80160f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80160f6:	a80c      	add	r0, sp, #48	; 0x30
 80160f8:	f7ef fb02 	bl	8005700 <Time_CheckTimeoutMSec>
 80160fc:	2800      	cmp	r0, #0
 80160fe:	d0f5      	beq.n	80160ec <VsubCal_Sequence+0x128>
 8016100:	f06f 0405 	mvn.w	r4, #5
 8016104:	4621      	mov	r1, r4
 8016106:	488f      	ldr	r0, [pc, #572]	; (8016344 <VsubCal_Sequence+0x380>)
 8016108:	f7ea fea2 	bl	8000e50 <print>
 801610c:	4620      	mov	r0, r4
 801610e:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8016112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016116:	2c00      	cmp	r4, #0
 8016118:	dbf4      	blt.n	8016104 <VsubCal_Sequence+0x140>
 801611a:	f8d5 24f4 	ldr.w	r2, [r5, #1268]	; 0x4f4
 801611e:	f89d b01f 	ldrb.w	fp, [sp, #31]
 8016122:	f89d c01e 	ldrb.w	ip, [sp, #30]
 8016126:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
 801612a:	9305      	str	r3, [sp, #20]
 801612c:	45e3      	cmp	fp, ip
 801612e:	f8c2 0124 	str.w	r0, [r2, #292]	; 0x124
 8016132:	f240 80ff 	bls.w	8016334 <VsubCal_Sequence+0x370>
 8016136:	f8df 8204 	ldr.w	r8, [pc, #516]	; 801633c <VsubCal_Sequence+0x378>
 801613a:	4606      	mov	r6, r0
 801613c:	2702      	movs	r7, #2
 801613e:	a80c      	add	r0, sp, #48	; 0x30
 8016140:	970a      	str	r7, [sp, #40]	; 0x28
 8016142:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
 8016146:	f7ef f999 	bl	800547c <Time_GetNow>
 801614a:	2201      	movs	r2, #1
 801614c:	9200      	str	r2, [sp, #0]
 801614e:	465b      	mov	r3, fp
 8016150:	aa0a      	add	r2, sp, #40	; 0x28
 8016152:	4641      	mov	r1, r8
 8016154:	f8d5 04f4 	ldr.w	r0, [r5, #1268]	; 0x4f4
 8016158:	f7fa f98c 	bl	8010474 <Argus_Dev_StartVsubMeasurement>
 801615c:	1e04      	subs	r4, r0, #0
 801615e:	da03      	bge.n	8016168 <VsubCal_Sequence+0x1a4>
 8016160:	e79b      	b.n	801609a <VsubCal_Sequence+0xd6>
 8016162:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016164:	2c02      	cmp	r4, #2
 8016166:	d108      	bne.n	801617a <VsubCal_Sequence+0x1b6>
 8016168:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801616c:	a80c      	add	r0, sp, #48	; 0x30
 801616e:	f7ef fac7 	bl	8005700 <Time_CheckTimeoutMSec>
 8016172:	4602      	mov	r2, r0
 8016174:	2800      	cmp	r0, #0
 8016176:	d0f4      	beq.n	8016162 <VsubCal_Sequence+0x19e>
 8016178:	e7c2      	b.n	8016100 <VsubCal_Sequence+0x13c>
 801617a:	2c00      	cmp	r4, #0
 801617c:	dbc2      	blt.n	8016104 <VsubCal_Sequence+0x140>
 801617e:	f8d5 34f4 	ldr.w	r3, [r5, #1268]	; 0x4f4
 8016182:	f8b5 01c4 	ldrh.w	r0, [r5, #452]	; 0x1c4
 8016186:	f8b3 1124 	ldrh.w	r1, [r3, #292]	; 0x124
 801618a:	f89d b01f 	ldrb.w	fp, [sp, #31]
 801618e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8016192:	4288      	cmp	r0, r1
 8016194:	d253      	bcs.n	801623e <VsubCal_Sequence+0x27a>
 8016196:	f10b 33ff 	add.w	r3, fp, #4294967295
 801619a:	f89d c01e 	ldrb.w	ip, [sp, #30]
 801619e:	fa5f fb83 	uxtb.w	fp, r3
 80161a2:	45e3      	cmp	fp, ip
 80161a4:	f88d b01f 	strb.w	fp, [sp, #31]
 80161a8:	d8c9      	bhi.n	801613e <VsubCal_Sequence+0x17a>
 80161aa:	f101 0008 	add.w	r0, r1, #8
 80161ae:	0900      	lsrs	r0, r0, #4
 80161b0:	9b05      	ldr	r3, [sp, #20]
 80161b2:	fa1f fe83 	uxth.w	lr, r3
 80161b6:	fa1f fa8a 	uxth.w	sl, sl
 80161ba:	46f0      	mov	r8, lr
 80161bc:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 80161c0:	f1bb 0f00 	cmp.w	fp, #0
 80161c4:	d05a      	beq.n	801627c <VsubCal_Sequence+0x2b8>
 80161c6:	ebab 020c 	sub.w	r2, fp, ip
 80161ca:	0412      	lsls	r2, r2, #16
 80161cc:	f000 80af 	beq.w	801632e <VsubCal_Sequence+0x36a>
 80161d0:	eba1 010e 	sub.w	r1, r1, lr
 80161d4:	ea81 77e1 	eor.w	r7, r1, r1, asr #31
 80161d8:	ea82 76e2 	eor.w	r6, r2, r2, asr #31
 80161dc:	eba7 77e1 	sub.w	r7, r7, r1, asr #31
 80161e0:	eba6 76e2 	sub.w	r6, r6, r2, asr #31
 80161e4:	42b7      	cmp	r7, r6
 80161e6:	ea81 0102 	eor.w	r1, r1, r2
 80161ea:	f240 8082 	bls.w	80162f2 <VsubCal_Sequence+0x32e>
 80161ee:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80161f2:	0076      	lsls	r6, r6, #1
 80161f4:	42b7      	cmp	r7, r6
 80161f6:	ea4f 0545 	mov.w	r5, r5, lsl #1
 80161fa:	d8fa      	bhi.n	80161f2 <VsubCal_Sequence+0x22e>
 80161fc:	2d00      	cmp	r5, #0
 80161fe:	d17b      	bne.n	80162f8 <VsubCal_Sequence+0x334>
 8016200:	2900      	cmp	r1, #0
 8016202:	f640 72ff 	movw	r2, #4095	; 0xfff
 8016206:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801620a:	bfb6      	itet	lt
 801620c:	462a      	movlt	r2, r5
 801620e:	255e      	movge	r5, #94	; 0x5e
 8016210:	4629      	movlt	r1, r5
 8016212:	f043 0303 	orr.w	r3, r3, #3
 8016216:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 801621a:	f8a9 103e 	strh.w	r1, [r9, #62]	; 0x3e
 801621e:	f8a9 803c 	strh.w	r8, [r9, #60]	; 0x3c
 8016222:	e042      	b.n	80162aa <VsubCal_Sequence+0x2e6>
 8016224:	4848      	ldr	r0, [pc, #288]	; (8016348 <VsubCal_Sequence+0x384>)
 8016226:	f7ea fe13 	bl	8000e50 <print>
 801622a:	2300      	movs	r3, #0
 801622c:	f88d 301f 	strb.w	r3, [sp, #31]
 8016230:	e706      	b.n	8016040 <VsubCal_Sequence+0x7c>
 8016232:	4846      	ldr	r0, [pc, #280]	; (801634c <VsubCal_Sequence+0x388>)
 8016234:	f7ea fe0c 	bl	8000e50 <print>
 8016238:	f88d 601f 	strb.w	r6, [sp, #31]
 801623c:	e73f      	b.n	80160be <VsubCal_Sequence+0xfa>
 801623e:	2102      	movs	r1, #2
 8016240:	f8b5 4214 	ldrh.w	r4, [r5, #532]	; 0x214
 8016244:	920c      	str	r2, [sp, #48]	; 0x30
 8016246:	a80c      	add	r0, sp, #48	; 0x30
 8016248:	920d      	str	r2, [sp, #52]	; 0x34
 801624a:	910b      	str	r1, [sp, #44]	; 0x2c
 801624c:	f7ef f916 	bl	800547c <Time_GetNow>
 8016250:	9400      	str	r4, [sp, #0]
 8016252:	465b      	mov	r3, fp
 8016254:	aa0b      	add	r2, sp, #44	; 0x2c
 8016256:	4939      	ldr	r1, [pc, #228]	; (801633c <VsubCal_Sequence+0x378>)
 8016258:	f8d5 04f4 	ldr.w	r0, [r5, #1268]	; 0x4f4
 801625c:	f7fa f90a 	bl	8010474 <Argus_Dev_StartVsubMeasurement>
 8016260:	1e04      	subs	r4, r0, #0
 8016262:	da03      	bge.n	801626c <VsubCal_Sequence+0x2a8>
 8016264:	e719      	b.n	801609a <VsubCal_Sequence+0xd6>
 8016266:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016268:	2c02      	cmp	r4, #2
 801626a:	d134      	bne.n	80162d6 <VsubCal_Sequence+0x312>
 801626c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016270:	a80c      	add	r0, sp, #48	; 0x30
 8016272:	f7ef fa45 	bl	8005700 <Time_CheckTimeoutMSec>
 8016276:	2800      	cmp	r0, #0
 8016278:	d0f5      	beq.n	8016266 <VsubCal_Sequence+0x2a2>
 801627a:	e741      	b.n	8016100 <VsubCal_Sequence+0x13c>
 801627c:	f899 1062 	ldrb.w	r1, [r9, #98]	; 0x62
 8016280:	f8b9 203e 	ldrh.w	r2, [r9, #62]	; 0x3e
 8016284:	fb0a f101 	mul.w	r1, sl, r1
 8016288:	3180      	adds	r1, #128	; 0x80
 801628a:	eb08 2611 	add.w	r6, r8, r1, lsr #8
 801628e:	2564      	movs	r5, #100	; 0x64
 8016290:	f002 010f 	and.w	r1, r2, #15
 8016294:	fb05 f501 	mul.w	r5, r5, r1
 8016298:	f043 0301 	orr.w	r3, r3, #1
 801629c:	3508      	adds	r5, #8
 801629e:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 80162a2:	f8a9 603c 	strh.w	r6, [r9, #60]	; 0x3c
 80162a6:	0912      	lsrs	r2, r2, #4
 80162a8:	092d      	lsrs	r5, r5, #4
 80162aa:	f10e 0e08 	add.w	lr, lr, #8
 80162ae:	ea4f 161e 	mov.w	r6, lr, lsr #4
 80162b2:	f10a 0a08 	add.w	sl, sl, #8
 80162b6:	e9cd 0b02 	strd	r0, fp, [sp, #8]
 80162ba:	9600      	str	r6, [sp, #0]
 80162bc:	ea4f 111a 	mov.w	r1, sl, lsr #4
 80162c0:	f8cd c004 	str.w	ip, [sp, #4]
 80162c4:	462b      	mov	r3, r5
 80162c6:	4822      	ldr	r0, [pc, #136]	; (8016350 <VsubCal_Sequence+0x38c>)
 80162c8:	f7ea fdc2 	bl	8000e50 <print>
 80162cc:	4620      	mov	r0, r4
 80162ce:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80162d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162d6:	2c00      	cmp	r4, #0
 80162d8:	f6ff af14 	blt.w	8016104 <VsubCal_Sequence+0x140>
 80162dc:	f8d5 24f4 	ldr.w	r2, [r5, #1268]	; 0x4f4
 80162e0:	f89d c01e 	ldrb.w	ip, [sp, #30]
 80162e4:	f8b2 1124 	ldrh.w	r1, [r2, #292]	; 0x124
 80162e8:	f89d b01f 	ldrb.w	fp, [sp, #31]
 80162ec:	f8c2 0124 	str.w	r0, [r2, #292]	; 0x124
 80162f0:	e75b      	b.n	80161aa <VsubCal_Sequence+0x1e6>
 80162f2:	b30f      	cbz	r7, 8016338 <VsubCal_Sequence+0x374>
 80162f4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80162f8:	2200      	movs	r2, #0
 80162fa:	e000      	b.n	80162fe <VsubCal_Sequence+0x33a>
 80162fc:	b157      	cbz	r7, 8016314 <VsubCal_Sequence+0x350>
 80162fe:	42be      	cmp	r6, r7
 8016300:	bf9c      	itt	ls
 8016302:	1bbf      	subls	r7, r7, r6
 8016304:	432a      	orrls	r2, r5
 8016306:	086d      	lsrs	r5, r5, #1
 8016308:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801630c:	d1f6      	bne.n	80162fc <VsubCal_Sequence+0x338>
 801630e:	42be      	cmp	r6, r7
 8016310:	bf98      	it	ls
 8016312:	3201      	addls	r2, #1
 8016314:	2900      	cmp	r1, #0
 8016316:	bfb8      	it	lt
 8016318:	4252      	neglt	r2, r2
 801631a:	b291      	uxth	r1, r2
 801631c:	f001 020f 	and.w	r2, r1, #15
 8016320:	2564      	movs	r5, #100	; 0x64
 8016322:	fb05 f502 	mul.w	r5, r5, r2
 8016326:	3508      	adds	r5, #8
 8016328:	092d      	lsrs	r5, r5, #4
 801632a:	090a      	lsrs	r2, r1, #4
 801632c:	e771      	b.n	8016212 <VsubCal_Sequence+0x24e>
 801632e:	4615      	mov	r5, r2
 8016330:	4611      	mov	r1, r2
 8016332:	e76e      	b.n	8016212 <VsubCal_Sequence+0x24e>
 8016334:	4601      	mov	r1, r0
 8016336:	e73b      	b.n	80161b0 <VsubCal_Sequence+0x1ec>
 8016338:	463a      	mov	r2, r7
 801633a:	e7eb      	b.n	8016314 <VsubCal_Sequence+0x350>
 801633c:	08015ead 	.word	0x08015ead
 8016340:	0801c750 	.word	0x0801c750
 8016344:	0801c884 	.word	0x0801c884
 8016348:	0801c6ac 	.word	0x0801c6ac
 801634c:	0801c79c 	.word	0x0801c79c
 8016350:	0801c8d0 	.word	0x0801c8d0

08016354 <Argus_Cal_ExecuteVsubCalibrationSequence>:
 8016354:	b510      	push	{r4, lr}
 8016356:	4604      	mov	r4, r0
 8016358:	b082      	sub	sp, #8
 801635a:	f8d0 04f4 	ldr.w	r0, [r0, #1268]	; 0x4f4
 801635e:	f7f8 fe57 	bl	800f010 <Argus_Dev_HasUpdateFlag>
 8016362:	b9a0      	cbnz	r0, 801638e <Argus_Cal_ExecuteVsubCalibrationSequence+0x3a>
 8016364:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 8016368:	f8d4 04f4 	ldr.w	r0, [r4, #1268]	; 0x4f4
 801636c:	685a      	ldr	r2, [r3, #4]
 801636e:	0a52      	lsrs	r2, r2, #9
 8016370:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8016374:	21c3      	movs	r1, #195	; 0xc3
 8016376:	f7f8 fa9b 	bl	800e8b0 <Argus_Dev_SetStatusSync>
 801637a:	b970      	cbnz	r0, 801639a <Argus_Cal_ExecuteVsubCalibrationSequence+0x46>
 801637c:	9000      	str	r0, [sp, #0]
 801637e:	4601      	mov	r1, r0
 8016380:	4b09      	ldr	r3, [pc, #36]	; (80163a8 <Argus_Cal_ExecuteVsubCalibrationSequence+0x54>)
 8016382:	4a0a      	ldr	r2, [pc, #40]	; (80163ac <Argus_Cal_ExecuteVsubCalibrationSequence+0x58>)
 8016384:	4620      	mov	r0, r4
 8016386:	f7ff fd93 	bl	8015eb0 <RunSequence.part.6>
 801638a:	b002      	add	sp, #8
 801638c:	bd10      	pop	{r4, pc}
 801638e:	4808      	ldr	r0, [pc, #32]	; (80163b0 <Argus_Cal_ExecuteVsubCalibrationSequence+0x5c>)
 8016390:	f7ea fd5e 	bl	8000e50 <print>
 8016394:	20c1      	movs	r0, #193	; 0xc1
 8016396:	b002      	add	sp, #8
 8016398:	bd10      	pop	{r4, pc}
 801639a:	4903      	ldr	r1, [pc, #12]	; (80163a8 <Argus_Cal_ExecuteVsubCalibrationSequence+0x54>)
 801639c:	4805      	ldr	r0, [pc, #20]	; (80163b4 <Argus_Cal_ExecuteVsubCalibrationSequence+0x60>)
 801639e:	f7ea fd57 	bl	8000e50 <print>
 80163a2:	2002      	movs	r0, #2
 80163a4:	b002      	add	sp, #8
 80163a6:	bd10      	pop	{r4, pc}
 80163a8:	0801c4e8 	.word	0x0801c4e8
 80163ac:	08015fc5 	.word	0x08015fc5
 80163b0:	0801c458 	.word	0x0801c458
 80163b4:	0801c508 	.word	0x0801c508

080163b8 <ADS_SPI_Callback>:
 80163b8:	69cb      	ldr	r3, [r1, #28]
 80163ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163be:	460c      	mov	r4, r1
 80163c0:	4605      	mov	r5, r0
 80163c2:	b18b      	cbz	r3, 80163e8 <ADS_SPI_Callback+0x30>
 80163c4:	698a      	ldr	r2, [r1, #24]
 80163c6:	1e51      	subs	r1, r2, #1
 80163c8:	61a1      	str	r1, [r4, #24]
 80163ca:	b152      	cbz	r2, 80163e2 <ADS_SPI_Callback+0x2a>
 80163cc:	781a      	ldrb	r2, [r3, #0]
 80163ce:	43d2      	mvns	r2, r2
 80163d0:	701a      	strb	r2, [r3, #0]
 80163d2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80163d6:	3301      	adds	r3, #1
 80163d8:	1e51      	subs	r1, r2, #1
 80163da:	e9c4 1306 	strd	r1, r3, [r4, #24]
 80163de:	2a00      	cmp	r2, #0
 80163e0:	d1f4      	bne.n	80163cc <ADS_SPI_Callback+0x14>
 80163e2:	2300      	movs	r3, #0
 80163e4:	e9c4 3306 	strd	r3, r3, [r4, #24]
 80163e8:	f7ea f91a 	bl	8000620 <IRQ_LOCK>
 80163ec:	6823      	ldr	r3, [r4, #0]
 80163ee:	2b02      	cmp	r3, #2
 80163f0:	d013      	beq.n	801641a <ADS_SPI_Callback+0x62>
 80163f2:	6823      	ldr	r3, [r4, #0]
 80163f4:	2b64      	cmp	r3, #100	; 0x64
 80163f6:	bf04      	itt	eq
 80163f8:	2367      	moveq	r3, #103	; 0x67
 80163fa:	6023      	streq	r3, [r4, #0]
 80163fc:	6a26      	ldr	r6, [r4, #32]
 80163fe:	2700      	movs	r7, #0
 8016400:	6227      	str	r7, [r4, #32]
 8016402:	f7ea f8eb 	bl	80005dc <IRQ_UNLOCK>
 8016406:	b12e      	cbz	r6, 8016414 <ADS_SPI_Callback+0x5c>
 8016408:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801640a:	4638      	mov	r0, r7
 801640c:	4633      	mov	r3, r6
 801640e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016412:	4718      	bx	r3
 8016414:	4628      	mov	r0, r5
 8016416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801641a:	2300      	movs	r3, #0
 801641c:	6023      	str	r3, [r4, #0]
 801641e:	e7ed      	b.n	80163fc <ADS_SPI_Callback+0x44>

08016420 <ADS_IRQ_Callback>:
 8016420:	b570      	push	{r4, r5, r6, lr}
 8016422:	4604      	mov	r4, r0
 8016424:	f7ea f8fc 	bl	8000620 <IRQ_LOCK>
 8016428:	6823      	ldr	r3, [r4, #0]
 801642a:	2b67      	cmp	r3, #103	; 0x67
 801642c:	d003      	beq.n	8016436 <ADS_IRQ_Callback+0x16>
 801642e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016432:	f7ea b8d3 	b.w	80005dc <IRQ_UNLOCK>
 8016436:	2500      	movs	r5, #0
 8016438:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801643a:	6025      	str	r5, [r4, #0]
 801643c:	6065      	str	r5, [r4, #4]
 801643e:	6265      	str	r5, [r4, #36]	; 0x24
 8016440:	f7ea f8cc 	bl	80005dc <IRQ_UNLOCK>
 8016444:	b12e      	cbz	r6, 8016452 <ADS_IRQ_Callback+0x32>
 8016446:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016448:	4628      	mov	r0, r5
 801644a:	4633      	mov	r3, r6
 801644c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016450:	4718      	bx	r3
 8016452:	bd70      	pop	{r4, r5, r6, pc}

08016454 <ADS_Abort>:
 8016454:	b538      	push	{r3, r4, r5, lr}
 8016456:	f06f 0301 	mvn.w	r3, #1
 801645a:	6003      	str	r3, [r0, #0]
 801645c:	4604      	mov	r4, r0
 801645e:	f7ea fb27 	bl	8000ab0 <S2PI_Abort>
 8016462:	1e05      	subs	r5, r0, #0
 8016464:	db1c      	blt.n	80164a0 <ADS_Abort+0x4c>
 8016466:	6920      	ldr	r0, [r4, #16]
 8016468:	f7ea fa32 	bl	80008d0 <S2PI_CycleCsPin>
 801646c:	1e05      	subs	r5, r0, #0
 801646e:	db24      	blt.n	80164ba <ADS_Abort+0x66>
 8016470:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016472:	2300      	movs	r3, #0
 8016474:	6063      	str	r3, [r4, #4]
 8016476:	6263      	str	r3, [r4, #36]	; 0x24
 8016478:	b11a      	cbz	r2, 8016482 <ADS_Abort+0x2e>
 801647a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801647c:	f06f 0001 	mvn.w	r0, #1
 8016480:	4790      	blx	r2
 8016482:	6a23      	ldr	r3, [r4, #32]
 8016484:	2200      	movs	r2, #0
 8016486:	6222      	str	r2, [r4, #32]
 8016488:	b11b      	cbz	r3, 8016492 <ADS_Abort+0x3e>
 801648a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801648c:	f06f 0001 	mvn.w	r0, #1
 8016490:	4798      	blx	r3
 8016492:	6823      	ldr	r3, [r4, #0]
 8016494:	3302      	adds	r3, #2
 8016496:	bf04      	itt	eq
 8016498:	2300      	moveq	r3, #0
 801649a:	6023      	streq	r3, [r4, #0]
 801649c:	6820      	ldr	r0, [r4, #0]
 801649e:	bd38      	pop	{r3, r4, r5, pc}
 80164a0:	4629      	mov	r1, r5
 80164a2:	480a      	ldr	r0, [pc, #40]	; (80164cc <ADS_Abort+0x78>)
 80164a4:	f7ea fcd4 	bl	8000e50 <print>
 80164a8:	6823      	ldr	r3, [r4, #0]
 80164aa:	6920      	ldr	r0, [r4, #16]
 80164ac:	3302      	adds	r3, #2
 80164ae:	bf08      	it	eq
 80164b0:	6025      	streq	r5, [r4, #0]
 80164b2:	f7ea fa0d 	bl	80008d0 <S2PI_CycleCsPin>
 80164b6:	1e05      	subs	r5, r0, #0
 80164b8:	dada      	bge.n	8016470 <ADS_Abort+0x1c>
 80164ba:	4629      	mov	r1, r5
 80164bc:	4804      	ldr	r0, [pc, #16]	; (80164d0 <ADS_Abort+0x7c>)
 80164be:	f7ea fcc7 	bl	8000e50 <print>
 80164c2:	6823      	ldr	r3, [r4, #0]
 80164c4:	3302      	adds	r3, #2
 80164c6:	bf08      	it	eq
 80164c8:	6025      	streq	r5, [r4, #0]
 80164ca:	e7d1      	b.n	8016470 <ADS_Abort+0x1c>
 80164cc:	0801c974 	.word	0x0801c974
 80164d0:	0801c9b0 	.word	0x0801c9b0

080164d4 <ADS_Init>:
 80164d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164d6:	4604      	mov	r4, r0
 80164d8:	2303      	movs	r3, #3
 80164da:	6101      	str	r1, [r0, #16]
 80164dc:	b08b      	sub	sp, #44	; 0x2c
 80164de:	4608      	mov	r0, r1
 80164e0:	6023      	str	r3, [r4, #0]
 80164e2:	4622      	mov	r2, r4
 80164e4:	4905      	ldr	r1, [pc, #20]	; (80164fc <ADS_Init+0x28>)
 80164e6:	f7ea fb09 	bl	8000afc <S2PI_SetIrqCallback>
 80164ea:	4605      	mov	r5, r0
 80164ec:	b140      	cbz	r0, 8016500 <ADS_Init+0x2c>
 80164ee:	f06f 0306 	mvn.w	r3, #6
 80164f2:	4628      	mov	r0, r5
 80164f4:	6023      	str	r3, [r4, #0]
 80164f6:	b00b      	add	sp, #44	; 0x2c
 80164f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164fa:	bf00      	nop
 80164fc:	08016421 	.word	0x08016421
 8016500:	6020      	str	r0, [r4, #0]
 8016502:	7520      	strb	r0, [r4, #20]
 8016504:	4bc6      	ldr	r3, [pc, #792]	; (8016820 <ADS_Init+0x34c>)
 8016506:	48c7      	ldr	r0, [pc, #796]	; (8016824 <ADS_Init+0x350>)
 8016508:	49c7      	ldr	r1, [pc, #796]	; (8016828 <ADS_Init+0x354>)
 801650a:	4ac8      	ldr	r2, [pc, #800]	; (801682c <ADS_Init+0x358>)
 801650c:	9304      	str	r3, [sp, #16]
 801650e:	2310      	movs	r3, #16
 8016510:	e9cd 0105 	strd	r0, r1, [sp, #20]
 8016514:	9207      	str	r2, [sp, #28]
 8016516:	f88d 3020 	strb.w	r3, [sp, #32]
 801651a:	f7ea f881 	bl	8000620 <IRQ_LOCK>
 801651e:	6825      	ldr	r5, [r4, #0]
 8016520:	2d00      	cmp	r5, #0
 8016522:	f040 81b0 	bne.w	8016886 <ADS_Init+0x3b2>
 8016526:	2302      	movs	r3, #2
 8016528:	6023      	str	r3, [r4, #0]
 801652a:	f7ea f857 	bl	80005dc <IRQ_UNLOCK>
 801652e:	7d23      	ldrb	r3, [r4, #20]
 8016530:	62a5      	str	r5, [r4, #40]	; 0x28
 8016532:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8016536:	2b00      	cmp	r3, #0
 8016538:	f040 8195 	bne.w	8016866 <ADS_Init+0x392>
 801653c:	4bbc      	ldr	r3, [pc, #752]	; (8016830 <ADS_Init+0x35c>)
 801653e:	e9cd 3400 	strd	r3, r4, [sp]
 8016542:	2200      	movs	r2, #0
 8016544:	2311      	movs	r3, #17
 8016546:	a904      	add	r1, sp, #16
 8016548:	6920      	ldr	r0, [r4, #16]
 801654a:	f7ea f9f3 	bl	8000934 <S2PI_TransferFrame>
 801654e:	1e05      	subs	r5, r0, #0
 8016550:	f2c0 819f 	blt.w	8016892 <ADS_Init+0x3be>
 8016554:	2300      	movs	r3, #0
 8016556:	a802      	add	r0, sp, #8
 8016558:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801655c:	f7ee ff8e 	bl	800547c <Time_GetNow>
 8016560:	6923      	ldr	r3, [r4, #16]
 8016562:	2b00      	cmp	r3, #0
 8016564:	f000 821e 	beq.w	80169a4 <ADS_Init+0x4d0>
 8016568:	6823      	ldr	r3, [r4, #0]
 801656a:	2b00      	cmp	r3, #0
 801656c:	f000 8177 	beq.w	801685e <ADS_Init+0x38a>
 8016570:	6823      	ldr	r3, [r4, #0]
 8016572:	2b67      	cmp	r3, #103	; 0x67
 8016574:	f000 815e 	beq.w	8016834 <ADS_Init+0x360>
 8016578:	6823      	ldr	r3, [r4, #0]
 801657a:	2b64      	cmp	r3, #100	; 0x64
 801657c:	f000 815a 	beq.w	8016834 <ADS_Init+0x360>
 8016580:	6825      	ldr	r5, [r4, #0]
 8016582:	2164      	movs	r1, #100	; 0x64
 8016584:	a802      	add	r0, sp, #8
 8016586:	f7ef f8bb 	bl	8005700 <Time_CheckTimeoutMSec>
 801658a:	2800      	cmp	r0, #0
 801658c:	f040 8159 	bne.w	8016842 <ADS_Init+0x36e>
 8016590:	2d02      	cmp	r5, #2
 8016592:	d0e5      	beq.n	8016560 <ADS_Init+0x8c>
 8016594:	2d00      	cmp	r5, #0
 8016596:	f2c0 815d 	blt.w	8016854 <ADS_Init+0x380>
 801659a:	2200      	movs	r2, #0
 801659c:	2300      	movs	r3, #0
 801659e:	2104      	movs	r1, #4
 80165a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80165a4:	f88d 0020 	strb.w	r0, [sp, #32]
 80165a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80165ac:	f88d 1010 	strb.w	r1, [sp, #16]
 80165b0:	f7ea f836 	bl	8000620 <IRQ_LOCK>
 80165b4:	6825      	ldr	r5, [r4, #0]
 80165b6:	2d00      	cmp	r5, #0
 80165b8:	f040 81ed 	bne.w	8016996 <ADS_Init+0x4c2>
 80165bc:	2302      	movs	r3, #2
 80165be:	6023      	str	r3, [r4, #0]
 80165c0:	f7ea f80c 	bl	80005dc <IRQ_UNLOCK>
 80165c4:	7d23      	ldrb	r3, [r4, #20]
 80165c6:	62a5      	str	r5, [r4, #40]	; 0x28
 80165c8:	e9c4 5508 	strd	r5, r5, [r4, #32]
 80165cc:	aa04      	add	r2, sp, #16
 80165ce:	b113      	cbz	r3, 80165d6 <ADS_Init+0x102>
 80165d0:	2311      	movs	r3, #17
 80165d2:	e9c4 3206 	strd	r3, r2, [r4, #24]
 80165d6:	4b96      	ldr	r3, [pc, #600]	; (8016830 <ADS_Init+0x35c>)
 80165d8:	e9cd 3400 	strd	r3, r4, [sp]
 80165dc:	4611      	mov	r1, r2
 80165de:	2311      	movs	r3, #17
 80165e0:	6920      	ldr	r0, [r4, #16]
 80165e2:	f7ea f9a7 	bl	8000934 <S2PI_TransferFrame>
 80165e6:	1e05      	subs	r5, r0, #0
 80165e8:	f2c0 81e6 	blt.w	80169b8 <ADS_Init+0x4e4>
 80165ec:	2300      	movs	r3, #0
 80165ee:	a802      	add	r0, sp, #8
 80165f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80165f4:	f7ee ff42 	bl	800547c <Time_GetNow>
 80165f8:	6923      	ldr	r3, [r4, #16]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	f000 81d2 	beq.w	80169a4 <ADS_Init+0x4d0>
 8016600:	6823      	ldr	r3, [r4, #0]
 8016602:	2b00      	cmp	r3, #0
 8016604:	f000 813b 	beq.w	801687e <ADS_Init+0x3aa>
 8016608:	6823      	ldr	r3, [r4, #0]
 801660a:	2b67      	cmp	r3, #103	; 0x67
 801660c:	f000 812f 	beq.w	801686e <ADS_Init+0x39a>
 8016610:	6823      	ldr	r3, [r4, #0]
 8016612:	2b64      	cmp	r3, #100	; 0x64
 8016614:	f000 812b 	beq.w	801686e <ADS_Init+0x39a>
 8016618:	6825      	ldr	r5, [r4, #0]
 801661a:	2164      	movs	r1, #100	; 0x64
 801661c:	a802      	add	r0, sp, #8
 801661e:	f7ef f86f 	bl	8005700 <Time_CheckTimeoutMSec>
 8016622:	2800      	cmp	r0, #0
 8016624:	f040 810d 	bne.w	8016842 <ADS_Init+0x36e>
 8016628:	2d02      	cmp	r5, #2
 801662a:	d0e5      	beq.n	80165f8 <ADS_Init+0x124>
 801662c:	2d00      	cmp	r5, #0
 801662e:	f2c0 8111 	blt.w	8016854 <ADS_Init+0x380>
 8016632:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8016636:	2bfe      	cmp	r3, #254	; 0xfe
 8016638:	bf0c      	ite	eq
 801663a:	2201      	moveq	r2, #1
 801663c:	2200      	movne	r2, #0
 801663e:	7522      	strb	r2, [r4, #20]
 8016640:	f000 8166 	beq.w	8016910 <ADS_Init+0x43c>
 8016644:	2b01      	cmp	r3, #1
 8016646:	f040 81a0 	bne.w	801698a <ADS_Init+0x4b6>
 801664a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 801664e:	2b02      	cmp	r3, #2
 8016650:	f040 819b 	bne.w	801698a <ADS_Init+0x4b6>
 8016654:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8016658:	2b03      	cmp	r3, #3
 801665a:	f040 8196 	bne.w	801698a <ADS_Init+0x4b6>
 801665e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016662:	2b04      	cmp	r3, #4
 8016664:	f040 8191 	bne.w	801698a <ADS_Init+0x4b6>
 8016668:	f89d 3015 	ldrb.w	r3, [sp, #21]
 801666c:	2b05      	cmp	r3, #5
 801666e:	f040 818c 	bne.w	801698a <ADS_Init+0x4b6>
 8016672:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8016676:	2b06      	cmp	r3, #6
 8016678:	f040 8187 	bne.w	801698a <ADS_Init+0x4b6>
 801667c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8016680:	2b07      	cmp	r3, #7
 8016682:	f040 8182 	bne.w	801698a <ADS_Init+0x4b6>
 8016686:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801668a:	2b08      	cmp	r3, #8
 801668c:	f040 817d 	bne.w	801698a <ADS_Init+0x4b6>
 8016690:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016694:	2b09      	cmp	r3, #9
 8016696:	f040 8178 	bne.w	801698a <ADS_Init+0x4b6>
 801669a:	f89d 301a 	ldrb.w	r3, [sp, #26]
 801669e:	2b0a      	cmp	r3, #10
 80166a0:	f040 8173 	bne.w	801698a <ADS_Init+0x4b6>
 80166a4:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80166a8:	2b0b      	cmp	r3, #11
 80166aa:	f040 816e 	bne.w	801698a <ADS_Init+0x4b6>
 80166ae:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80166b2:	2b0c      	cmp	r3, #12
 80166b4:	f040 8169 	bne.w	801698a <ADS_Init+0x4b6>
 80166b8:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80166bc:	2b0d      	cmp	r3, #13
 80166be:	f040 8164 	bne.w	801698a <ADS_Init+0x4b6>
 80166c2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80166c6:	2b0e      	cmp	r3, #14
 80166c8:	f040 815f 	bne.w	801698a <ADS_Init+0x4b6>
 80166cc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80166d0:	2b0f      	cmp	r3, #15
 80166d2:	f040 815a 	bne.w	801698a <ADS_Init+0x4b6>
 80166d6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80166da:	2b10      	cmp	r3, #16
 80166dc:	f040 8155 	bne.w	801698a <ADS_Init+0x4b6>
 80166e0:	2200      	movs	r2, #0
 80166e2:	2300      	movs	r3, #0
 80166e4:	2000      	movs	r0, #0
 80166e6:	2104      	movs	r1, #4
 80166e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80166ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80166f0:	f88d 0020 	strb.w	r0, [sp, #32]
 80166f4:	f88d 1010 	strb.w	r1, [sp, #16]
 80166f8:	f7e9 ff92 	bl	8000620 <IRQ_LOCK>
 80166fc:	6825      	ldr	r5, [r4, #0]
 80166fe:	2d00      	cmp	r5, #0
 8016700:	f040 818b 	bne.w	8016a1a <ADS_Init+0x546>
 8016704:	2302      	movs	r3, #2
 8016706:	6023      	str	r3, [r4, #0]
 8016708:	f7e9 ff68 	bl	80005dc <IRQ_UNLOCK>
 801670c:	7d23      	ldrb	r3, [r4, #20]
 801670e:	62a5      	str	r5, [r4, #40]	; 0x28
 8016710:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8016714:	aa04      	add	r2, sp, #16
 8016716:	b113      	cbz	r3, 801671e <ADS_Init+0x24a>
 8016718:	2311      	movs	r3, #17
 801671a:	e9c4 3206 	strd	r3, r2, [r4, #24]
 801671e:	4b44      	ldr	r3, [pc, #272]	; (8016830 <ADS_Init+0x35c>)
 8016720:	e9cd 3400 	strd	r3, r4, [sp]
 8016724:	4611      	mov	r1, r2
 8016726:	2311      	movs	r3, #17
 8016728:	6920      	ldr	r0, [r4, #16]
 801672a:	f7ea f903 	bl	8000934 <S2PI_TransferFrame>
 801672e:	1e05      	subs	r5, r0, #0
 8016730:	f2c0 8183 	blt.w	8016a3a <ADS_Init+0x566>
 8016734:	2300      	movs	r3, #0
 8016736:	a802      	add	r0, sp, #8
 8016738:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801673c:	f7ee fe9e 	bl	800547c <Time_GetNow>
 8016740:	6923      	ldr	r3, [r4, #16]
 8016742:	2b00      	cmp	r3, #0
 8016744:	f000 812e 	beq.w	80169a4 <ADS_Init+0x4d0>
 8016748:	6823      	ldr	r3, [r4, #0]
 801674a:	2b00      	cmp	r3, #0
 801674c:	f000 80dc 	beq.w	8016908 <ADS_Init+0x434>
 8016750:	6823      	ldr	r3, [r4, #0]
 8016752:	2b67      	cmp	r3, #103	; 0x67
 8016754:	f000 80d0 	beq.w	80168f8 <ADS_Init+0x424>
 8016758:	6823      	ldr	r3, [r4, #0]
 801675a:	2b64      	cmp	r3, #100	; 0x64
 801675c:	f000 80cc 	beq.w	80168f8 <ADS_Init+0x424>
 8016760:	6825      	ldr	r5, [r4, #0]
 8016762:	2164      	movs	r1, #100	; 0x64
 8016764:	a802      	add	r0, sp, #8
 8016766:	f7ee ffcb 	bl	8005700 <Time_CheckTimeoutMSec>
 801676a:	2800      	cmp	r0, #0
 801676c:	d169      	bne.n	8016842 <ADS_Init+0x36e>
 801676e:	2d02      	cmp	r5, #2
 8016770:	d0e6      	beq.n	8016740 <ADS_Init+0x26c>
 8016772:	2d00      	cmp	r5, #0
 8016774:	db6e      	blt.n	8016854 <ADS_Init+0x380>
 8016776:	f89d 3011 	ldrb.w	r3, [sp, #17]
 801677a:	2b00      	cmp	r3, #0
 801677c:	f040 8154 	bne.w	8016a28 <ADS_Init+0x554>
 8016780:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8016784:	2b00      	cmp	r3, #0
 8016786:	f040 814f 	bne.w	8016a28 <ADS_Init+0x554>
 801678a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 801678e:	2b00      	cmp	r3, #0
 8016790:	f040 814a 	bne.w	8016a28 <ADS_Init+0x554>
 8016794:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016798:	2b00      	cmp	r3, #0
 801679a:	f040 8145 	bne.w	8016a28 <ADS_Init+0x554>
 801679e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	f040 8140 	bne.w	8016a28 <ADS_Init+0x554>
 80167a8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	f040 813b 	bne.w	8016a28 <ADS_Init+0x554>
 80167b2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	f040 8136 	bne.w	8016a28 <ADS_Init+0x554>
 80167bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	f040 8131 	bne.w	8016a28 <ADS_Init+0x554>
 80167c6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	f040 812c 	bne.w	8016a28 <ADS_Init+0x554>
 80167d0:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	f040 8127 	bne.w	8016a28 <ADS_Init+0x554>
 80167da:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	f040 8122 	bne.w	8016a28 <ADS_Init+0x554>
 80167e4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	f040 811d 	bne.w	8016a28 <ADS_Init+0x554>
 80167ee:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	f040 8118 	bne.w	8016a28 <ADS_Init+0x554>
 80167f8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	f040 8113 	bne.w	8016a28 <ADS_Init+0x554>
 8016802:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016806:	2b00      	cmp	r3, #0
 8016808:	f040 810e 	bne.w	8016a28 <ADS_Init+0x554>
 801680c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8016810:	2b00      	cmp	r3, #0
 8016812:	f040 8109 	bne.w	8016a28 <ADS_Init+0x554>
 8016816:	6825      	ldr	r5, [r4, #0]
 8016818:	4628      	mov	r0, r5
 801681a:	b00b      	add	sp, #44	; 0x2c
 801681c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801681e:	bf00      	nop
 8016820:	03020104 	.word	0x03020104
 8016824:	07060504 	.word	0x07060504
 8016828:	0b0a0908 	.word	0x0b0a0908
 801682c:	0f0e0d0c 	.word	0x0f0e0d0c
 8016830:	080163b9 	.word	0x080163b9
 8016834:	2164      	movs	r1, #100	; 0x64
 8016836:	a802      	add	r0, sp, #8
 8016838:	f7ee ff62 	bl	8005700 <Time_CheckTimeoutMSec>
 801683c:	2800      	cmp	r0, #0
 801683e:	f43f ae8f 	beq.w	8016560 <ADS_Init+0x8c>
 8016842:	2164      	movs	r1, #100	; 0x64
 8016844:	4897      	ldr	r0, [pc, #604]	; (8016aa4 <ADS_Init+0x5d0>)
 8016846:	f7ea fb03 	bl	8000e50 <print>
 801684a:	4620      	mov	r0, r4
 801684c:	f7ff fe02 	bl	8016454 <ADS_Abort>
 8016850:	f06f 0505 	mvn.w	r5, #5
 8016854:	4629      	mov	r1, r5
 8016856:	4894      	ldr	r0, [pc, #592]	; (8016aa8 <ADS_Init+0x5d4>)
 8016858:	f7ea fafa 	bl	8000e50 <print>
 801685c:	e647      	b.n	80164ee <ADS_Init+0x1a>
 801685e:	f7e9 ff0f 	bl	8000680 <S2PI_GetStatus>
 8016862:	4605      	mov	r5, r0
 8016864:	e68d      	b.n	8016582 <ADS_Init+0xae>
 8016866:	2311      	movs	r3, #17
 8016868:	e9c4 3506 	strd	r3, r5, [r4, #24]
 801686c:	e666      	b.n	801653c <ADS_Init+0x68>
 801686e:	2164      	movs	r1, #100	; 0x64
 8016870:	a802      	add	r0, sp, #8
 8016872:	f7ee ff45 	bl	8005700 <Time_CheckTimeoutMSec>
 8016876:	2800      	cmp	r0, #0
 8016878:	f43f aebe 	beq.w	80165f8 <ADS_Init+0x124>
 801687c:	e7e1      	b.n	8016842 <ADS_Init+0x36e>
 801687e:	f7e9 feff 	bl	8000680 <S2PI_GetStatus>
 8016882:	4605      	mov	r5, r0
 8016884:	e6c9      	b.n	801661a <ADS_Init+0x146>
 8016886:	f7e9 fea9 	bl	80005dc <IRQ_UNLOCK>
 801688a:	6825      	ldr	r5, [r4, #0]
 801688c:	2d00      	cmp	r5, #0
 801688e:	dbe1      	blt.n	8016854 <ADS_Init+0x380>
 8016890:	e660      	b.n	8016554 <ADS_Init+0x80>
 8016892:	462a      	mov	r2, r5
 8016894:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8016898:	4884      	ldr	r0, [pc, #528]	; (8016aac <ADS_Init+0x5d8>)
 801689a:	f7ea fad9 	bl	8000e50 <print>
 801689e:	69e3      	ldr	r3, [r4, #28]
 80168a0:	b18b      	cbz	r3, 80168c6 <ADS_Init+0x3f2>
 80168a2:	69a2      	ldr	r2, [r4, #24]
 80168a4:	1e51      	subs	r1, r2, #1
 80168a6:	61a1      	str	r1, [r4, #24]
 80168a8:	b152      	cbz	r2, 80168c0 <ADS_Init+0x3ec>
 80168aa:	781a      	ldrb	r2, [r3, #0]
 80168ac:	43d2      	mvns	r2, r2
 80168ae:	701a      	strb	r2, [r3, #0]
 80168b0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80168b4:	3301      	adds	r3, #1
 80168b6:	1e51      	subs	r1, r2, #1
 80168b8:	e9c4 1306 	strd	r1, r3, [r4, #24]
 80168bc:	2a00      	cmp	r2, #0
 80168be:	d1f4      	bne.n	80168aa <ADS_Init+0x3d6>
 80168c0:	2300      	movs	r3, #0
 80168c2:	e9c4 3306 	strd	r3, r3, [r4, #24]
 80168c6:	f7e9 feab 	bl	8000620 <IRQ_LOCK>
 80168ca:	6823      	ldr	r3, [r4, #0]
 80168cc:	2b02      	cmp	r3, #2
 80168ce:	d010      	beq.n	80168f2 <ADS_Init+0x41e>
 80168d0:	6823      	ldr	r3, [r4, #0]
 80168d2:	2b64      	cmp	r3, #100	; 0x64
 80168d4:	bf04      	itt	eq
 80168d6:	2367      	moveq	r3, #103	; 0x67
 80168d8:	6023      	streq	r3, [r4, #0]
 80168da:	6a26      	ldr	r6, [r4, #32]
 80168dc:	2700      	movs	r7, #0
 80168de:	6227      	str	r7, [r4, #32]
 80168e0:	f7e9 fe7c 	bl	80005dc <IRQ_UNLOCK>
 80168e4:	2e00      	cmp	r6, #0
 80168e6:	d0b5      	beq.n	8016854 <ADS_Init+0x380>
 80168e8:	4638      	mov	r0, r7
 80168ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80168ec:	47b0      	blx	r6
 80168ee:	4605      	mov	r5, r0
 80168f0:	e7cc      	b.n	801688c <ADS_Init+0x3b8>
 80168f2:	2300      	movs	r3, #0
 80168f4:	6023      	str	r3, [r4, #0]
 80168f6:	e7f0      	b.n	80168da <ADS_Init+0x406>
 80168f8:	2164      	movs	r1, #100	; 0x64
 80168fa:	a802      	add	r0, sp, #8
 80168fc:	f7ee ff00 	bl	8005700 <Time_CheckTimeoutMSec>
 8016900:	2800      	cmp	r0, #0
 8016902:	f43f af1d 	beq.w	8016740 <ADS_Init+0x26c>
 8016906:	e79c      	b.n	8016842 <ADS_Init+0x36e>
 8016908:	f7e9 feba 	bl	8000680 <S2PI_GetStatus>
 801690c:	4605      	mov	r5, r0
 801690e:	e728      	b.n	8016762 <ADS_Init+0x28e>
 8016910:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8016914:	2bfd      	cmp	r3, #253	; 0xfd
 8016916:	d138      	bne.n	801698a <ADS_Init+0x4b6>
 8016918:	f89d 3013 	ldrb.w	r3, [sp, #19]
 801691c:	2bfc      	cmp	r3, #252	; 0xfc
 801691e:	d134      	bne.n	801698a <ADS_Init+0x4b6>
 8016920:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016924:	2bfb      	cmp	r3, #251	; 0xfb
 8016926:	d130      	bne.n	801698a <ADS_Init+0x4b6>
 8016928:	f89d 3015 	ldrb.w	r3, [sp, #21]
 801692c:	2bfa      	cmp	r3, #250	; 0xfa
 801692e:	d12c      	bne.n	801698a <ADS_Init+0x4b6>
 8016930:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8016934:	2bf9      	cmp	r3, #249	; 0xf9
 8016936:	d128      	bne.n	801698a <ADS_Init+0x4b6>
 8016938:	f89d 3017 	ldrb.w	r3, [sp, #23]
 801693c:	2bf8      	cmp	r3, #248	; 0xf8
 801693e:	d124      	bne.n	801698a <ADS_Init+0x4b6>
 8016940:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8016944:	2bf7      	cmp	r3, #247	; 0xf7
 8016946:	d120      	bne.n	801698a <ADS_Init+0x4b6>
 8016948:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801694c:	2bf6      	cmp	r3, #246	; 0xf6
 801694e:	d11c      	bne.n	801698a <ADS_Init+0x4b6>
 8016950:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8016954:	2bf5      	cmp	r3, #245	; 0xf5
 8016956:	d118      	bne.n	801698a <ADS_Init+0x4b6>
 8016958:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801695c:	2bf4      	cmp	r3, #244	; 0xf4
 801695e:	d114      	bne.n	801698a <ADS_Init+0x4b6>
 8016960:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8016964:	2bf3      	cmp	r3, #243	; 0xf3
 8016966:	d110      	bne.n	801698a <ADS_Init+0x4b6>
 8016968:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801696c:	2bf2      	cmp	r3, #242	; 0xf2
 801696e:	d10c      	bne.n	801698a <ADS_Init+0x4b6>
 8016970:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016974:	2bf1      	cmp	r3, #241	; 0xf1
 8016976:	d108      	bne.n	801698a <ADS_Init+0x4b6>
 8016978:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801697c:	2bf0      	cmp	r3, #240	; 0xf0
 801697e:	d104      	bne.n	801698a <ADS_Init+0x4b6>
 8016980:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8016984:	2bef      	cmp	r3, #239	; 0xef
 8016986:	f43f aeab 	beq.w	80166e0 <ADS_Init+0x20c>
 801698a:	4849      	ldr	r0, [pc, #292]	; (8016ab0 <ADS_Init+0x5dc>)
 801698c:	f7ea fa60 	bl	8000e50 <print>
 8016990:	f06f 0564 	mvn.w	r5, #100	; 0x64
 8016994:	e75e      	b.n	8016854 <ADS_Init+0x380>
 8016996:	f7e9 fe21 	bl	80005dc <IRQ_UNLOCK>
 801699a:	6825      	ldr	r5, [r4, #0]
 801699c:	2d00      	cmp	r5, #0
 801699e:	f6ff af59 	blt.w	8016854 <ADS_Init+0x380>
 80169a2:	e623      	b.n	80165ec <ADS_Init+0x118>
 80169a4:	a802      	add	r0, sp, #8
 80169a6:	2164      	movs	r1, #100	; 0x64
 80169a8:	f7ee feaa 	bl	8005700 <Time_CheckTimeoutMSec>
 80169ac:	f06f 0564 	mvn.w	r5, #100	; 0x64
 80169b0:	2800      	cmp	r0, #0
 80169b2:	f43f af4f 	beq.w	8016854 <ADS_Init+0x380>
 80169b6:	e744      	b.n	8016842 <ADS_Init+0x36e>
 80169b8:	462a      	mov	r2, r5
 80169ba:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80169be:	483b      	ldr	r0, [pc, #236]	; (8016aac <ADS_Init+0x5d8>)
 80169c0:	f7ea fa46 	bl	8000e50 <print>
 80169c4:	69e3      	ldr	r3, [r4, #28]
 80169c6:	b18b      	cbz	r3, 80169ec <ADS_Init+0x518>
 80169c8:	69a2      	ldr	r2, [r4, #24]
 80169ca:	1e51      	subs	r1, r2, #1
 80169cc:	61a1      	str	r1, [r4, #24]
 80169ce:	b152      	cbz	r2, 80169e6 <ADS_Init+0x512>
 80169d0:	781a      	ldrb	r2, [r3, #0]
 80169d2:	43d2      	mvns	r2, r2
 80169d4:	701a      	strb	r2, [r3, #0]
 80169d6:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80169da:	3301      	adds	r3, #1
 80169dc:	1e51      	subs	r1, r2, #1
 80169de:	e9c4 1306 	strd	r1, r3, [r4, #24]
 80169e2:	2a00      	cmp	r2, #0
 80169e4:	d1f4      	bne.n	80169d0 <ADS_Init+0x4fc>
 80169e6:	2300      	movs	r3, #0
 80169e8:	e9c4 3306 	strd	r3, r3, [r4, #24]
 80169ec:	f7e9 fe18 	bl	8000620 <IRQ_LOCK>
 80169f0:	6823      	ldr	r3, [r4, #0]
 80169f2:	2b02      	cmp	r3, #2
 80169f4:	d01e      	beq.n	8016a34 <ADS_Init+0x560>
 80169f6:	6823      	ldr	r3, [r4, #0]
 80169f8:	2b64      	cmp	r3, #100	; 0x64
 80169fa:	bf04      	itt	eq
 80169fc:	2367      	moveq	r3, #103	; 0x67
 80169fe:	6023      	streq	r3, [r4, #0]
 8016a00:	6a26      	ldr	r6, [r4, #32]
 8016a02:	2700      	movs	r7, #0
 8016a04:	6227      	str	r7, [r4, #32]
 8016a06:	f7e9 fde9 	bl	80005dc <IRQ_UNLOCK>
 8016a0a:	2e00      	cmp	r6, #0
 8016a0c:	f43f af22 	beq.w	8016854 <ADS_Init+0x380>
 8016a10:	4638      	mov	r0, r7
 8016a12:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016a14:	47b0      	blx	r6
 8016a16:	4605      	mov	r5, r0
 8016a18:	e7c0      	b.n	801699c <ADS_Init+0x4c8>
 8016a1a:	f7e9 fddf 	bl	80005dc <IRQ_UNLOCK>
 8016a1e:	6825      	ldr	r5, [r4, #0]
 8016a20:	2d00      	cmp	r5, #0
 8016a22:	f6ff af17 	blt.w	8016854 <ADS_Init+0x380>
 8016a26:	e685      	b.n	8016734 <ADS_Init+0x260>
 8016a28:	4822      	ldr	r0, [pc, #136]	; (8016ab4 <ADS_Init+0x5e0>)
 8016a2a:	f7ea fa11 	bl	8000e50 <print>
 8016a2e:	f06f 0564 	mvn.w	r5, #100	; 0x64
 8016a32:	e70f      	b.n	8016854 <ADS_Init+0x380>
 8016a34:	2300      	movs	r3, #0
 8016a36:	6023      	str	r3, [r4, #0]
 8016a38:	e7e2      	b.n	8016a00 <ADS_Init+0x52c>
 8016a3a:	462a      	mov	r2, r5
 8016a3c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8016a40:	481a      	ldr	r0, [pc, #104]	; (8016aac <ADS_Init+0x5d8>)
 8016a42:	f7ea fa05 	bl	8000e50 <print>
 8016a46:	69e3      	ldr	r3, [r4, #28]
 8016a48:	b18b      	cbz	r3, 8016a6e <ADS_Init+0x59a>
 8016a4a:	69a2      	ldr	r2, [r4, #24]
 8016a4c:	1e51      	subs	r1, r2, #1
 8016a4e:	61a1      	str	r1, [r4, #24]
 8016a50:	b152      	cbz	r2, 8016a68 <ADS_Init+0x594>
 8016a52:	781a      	ldrb	r2, [r3, #0]
 8016a54:	43d2      	mvns	r2, r2
 8016a56:	701a      	strb	r2, [r3, #0]
 8016a58:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016a5c:	3301      	adds	r3, #1
 8016a5e:	1e51      	subs	r1, r2, #1
 8016a60:	e9c4 1306 	strd	r1, r3, [r4, #24]
 8016a64:	2a00      	cmp	r2, #0
 8016a66:	d1f4      	bne.n	8016a52 <ADS_Init+0x57e>
 8016a68:	2300      	movs	r3, #0
 8016a6a:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8016a6e:	f7e9 fdd7 	bl	8000620 <IRQ_LOCK>
 8016a72:	6823      	ldr	r3, [r4, #0]
 8016a74:	2b02      	cmp	r3, #2
 8016a76:	d011      	beq.n	8016a9c <ADS_Init+0x5c8>
 8016a78:	6823      	ldr	r3, [r4, #0]
 8016a7a:	2b64      	cmp	r3, #100	; 0x64
 8016a7c:	bf04      	itt	eq
 8016a7e:	2367      	moveq	r3, #103	; 0x67
 8016a80:	6023      	streq	r3, [r4, #0]
 8016a82:	6a26      	ldr	r6, [r4, #32]
 8016a84:	2700      	movs	r7, #0
 8016a86:	6227      	str	r7, [r4, #32]
 8016a88:	f7e9 fda8 	bl	80005dc <IRQ_UNLOCK>
 8016a8c:	2e00      	cmp	r6, #0
 8016a8e:	f43f aee1 	beq.w	8016854 <ADS_Init+0x380>
 8016a92:	4638      	mov	r0, r7
 8016a94:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016a96:	47b0      	blx	r6
 8016a98:	4605      	mov	r5, r0
 8016a9a:	e7c1      	b.n	8016a20 <ADS_Init+0x54c>
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	6023      	str	r3, [r4, #0]
 8016aa0:	e7ef      	b.n	8016a82 <ADS_Init+0x5ae>
 8016aa2:	bf00      	nop
 8016aa4:	0801ca44 	.word	0x0801ca44
 8016aa8:	0801cb8c 	.word	0x0801cb8c
 8016aac:	0801c9f8 	.word	0x0801c9f8
 8016ab0:	0801ca8c 	.word	0x0801ca8c
 8016ab4:	0801cb08 	.word	0x0801cb08

08016ab8 <ADS_GetStatus>:
 8016ab8:	6903      	ldr	r3, [r0, #16]
 8016aba:	b16b      	cbz	r3, 8016ad8 <ADS_GetStatus+0x20>
 8016abc:	6803      	ldr	r3, [r0, #0]
 8016abe:	b14b      	cbz	r3, 8016ad4 <ADS_GetStatus+0x1c>
 8016ac0:	6803      	ldr	r3, [r0, #0]
 8016ac2:	2b67      	cmp	r3, #103	; 0x67
 8016ac4:	d004      	beq.n	8016ad0 <ADS_GetStatus+0x18>
 8016ac6:	6803      	ldr	r3, [r0, #0]
 8016ac8:	2b64      	cmp	r3, #100	; 0x64
 8016aca:	d001      	beq.n	8016ad0 <ADS_GetStatus+0x18>
 8016acc:	6800      	ldr	r0, [r0, #0]
 8016ace:	4770      	bx	lr
 8016ad0:	2002      	movs	r0, #2
 8016ad2:	4770      	bx	lr
 8016ad4:	f7e9 bdd4 	b.w	8000680 <S2PI_GetStatus>
 8016ad8:	f06f 0064 	mvn.w	r0, #100	; 0x64
 8016adc:	4770      	bx	lr
 8016ade:	bf00      	nop

08016ae0 <ADS_CheckTimeout>:
 8016ae0:	b530      	push	{r4, r5, lr}
 8016ae2:	4604      	mov	r4, r0
 8016ae4:	b083      	sub	sp, #12
 8016ae6:	f7e9 fd9b 	bl	8000620 <IRQ_LOCK>
 8016aea:	6863      	ldr	r3, [r4, #4]
 8016aec:	b11b      	cbz	r3, 8016af6 <ADS_CheckTimeout+0x16>
 8016aee:	6920      	ldr	r0, [r4, #16]
 8016af0:	f7ea f81a 	bl	8000b28 <S2PI_ReadIrqPin>
 8016af4:	b920      	cbnz	r0, 8016b00 <ADS_CheckTimeout+0x20>
 8016af6:	f7e9 fd71 	bl	80005dc <IRQ_UNLOCK>
 8016afa:	2000      	movs	r0, #0
 8016afc:	b003      	add	sp, #12
 8016afe:	bd30      	pop	{r4, r5, pc}
 8016b00:	f104 0308 	add.w	r3, r4, #8
 8016b04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016b08:	466b      	mov	r3, sp
 8016b0a:	e883 0003 	stmia.w	r3, {r0, r1}
 8016b0e:	4618      	mov	r0, r3
 8016b10:	6861      	ldr	r1, [r4, #4]
 8016b12:	f7ee fd89 	bl	8005628 <Time_CheckTimeoutUSec>
 8016b16:	2800      	cmp	r0, #0
 8016b18:	d0ed      	beq.n	8016af6 <ADS_CheckTimeout+0x16>
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016b1e:	6063      	str	r3, [r4, #4]
 8016b20:	6263      	str	r3, [r4, #36]	; 0x24
 8016b22:	f7e9 fd5b 	bl	80005dc <IRQ_UNLOCK>
 8016b26:	4620      	mov	r0, r4
 8016b28:	f7ff fc94 	bl	8016454 <ADS_Abort>
 8016b2c:	b11d      	cbz	r5, 8016b36 <ADS_CheckTimeout+0x56>
 8016b2e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016b30:	f06f 0005 	mvn.w	r0, #5
 8016b34:	47a8      	blx	r5
 8016b36:	f06f 0005 	mvn.w	r0, #5
 8016b3a:	e7df      	b.n	8016afc <ADS_CheckTimeout+0x1c>

08016b3c <ADS_AwaitIdle>:
 8016b3c:	b570      	push	{r4, r5, r6, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	4604      	mov	r4, r0
 8016b42:	2300      	movs	r3, #0
 8016b44:	4668      	mov	r0, sp
 8016b46:	460e      	mov	r6, r1
 8016b48:	e9cd 3300 	strd	r3, r3, [sp]
 8016b4c:	f7ee fc96 	bl	800547c <Time_GetNow>
 8016b50:	6923      	ldr	r3, [r4, #16]
 8016b52:	b343      	cbz	r3, 8016ba6 <ADS_AwaitIdle+0x6a>
 8016b54:	6823      	ldr	r3, [r4, #0]
 8016b56:	b313      	cbz	r3, 8016b9e <ADS_AwaitIdle+0x62>
 8016b58:	6823      	ldr	r3, [r4, #0]
 8016b5a:	2b67      	cmp	r3, #103	; 0x67
 8016b5c:	d00d      	beq.n	8016b7a <ADS_AwaitIdle+0x3e>
 8016b5e:	6823      	ldr	r3, [r4, #0]
 8016b60:	2b64      	cmp	r3, #100	; 0x64
 8016b62:	d00a      	beq.n	8016b7a <ADS_AwaitIdle+0x3e>
 8016b64:	6825      	ldr	r5, [r4, #0]
 8016b66:	4631      	mov	r1, r6
 8016b68:	4668      	mov	r0, sp
 8016b6a:	f7ee fdc9 	bl	8005700 <Time_CheckTimeoutMSec>
 8016b6e:	b950      	cbnz	r0, 8016b86 <ADS_AwaitIdle+0x4a>
 8016b70:	2d02      	cmp	r5, #2
 8016b72:	d0ed      	beq.n	8016b50 <ADS_AwaitIdle+0x14>
 8016b74:	4628      	mov	r0, r5
 8016b76:	b002      	add	sp, #8
 8016b78:	bd70      	pop	{r4, r5, r6, pc}
 8016b7a:	4631      	mov	r1, r6
 8016b7c:	4668      	mov	r0, sp
 8016b7e:	f7ee fdbf 	bl	8005700 <Time_CheckTimeoutMSec>
 8016b82:	2800      	cmp	r0, #0
 8016b84:	d0e4      	beq.n	8016b50 <ADS_AwaitIdle+0x14>
 8016b86:	4631      	mov	r1, r6
 8016b88:	480b      	ldr	r0, [pc, #44]	; (8016bb8 <ADS_AwaitIdle+0x7c>)
 8016b8a:	f7ea f961 	bl	8000e50 <print>
 8016b8e:	4620      	mov	r0, r4
 8016b90:	f7ff fc60 	bl	8016454 <ADS_Abort>
 8016b94:	f06f 0505 	mvn.w	r5, #5
 8016b98:	4628      	mov	r0, r5
 8016b9a:	b002      	add	sp, #8
 8016b9c:	bd70      	pop	{r4, r5, r6, pc}
 8016b9e:	f7e9 fd6f 	bl	8000680 <S2PI_GetStatus>
 8016ba2:	4605      	mov	r5, r0
 8016ba4:	e7df      	b.n	8016b66 <ADS_AwaitIdle+0x2a>
 8016ba6:	4668      	mov	r0, sp
 8016ba8:	4631      	mov	r1, r6
 8016baa:	f7ee fda9 	bl	8005700 <Time_CheckTimeoutMSec>
 8016bae:	f06f 0564 	mvn.w	r5, #100	; 0x64
 8016bb2:	2800      	cmp	r0, #0
 8016bb4:	d0de      	beq.n	8016b74 <ADS_AwaitIdle+0x38>
 8016bb6:	e7e6      	b.n	8016b86 <ADS_AwaitIdle+0x4a>
 8016bb8:	0801ca44 	.word	0x0801ca44

08016bbc <ADS_TransferWithStart>:
 8016bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bc0:	4604      	mov	r4, r0
 8016bc2:	b083      	sub	sp, #12
 8016bc4:	461f      	mov	r7, r3
 8016bc6:	4689      	mov	r9, r1
 8016bc8:	4616      	mov	r6, r2
 8016bca:	e9dd 8b0c 	ldrd	r8, fp, [sp, #48]	; 0x30
 8016bce:	e9dd 5a0e 	ldrd	r5, sl, [sp, #56]	; 0x38
 8016bd2:	f7e9 fd25 	bl	8000620 <IRQ_LOCK>
 8016bd6:	6823      	ldr	r3, [r4, #0]
 8016bd8:	bb53      	cbnz	r3, 8016c30 <ADS_TransferWithStart+0x74>
 8016bda:	2d00      	cmp	r5, #0
 8016bdc:	bf14      	ite	ne
 8016bde:	2364      	movne	r3, #100	; 0x64
 8016be0:	2302      	moveq	r3, #2
 8016be2:	6023      	str	r3, [r4, #0]
 8016be4:	f7e9 fcfa 	bl	80005dc <IRQ_UNLOCK>
 8016be8:	7d23      	ldrb	r3, [r4, #20]
 8016bea:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
 8016bee:	e9c4 b508 	strd	fp, r5, [r4, #32]
 8016bf2:	b98b      	cbnz	r3, 8016c18 <ADS_TransferWithStart+0x5c>
 8016bf4:	f1b8 0f00 	cmp.w	r8, #0
 8016bf8:	d113      	bne.n	8016c22 <ADS_TransferWithStart+0x66>
 8016bfa:	492b      	ldr	r1, [pc, #172]	; (8016ca8 <ADS_TransferWithStart+0xec>)
 8016bfc:	9100      	str	r1, [sp, #0]
 8016bfe:	9401      	str	r4, [sp, #4]
 8016c00:	463b      	mov	r3, r7
 8016c02:	4632      	mov	r2, r6
 8016c04:	4649      	mov	r1, r9
 8016c06:	6920      	ldr	r0, [r4, #16]
 8016c08:	f7e9 fe94 	bl	8000934 <S2PI_TransferFrame>
 8016c0c:	1e05      	subs	r5, r0, #0
 8016c0e:	db16      	blt.n	8016c3e <ADS_TransferWithStart+0x82>
 8016c10:	4628      	mov	r0, r5
 8016c12:	b003      	add	sp, #12
 8016c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c18:	e9c4 7606 	strd	r7, r6, [r4, #24]
 8016c1c:	f1b8 0f00 	cmp.w	r8, #0
 8016c20:	d0eb      	beq.n	8016bfa <ADS_TransferWithStart+0x3e>
 8016c22:	f104 0008 	add.w	r0, r4, #8
 8016c26:	f7ee fc29 	bl	800547c <Time_GetNow>
 8016c2a:	f8c4 8004 	str.w	r8, [r4, #4]
 8016c2e:	e7e4      	b.n	8016bfa <ADS_TransferWithStart+0x3e>
 8016c30:	f7e9 fcd4 	bl	80005dc <IRQ_UNLOCK>
 8016c34:	6825      	ldr	r5, [r4, #0]
 8016c36:	4628      	mov	r0, r5
 8016c38:	b003      	add	sp, #12
 8016c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c3e:	f899 1000 	ldrb.w	r1, [r9]
 8016c42:	481a      	ldr	r0, [pc, #104]	; (8016cac <ADS_TransferWithStart+0xf0>)
 8016c44:	462a      	mov	r2, r5
 8016c46:	f7ea f903 	bl	8000e50 <print>
 8016c4a:	69e3      	ldr	r3, [r4, #28]
 8016c4c:	b18b      	cbz	r3, 8016c72 <ADS_TransferWithStart+0xb6>
 8016c4e:	69a2      	ldr	r2, [r4, #24]
 8016c50:	1e51      	subs	r1, r2, #1
 8016c52:	61a1      	str	r1, [r4, #24]
 8016c54:	b152      	cbz	r2, 8016c6c <ADS_TransferWithStart+0xb0>
 8016c56:	781a      	ldrb	r2, [r3, #0]
 8016c58:	43d2      	mvns	r2, r2
 8016c5a:	701a      	strb	r2, [r3, #0]
 8016c5c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016c60:	3301      	adds	r3, #1
 8016c62:	1e51      	subs	r1, r2, #1
 8016c64:	e9c4 1306 	strd	r1, r3, [r4, #24]
 8016c68:	2a00      	cmp	r2, #0
 8016c6a:	d1f4      	bne.n	8016c56 <ADS_TransferWithStart+0x9a>
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8016c72:	f7e9 fcd5 	bl	8000620 <IRQ_LOCK>
 8016c76:	6823      	ldr	r3, [r4, #0]
 8016c78:	2b02      	cmp	r3, #2
 8016c7a:	d012      	beq.n	8016ca2 <ADS_TransferWithStart+0xe6>
 8016c7c:	6823      	ldr	r3, [r4, #0]
 8016c7e:	2b64      	cmp	r3, #100	; 0x64
 8016c80:	bf04      	itt	eq
 8016c82:	2367      	moveq	r3, #103	; 0x67
 8016c84:	6023      	streq	r3, [r4, #0]
 8016c86:	6a26      	ldr	r6, [r4, #32]
 8016c88:	2700      	movs	r7, #0
 8016c8a:	6227      	str	r7, [r4, #32]
 8016c8c:	f7e9 fca6 	bl	80005dc <IRQ_UNLOCK>
 8016c90:	2e00      	cmp	r6, #0
 8016c92:	d0bd      	beq.n	8016c10 <ADS_TransferWithStart+0x54>
 8016c94:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016c96:	4638      	mov	r0, r7
 8016c98:	4633      	mov	r3, r6
 8016c9a:	b003      	add	sp, #12
 8016c9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ca0:	4718      	bx	r3
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	6023      	str	r3, [r4, #0]
 8016ca6:	e7ee      	b.n	8016c86 <ADS_TransferWithStart+0xca>
 8016ca8:	080163b9 	.word	0x080163b9
 8016cac:	0801c9f8 	.word	0x0801c9f8

08016cb0 <ADS_Transfer>:
 8016cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cb4:	4604      	mov	r4, r0
 8016cb6:	b082      	sub	sp, #8
 8016cb8:	4688      	mov	r8, r1
 8016cba:	4616      	mov	r6, r2
 8016cbc:	461f      	mov	r7, r3
 8016cbe:	e9dd a90a 	ldrd	sl, r9, [sp, #40]	; 0x28
 8016cc2:	f7e9 fcad 	bl	8000620 <IRQ_LOCK>
 8016cc6:	6825      	ldr	r5, [r4, #0]
 8016cc8:	b9dd      	cbnz	r5, 8016d02 <ADS_Transfer+0x52>
 8016cca:	2302      	movs	r3, #2
 8016ccc:	6023      	str	r3, [r4, #0]
 8016cce:	f7e9 fc85 	bl	80005dc <IRQ_UNLOCK>
 8016cd2:	7d23      	ldrb	r3, [r4, #20]
 8016cd4:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8016cd8:	e9c4 a508 	strd	sl, r5, [r4, #32]
 8016cdc:	b973      	cbnz	r3, 8016cfc <ADS_Transfer+0x4c>
 8016cde:	4927      	ldr	r1, [pc, #156]	; (8016d7c <ADS_Transfer+0xcc>)
 8016ce0:	9100      	str	r1, [sp, #0]
 8016ce2:	9401      	str	r4, [sp, #4]
 8016ce4:	463b      	mov	r3, r7
 8016ce6:	4632      	mov	r2, r6
 8016ce8:	4641      	mov	r1, r8
 8016cea:	6920      	ldr	r0, [r4, #16]
 8016cec:	f7e9 fe22 	bl	8000934 <S2PI_TransferFrame>
 8016cf0:	1e05      	subs	r5, r0, #0
 8016cf2:	db0d      	blt.n	8016d10 <ADS_Transfer+0x60>
 8016cf4:	4628      	mov	r0, r5
 8016cf6:	b002      	add	sp, #8
 8016cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cfc:	e9c4 7606 	strd	r7, r6, [r4, #24]
 8016d00:	e7ed      	b.n	8016cde <ADS_Transfer+0x2e>
 8016d02:	f7e9 fc6b 	bl	80005dc <IRQ_UNLOCK>
 8016d06:	6825      	ldr	r5, [r4, #0]
 8016d08:	4628      	mov	r0, r5
 8016d0a:	b002      	add	sp, #8
 8016d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d10:	f898 1000 	ldrb.w	r1, [r8]
 8016d14:	481a      	ldr	r0, [pc, #104]	; (8016d80 <ADS_Transfer+0xd0>)
 8016d16:	462a      	mov	r2, r5
 8016d18:	f7ea f89a 	bl	8000e50 <print>
 8016d1c:	69e3      	ldr	r3, [r4, #28]
 8016d1e:	b18b      	cbz	r3, 8016d44 <ADS_Transfer+0x94>
 8016d20:	69a2      	ldr	r2, [r4, #24]
 8016d22:	1e51      	subs	r1, r2, #1
 8016d24:	61a1      	str	r1, [r4, #24]
 8016d26:	b152      	cbz	r2, 8016d3e <ADS_Transfer+0x8e>
 8016d28:	781a      	ldrb	r2, [r3, #0]
 8016d2a:	43d2      	mvns	r2, r2
 8016d2c:	701a      	strb	r2, [r3, #0]
 8016d2e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016d32:	3301      	adds	r3, #1
 8016d34:	1e51      	subs	r1, r2, #1
 8016d36:	e9c4 1306 	strd	r1, r3, [r4, #24]
 8016d3a:	2a00      	cmp	r2, #0
 8016d3c:	d1f4      	bne.n	8016d28 <ADS_Transfer+0x78>
 8016d3e:	2300      	movs	r3, #0
 8016d40:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8016d44:	f7e9 fc6c 	bl	8000620 <IRQ_LOCK>
 8016d48:	6823      	ldr	r3, [r4, #0]
 8016d4a:	2b02      	cmp	r3, #2
 8016d4c:	d012      	beq.n	8016d74 <ADS_Transfer+0xc4>
 8016d4e:	6823      	ldr	r3, [r4, #0]
 8016d50:	2b64      	cmp	r3, #100	; 0x64
 8016d52:	bf04      	itt	eq
 8016d54:	2367      	moveq	r3, #103	; 0x67
 8016d56:	6023      	streq	r3, [r4, #0]
 8016d58:	6a26      	ldr	r6, [r4, #32]
 8016d5a:	2700      	movs	r7, #0
 8016d5c:	6227      	str	r7, [r4, #32]
 8016d5e:	f7e9 fc3d 	bl	80005dc <IRQ_UNLOCK>
 8016d62:	2e00      	cmp	r6, #0
 8016d64:	d0c6      	beq.n	8016cf4 <ADS_Transfer+0x44>
 8016d66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016d68:	4638      	mov	r0, r7
 8016d6a:	4633      	mov	r3, r6
 8016d6c:	b002      	add	sp, #8
 8016d6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d72:	4718      	bx	r3
 8016d74:	2300      	movs	r3, #0
 8016d76:	6023      	str	r3, [r4, #0]
 8016d78:	e7ee      	b.n	8016d58 <ADS_Transfer+0xa8>
 8016d7a:	bf00      	nop
 8016d7c:	080163b9 	.word	0x080163b9
 8016d80:	0801c9f8 	.word	0x0801c9f8

08016d84 <ADS_Start>:
 8016d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d88:	4604      	mov	r4, r0
 8016d8a:	b082      	sub	sp, #8
 8016d8c:	4688      	mov	r8, r1
 8016d8e:	4617      	mov	r7, r2
 8016d90:	f7e9 fc46 	bl	8000620 <IRQ_LOCK>
 8016d94:	6825      	ldr	r5, [r4, #0]
 8016d96:	b9dd      	cbnz	r5, 8016dd0 <ADS_Start+0x4c>
 8016d98:	2602      	movs	r6, #2
 8016d9a:	6026      	str	r6, [r4, #0]
 8016d9c:	f7e9 fc1e 	bl	80005dc <IRQ_UNLOCK>
 8016da0:	7d23      	ldrb	r3, [r4, #20]
 8016da2:	62a7      	str	r7, [r4, #40]	; 0x28
 8016da4:	e9c4 8508 	strd	r8, r5, [r4, #32]
 8016da8:	b97b      	cbnz	r3, 8016dca <ADS_Start+0x46>
 8016daa:	4b27      	ldr	r3, [pc, #156]	; (8016e48 <ADS_Start+0xc4>)
 8016dac:	4e27      	ldr	r6, [pc, #156]	; (8016e4c <ADS_Start+0xc8>)
 8016dae:	9300      	str	r3, [sp, #0]
 8016db0:	9401      	str	r4, [sp, #4]
 8016db2:	4631      	mov	r1, r6
 8016db4:	2302      	movs	r3, #2
 8016db6:	2200      	movs	r2, #0
 8016db8:	6920      	ldr	r0, [r4, #16]
 8016dba:	f7e9 fdbb 	bl	8000934 <S2PI_TransferFrame>
 8016dbe:	1e05      	subs	r5, r0, #0
 8016dc0:	db0d      	blt.n	8016dde <ADS_Start+0x5a>
 8016dc2:	4628      	mov	r0, r5
 8016dc4:	b002      	add	sp, #8
 8016dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dca:	e9c4 6506 	strd	r6, r5, [r4, #24]
 8016dce:	e7ec      	b.n	8016daa <ADS_Start+0x26>
 8016dd0:	f7e9 fc04 	bl	80005dc <IRQ_UNLOCK>
 8016dd4:	6825      	ldr	r5, [r4, #0]
 8016dd6:	4628      	mov	r0, r5
 8016dd8:	b002      	add	sp, #8
 8016dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dde:	7831      	ldrb	r1, [r6, #0]
 8016de0:	481b      	ldr	r0, [pc, #108]	; (8016e50 <ADS_Start+0xcc>)
 8016de2:	462a      	mov	r2, r5
 8016de4:	f7ea f834 	bl	8000e50 <print>
 8016de8:	69e3      	ldr	r3, [r4, #28]
 8016dea:	b18b      	cbz	r3, 8016e10 <ADS_Start+0x8c>
 8016dec:	69a2      	ldr	r2, [r4, #24]
 8016dee:	1e51      	subs	r1, r2, #1
 8016df0:	61a1      	str	r1, [r4, #24]
 8016df2:	b152      	cbz	r2, 8016e0a <ADS_Start+0x86>
 8016df4:	781a      	ldrb	r2, [r3, #0]
 8016df6:	43d2      	mvns	r2, r2
 8016df8:	701a      	strb	r2, [r3, #0]
 8016dfa:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016dfe:	3301      	adds	r3, #1
 8016e00:	1e51      	subs	r1, r2, #1
 8016e02:	e9c4 1306 	strd	r1, r3, [r4, #24]
 8016e06:	2a00      	cmp	r2, #0
 8016e08:	d1f4      	bne.n	8016df4 <ADS_Start+0x70>
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8016e10:	f7e9 fc06 	bl	8000620 <IRQ_LOCK>
 8016e14:	6823      	ldr	r3, [r4, #0]
 8016e16:	2b02      	cmp	r3, #2
 8016e18:	d012      	beq.n	8016e40 <ADS_Start+0xbc>
 8016e1a:	6823      	ldr	r3, [r4, #0]
 8016e1c:	2b64      	cmp	r3, #100	; 0x64
 8016e1e:	bf04      	itt	eq
 8016e20:	2367      	moveq	r3, #103	; 0x67
 8016e22:	6023      	streq	r3, [r4, #0]
 8016e24:	6a26      	ldr	r6, [r4, #32]
 8016e26:	2700      	movs	r7, #0
 8016e28:	6227      	str	r7, [r4, #32]
 8016e2a:	f7e9 fbd7 	bl	80005dc <IRQ_UNLOCK>
 8016e2e:	2e00      	cmp	r6, #0
 8016e30:	d0c7      	beq.n	8016dc2 <ADS_Start+0x3e>
 8016e32:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016e34:	4638      	mov	r0, r7
 8016e36:	4633      	mov	r3, r6
 8016e38:	b002      	add	sp, #8
 8016e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e3e:	4718      	bx	r3
 8016e40:	2300      	movs	r3, #0
 8016e42:	6023      	str	r3, [r4, #0]
 8016e44:	e7ee      	b.n	8016e24 <ADS_Start+0xa0>
 8016e46:	bf00      	nop
 8016e48:	080163b9 	.word	0x080163b9
 8016e4c:	20000050 	.word	0x20000050
 8016e50:	0801c9f8 	.word	0x0801c9f8

08016e54 <ADS_ReadData>:
 8016e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e58:	1e55      	subs	r5, r2, #1
 8016e5a:	b083      	sub	sp, #12
 8016e5c:	2d83      	cmp	r5, #131	; 0x83
 8016e5e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8016e62:	d865      	bhi.n	8016f30 <ADS_ReadData+0xdc>
 8016e64:	4604      	mov	r4, r0
 8016e66:	461f      	mov	r7, r3
 8016e68:	2324      	movs	r3, #36	; 0x24
 8016e6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016e6e:	700b      	strb	r3, [r1, #0]
 8016e70:	460e      	mov	r6, r1
 8016e72:	1c55      	adds	r5, r2, #1
 8016e74:	f7e9 fbd4 	bl	8000620 <IRQ_LOCK>
 8016e78:	f8d4 9000 	ldr.w	r9, [r4]
 8016e7c:	f1b9 0f00 	cmp.w	r9, #0
 8016e80:	d11b      	bne.n	8016eba <ADS_ReadData+0x66>
 8016e82:	2302      	movs	r3, #2
 8016e84:	6023      	str	r3, [r4, #0]
 8016e86:	f7e9 fba9 	bl	80005dc <IRQ_UNLOCK>
 8016e8a:	7d23      	ldrb	r3, [r4, #20]
 8016e8c:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 8016e90:	e9c4 7908 	strd	r7, r9, [r4, #32]
 8016e94:	b973      	cbnz	r3, 8016eb4 <ADS_ReadData+0x60>
 8016e96:	4a28      	ldr	r2, [pc, #160]	; (8016f38 <ADS_ReadData+0xe4>)
 8016e98:	9200      	str	r2, [sp, #0]
 8016e9a:	9401      	str	r4, [sp, #4]
 8016e9c:	462b      	mov	r3, r5
 8016e9e:	4632      	mov	r2, r6
 8016ea0:	4631      	mov	r1, r6
 8016ea2:	6920      	ldr	r0, [r4, #16]
 8016ea4:	f7e9 fd46 	bl	8000934 <S2PI_TransferFrame>
 8016ea8:	1e05      	subs	r5, r0, #0
 8016eaa:	db0d      	blt.n	8016ec8 <ADS_ReadData+0x74>
 8016eac:	4628      	mov	r0, r5
 8016eae:	b003      	add	sp, #12
 8016eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016eb4:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016eb8:	e7ed      	b.n	8016e96 <ADS_ReadData+0x42>
 8016eba:	f7e9 fb8f 	bl	80005dc <IRQ_UNLOCK>
 8016ebe:	6825      	ldr	r5, [r4, #0]
 8016ec0:	4628      	mov	r0, r5
 8016ec2:	b003      	add	sp, #12
 8016ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ec8:	7831      	ldrb	r1, [r6, #0]
 8016eca:	481c      	ldr	r0, [pc, #112]	; (8016f3c <ADS_ReadData+0xe8>)
 8016ecc:	462a      	mov	r2, r5
 8016ece:	f7e9 ffbf 	bl	8000e50 <print>
 8016ed2:	69e3      	ldr	r3, [r4, #28]
 8016ed4:	b18b      	cbz	r3, 8016efa <ADS_ReadData+0xa6>
 8016ed6:	69a2      	ldr	r2, [r4, #24]
 8016ed8:	1e51      	subs	r1, r2, #1
 8016eda:	61a1      	str	r1, [r4, #24]
 8016edc:	b152      	cbz	r2, 8016ef4 <ADS_ReadData+0xa0>
 8016ede:	781a      	ldrb	r2, [r3, #0]
 8016ee0:	43d2      	mvns	r2, r2
 8016ee2:	701a      	strb	r2, [r3, #0]
 8016ee4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016ee8:	3301      	adds	r3, #1
 8016eea:	1e51      	subs	r1, r2, #1
 8016eec:	e9c4 1306 	strd	r1, r3, [r4, #24]
 8016ef0:	2a00      	cmp	r2, #0
 8016ef2:	d1f4      	bne.n	8016ede <ADS_ReadData+0x8a>
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8016efa:	f7e9 fb91 	bl	8000620 <IRQ_LOCK>
 8016efe:	6823      	ldr	r3, [r4, #0]
 8016f00:	2b02      	cmp	r3, #2
 8016f02:	d012      	beq.n	8016f2a <ADS_ReadData+0xd6>
 8016f04:	6823      	ldr	r3, [r4, #0]
 8016f06:	2b64      	cmp	r3, #100	; 0x64
 8016f08:	bf04      	itt	eq
 8016f0a:	2367      	moveq	r3, #103	; 0x67
 8016f0c:	6023      	streq	r3, [r4, #0]
 8016f0e:	6a26      	ldr	r6, [r4, #32]
 8016f10:	2700      	movs	r7, #0
 8016f12:	6227      	str	r7, [r4, #32]
 8016f14:	f7e9 fb62 	bl	80005dc <IRQ_UNLOCK>
 8016f18:	2e00      	cmp	r6, #0
 8016f1a:	d0c7      	beq.n	8016eac <ADS_ReadData+0x58>
 8016f1c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016f1e:	4638      	mov	r0, r7
 8016f20:	4633      	mov	r3, r6
 8016f22:	b003      	add	sp, #12
 8016f24:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f28:	4718      	bx	r3
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	6023      	str	r3, [r4, #0]
 8016f2e:	e7ee      	b.n	8016f0e <ADS_ReadData+0xba>
 8016f30:	f06f 0504 	mvn.w	r5, #4
 8016f34:	e7ba      	b.n	8016eac <ADS_ReadData+0x58>
 8016f36:	bf00      	nop
 8016f38:	080163b9 	.word	0x080163b9
 8016f3c:	0801c9f8 	.word	0x0801c9f8

08016f40 <ADS_ReadEEPROM>:
 8016f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f44:	4606      	mov	r6, r0
 8016f46:	b084      	sub	sp, #16
 8016f48:	4688      	mov	r8, r1
 8016f4a:	f7e9 fb69 	bl	8000620 <IRQ_LOCK>
 8016f4e:	6835      	ldr	r5, [r6, #0]
 8016f50:	bb6d      	cbnz	r5, 8016fae <ADS_ReadEEPROM+0x6e>
 8016f52:	2302      	movs	r3, #2
 8016f54:	6033      	str	r3, [r6, #0]
 8016f56:	f7e9 fb41 	bl	80005dc <IRQ_UNLOCK>
 8016f5a:	462c      	mov	r4, r5
 8016f5c:	e9cd 5500 	strd	r5, r5, [sp]
 8016f60:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8016f64:	466d      	mov	r5, sp
 8016f66:	b2e1      	uxtb	r1, r4
 8016f68:	462a      	mov	r2, r5
 8016f6a:	6930      	ldr	r0, [r6, #16]
 8016f6c:	f000 fa90 	bl	8017490 <EEPROM_Read>
 8016f70:	3401      	adds	r4, #1
 8016f72:	4607      	mov	r7, r0
 8016f74:	bb10      	cbnz	r0, 8016fbc <ADS_ReadEEPROM+0x7c>
 8016f76:	7d33      	ldrb	r3, [r6, #20]
 8016f78:	b113      	cbz	r3, 8016f80 <ADS_ReadEEPROM+0x40>
 8016f7a:	782b      	ldrb	r3, [r5, #0]
 8016f7c:	43db      	mvns	r3, r3
 8016f7e:	702b      	strb	r3, [r5, #0]
 8016f80:	2c10      	cmp	r4, #16
 8016f82:	f105 0501 	add.w	r5, r5, #1
 8016f86:	d1ee      	bne.n	8016f66 <ADS_ReadEEPROM+0x26>
 8016f88:	4668      	mov	r0, sp
 8016f8a:	4641      	mov	r1, r8
 8016f8c:	f000 f822 	bl	8016fd4 <hamming_decode>
 8016f90:	2800      	cmp	r0, #0
 8016f92:	bf18      	it	ne
 8016f94:	276d      	movne	r7, #109	; 0x6d
 8016f96:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016fa0:	4638      	mov	r0, r7
 8016fa2:	f888 300f 	strb.w	r3, [r8, #15]
 8016fa6:	6032      	str	r2, [r6, #0]
 8016fa8:	b004      	add	sp, #16
 8016faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fae:	f7e9 fb15 	bl	80005dc <IRQ_UNLOCK>
 8016fb2:	6837      	ldr	r7, [r6, #0]
 8016fb4:	4638      	mov	r0, r7
 8016fb6:	b004      	add	sp, #16
 8016fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fbc:	4601      	mov	r1, r0
 8016fbe:	4804      	ldr	r0, [pc, #16]	; (8016fd0 <ADS_ReadEEPROM+0x90>)
 8016fc0:	f7e9 ff46 	bl	8000e50 <print>
 8016fc4:	4641      	mov	r1, r8
 8016fc6:	4668      	mov	r0, sp
 8016fc8:	f000 f804 	bl	8016fd4 <hamming_decode>
 8016fcc:	e7e3      	b.n	8016f96 <ADS_ReadEEPROM+0x56>
 8016fce:	bf00      	nop
 8016fd0:	0801cbd0 	.word	0x0801cbd0

08016fd4 <hamming_decode>:
 8016fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fd8:	b087      	sub	sp, #28
 8016fda:	4603      	mov	r3, r0
 8016fdc:	2400      	movs	r4, #0
 8016fde:	9001      	str	r0, [sp, #4]
 8016fe0:	460f      	mov	r7, r1
 8016fe2:	a802      	add	r0, sp, #8
 8016fe4:	4619      	mov	r1, r3
 8016fe6:	2210      	movs	r2, #16
 8016fe8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8016fec:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8016ff0:	f000 fb8b 	bl	801770a <memcpy>
 8016ff4:	46a2      	mov	sl, r4
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	fa03 f60a 	lsl.w	r6, r3, sl
 8016ffc:	f106 3eff 	add.w	lr, r6, #4294967295
 8017000:	ea4f 08de 	mov.w	r8, lr, lsr #3
 8017004:	aa02      	add	r2, sp, #8
 8017006:	f00e 0e07 	and.w	lr, lr, #7
 801700a:	f812 c008 	ldrb.w	ip, [r2, r8]
 801700e:	fa03 f30e 	lsl.w	r3, r3, lr
 8017012:	b2f5      	uxtb	r5, r6
 8017014:	ea2c 0c03 	bic.w	ip, ip, r3
 8017018:	1e68      	subs	r0, r5, #1
 801701a:	f802 c008 	strb.w	ip, [r2, r8]
 801701e:	006d      	lsls	r5, r5, #1
 8017020:	b2c0      	uxtb	r0, r0
 8017022:	b2ed      	uxtb	r5, r5
 8017024:	2300      	movs	r3, #0
 8017026:	1984      	adds	r4, r0, r6
 8017028:	42a0      	cmp	r0, r4
 801702a:	4681      	mov	r9, r0
 801702c:	bfb8      	it	lt
 801702e:	4601      	movlt	r1, r0
 8017030:	da13      	bge.n	801705a <hamming_decode+0x86>
 8017032:	f3c1 02c7 	ubfx	r2, r1, #3, #8
 8017036:	f10d 0b18 	add.w	fp, sp, #24
 801703a:	4493      	add	fp, r2
 801703c:	eba9 09c2 	sub.w	r9, r9, r2, lsl #3
 8017040:	f81b 2c10 	ldrb.w	r2, [fp, #-16]
 8017044:	3101      	adds	r1, #1
 8017046:	fa42 f209 	asr.w	r2, r2, r9
 801704a:	b2c9      	uxtb	r1, r1
 801704c:	f002 0201 	and.w	r2, r2, #1
 8017050:	4413      	add	r3, r2
 8017052:	42a1      	cmp	r1, r4
 8017054:	b2db      	uxtb	r3, r3
 8017056:	4689      	mov	r9, r1
 8017058:	dbeb      	blt.n	8017032 <hamming_decode+0x5e>
 801705a:	4428      	add	r0, r5
 801705c:	b2c0      	uxtb	r0, r0
 801705e:	287e      	cmp	r0, #126	; 0x7e
 8017060:	d9e1      	bls.n	8017026 <hamming_decode+0x52>
 8017062:	f003 0301 	and.w	r3, r3, #1
 8017066:	fa03 fe0e 	lsl.w	lr, r3, lr
 801706a:	f10a 0a01 	add.w	sl, sl, #1
 801706e:	ab02      	add	r3, sp, #8
 8017070:	ea4c 0e0e 	orr.w	lr, ip, lr
 8017074:	f1ba 0f07 	cmp.w	sl, #7
 8017078:	f803 e008 	strb.w	lr, [r3, r8]
 801707c:	d1bb      	bne.n	8016ff6 <hamming_decode+0x22>
 801707e:	9b01      	ldr	r3, [sp, #4]
 8017080:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8017084:	781b      	ldrb	r3, [r3, #0]
 8017086:	f002 0501 	and.w	r5, r2, #1
 801708a:	f003 0001 	and.w	r0, r3, #1
 801708e:	1a28      	subs	r0, r5, r0
 8017090:	f3c2 0440 	ubfx	r4, r2, #1, #1
 8017094:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8017098:	bf18      	it	ne
 801709a:	2001      	movne	r0, #1
 801709c:	428c      	cmp	r4, r1
 801709e:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 80170a2:	f3c3 04c0 	ubfx	r4, r3, #3, #1
 80170a6:	bf18      	it	ne
 80170a8:	3002      	addne	r0, #2
 80170aa:	42a1      	cmp	r1, r4
 80170ac:	bf18      	it	ne
 80170ae:	3004      	addne	r0, #4
 80170b0:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 80170b4:	bf18      	it	ne
 80170b6:	b2c0      	uxtbne	r0, r0
 80170b8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 80170bc:	9b01      	ldr	r3, [sp, #4]
 80170be:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80170c2:	785b      	ldrb	r3, [r3, #1]
 80170c4:	9901      	ldr	r1, [sp, #4]
 80170c6:	bf18      	it	ne
 80170c8:	3008      	addne	r0, #8
 80170ca:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 80170ce:	bf18      	it	ne
 80170d0:	b2c0      	uxtbne	r0, r0
 80170d2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 80170d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80170da:	78ca      	ldrb	r2, [r1, #3]
 80170dc:	bf18      	it	ne
 80170de:	3010      	addne	r0, #16
 80170e0:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 80170e4:	bf18      	it	ne
 80170e6:	b2c0      	uxtbne	r0, r0
 80170e8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 80170ec:	d04e      	beq.n	801718c <hamming_decode+0x1b8>
 80170ee:	79cb      	ldrb	r3, [r1, #7]
 80170f0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80170f4:	09db      	lsrs	r3, r3, #7
 80170f6:	3020      	adds	r0, #32
 80170f8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 80170fc:	b2c0      	uxtb	r0, r0
 80170fe:	d001      	beq.n	8017104 <hamming_decode+0x130>
 8017100:	3040      	adds	r0, #64	; 0x40
 8017102:	b2c0      	uxtb	r0, r0
 8017104:	1e42      	subs	r2, r0, #1
 8017106:	b2d3      	uxtb	r3, r2
 8017108:	08d9      	lsrs	r1, r3, #3
 801710a:	ac06      	add	r4, sp, #24
 801710c:	440c      	add	r4, r1
 801710e:	eba3 01c1 	sub.w	r1, r3, r1, lsl #3
 8017112:	f814 3c10 	ldrb.w	r3, [r4, #-16]
 8017116:	08d4      	lsrs	r4, r2, #3
 8017118:	410b      	asrs	r3, r1
 801711a:	a902      	add	r1, sp, #8
 801711c:	f002 0207 	and.w	r2, r2, #7
 8017120:	2501      	movs	r5, #1
 8017122:	5d09      	ldrb	r1, [r1, r4]
 8017124:	f003 0301 	and.w	r3, r3, #1
 8017128:	1aeb      	subs	r3, r5, r3
 801712a:	4095      	lsls	r5, r2
 801712c:	4093      	lsls	r3, r2
 801712e:	ea21 0205 	bic.w	r2, r1, r5
 8017132:	4313      	orrs	r3, r2
 8017134:	aa02      	add	r2, sp, #8
 8017136:	5513      	strb	r3, [r2, r4]
 8017138:	2201      	movs	r2, #1
 801713a:	4616      	mov	r6, r2
 801713c:	2100      	movs	r1, #0
 801713e:	1c54      	adds	r4, r2, #1
 8017140:	b2d3      	uxtb	r3, r2
 8017142:	08db      	lsrs	r3, r3, #3
 8017144:	f001 0e07 	and.w	lr, r1, #7
 8017148:	f10d 0818 	add.w	r8, sp, #24
 801714c:	4222      	tst	r2, r4
 801714e:	4498      	add	r8, r3
 8017150:	ea4f 05d1 	mov.w	r5, r1, lsr #3
 8017154:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8017158:	fa06 fc0e 	lsl.w	ip, r6, lr
 801715c:	4622      	mov	r2, r4
 801715e:	d010      	beq.n	8017182 <hamming_decode+0x1ae>
 8017160:	f818 9c10 	ldrb.w	r9, [r8, #-16]
 8017164:	f817 8005 	ldrb.w	r8, [r7, r5]
 8017168:	fa49 f303 	asr.w	r3, r9, r3
 801716c:	f003 0301 	and.w	r3, r3, #1
 8017170:	fa03 f30e 	lsl.w	r3, r3, lr
 8017174:	ea28 0c0c 	bic.w	ip, r8, ip
 8017178:	ea43 030c 	orr.w	r3, r3, ip
 801717c:	3101      	adds	r1, #1
 801717e:	557b      	strb	r3, [r7, r5]
 8017180:	b2c9      	uxtb	r1, r1
 8017182:	2c7f      	cmp	r4, #127	; 0x7f
 8017184:	d1db      	bne.n	801713e <hamming_decode+0x16a>
 8017186:	b007      	add	sp, #28
 8017188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801718c:	79cb      	ldrb	r3, [r1, #7]
 801718e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8017192:	09db      	lsrs	r3, r3, #7
 8017194:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 8017198:	d1b2      	bne.n	8017100 <hamming_decode+0x12c>
 801719a:	2800      	cmp	r0, #0
 801719c:	d0cc      	beq.n	8017138 <hamming_decode+0x164>
 801719e:	e7b1      	b.n	8017104 <hamming_decode+0x130>

080171a0 <eeprom_place_command>:
 80171a0:	b570      	push	{r4, r5, r6, lr}
 80171a2:	460d      	mov	r5, r1
 80171a4:	4616      	mov	r6, r2
 80171a6:	2102      	movs	r1, #2
 80171a8:	2201      	movs	r2, #1
 80171aa:	4604      	mov	r4, r0
 80171ac:	f7e9 fb26 	bl	80007fc <S2PI_WriteGpioPin>
 80171b0:	2800      	cmp	r0, #0
 80171b2:	f2c0 80a2 	blt.w	80172fa <eeprom_place_command+0x15a>
 80171b6:	2201      	movs	r2, #1
 80171b8:	2100      	movs	r1, #0
 80171ba:	4620      	mov	r0, r4
 80171bc:	f7e9 fb1e 	bl	80007fc <S2PI_WriteGpioPin>
 80171c0:	2800      	cmp	r0, #0
 80171c2:	f2c0 809a 	blt.w	80172fa <eeprom_place_command+0x15a>
 80171c6:	2200      	movs	r2, #0
 80171c8:	4611      	mov	r1, r2
 80171ca:	4620      	mov	r0, r4
 80171cc:	f7e9 fb16 	bl	80007fc <S2PI_WriteGpioPin>
 80171d0:	2800      	cmp	r0, #0
 80171d2:	f2c0 8092 	blt.w	80172fa <eeprom_place_command+0x15a>
 80171d6:	462a      	mov	r2, r5
 80171d8:	2102      	movs	r1, #2
 80171da:	4620      	mov	r0, r4
 80171dc:	f7e9 fb0e 	bl	80007fc <S2PI_WriteGpioPin>
 80171e0:	2800      	cmp	r0, #0
 80171e2:	f2c0 808a 	blt.w	80172fa <eeprom_place_command+0x15a>
 80171e6:	2201      	movs	r2, #1
 80171e8:	2100      	movs	r1, #0
 80171ea:	4620      	mov	r0, r4
 80171ec:	f7e9 fb06 	bl	80007fc <S2PI_WriteGpioPin>
 80171f0:	2800      	cmp	r0, #0
 80171f2:	f2c0 8082 	blt.w	80172fa <eeprom_place_command+0x15a>
 80171f6:	2200      	movs	r2, #0
 80171f8:	4611      	mov	r1, r2
 80171fa:	4620      	mov	r0, r4
 80171fc:	f7e9 fafe 	bl	80007fc <S2PI_WriteGpioPin>
 8017200:	2800      	cmp	r0, #0
 8017202:	db7a      	blt.n	80172fa <eeprom_place_command+0x15a>
 8017204:	f085 0201 	eor.w	r2, r5, #1
 8017208:	2102      	movs	r1, #2
 801720a:	4620      	mov	r0, r4
 801720c:	f7e9 faf6 	bl	80007fc <S2PI_WriteGpioPin>
 8017210:	2800      	cmp	r0, #0
 8017212:	db72      	blt.n	80172fa <eeprom_place_command+0x15a>
 8017214:	2201      	movs	r2, #1
 8017216:	2100      	movs	r1, #0
 8017218:	4620      	mov	r0, r4
 801721a:	f7e9 faef 	bl	80007fc <S2PI_WriteGpioPin>
 801721e:	2800      	cmp	r0, #0
 8017220:	db6b      	blt.n	80172fa <eeprom_place_command+0x15a>
 8017222:	2200      	movs	r2, #0
 8017224:	4611      	mov	r1, r2
 8017226:	4620      	mov	r0, r4
 8017228:	f7e9 fae8 	bl	80007fc <S2PI_WriteGpioPin>
 801722c:	2800      	cmp	r0, #0
 801722e:	db64      	blt.n	80172fa <eeprom_place_command+0x15a>
 8017230:	08f2      	lsrs	r2, r6, #3
 8017232:	2102      	movs	r1, #2
 8017234:	4620      	mov	r0, r4
 8017236:	f7e9 fae1 	bl	80007fc <S2PI_WriteGpioPin>
 801723a:	2800      	cmp	r0, #0
 801723c:	db5d      	blt.n	80172fa <eeprom_place_command+0x15a>
 801723e:	2201      	movs	r2, #1
 8017240:	2100      	movs	r1, #0
 8017242:	4620      	mov	r0, r4
 8017244:	f7e9 fada 	bl	80007fc <S2PI_WriteGpioPin>
 8017248:	2800      	cmp	r0, #0
 801724a:	db56      	blt.n	80172fa <eeprom_place_command+0x15a>
 801724c:	2200      	movs	r2, #0
 801724e:	4611      	mov	r1, r2
 8017250:	4620      	mov	r0, r4
 8017252:	f7e9 fad3 	bl	80007fc <S2PI_WriteGpioPin>
 8017256:	2800      	cmp	r0, #0
 8017258:	db4f      	blt.n	80172fa <eeprom_place_command+0x15a>
 801725a:	f3c6 0280 	ubfx	r2, r6, #2, #1
 801725e:	2102      	movs	r1, #2
 8017260:	4620      	mov	r0, r4
 8017262:	f7e9 facb 	bl	80007fc <S2PI_WriteGpioPin>
 8017266:	2800      	cmp	r0, #0
 8017268:	db47      	blt.n	80172fa <eeprom_place_command+0x15a>
 801726a:	2201      	movs	r2, #1
 801726c:	2100      	movs	r1, #0
 801726e:	4620      	mov	r0, r4
 8017270:	f7e9 fac4 	bl	80007fc <S2PI_WriteGpioPin>
 8017274:	2800      	cmp	r0, #0
 8017276:	db40      	blt.n	80172fa <eeprom_place_command+0x15a>
 8017278:	2200      	movs	r2, #0
 801727a:	4611      	mov	r1, r2
 801727c:	4620      	mov	r0, r4
 801727e:	f7e9 fabd 	bl	80007fc <S2PI_WriteGpioPin>
 8017282:	2800      	cmp	r0, #0
 8017284:	db39      	blt.n	80172fa <eeprom_place_command+0x15a>
 8017286:	f3c6 0240 	ubfx	r2, r6, #1, #1
 801728a:	2102      	movs	r1, #2
 801728c:	4620      	mov	r0, r4
 801728e:	f7e9 fab5 	bl	80007fc <S2PI_WriteGpioPin>
 8017292:	2800      	cmp	r0, #0
 8017294:	db31      	blt.n	80172fa <eeprom_place_command+0x15a>
 8017296:	2201      	movs	r2, #1
 8017298:	2100      	movs	r1, #0
 801729a:	4620      	mov	r0, r4
 801729c:	f7e9 faae 	bl	80007fc <S2PI_WriteGpioPin>
 80172a0:	2800      	cmp	r0, #0
 80172a2:	db2a      	blt.n	80172fa <eeprom_place_command+0x15a>
 80172a4:	2200      	movs	r2, #0
 80172a6:	4611      	mov	r1, r2
 80172a8:	4620      	mov	r0, r4
 80172aa:	f7e9 faa7 	bl	80007fc <S2PI_WriteGpioPin>
 80172ae:	2800      	cmp	r0, #0
 80172b0:	db23      	blt.n	80172fa <eeprom_place_command+0x15a>
 80172b2:	f006 0201 	and.w	r2, r6, #1
 80172b6:	2102      	movs	r1, #2
 80172b8:	4620      	mov	r0, r4
 80172ba:	f7e9 fa9f 	bl	80007fc <S2PI_WriteGpioPin>
 80172be:	2800      	cmp	r0, #0
 80172c0:	db1b      	blt.n	80172fa <eeprom_place_command+0x15a>
 80172c2:	2201      	movs	r2, #1
 80172c4:	2100      	movs	r1, #0
 80172c6:	4620      	mov	r0, r4
 80172c8:	f7e9 fa98 	bl	80007fc <S2PI_WriteGpioPin>
 80172cc:	2800      	cmp	r0, #0
 80172ce:	db14      	blt.n	80172fa <eeprom_place_command+0x15a>
 80172d0:	2200      	movs	r2, #0
 80172d2:	4611      	mov	r1, r2
 80172d4:	4620      	mov	r0, r4
 80172d6:	f7e9 fa91 	bl	80007fc <S2PI_WriteGpioPin>
 80172da:	2800      	cmp	r0, #0
 80172dc:	db0d      	blt.n	80172fa <eeprom_place_command+0x15a>
 80172de:	2201      	movs	r2, #1
 80172e0:	4611      	mov	r1, r2
 80172e2:	4620      	mov	r0, r4
 80172e4:	f7e9 fa8a 	bl	80007fc <S2PI_WriteGpioPin>
 80172e8:	2800      	cmp	r0, #0
 80172ea:	db06      	blt.n	80172fa <eeprom_place_command+0x15a>
 80172ec:	4620      	mov	r0, r4
 80172ee:	2201      	movs	r2, #1
 80172f0:	2100      	movs	r1, #0
 80172f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172f6:	f7e9 ba81 	b.w	80007fc <S2PI_WriteGpioPin>
 80172fa:	bd70      	pop	{r4, r5, r6, pc}

080172fc <eeprom_write_ce>:
 80172fc:	b570      	push	{r4, r5, r6, lr}
 80172fe:	460d      	mov	r5, r1
 8017300:	4616      	mov	r6, r2
 8017302:	2101      	movs	r1, #1
 8017304:	2200      	movs	r2, #0
 8017306:	4604      	mov	r4, r0
 8017308:	f7e9 fa78 	bl	80007fc <S2PI_WriteGpioPin>
 801730c:	2800      	cmp	r0, #0
 801730e:	f2c0 80be 	blt.w	801748e <eeprom_write_ce+0x192>
 8017312:	2200      	movs	r2, #0
 8017314:	2102      	movs	r1, #2
 8017316:	4620      	mov	r0, r4
 8017318:	f7e9 fa70 	bl	80007fc <S2PI_WriteGpioPin>
 801731c:	2800      	cmp	r0, #0
 801731e:	f2c0 80b6 	blt.w	801748e <eeprom_write_ce+0x192>
 8017322:	2200      	movs	r2, #0
 8017324:	4611      	mov	r1, r2
 8017326:	4620      	mov	r0, r4
 8017328:	f7e9 fa68 	bl	80007fc <S2PI_WriteGpioPin>
 801732c:	2800      	cmp	r0, #0
 801732e:	f2c0 80ae 	blt.w	801748e <eeprom_write_ce+0x192>
 8017332:	2201      	movs	r2, #1
 8017334:	2100      	movs	r1, #0
 8017336:	4620      	mov	r0, r4
 8017338:	f7e9 fa60 	bl	80007fc <S2PI_WriteGpioPin>
 801733c:	2800      	cmp	r0, #0
 801733e:	f2c0 80a6 	blt.w	801748e <eeprom_write_ce+0x192>
 8017342:	2200      	movs	r2, #0
 8017344:	2102      	movs	r1, #2
 8017346:	4620      	mov	r0, r4
 8017348:	f7e9 fa58 	bl	80007fc <S2PI_WriteGpioPin>
 801734c:	2800      	cmp	r0, #0
 801734e:	f2c0 809e 	blt.w	801748e <eeprom_write_ce+0x192>
 8017352:	2200      	movs	r2, #0
 8017354:	4611      	mov	r1, r2
 8017356:	4620      	mov	r0, r4
 8017358:	f7e9 fa50 	bl	80007fc <S2PI_WriteGpioPin>
 801735c:	2800      	cmp	r0, #0
 801735e:	f2c0 8096 	blt.w	801748e <eeprom_write_ce+0x192>
 8017362:	2201      	movs	r2, #1
 8017364:	2100      	movs	r1, #0
 8017366:	4620      	mov	r0, r4
 8017368:	f7e9 fa48 	bl	80007fc <S2PI_WriteGpioPin>
 801736c:	2800      	cmp	r0, #0
 801736e:	f2c0 808e 	blt.w	801748e <eeprom_write_ce+0x192>
 8017372:	2201      	movs	r2, #1
 8017374:	2102      	movs	r1, #2
 8017376:	4620      	mov	r0, r4
 8017378:	f7e9 fa40 	bl	80007fc <S2PI_WriteGpioPin>
 801737c:	2800      	cmp	r0, #0
 801737e:	f2c0 8086 	blt.w	801748e <eeprom_write_ce+0x192>
 8017382:	2200      	movs	r2, #0
 8017384:	4611      	mov	r1, r2
 8017386:	4620      	mov	r0, r4
 8017388:	f7e9 fa38 	bl	80007fc <S2PI_WriteGpioPin>
 801738c:	2800      	cmp	r0, #0
 801738e:	db7e      	blt.n	801748e <eeprom_write_ce+0x192>
 8017390:	2201      	movs	r2, #1
 8017392:	2100      	movs	r1, #0
 8017394:	4620      	mov	r0, r4
 8017396:	f7e9 fa31 	bl	80007fc <S2PI_WriteGpioPin>
 801739a:	2800      	cmp	r0, #0
 801739c:	db77      	blt.n	801748e <eeprom_write_ce+0x192>
 801739e:	2200      	movs	r2, #0
 80173a0:	2102      	movs	r1, #2
 80173a2:	4620      	mov	r0, r4
 80173a4:	f7e9 fa2a 	bl	80007fc <S2PI_WriteGpioPin>
 80173a8:	2800      	cmp	r0, #0
 80173aa:	db70      	blt.n	801748e <eeprom_write_ce+0x192>
 80173ac:	2200      	movs	r2, #0
 80173ae:	4611      	mov	r1, r2
 80173b0:	4620      	mov	r0, r4
 80173b2:	f7e9 fa23 	bl	80007fc <S2PI_WriteGpioPin>
 80173b6:	2800      	cmp	r0, #0
 80173b8:	db69      	blt.n	801748e <eeprom_write_ce+0x192>
 80173ba:	2201      	movs	r2, #1
 80173bc:	2100      	movs	r1, #0
 80173be:	4620      	mov	r0, r4
 80173c0:	f7e9 fa1c 	bl	80007fc <S2PI_WriteGpioPin>
 80173c4:	2800      	cmp	r0, #0
 80173c6:	db62      	blt.n	801748e <eeprom_write_ce+0x192>
 80173c8:	2201      	movs	r2, #1
 80173ca:	2102      	movs	r1, #2
 80173cc:	4620      	mov	r0, r4
 80173ce:	f7e9 fa15 	bl	80007fc <S2PI_WriteGpioPin>
 80173d2:	2800      	cmp	r0, #0
 80173d4:	db5b      	blt.n	801748e <eeprom_write_ce+0x192>
 80173d6:	2200      	movs	r2, #0
 80173d8:	4611      	mov	r1, r2
 80173da:	4620      	mov	r0, r4
 80173dc:	f7e9 fa0e 	bl	80007fc <S2PI_WriteGpioPin>
 80173e0:	2800      	cmp	r0, #0
 80173e2:	db54      	blt.n	801748e <eeprom_write_ce+0x192>
 80173e4:	2201      	movs	r2, #1
 80173e6:	2100      	movs	r1, #0
 80173e8:	4620      	mov	r0, r4
 80173ea:	f7e9 fa07 	bl	80007fc <S2PI_WriteGpioPin>
 80173ee:	2800      	cmp	r0, #0
 80173f0:	db4d      	blt.n	801748e <eeprom_write_ce+0x192>
 80173f2:	2201      	movs	r2, #1
 80173f4:	2102      	movs	r1, #2
 80173f6:	4620      	mov	r0, r4
 80173f8:	f7e9 fa00 	bl	80007fc <S2PI_WriteGpioPin>
 80173fc:	2800      	cmp	r0, #0
 80173fe:	db46      	blt.n	801748e <eeprom_write_ce+0x192>
 8017400:	2200      	movs	r2, #0
 8017402:	4611      	mov	r1, r2
 8017404:	4620      	mov	r0, r4
 8017406:	f7e9 f9f9 	bl	80007fc <S2PI_WriteGpioPin>
 801740a:	2800      	cmp	r0, #0
 801740c:	db3f      	blt.n	801748e <eeprom_write_ce+0x192>
 801740e:	2201      	movs	r2, #1
 8017410:	2100      	movs	r1, #0
 8017412:	4620      	mov	r0, r4
 8017414:	f7e9 f9f2 	bl	80007fc <S2PI_WriteGpioPin>
 8017418:	2800      	cmp	r0, #0
 801741a:	db38      	blt.n	801748e <eeprom_write_ce+0x192>
 801741c:	f085 0201 	eor.w	r2, r5, #1
 8017420:	2102      	movs	r1, #2
 8017422:	4620      	mov	r0, r4
 8017424:	f7e9 f9ea 	bl	80007fc <S2PI_WriteGpioPin>
 8017428:	2800      	cmp	r0, #0
 801742a:	db30      	blt.n	801748e <eeprom_write_ce+0x192>
 801742c:	2200      	movs	r2, #0
 801742e:	4611      	mov	r1, r2
 8017430:	4620      	mov	r0, r4
 8017432:	f7e9 f9e3 	bl	80007fc <S2PI_WriteGpioPin>
 8017436:	2800      	cmp	r0, #0
 8017438:	db29      	blt.n	801748e <eeprom_write_ce+0x192>
 801743a:	2201      	movs	r2, #1
 801743c:	2100      	movs	r1, #0
 801743e:	4620      	mov	r0, r4
 8017440:	f7e9 f9dc 	bl	80007fc <S2PI_WriteGpioPin>
 8017444:	2800      	cmp	r0, #0
 8017446:	db22      	blt.n	801748e <eeprom_write_ce+0x192>
 8017448:	4632      	mov	r2, r6
 801744a:	2102      	movs	r1, #2
 801744c:	4620      	mov	r0, r4
 801744e:	f7e9 f9d5 	bl	80007fc <S2PI_WriteGpioPin>
 8017452:	2800      	cmp	r0, #0
 8017454:	db1b      	blt.n	801748e <eeprom_write_ce+0x192>
 8017456:	2200      	movs	r2, #0
 8017458:	4611      	mov	r1, r2
 801745a:	4620      	mov	r0, r4
 801745c:	f7e9 f9ce 	bl	80007fc <S2PI_WriteGpioPin>
 8017460:	2800      	cmp	r0, #0
 8017462:	db14      	blt.n	801748e <eeprom_write_ce+0x192>
 8017464:	2201      	movs	r2, #1
 8017466:	2100      	movs	r1, #0
 8017468:	4620      	mov	r0, r4
 801746a:	f7e9 f9c7 	bl	80007fc <S2PI_WriteGpioPin>
 801746e:	2800      	cmp	r0, #0
 8017470:	db0d      	blt.n	801748e <eeprom_write_ce+0x192>
 8017472:	2200      	movs	r2, #0
 8017474:	2102      	movs	r1, #2
 8017476:	4620      	mov	r0, r4
 8017478:	f7e9 f9c0 	bl	80007fc <S2PI_WriteGpioPin>
 801747c:	2800      	cmp	r0, #0
 801747e:	db06      	blt.n	801748e <eeprom_write_ce+0x192>
 8017480:	2200      	movs	r2, #0
 8017482:	4620      	mov	r0, r4
 8017484:	4611      	mov	r1, r2
 8017486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801748a:	f7e9 b9b7 	b.w	80007fc <S2PI_WriteGpioPin>
 801748e:	bd70      	pop	{r4, r5, r6, pc}

08017490 <EEPROM_Read>:
 8017490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017492:	b083      	sub	sp, #12
 8017494:	4604      	mov	r4, r0
 8017496:	460d      	mov	r5, r1
 8017498:	4616      	mov	r6, r2
 801749a:	f7e9 f969 	bl	8000770 <S2PI_CaptureGpioControl>
 801749e:	1e03      	subs	r3, r0, #0
 80174a0:	f2c0 80b2 	blt.w	8017608 <EEPROM_Read+0x178>
 80174a4:	2201      	movs	r2, #1
 80174a6:	4611      	mov	r1, r2
 80174a8:	4620      	mov	r0, r4
 80174aa:	f7e9 f9a7 	bl	80007fc <S2PI_WriteGpioPin>
 80174ae:	1e03      	subs	r3, r0, #0
 80174b0:	f2c0 80aa 	blt.w	8017608 <EEPROM_Read+0x178>
 80174b4:	2201      	movs	r2, #1
 80174b6:	2102      	movs	r1, #2
 80174b8:	4620      	mov	r0, r4
 80174ba:	f7e9 f99f 	bl	80007fc <S2PI_WriteGpioPin>
 80174be:	1e03      	subs	r3, r0, #0
 80174c0:	f2c0 80a2 	blt.w	8017608 <EEPROM_Read+0x178>
 80174c4:	2201      	movs	r2, #1
 80174c6:	2100      	movs	r1, #0
 80174c8:	4620      	mov	r0, r4
 80174ca:	f7e9 f997 	bl	80007fc <S2PI_WriteGpioPin>
 80174ce:	1e03      	subs	r3, r0, #0
 80174d0:	f2c0 809a 	blt.w	8017608 <EEPROM_Read+0x178>
 80174d4:	2200      	movs	r2, #0
 80174d6:	2101      	movs	r1, #1
 80174d8:	4620      	mov	r0, r4
 80174da:	f7ff ff0f 	bl	80172fc <eeprom_write_ce>
 80174de:	1e03      	subs	r3, r0, #0
 80174e0:	f2c0 8092 	blt.w	8017608 <EEPROM_Read+0x178>
 80174e4:	f005 020f 	and.w	r2, r5, #15
 80174e8:	2101      	movs	r1, #1
 80174ea:	4620      	mov	r0, r4
 80174ec:	f7ff fe58 	bl	80171a0 <eeprom_place_command>
 80174f0:	1e03      	subs	r3, r0, #0
 80174f2:	f2c0 8089 	blt.w	8017608 <EEPROM_Read+0x178>
 80174f6:	2200      	movs	r2, #0
 80174f8:	2101      	movs	r1, #1
 80174fa:	4620      	mov	r0, r4
 80174fc:	f7ff fefe 	bl	80172fc <eeprom_write_ce>
 8017500:	1e03      	subs	r3, r0, #0
 8017502:	f2c0 8081 	blt.w	8017608 <EEPROM_Read+0x178>
 8017506:	2200      	movs	r2, #0
 8017508:	4611      	mov	r1, r2
 801750a:	4620      	mov	r0, r4
 801750c:	f7e9 f976 	bl	80007fc <S2PI_WriteGpioPin>
 8017510:	1e03      	subs	r3, r0, #0
 8017512:	db79      	blt.n	8017608 <EEPROM_Read+0x178>
 8017514:	2201      	movs	r2, #1
 8017516:	4611      	mov	r1, r2
 8017518:	4620      	mov	r0, r4
 801751a:	f7e9 f96f 	bl	80007fc <S2PI_WriteGpioPin>
 801751e:	1e03      	subs	r3, r0, #0
 8017520:	db72      	blt.n	8017608 <EEPROM_Read+0x178>
 8017522:	2201      	movs	r2, #1
 8017524:	2100      	movs	r1, #0
 8017526:	4620      	mov	r0, r4
 8017528:	f7e9 f968 	bl	80007fc <S2PI_WriteGpioPin>
 801752c:	1e03      	subs	r3, r0, #0
 801752e:	db6b      	blt.n	8017608 <EEPROM_Read+0x178>
 8017530:	2201      	movs	r2, #1
 8017532:	2100      	movs	r1, #0
 8017534:	4620      	mov	r0, r4
 8017536:	f7ff fee1 	bl	80172fc <eeprom_write_ce>
 801753a:	1e03      	subs	r3, r0, #0
 801753c:	db64      	blt.n	8017608 <EEPROM_Read+0x178>
 801753e:	2300      	movs	r3, #0
 8017540:	9301      	str	r3, [sp, #4]
 8017542:	7033      	strb	r3, [r6, #0]
 8017544:	2507      	movs	r5, #7
 8017546:	2201      	movs	r2, #1
 8017548:	2100      	movs	r1, #0
 801754a:	4620      	mov	r0, r4
 801754c:	f7e9 f956 	bl	80007fc <S2PI_WriteGpioPin>
 8017550:	1e03      	subs	r3, r0, #0
 8017552:	aa01      	add	r2, sp, #4
 8017554:	f04f 0103 	mov.w	r1, #3
 8017558:	4620      	mov	r0, r4
 801755a:	db55      	blt.n	8017608 <EEPROM_Read+0x178>
 801755c:	f7e9 f982 	bl	8000864 <S2PI_ReadGpioPin>
 8017560:	2200      	movs	r2, #0
 8017562:	1e03      	subs	r3, r0, #0
 8017564:	4611      	mov	r1, r2
 8017566:	4620      	mov	r0, r4
 8017568:	db4e      	blt.n	8017608 <EEPROM_Read+0x178>
 801756a:	9b01      	ldr	r3, [sp, #4]
 801756c:	7837      	ldrb	r7, [r6, #0]
 801756e:	40ab      	lsls	r3, r5
 8017570:	433b      	orrs	r3, r7
 8017572:	7033      	strb	r3, [r6, #0]
 8017574:	f7e9 f942 	bl	80007fc <S2PI_WriteGpioPin>
 8017578:	1e03      	subs	r3, r0, #0
 801757a:	f105 35ff 	add.w	r5, r5, #4294967295
 801757e:	db43      	blt.n	8017608 <EEPROM_Read+0x178>
 8017580:	1c6b      	adds	r3, r5, #1
 8017582:	d1e0      	bne.n	8017546 <EEPROM_Read+0xb6>
 8017584:	2201      	movs	r2, #1
 8017586:	4611      	mov	r1, r2
 8017588:	4620      	mov	r0, r4
 801758a:	f7e9 f937 	bl	80007fc <S2PI_WriteGpioPin>
 801758e:	1e03      	subs	r3, r0, #0
 8017590:	db3a      	blt.n	8017608 <EEPROM_Read+0x178>
 8017592:	2201      	movs	r2, #1
 8017594:	2100      	movs	r1, #0
 8017596:	4620      	mov	r0, r4
 8017598:	f7e9 f930 	bl	80007fc <S2PI_WriteGpioPin>
 801759c:	1e03      	subs	r3, r0, #0
 801759e:	db33      	blt.n	8017608 <EEPROM_Read+0x178>
 80175a0:	2200      	movs	r2, #0
 80175a2:	2101      	movs	r1, #1
 80175a4:	4620      	mov	r0, r4
 80175a6:	f7ff fea9 	bl	80172fc <eeprom_write_ce>
 80175aa:	1e03      	subs	r3, r0, #0
 80175ac:	db2c      	blt.n	8017608 <EEPROM_Read+0x178>
 80175ae:	2200      	movs	r2, #0
 80175b0:	4611      	mov	r1, r2
 80175b2:	4620      	mov	r0, r4
 80175b4:	f7e9 f922 	bl	80007fc <S2PI_WriteGpioPin>
 80175b8:	1e03      	subs	r3, r0, #0
 80175ba:	db25      	blt.n	8017608 <EEPROM_Read+0x178>
 80175bc:	2201      	movs	r2, #1
 80175be:	4611      	mov	r1, r2
 80175c0:	4620      	mov	r0, r4
 80175c2:	f7e9 f91b 	bl	80007fc <S2PI_WriteGpioPin>
 80175c6:	1e03      	subs	r3, r0, #0
 80175c8:	db1e      	blt.n	8017608 <EEPROM_Read+0x178>
 80175ca:	2201      	movs	r2, #1
 80175cc:	2100      	movs	r1, #0
 80175ce:	4620      	mov	r0, r4
 80175d0:	f7e9 f914 	bl	80007fc <S2PI_WriteGpioPin>
 80175d4:	1e03      	subs	r3, r0, #0
 80175d6:	db17      	blt.n	8017608 <EEPROM_Read+0x178>
 80175d8:	2201      	movs	r2, #1
 80175da:	4611      	mov	r1, r2
 80175dc:	4620      	mov	r0, r4
 80175de:	f7e9 f90d 	bl	80007fc <S2PI_WriteGpioPin>
 80175e2:	1e03      	subs	r3, r0, #0
 80175e4:	db10      	blt.n	8017608 <EEPROM_Read+0x178>
 80175e6:	2201      	movs	r2, #1
 80175e8:	2102      	movs	r1, #2
 80175ea:	4620      	mov	r0, r4
 80175ec:	f7e9 f906 	bl	80007fc <S2PI_WriteGpioPin>
 80175f0:	1e03      	subs	r3, r0, #0
 80175f2:	db09      	blt.n	8017608 <EEPROM_Read+0x178>
 80175f4:	4620      	mov	r0, r4
 80175f6:	2201      	movs	r2, #1
 80175f8:	2100      	movs	r1, #0
 80175fa:	f7e9 f8ff 	bl	80007fc <S2PI_WriteGpioPin>
 80175fe:	1e03      	subs	r3, r0, #0
 8017600:	db02      	blt.n	8017608 <EEPROM_Read+0x178>
 8017602:	f7e9 f8dd 	bl	80007c0 <S2PI_ReleaseGpioControl>
 8017606:	4603      	mov	r3, r0
 8017608:	4618      	mov	r0, r3
 801760a:	b003      	add	sp, #12
 801760c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801760e:	bf00      	nop

08017610 <NVM_Init>:
 8017610:	f06f 0008 	mvn.w	r0, #8
 8017614:	4770      	bx	lr
 8017616:	bf00      	nop

08017618 <NVM_Write>:
 8017618:	f06f 0008 	mvn.w	r0, #8
 801761c:	4770      	bx	lr
 801761e:	bf00      	nop

08017620 <NVM_Read>:
 8017620:	f06f 0008 	mvn.w	r0, #8
 8017624:	4770      	bx	lr
 8017626:	bf00      	nop

08017628 <__assert_func>:
 8017628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801762a:	461c      	mov	r4, r3
 801762c:	4b09      	ldr	r3, [pc, #36]	; (8017654 <__assert_func+0x2c>)
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	4605      	mov	r5, r0
 8017632:	68d8      	ldr	r0, [r3, #12]
 8017634:	b152      	cbz	r2, 801764c <__assert_func+0x24>
 8017636:	4b08      	ldr	r3, [pc, #32]	; (8017658 <__assert_func+0x30>)
 8017638:	9202      	str	r2, [sp, #8]
 801763a:	e88d 000a 	stmia.w	sp, {r1, r3}
 801763e:	4622      	mov	r2, r4
 8017640:	462b      	mov	r3, r5
 8017642:	4906      	ldr	r1, [pc, #24]	; (801765c <__assert_func+0x34>)
 8017644:	f000 f814 	bl	8017670 <fiprintf>
 8017648:	f000 fcfe 	bl	8018048 <abort>
 801764c:	4b04      	ldr	r3, [pc, #16]	; (8017660 <__assert_func+0x38>)
 801764e:	461a      	mov	r2, r3
 8017650:	e7f2      	b.n	8017638 <__assert_func+0x10>
 8017652:	bf00      	nop
 8017654:	20000054 	.word	0x20000054
 8017658:	0801cc18 	.word	0x0801cc18
 801765c:	0801cc25 	.word	0x0801cc25
 8017660:	0801cc53 	.word	0x0801cc53

08017664 <__errno>:
 8017664:	4b01      	ldr	r3, [pc, #4]	; (801766c <__errno+0x8>)
 8017666:	6818      	ldr	r0, [r3, #0]
 8017668:	4770      	bx	lr
 801766a:	bf00      	nop
 801766c:	20000054 	.word	0x20000054

08017670 <fiprintf>:
 8017670:	b40e      	push	{r1, r2, r3}
 8017672:	b503      	push	{r0, r1, lr}
 8017674:	4601      	mov	r1, r0
 8017676:	ab03      	add	r3, sp, #12
 8017678:	4805      	ldr	r0, [pc, #20]	; (8017690 <fiprintf+0x20>)
 801767a:	f853 2b04 	ldr.w	r2, [r3], #4
 801767e:	6800      	ldr	r0, [r0, #0]
 8017680:	9301      	str	r3, [sp, #4]
 8017682:	f000 f92b 	bl	80178dc <_vfiprintf_r>
 8017686:	b002      	add	sp, #8
 8017688:	f85d eb04 	ldr.w	lr, [sp], #4
 801768c:	b003      	add	sp, #12
 801768e:	4770      	bx	lr
 8017690:	20000054 	.word	0x20000054

08017694 <__libc_init_array>:
 8017694:	b570      	push	{r4, r5, r6, lr}
 8017696:	4e0d      	ldr	r6, [pc, #52]	; (80176cc <__libc_init_array+0x38>)
 8017698:	4c0d      	ldr	r4, [pc, #52]	; (80176d0 <__libc_init_array+0x3c>)
 801769a:	1ba4      	subs	r4, r4, r6
 801769c:	10a4      	asrs	r4, r4, #2
 801769e:	2500      	movs	r5, #0
 80176a0:	42a5      	cmp	r5, r4
 80176a2:	d109      	bne.n	80176b8 <__libc_init_array+0x24>
 80176a4:	4e0b      	ldr	r6, [pc, #44]	; (80176d4 <__libc_init_array+0x40>)
 80176a6:	4c0c      	ldr	r4, [pc, #48]	; (80176d8 <__libc_init_array+0x44>)
 80176a8:	f001 f942 	bl	8018930 <_init>
 80176ac:	1ba4      	subs	r4, r4, r6
 80176ae:	10a4      	asrs	r4, r4, #2
 80176b0:	2500      	movs	r5, #0
 80176b2:	42a5      	cmp	r5, r4
 80176b4:	d105      	bne.n	80176c2 <__libc_init_array+0x2e>
 80176b6:	bd70      	pop	{r4, r5, r6, pc}
 80176b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80176bc:	4798      	blx	r3
 80176be:	3501      	adds	r5, #1
 80176c0:	e7ee      	b.n	80176a0 <__libc_init_array+0xc>
 80176c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80176c6:	4798      	blx	r3
 80176c8:	3501      	adds	r5, #1
 80176ca:	e7f2      	b.n	80176b2 <__libc_init_array+0x1e>
 80176cc:	0801ccf4 	.word	0x0801ccf4
 80176d0:	0801ccf4 	.word	0x0801ccf4
 80176d4:	0801ccf4 	.word	0x0801ccf4
 80176d8:	0801ccf8 	.word	0x0801ccf8

080176dc <malloc>:
 80176dc:	4b02      	ldr	r3, [pc, #8]	; (80176e8 <malloc+0xc>)
 80176de:	4601      	mov	r1, r0
 80176e0:	6818      	ldr	r0, [r3, #0]
 80176e2:	f000 b873 	b.w	80177cc <_malloc_r>
 80176e6:	bf00      	nop
 80176e8:	20000054 	.word	0x20000054

080176ec <memcmp>:
 80176ec:	b510      	push	{r4, lr}
 80176ee:	3901      	subs	r1, #1
 80176f0:	4402      	add	r2, r0
 80176f2:	4290      	cmp	r0, r2
 80176f4:	d101      	bne.n	80176fa <memcmp+0xe>
 80176f6:	2000      	movs	r0, #0
 80176f8:	bd10      	pop	{r4, pc}
 80176fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80176fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017702:	42a3      	cmp	r3, r4
 8017704:	d0f5      	beq.n	80176f2 <memcmp+0x6>
 8017706:	1b18      	subs	r0, r3, r4
 8017708:	bd10      	pop	{r4, pc}

0801770a <memcpy>:
 801770a:	b510      	push	{r4, lr}
 801770c:	1e43      	subs	r3, r0, #1
 801770e:	440a      	add	r2, r1
 8017710:	4291      	cmp	r1, r2
 8017712:	d100      	bne.n	8017716 <memcpy+0xc>
 8017714:	bd10      	pop	{r4, pc}
 8017716:	f811 4b01 	ldrb.w	r4, [r1], #1
 801771a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801771e:	e7f7      	b.n	8017710 <memcpy+0x6>

08017720 <memset>:
 8017720:	4402      	add	r2, r0
 8017722:	4603      	mov	r3, r0
 8017724:	4293      	cmp	r3, r2
 8017726:	d100      	bne.n	801772a <memset+0xa>
 8017728:	4770      	bx	lr
 801772a:	f803 1b01 	strb.w	r1, [r3], #1
 801772e:	e7f9      	b.n	8017724 <memset+0x4>

08017730 <_free_r>:
 8017730:	b538      	push	{r3, r4, r5, lr}
 8017732:	4605      	mov	r5, r0
 8017734:	2900      	cmp	r1, #0
 8017736:	d045      	beq.n	80177c4 <_free_r+0x94>
 8017738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801773c:	1f0c      	subs	r4, r1, #4
 801773e:	2b00      	cmp	r3, #0
 8017740:	bfb8      	it	lt
 8017742:	18e4      	addlt	r4, r4, r3
 8017744:	f000 fe82 	bl	801844c <__malloc_lock>
 8017748:	4a1f      	ldr	r2, [pc, #124]	; (80177c8 <_free_r+0x98>)
 801774a:	6813      	ldr	r3, [r2, #0]
 801774c:	4610      	mov	r0, r2
 801774e:	b933      	cbnz	r3, 801775e <_free_r+0x2e>
 8017750:	6063      	str	r3, [r4, #4]
 8017752:	6014      	str	r4, [r2, #0]
 8017754:	4628      	mov	r0, r5
 8017756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801775a:	f000 be78 	b.w	801844e <__malloc_unlock>
 801775e:	42a3      	cmp	r3, r4
 8017760:	d90c      	bls.n	801777c <_free_r+0x4c>
 8017762:	6821      	ldr	r1, [r4, #0]
 8017764:	1862      	adds	r2, r4, r1
 8017766:	4293      	cmp	r3, r2
 8017768:	bf04      	itt	eq
 801776a:	681a      	ldreq	r2, [r3, #0]
 801776c:	685b      	ldreq	r3, [r3, #4]
 801776e:	6063      	str	r3, [r4, #4]
 8017770:	bf04      	itt	eq
 8017772:	1852      	addeq	r2, r2, r1
 8017774:	6022      	streq	r2, [r4, #0]
 8017776:	6004      	str	r4, [r0, #0]
 8017778:	e7ec      	b.n	8017754 <_free_r+0x24>
 801777a:	4613      	mov	r3, r2
 801777c:	685a      	ldr	r2, [r3, #4]
 801777e:	b10a      	cbz	r2, 8017784 <_free_r+0x54>
 8017780:	42a2      	cmp	r2, r4
 8017782:	d9fa      	bls.n	801777a <_free_r+0x4a>
 8017784:	6819      	ldr	r1, [r3, #0]
 8017786:	1858      	adds	r0, r3, r1
 8017788:	42a0      	cmp	r0, r4
 801778a:	d10b      	bne.n	80177a4 <_free_r+0x74>
 801778c:	6820      	ldr	r0, [r4, #0]
 801778e:	4401      	add	r1, r0
 8017790:	1858      	adds	r0, r3, r1
 8017792:	4282      	cmp	r2, r0
 8017794:	6019      	str	r1, [r3, #0]
 8017796:	d1dd      	bne.n	8017754 <_free_r+0x24>
 8017798:	6810      	ldr	r0, [r2, #0]
 801779a:	6852      	ldr	r2, [r2, #4]
 801779c:	605a      	str	r2, [r3, #4]
 801779e:	4401      	add	r1, r0
 80177a0:	6019      	str	r1, [r3, #0]
 80177a2:	e7d7      	b.n	8017754 <_free_r+0x24>
 80177a4:	d902      	bls.n	80177ac <_free_r+0x7c>
 80177a6:	230c      	movs	r3, #12
 80177a8:	602b      	str	r3, [r5, #0]
 80177aa:	e7d3      	b.n	8017754 <_free_r+0x24>
 80177ac:	6820      	ldr	r0, [r4, #0]
 80177ae:	1821      	adds	r1, r4, r0
 80177b0:	428a      	cmp	r2, r1
 80177b2:	bf04      	itt	eq
 80177b4:	6811      	ldreq	r1, [r2, #0]
 80177b6:	6852      	ldreq	r2, [r2, #4]
 80177b8:	6062      	str	r2, [r4, #4]
 80177ba:	bf04      	itt	eq
 80177bc:	1809      	addeq	r1, r1, r0
 80177be:	6021      	streq	r1, [r4, #0]
 80177c0:	605c      	str	r4, [r3, #4]
 80177c2:	e7c7      	b.n	8017754 <_free_r+0x24>
 80177c4:	bd38      	pop	{r3, r4, r5, pc}
 80177c6:	bf00      	nop
 80177c8:	200004f8 	.word	0x200004f8

080177cc <_malloc_r>:
 80177cc:	b570      	push	{r4, r5, r6, lr}
 80177ce:	1ccd      	adds	r5, r1, #3
 80177d0:	f025 0503 	bic.w	r5, r5, #3
 80177d4:	3508      	adds	r5, #8
 80177d6:	2d0c      	cmp	r5, #12
 80177d8:	bf38      	it	cc
 80177da:	250c      	movcc	r5, #12
 80177dc:	2d00      	cmp	r5, #0
 80177de:	4606      	mov	r6, r0
 80177e0:	db01      	blt.n	80177e6 <_malloc_r+0x1a>
 80177e2:	42a9      	cmp	r1, r5
 80177e4:	d903      	bls.n	80177ee <_malloc_r+0x22>
 80177e6:	230c      	movs	r3, #12
 80177e8:	6033      	str	r3, [r6, #0]
 80177ea:	2000      	movs	r0, #0
 80177ec:	bd70      	pop	{r4, r5, r6, pc}
 80177ee:	f000 fe2d 	bl	801844c <__malloc_lock>
 80177f2:	4a23      	ldr	r2, [pc, #140]	; (8017880 <_malloc_r+0xb4>)
 80177f4:	6814      	ldr	r4, [r2, #0]
 80177f6:	4621      	mov	r1, r4
 80177f8:	b991      	cbnz	r1, 8017820 <_malloc_r+0x54>
 80177fa:	4c22      	ldr	r4, [pc, #136]	; (8017884 <_malloc_r+0xb8>)
 80177fc:	6823      	ldr	r3, [r4, #0]
 80177fe:	b91b      	cbnz	r3, 8017808 <_malloc_r+0x3c>
 8017800:	4630      	mov	r0, r6
 8017802:	f000 fb17 	bl	8017e34 <_sbrk_r>
 8017806:	6020      	str	r0, [r4, #0]
 8017808:	4629      	mov	r1, r5
 801780a:	4630      	mov	r0, r6
 801780c:	f000 fb12 	bl	8017e34 <_sbrk_r>
 8017810:	1c43      	adds	r3, r0, #1
 8017812:	d126      	bne.n	8017862 <_malloc_r+0x96>
 8017814:	230c      	movs	r3, #12
 8017816:	6033      	str	r3, [r6, #0]
 8017818:	4630      	mov	r0, r6
 801781a:	f000 fe18 	bl	801844e <__malloc_unlock>
 801781e:	e7e4      	b.n	80177ea <_malloc_r+0x1e>
 8017820:	680b      	ldr	r3, [r1, #0]
 8017822:	1b5b      	subs	r3, r3, r5
 8017824:	d41a      	bmi.n	801785c <_malloc_r+0x90>
 8017826:	2b0b      	cmp	r3, #11
 8017828:	d90f      	bls.n	801784a <_malloc_r+0x7e>
 801782a:	600b      	str	r3, [r1, #0]
 801782c:	50cd      	str	r5, [r1, r3]
 801782e:	18cc      	adds	r4, r1, r3
 8017830:	4630      	mov	r0, r6
 8017832:	f000 fe0c 	bl	801844e <__malloc_unlock>
 8017836:	f104 000b 	add.w	r0, r4, #11
 801783a:	1d23      	adds	r3, r4, #4
 801783c:	f020 0007 	bic.w	r0, r0, #7
 8017840:	1ac3      	subs	r3, r0, r3
 8017842:	d01b      	beq.n	801787c <_malloc_r+0xb0>
 8017844:	425a      	negs	r2, r3
 8017846:	50e2      	str	r2, [r4, r3]
 8017848:	bd70      	pop	{r4, r5, r6, pc}
 801784a:	428c      	cmp	r4, r1
 801784c:	bf0d      	iteet	eq
 801784e:	6863      	ldreq	r3, [r4, #4]
 8017850:	684b      	ldrne	r3, [r1, #4]
 8017852:	6063      	strne	r3, [r4, #4]
 8017854:	6013      	streq	r3, [r2, #0]
 8017856:	bf18      	it	ne
 8017858:	460c      	movne	r4, r1
 801785a:	e7e9      	b.n	8017830 <_malloc_r+0x64>
 801785c:	460c      	mov	r4, r1
 801785e:	6849      	ldr	r1, [r1, #4]
 8017860:	e7ca      	b.n	80177f8 <_malloc_r+0x2c>
 8017862:	1cc4      	adds	r4, r0, #3
 8017864:	f024 0403 	bic.w	r4, r4, #3
 8017868:	42a0      	cmp	r0, r4
 801786a:	d005      	beq.n	8017878 <_malloc_r+0xac>
 801786c:	1a21      	subs	r1, r4, r0
 801786e:	4630      	mov	r0, r6
 8017870:	f000 fae0 	bl	8017e34 <_sbrk_r>
 8017874:	3001      	adds	r0, #1
 8017876:	d0cd      	beq.n	8017814 <_malloc_r+0x48>
 8017878:	6025      	str	r5, [r4, #0]
 801787a:	e7d9      	b.n	8017830 <_malloc_r+0x64>
 801787c:	bd70      	pop	{r4, r5, r6, pc}
 801787e:	bf00      	nop
 8017880:	200004f8 	.word	0x200004f8
 8017884:	200004fc 	.word	0x200004fc

08017888 <__sfputc_r>:
 8017888:	6893      	ldr	r3, [r2, #8]
 801788a:	3b01      	subs	r3, #1
 801788c:	2b00      	cmp	r3, #0
 801788e:	b410      	push	{r4}
 8017890:	6093      	str	r3, [r2, #8]
 8017892:	da09      	bge.n	80178a8 <__sfputc_r+0x20>
 8017894:	6994      	ldr	r4, [r2, #24]
 8017896:	42a3      	cmp	r3, r4
 8017898:	db02      	blt.n	80178a0 <__sfputc_r+0x18>
 801789a:	b2cb      	uxtb	r3, r1
 801789c:	2b0a      	cmp	r3, #10
 801789e:	d103      	bne.n	80178a8 <__sfputc_r+0x20>
 80178a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178a4:	f000 bb10 	b.w	8017ec8 <__swbuf_r>
 80178a8:	6813      	ldr	r3, [r2, #0]
 80178aa:	1c58      	adds	r0, r3, #1
 80178ac:	6010      	str	r0, [r2, #0]
 80178ae:	7019      	strb	r1, [r3, #0]
 80178b0:	b2c8      	uxtb	r0, r1
 80178b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178b6:	4770      	bx	lr

080178b8 <__sfputs_r>:
 80178b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178ba:	4606      	mov	r6, r0
 80178bc:	460f      	mov	r7, r1
 80178be:	4614      	mov	r4, r2
 80178c0:	18d5      	adds	r5, r2, r3
 80178c2:	42ac      	cmp	r4, r5
 80178c4:	d101      	bne.n	80178ca <__sfputs_r+0x12>
 80178c6:	2000      	movs	r0, #0
 80178c8:	e007      	b.n	80178da <__sfputs_r+0x22>
 80178ca:	463a      	mov	r2, r7
 80178cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178d0:	4630      	mov	r0, r6
 80178d2:	f7ff ffd9 	bl	8017888 <__sfputc_r>
 80178d6:	1c43      	adds	r3, r0, #1
 80178d8:	d1f3      	bne.n	80178c2 <__sfputs_r+0xa>
 80178da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080178dc <_vfiprintf_r>:
 80178dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178e0:	b09d      	sub	sp, #116	; 0x74
 80178e2:	460c      	mov	r4, r1
 80178e4:	4617      	mov	r7, r2
 80178e6:	9303      	str	r3, [sp, #12]
 80178e8:	4606      	mov	r6, r0
 80178ea:	b118      	cbz	r0, 80178f4 <_vfiprintf_r+0x18>
 80178ec:	6983      	ldr	r3, [r0, #24]
 80178ee:	b90b      	cbnz	r3, 80178f4 <_vfiprintf_r+0x18>
 80178f0:	f000 fca4 	bl	801823c <__sinit>
 80178f4:	4b7c      	ldr	r3, [pc, #496]	; (8017ae8 <_vfiprintf_r+0x20c>)
 80178f6:	429c      	cmp	r4, r3
 80178f8:	d157      	bne.n	80179aa <_vfiprintf_r+0xce>
 80178fa:	6874      	ldr	r4, [r6, #4]
 80178fc:	89a3      	ldrh	r3, [r4, #12]
 80178fe:	0718      	lsls	r0, r3, #28
 8017900:	d55d      	bpl.n	80179be <_vfiprintf_r+0xe2>
 8017902:	6923      	ldr	r3, [r4, #16]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d05a      	beq.n	80179be <_vfiprintf_r+0xe2>
 8017908:	2300      	movs	r3, #0
 801790a:	9309      	str	r3, [sp, #36]	; 0x24
 801790c:	2320      	movs	r3, #32
 801790e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017912:	2330      	movs	r3, #48	; 0x30
 8017914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017918:	f04f 0b01 	mov.w	fp, #1
 801791c:	46b8      	mov	r8, r7
 801791e:	4645      	mov	r5, r8
 8017920:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017924:	2b00      	cmp	r3, #0
 8017926:	d155      	bne.n	80179d4 <_vfiprintf_r+0xf8>
 8017928:	ebb8 0a07 	subs.w	sl, r8, r7
 801792c:	d00b      	beq.n	8017946 <_vfiprintf_r+0x6a>
 801792e:	4653      	mov	r3, sl
 8017930:	463a      	mov	r2, r7
 8017932:	4621      	mov	r1, r4
 8017934:	4630      	mov	r0, r6
 8017936:	f7ff ffbf 	bl	80178b8 <__sfputs_r>
 801793a:	3001      	adds	r0, #1
 801793c:	f000 80c4 	beq.w	8017ac8 <_vfiprintf_r+0x1ec>
 8017940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017942:	4453      	add	r3, sl
 8017944:	9309      	str	r3, [sp, #36]	; 0x24
 8017946:	f898 3000 	ldrb.w	r3, [r8]
 801794a:	2b00      	cmp	r3, #0
 801794c:	f000 80bc 	beq.w	8017ac8 <_vfiprintf_r+0x1ec>
 8017950:	2300      	movs	r3, #0
 8017952:	f04f 32ff 	mov.w	r2, #4294967295
 8017956:	9304      	str	r3, [sp, #16]
 8017958:	9307      	str	r3, [sp, #28]
 801795a:	9205      	str	r2, [sp, #20]
 801795c:	9306      	str	r3, [sp, #24]
 801795e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017962:	931a      	str	r3, [sp, #104]	; 0x68
 8017964:	2205      	movs	r2, #5
 8017966:	7829      	ldrb	r1, [r5, #0]
 8017968:	4860      	ldr	r0, [pc, #384]	; (8017aec <_vfiprintf_r+0x210>)
 801796a:	f7e8 fc51 	bl	8000210 <memchr>
 801796e:	f105 0801 	add.w	r8, r5, #1
 8017972:	9b04      	ldr	r3, [sp, #16]
 8017974:	2800      	cmp	r0, #0
 8017976:	d131      	bne.n	80179dc <_vfiprintf_r+0x100>
 8017978:	06d9      	lsls	r1, r3, #27
 801797a:	bf44      	itt	mi
 801797c:	2220      	movmi	r2, #32
 801797e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017982:	071a      	lsls	r2, r3, #28
 8017984:	bf44      	itt	mi
 8017986:	222b      	movmi	r2, #43	; 0x2b
 8017988:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801798c:	782a      	ldrb	r2, [r5, #0]
 801798e:	2a2a      	cmp	r2, #42	; 0x2a
 8017990:	d02c      	beq.n	80179ec <_vfiprintf_r+0x110>
 8017992:	9a07      	ldr	r2, [sp, #28]
 8017994:	2100      	movs	r1, #0
 8017996:	200a      	movs	r0, #10
 8017998:	46a8      	mov	r8, r5
 801799a:	3501      	adds	r5, #1
 801799c:	f898 3000 	ldrb.w	r3, [r8]
 80179a0:	3b30      	subs	r3, #48	; 0x30
 80179a2:	2b09      	cmp	r3, #9
 80179a4:	d96d      	bls.n	8017a82 <_vfiprintf_r+0x1a6>
 80179a6:	b371      	cbz	r1, 8017a06 <_vfiprintf_r+0x12a>
 80179a8:	e026      	b.n	80179f8 <_vfiprintf_r+0x11c>
 80179aa:	4b51      	ldr	r3, [pc, #324]	; (8017af0 <_vfiprintf_r+0x214>)
 80179ac:	429c      	cmp	r4, r3
 80179ae:	d101      	bne.n	80179b4 <_vfiprintf_r+0xd8>
 80179b0:	68b4      	ldr	r4, [r6, #8]
 80179b2:	e7a3      	b.n	80178fc <_vfiprintf_r+0x20>
 80179b4:	4b4f      	ldr	r3, [pc, #316]	; (8017af4 <_vfiprintf_r+0x218>)
 80179b6:	429c      	cmp	r4, r3
 80179b8:	bf08      	it	eq
 80179ba:	68f4      	ldreq	r4, [r6, #12]
 80179bc:	e79e      	b.n	80178fc <_vfiprintf_r+0x20>
 80179be:	4621      	mov	r1, r4
 80179c0:	4630      	mov	r0, r6
 80179c2:	f000 fad3 	bl	8017f6c <__swsetup_r>
 80179c6:	2800      	cmp	r0, #0
 80179c8:	d09e      	beq.n	8017908 <_vfiprintf_r+0x2c>
 80179ca:	f04f 30ff 	mov.w	r0, #4294967295
 80179ce:	b01d      	add	sp, #116	; 0x74
 80179d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179d4:	2b25      	cmp	r3, #37	; 0x25
 80179d6:	d0a7      	beq.n	8017928 <_vfiprintf_r+0x4c>
 80179d8:	46a8      	mov	r8, r5
 80179da:	e7a0      	b.n	801791e <_vfiprintf_r+0x42>
 80179dc:	4a43      	ldr	r2, [pc, #268]	; (8017aec <_vfiprintf_r+0x210>)
 80179de:	1a80      	subs	r0, r0, r2
 80179e0:	fa0b f000 	lsl.w	r0, fp, r0
 80179e4:	4318      	orrs	r0, r3
 80179e6:	9004      	str	r0, [sp, #16]
 80179e8:	4645      	mov	r5, r8
 80179ea:	e7bb      	b.n	8017964 <_vfiprintf_r+0x88>
 80179ec:	9a03      	ldr	r2, [sp, #12]
 80179ee:	1d11      	adds	r1, r2, #4
 80179f0:	6812      	ldr	r2, [r2, #0]
 80179f2:	9103      	str	r1, [sp, #12]
 80179f4:	2a00      	cmp	r2, #0
 80179f6:	db01      	blt.n	80179fc <_vfiprintf_r+0x120>
 80179f8:	9207      	str	r2, [sp, #28]
 80179fa:	e004      	b.n	8017a06 <_vfiprintf_r+0x12a>
 80179fc:	4252      	negs	r2, r2
 80179fe:	f043 0302 	orr.w	r3, r3, #2
 8017a02:	9207      	str	r2, [sp, #28]
 8017a04:	9304      	str	r3, [sp, #16]
 8017a06:	f898 3000 	ldrb.w	r3, [r8]
 8017a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8017a0c:	d110      	bne.n	8017a30 <_vfiprintf_r+0x154>
 8017a0e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017a12:	2b2a      	cmp	r3, #42	; 0x2a
 8017a14:	f108 0101 	add.w	r1, r8, #1
 8017a18:	d137      	bne.n	8017a8a <_vfiprintf_r+0x1ae>
 8017a1a:	9b03      	ldr	r3, [sp, #12]
 8017a1c:	1d1a      	adds	r2, r3, #4
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	9203      	str	r2, [sp, #12]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	bfb8      	it	lt
 8017a26:	f04f 33ff 	movlt.w	r3, #4294967295
 8017a2a:	f108 0802 	add.w	r8, r8, #2
 8017a2e:	9305      	str	r3, [sp, #20]
 8017a30:	4d31      	ldr	r5, [pc, #196]	; (8017af8 <_vfiprintf_r+0x21c>)
 8017a32:	f898 1000 	ldrb.w	r1, [r8]
 8017a36:	2203      	movs	r2, #3
 8017a38:	4628      	mov	r0, r5
 8017a3a:	f7e8 fbe9 	bl	8000210 <memchr>
 8017a3e:	b140      	cbz	r0, 8017a52 <_vfiprintf_r+0x176>
 8017a40:	2340      	movs	r3, #64	; 0x40
 8017a42:	1b40      	subs	r0, r0, r5
 8017a44:	fa03 f000 	lsl.w	r0, r3, r0
 8017a48:	9b04      	ldr	r3, [sp, #16]
 8017a4a:	4303      	orrs	r3, r0
 8017a4c:	9304      	str	r3, [sp, #16]
 8017a4e:	f108 0801 	add.w	r8, r8, #1
 8017a52:	f898 1000 	ldrb.w	r1, [r8]
 8017a56:	4829      	ldr	r0, [pc, #164]	; (8017afc <_vfiprintf_r+0x220>)
 8017a58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a5c:	2206      	movs	r2, #6
 8017a5e:	f108 0701 	add.w	r7, r8, #1
 8017a62:	f7e8 fbd5 	bl	8000210 <memchr>
 8017a66:	2800      	cmp	r0, #0
 8017a68:	d034      	beq.n	8017ad4 <_vfiprintf_r+0x1f8>
 8017a6a:	4b25      	ldr	r3, [pc, #148]	; (8017b00 <_vfiprintf_r+0x224>)
 8017a6c:	bb03      	cbnz	r3, 8017ab0 <_vfiprintf_r+0x1d4>
 8017a6e:	9b03      	ldr	r3, [sp, #12]
 8017a70:	3307      	adds	r3, #7
 8017a72:	f023 0307 	bic.w	r3, r3, #7
 8017a76:	3308      	adds	r3, #8
 8017a78:	9303      	str	r3, [sp, #12]
 8017a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a7c:	444b      	add	r3, r9
 8017a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8017a80:	e74c      	b.n	801791c <_vfiprintf_r+0x40>
 8017a82:	fb00 3202 	mla	r2, r0, r2, r3
 8017a86:	2101      	movs	r1, #1
 8017a88:	e786      	b.n	8017998 <_vfiprintf_r+0xbc>
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	9305      	str	r3, [sp, #20]
 8017a8e:	4618      	mov	r0, r3
 8017a90:	250a      	movs	r5, #10
 8017a92:	4688      	mov	r8, r1
 8017a94:	3101      	adds	r1, #1
 8017a96:	f898 2000 	ldrb.w	r2, [r8]
 8017a9a:	3a30      	subs	r2, #48	; 0x30
 8017a9c:	2a09      	cmp	r2, #9
 8017a9e:	d903      	bls.n	8017aa8 <_vfiprintf_r+0x1cc>
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d0c5      	beq.n	8017a30 <_vfiprintf_r+0x154>
 8017aa4:	9005      	str	r0, [sp, #20]
 8017aa6:	e7c3      	b.n	8017a30 <_vfiprintf_r+0x154>
 8017aa8:	fb05 2000 	mla	r0, r5, r0, r2
 8017aac:	2301      	movs	r3, #1
 8017aae:	e7f0      	b.n	8017a92 <_vfiprintf_r+0x1b6>
 8017ab0:	ab03      	add	r3, sp, #12
 8017ab2:	9300      	str	r3, [sp, #0]
 8017ab4:	4622      	mov	r2, r4
 8017ab6:	4b13      	ldr	r3, [pc, #76]	; (8017b04 <_vfiprintf_r+0x228>)
 8017ab8:	a904      	add	r1, sp, #16
 8017aba:	4630      	mov	r0, r6
 8017abc:	f3af 8000 	nop.w
 8017ac0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017ac4:	4681      	mov	r9, r0
 8017ac6:	d1d8      	bne.n	8017a7a <_vfiprintf_r+0x19e>
 8017ac8:	89a3      	ldrh	r3, [r4, #12]
 8017aca:	065b      	lsls	r3, r3, #25
 8017acc:	f53f af7d 	bmi.w	80179ca <_vfiprintf_r+0xee>
 8017ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017ad2:	e77c      	b.n	80179ce <_vfiprintf_r+0xf2>
 8017ad4:	ab03      	add	r3, sp, #12
 8017ad6:	9300      	str	r3, [sp, #0]
 8017ad8:	4622      	mov	r2, r4
 8017ada:	4b0a      	ldr	r3, [pc, #40]	; (8017b04 <_vfiprintf_r+0x228>)
 8017adc:	a904      	add	r1, sp, #16
 8017ade:	4630      	mov	r0, r6
 8017ae0:	f000 f888 	bl	8017bf4 <_printf_i>
 8017ae4:	e7ec      	b.n	8017ac0 <_vfiprintf_r+0x1e4>
 8017ae6:	bf00      	nop
 8017ae8:	0801ccac 	.word	0x0801ccac
 8017aec:	0801cc58 	.word	0x0801cc58
 8017af0:	0801cccc 	.word	0x0801cccc
 8017af4:	0801cc8c 	.word	0x0801cc8c
 8017af8:	0801cc5e 	.word	0x0801cc5e
 8017afc:	0801cc62 	.word	0x0801cc62
 8017b00:	00000000 	.word	0x00000000
 8017b04:	080178b9 	.word	0x080178b9

08017b08 <_printf_common>:
 8017b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b0c:	4691      	mov	r9, r2
 8017b0e:	461f      	mov	r7, r3
 8017b10:	688a      	ldr	r2, [r1, #8]
 8017b12:	690b      	ldr	r3, [r1, #16]
 8017b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017b18:	4293      	cmp	r3, r2
 8017b1a:	bfb8      	it	lt
 8017b1c:	4613      	movlt	r3, r2
 8017b1e:	f8c9 3000 	str.w	r3, [r9]
 8017b22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017b26:	4606      	mov	r6, r0
 8017b28:	460c      	mov	r4, r1
 8017b2a:	b112      	cbz	r2, 8017b32 <_printf_common+0x2a>
 8017b2c:	3301      	adds	r3, #1
 8017b2e:	f8c9 3000 	str.w	r3, [r9]
 8017b32:	6823      	ldr	r3, [r4, #0]
 8017b34:	0699      	lsls	r1, r3, #26
 8017b36:	bf42      	ittt	mi
 8017b38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017b3c:	3302      	addmi	r3, #2
 8017b3e:	f8c9 3000 	strmi.w	r3, [r9]
 8017b42:	6825      	ldr	r5, [r4, #0]
 8017b44:	f015 0506 	ands.w	r5, r5, #6
 8017b48:	d107      	bne.n	8017b5a <_printf_common+0x52>
 8017b4a:	f104 0a19 	add.w	sl, r4, #25
 8017b4e:	68e3      	ldr	r3, [r4, #12]
 8017b50:	f8d9 2000 	ldr.w	r2, [r9]
 8017b54:	1a9b      	subs	r3, r3, r2
 8017b56:	429d      	cmp	r5, r3
 8017b58:	db29      	blt.n	8017bae <_printf_common+0xa6>
 8017b5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017b5e:	6822      	ldr	r2, [r4, #0]
 8017b60:	3300      	adds	r3, #0
 8017b62:	bf18      	it	ne
 8017b64:	2301      	movne	r3, #1
 8017b66:	0692      	lsls	r2, r2, #26
 8017b68:	d42e      	bmi.n	8017bc8 <_printf_common+0xc0>
 8017b6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017b6e:	4639      	mov	r1, r7
 8017b70:	4630      	mov	r0, r6
 8017b72:	47c0      	blx	r8
 8017b74:	3001      	adds	r0, #1
 8017b76:	d021      	beq.n	8017bbc <_printf_common+0xb4>
 8017b78:	6823      	ldr	r3, [r4, #0]
 8017b7a:	68e5      	ldr	r5, [r4, #12]
 8017b7c:	f8d9 2000 	ldr.w	r2, [r9]
 8017b80:	f003 0306 	and.w	r3, r3, #6
 8017b84:	2b04      	cmp	r3, #4
 8017b86:	bf08      	it	eq
 8017b88:	1aad      	subeq	r5, r5, r2
 8017b8a:	68a3      	ldr	r3, [r4, #8]
 8017b8c:	6922      	ldr	r2, [r4, #16]
 8017b8e:	bf0c      	ite	eq
 8017b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017b94:	2500      	movne	r5, #0
 8017b96:	4293      	cmp	r3, r2
 8017b98:	bfc4      	itt	gt
 8017b9a:	1a9b      	subgt	r3, r3, r2
 8017b9c:	18ed      	addgt	r5, r5, r3
 8017b9e:	f04f 0900 	mov.w	r9, #0
 8017ba2:	341a      	adds	r4, #26
 8017ba4:	454d      	cmp	r5, r9
 8017ba6:	d11b      	bne.n	8017be0 <_printf_common+0xd8>
 8017ba8:	2000      	movs	r0, #0
 8017baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bae:	2301      	movs	r3, #1
 8017bb0:	4652      	mov	r2, sl
 8017bb2:	4639      	mov	r1, r7
 8017bb4:	4630      	mov	r0, r6
 8017bb6:	47c0      	blx	r8
 8017bb8:	3001      	adds	r0, #1
 8017bba:	d103      	bne.n	8017bc4 <_printf_common+0xbc>
 8017bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8017bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bc4:	3501      	adds	r5, #1
 8017bc6:	e7c2      	b.n	8017b4e <_printf_common+0x46>
 8017bc8:	18e1      	adds	r1, r4, r3
 8017bca:	1c5a      	adds	r2, r3, #1
 8017bcc:	2030      	movs	r0, #48	; 0x30
 8017bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017bd2:	4422      	add	r2, r4
 8017bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017bdc:	3302      	adds	r3, #2
 8017bde:	e7c4      	b.n	8017b6a <_printf_common+0x62>
 8017be0:	2301      	movs	r3, #1
 8017be2:	4622      	mov	r2, r4
 8017be4:	4639      	mov	r1, r7
 8017be6:	4630      	mov	r0, r6
 8017be8:	47c0      	blx	r8
 8017bea:	3001      	adds	r0, #1
 8017bec:	d0e6      	beq.n	8017bbc <_printf_common+0xb4>
 8017bee:	f109 0901 	add.w	r9, r9, #1
 8017bf2:	e7d7      	b.n	8017ba4 <_printf_common+0x9c>

08017bf4 <_printf_i>:
 8017bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017bf8:	4617      	mov	r7, r2
 8017bfa:	7e0a      	ldrb	r2, [r1, #24]
 8017bfc:	b085      	sub	sp, #20
 8017bfe:	2a6e      	cmp	r2, #110	; 0x6e
 8017c00:	4698      	mov	r8, r3
 8017c02:	4606      	mov	r6, r0
 8017c04:	460c      	mov	r4, r1
 8017c06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c08:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8017c0c:	f000 80bc 	beq.w	8017d88 <_printf_i+0x194>
 8017c10:	d81a      	bhi.n	8017c48 <_printf_i+0x54>
 8017c12:	2a63      	cmp	r2, #99	; 0x63
 8017c14:	d02e      	beq.n	8017c74 <_printf_i+0x80>
 8017c16:	d80a      	bhi.n	8017c2e <_printf_i+0x3a>
 8017c18:	2a00      	cmp	r2, #0
 8017c1a:	f000 80c8 	beq.w	8017dae <_printf_i+0x1ba>
 8017c1e:	2a58      	cmp	r2, #88	; 0x58
 8017c20:	f000 808a 	beq.w	8017d38 <_printf_i+0x144>
 8017c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017c28:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8017c2c:	e02a      	b.n	8017c84 <_printf_i+0x90>
 8017c2e:	2a64      	cmp	r2, #100	; 0x64
 8017c30:	d001      	beq.n	8017c36 <_printf_i+0x42>
 8017c32:	2a69      	cmp	r2, #105	; 0x69
 8017c34:	d1f6      	bne.n	8017c24 <_printf_i+0x30>
 8017c36:	6821      	ldr	r1, [r4, #0]
 8017c38:	681a      	ldr	r2, [r3, #0]
 8017c3a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8017c3e:	d023      	beq.n	8017c88 <_printf_i+0x94>
 8017c40:	1d11      	adds	r1, r2, #4
 8017c42:	6019      	str	r1, [r3, #0]
 8017c44:	6813      	ldr	r3, [r2, #0]
 8017c46:	e027      	b.n	8017c98 <_printf_i+0xa4>
 8017c48:	2a73      	cmp	r2, #115	; 0x73
 8017c4a:	f000 80b4 	beq.w	8017db6 <_printf_i+0x1c2>
 8017c4e:	d808      	bhi.n	8017c62 <_printf_i+0x6e>
 8017c50:	2a6f      	cmp	r2, #111	; 0x6f
 8017c52:	d02a      	beq.n	8017caa <_printf_i+0xb6>
 8017c54:	2a70      	cmp	r2, #112	; 0x70
 8017c56:	d1e5      	bne.n	8017c24 <_printf_i+0x30>
 8017c58:	680a      	ldr	r2, [r1, #0]
 8017c5a:	f042 0220 	orr.w	r2, r2, #32
 8017c5e:	600a      	str	r2, [r1, #0]
 8017c60:	e003      	b.n	8017c6a <_printf_i+0x76>
 8017c62:	2a75      	cmp	r2, #117	; 0x75
 8017c64:	d021      	beq.n	8017caa <_printf_i+0xb6>
 8017c66:	2a78      	cmp	r2, #120	; 0x78
 8017c68:	d1dc      	bne.n	8017c24 <_printf_i+0x30>
 8017c6a:	2278      	movs	r2, #120	; 0x78
 8017c6c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8017c70:	496e      	ldr	r1, [pc, #440]	; (8017e2c <_printf_i+0x238>)
 8017c72:	e064      	b.n	8017d3e <_printf_i+0x14a>
 8017c74:	681a      	ldr	r2, [r3, #0]
 8017c76:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8017c7a:	1d11      	adds	r1, r2, #4
 8017c7c:	6019      	str	r1, [r3, #0]
 8017c7e:	6813      	ldr	r3, [r2, #0]
 8017c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017c84:	2301      	movs	r3, #1
 8017c86:	e0a3      	b.n	8017dd0 <_printf_i+0x1dc>
 8017c88:	f011 0f40 	tst.w	r1, #64	; 0x40
 8017c8c:	f102 0104 	add.w	r1, r2, #4
 8017c90:	6019      	str	r1, [r3, #0]
 8017c92:	d0d7      	beq.n	8017c44 <_printf_i+0x50>
 8017c94:	f9b2 3000 	ldrsh.w	r3, [r2]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	da03      	bge.n	8017ca4 <_printf_i+0xb0>
 8017c9c:	222d      	movs	r2, #45	; 0x2d
 8017c9e:	425b      	negs	r3, r3
 8017ca0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017ca4:	4962      	ldr	r1, [pc, #392]	; (8017e30 <_printf_i+0x23c>)
 8017ca6:	220a      	movs	r2, #10
 8017ca8:	e017      	b.n	8017cda <_printf_i+0xe6>
 8017caa:	6820      	ldr	r0, [r4, #0]
 8017cac:	6819      	ldr	r1, [r3, #0]
 8017cae:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017cb2:	d003      	beq.n	8017cbc <_printf_i+0xc8>
 8017cb4:	1d08      	adds	r0, r1, #4
 8017cb6:	6018      	str	r0, [r3, #0]
 8017cb8:	680b      	ldr	r3, [r1, #0]
 8017cba:	e006      	b.n	8017cca <_printf_i+0xd6>
 8017cbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017cc0:	f101 0004 	add.w	r0, r1, #4
 8017cc4:	6018      	str	r0, [r3, #0]
 8017cc6:	d0f7      	beq.n	8017cb8 <_printf_i+0xc4>
 8017cc8:	880b      	ldrh	r3, [r1, #0]
 8017cca:	4959      	ldr	r1, [pc, #356]	; (8017e30 <_printf_i+0x23c>)
 8017ccc:	2a6f      	cmp	r2, #111	; 0x6f
 8017cce:	bf14      	ite	ne
 8017cd0:	220a      	movne	r2, #10
 8017cd2:	2208      	moveq	r2, #8
 8017cd4:	2000      	movs	r0, #0
 8017cd6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8017cda:	6865      	ldr	r5, [r4, #4]
 8017cdc:	60a5      	str	r5, [r4, #8]
 8017cde:	2d00      	cmp	r5, #0
 8017ce0:	f2c0 809c 	blt.w	8017e1c <_printf_i+0x228>
 8017ce4:	6820      	ldr	r0, [r4, #0]
 8017ce6:	f020 0004 	bic.w	r0, r0, #4
 8017cea:	6020      	str	r0, [r4, #0]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d13f      	bne.n	8017d70 <_printf_i+0x17c>
 8017cf0:	2d00      	cmp	r5, #0
 8017cf2:	f040 8095 	bne.w	8017e20 <_printf_i+0x22c>
 8017cf6:	4675      	mov	r5, lr
 8017cf8:	2a08      	cmp	r2, #8
 8017cfa:	d10b      	bne.n	8017d14 <_printf_i+0x120>
 8017cfc:	6823      	ldr	r3, [r4, #0]
 8017cfe:	07da      	lsls	r2, r3, #31
 8017d00:	d508      	bpl.n	8017d14 <_printf_i+0x120>
 8017d02:	6923      	ldr	r3, [r4, #16]
 8017d04:	6862      	ldr	r2, [r4, #4]
 8017d06:	429a      	cmp	r2, r3
 8017d08:	bfde      	ittt	le
 8017d0a:	2330      	movle	r3, #48	; 0x30
 8017d0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017d10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017d14:	ebae 0305 	sub.w	r3, lr, r5
 8017d18:	6123      	str	r3, [r4, #16]
 8017d1a:	f8cd 8000 	str.w	r8, [sp]
 8017d1e:	463b      	mov	r3, r7
 8017d20:	aa03      	add	r2, sp, #12
 8017d22:	4621      	mov	r1, r4
 8017d24:	4630      	mov	r0, r6
 8017d26:	f7ff feef 	bl	8017b08 <_printf_common>
 8017d2a:	3001      	adds	r0, #1
 8017d2c:	d155      	bne.n	8017dda <_printf_i+0x1e6>
 8017d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8017d32:	b005      	add	sp, #20
 8017d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d38:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8017d3c:	493c      	ldr	r1, [pc, #240]	; (8017e30 <_printf_i+0x23c>)
 8017d3e:	6822      	ldr	r2, [r4, #0]
 8017d40:	6818      	ldr	r0, [r3, #0]
 8017d42:	f012 0f80 	tst.w	r2, #128	; 0x80
 8017d46:	f100 0504 	add.w	r5, r0, #4
 8017d4a:	601d      	str	r5, [r3, #0]
 8017d4c:	d001      	beq.n	8017d52 <_printf_i+0x15e>
 8017d4e:	6803      	ldr	r3, [r0, #0]
 8017d50:	e002      	b.n	8017d58 <_printf_i+0x164>
 8017d52:	0655      	lsls	r5, r2, #25
 8017d54:	d5fb      	bpl.n	8017d4e <_printf_i+0x15a>
 8017d56:	8803      	ldrh	r3, [r0, #0]
 8017d58:	07d0      	lsls	r0, r2, #31
 8017d5a:	bf44      	itt	mi
 8017d5c:	f042 0220 	orrmi.w	r2, r2, #32
 8017d60:	6022      	strmi	r2, [r4, #0]
 8017d62:	b91b      	cbnz	r3, 8017d6c <_printf_i+0x178>
 8017d64:	6822      	ldr	r2, [r4, #0]
 8017d66:	f022 0220 	bic.w	r2, r2, #32
 8017d6a:	6022      	str	r2, [r4, #0]
 8017d6c:	2210      	movs	r2, #16
 8017d6e:	e7b1      	b.n	8017cd4 <_printf_i+0xe0>
 8017d70:	4675      	mov	r5, lr
 8017d72:	fbb3 f0f2 	udiv	r0, r3, r2
 8017d76:	fb02 3310 	mls	r3, r2, r0, r3
 8017d7a:	5ccb      	ldrb	r3, [r1, r3]
 8017d7c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017d80:	4603      	mov	r3, r0
 8017d82:	2800      	cmp	r0, #0
 8017d84:	d1f5      	bne.n	8017d72 <_printf_i+0x17e>
 8017d86:	e7b7      	b.n	8017cf8 <_printf_i+0x104>
 8017d88:	6808      	ldr	r0, [r1, #0]
 8017d8a:	681a      	ldr	r2, [r3, #0]
 8017d8c:	6949      	ldr	r1, [r1, #20]
 8017d8e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017d92:	d004      	beq.n	8017d9e <_printf_i+0x1aa>
 8017d94:	1d10      	adds	r0, r2, #4
 8017d96:	6018      	str	r0, [r3, #0]
 8017d98:	6813      	ldr	r3, [r2, #0]
 8017d9a:	6019      	str	r1, [r3, #0]
 8017d9c:	e007      	b.n	8017dae <_printf_i+0x1ba>
 8017d9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017da2:	f102 0004 	add.w	r0, r2, #4
 8017da6:	6018      	str	r0, [r3, #0]
 8017da8:	6813      	ldr	r3, [r2, #0]
 8017daa:	d0f6      	beq.n	8017d9a <_printf_i+0x1a6>
 8017dac:	8019      	strh	r1, [r3, #0]
 8017dae:	2300      	movs	r3, #0
 8017db0:	6123      	str	r3, [r4, #16]
 8017db2:	4675      	mov	r5, lr
 8017db4:	e7b1      	b.n	8017d1a <_printf_i+0x126>
 8017db6:	681a      	ldr	r2, [r3, #0]
 8017db8:	1d11      	adds	r1, r2, #4
 8017dba:	6019      	str	r1, [r3, #0]
 8017dbc:	6815      	ldr	r5, [r2, #0]
 8017dbe:	6862      	ldr	r2, [r4, #4]
 8017dc0:	2100      	movs	r1, #0
 8017dc2:	4628      	mov	r0, r5
 8017dc4:	f7e8 fa24 	bl	8000210 <memchr>
 8017dc8:	b108      	cbz	r0, 8017dce <_printf_i+0x1da>
 8017dca:	1b40      	subs	r0, r0, r5
 8017dcc:	6060      	str	r0, [r4, #4]
 8017dce:	6863      	ldr	r3, [r4, #4]
 8017dd0:	6123      	str	r3, [r4, #16]
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017dd8:	e79f      	b.n	8017d1a <_printf_i+0x126>
 8017dda:	6923      	ldr	r3, [r4, #16]
 8017ddc:	462a      	mov	r2, r5
 8017dde:	4639      	mov	r1, r7
 8017de0:	4630      	mov	r0, r6
 8017de2:	47c0      	blx	r8
 8017de4:	3001      	adds	r0, #1
 8017de6:	d0a2      	beq.n	8017d2e <_printf_i+0x13a>
 8017de8:	6823      	ldr	r3, [r4, #0]
 8017dea:	079b      	lsls	r3, r3, #30
 8017dec:	d507      	bpl.n	8017dfe <_printf_i+0x20a>
 8017dee:	2500      	movs	r5, #0
 8017df0:	f104 0919 	add.w	r9, r4, #25
 8017df4:	68e3      	ldr	r3, [r4, #12]
 8017df6:	9a03      	ldr	r2, [sp, #12]
 8017df8:	1a9b      	subs	r3, r3, r2
 8017dfa:	429d      	cmp	r5, r3
 8017dfc:	db05      	blt.n	8017e0a <_printf_i+0x216>
 8017dfe:	68e0      	ldr	r0, [r4, #12]
 8017e00:	9b03      	ldr	r3, [sp, #12]
 8017e02:	4298      	cmp	r0, r3
 8017e04:	bfb8      	it	lt
 8017e06:	4618      	movlt	r0, r3
 8017e08:	e793      	b.n	8017d32 <_printf_i+0x13e>
 8017e0a:	2301      	movs	r3, #1
 8017e0c:	464a      	mov	r2, r9
 8017e0e:	4639      	mov	r1, r7
 8017e10:	4630      	mov	r0, r6
 8017e12:	47c0      	blx	r8
 8017e14:	3001      	adds	r0, #1
 8017e16:	d08a      	beq.n	8017d2e <_printf_i+0x13a>
 8017e18:	3501      	adds	r5, #1
 8017e1a:	e7eb      	b.n	8017df4 <_printf_i+0x200>
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d1a7      	bne.n	8017d70 <_printf_i+0x17c>
 8017e20:	780b      	ldrb	r3, [r1, #0]
 8017e22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017e26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017e2a:	e765      	b.n	8017cf8 <_printf_i+0x104>
 8017e2c:	0801cc7a 	.word	0x0801cc7a
 8017e30:	0801cc69 	.word	0x0801cc69

08017e34 <_sbrk_r>:
 8017e34:	b538      	push	{r3, r4, r5, lr}
 8017e36:	4c06      	ldr	r4, [pc, #24]	; (8017e50 <_sbrk_r+0x1c>)
 8017e38:	2300      	movs	r3, #0
 8017e3a:	4605      	mov	r5, r0
 8017e3c:	4608      	mov	r0, r1
 8017e3e:	6023      	str	r3, [r4, #0]
 8017e40:	f7e9 fbd6 	bl	80015f0 <_sbrk>
 8017e44:	1c43      	adds	r3, r0, #1
 8017e46:	d102      	bne.n	8017e4e <_sbrk_r+0x1a>
 8017e48:	6823      	ldr	r3, [r4, #0]
 8017e4a:	b103      	cbz	r3, 8017e4e <_sbrk_r+0x1a>
 8017e4c:	602b      	str	r3, [r5, #0]
 8017e4e:	bd38      	pop	{r3, r4, r5, pc}
 8017e50:	200007dc 	.word	0x200007dc

08017e54 <_vsniprintf_r>:
 8017e54:	b530      	push	{r4, r5, lr}
 8017e56:	1e14      	subs	r4, r2, #0
 8017e58:	4605      	mov	r5, r0
 8017e5a:	b09b      	sub	sp, #108	; 0x6c
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	da05      	bge.n	8017e6c <_vsniprintf_r+0x18>
 8017e60:	238b      	movs	r3, #139	; 0x8b
 8017e62:	602b      	str	r3, [r5, #0]
 8017e64:	f04f 30ff 	mov.w	r0, #4294967295
 8017e68:	b01b      	add	sp, #108	; 0x6c
 8017e6a:	bd30      	pop	{r4, r5, pc}
 8017e6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017e70:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017e74:	bf14      	ite	ne
 8017e76:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017e7a:	4623      	moveq	r3, r4
 8017e7c:	9302      	str	r3, [sp, #8]
 8017e7e:	9305      	str	r3, [sp, #20]
 8017e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e84:	9100      	str	r1, [sp, #0]
 8017e86:	9104      	str	r1, [sp, #16]
 8017e88:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017e8c:	4602      	mov	r2, r0
 8017e8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017e90:	4669      	mov	r1, sp
 8017e92:	4628      	mov	r0, r5
 8017e94:	f000 fb5e 	bl	8018554 <_svfiprintf_r>
 8017e98:	1c43      	adds	r3, r0, #1
 8017e9a:	bfbc      	itt	lt
 8017e9c:	238b      	movlt	r3, #139	; 0x8b
 8017e9e:	602b      	strlt	r3, [r5, #0]
 8017ea0:	2c00      	cmp	r4, #0
 8017ea2:	d0e1      	beq.n	8017e68 <_vsniprintf_r+0x14>
 8017ea4:	9b00      	ldr	r3, [sp, #0]
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	701a      	strb	r2, [r3, #0]
 8017eaa:	e7dd      	b.n	8017e68 <_vsniprintf_r+0x14>

08017eac <vsniprintf>:
 8017eac:	b507      	push	{r0, r1, r2, lr}
 8017eae:	9300      	str	r3, [sp, #0]
 8017eb0:	4613      	mov	r3, r2
 8017eb2:	460a      	mov	r2, r1
 8017eb4:	4601      	mov	r1, r0
 8017eb6:	4803      	ldr	r0, [pc, #12]	; (8017ec4 <vsniprintf+0x18>)
 8017eb8:	6800      	ldr	r0, [r0, #0]
 8017eba:	f7ff ffcb 	bl	8017e54 <_vsniprintf_r>
 8017ebe:	b003      	add	sp, #12
 8017ec0:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ec4:	20000054 	.word	0x20000054

08017ec8 <__swbuf_r>:
 8017ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eca:	460e      	mov	r6, r1
 8017ecc:	4614      	mov	r4, r2
 8017ece:	4605      	mov	r5, r0
 8017ed0:	b118      	cbz	r0, 8017eda <__swbuf_r+0x12>
 8017ed2:	6983      	ldr	r3, [r0, #24]
 8017ed4:	b90b      	cbnz	r3, 8017eda <__swbuf_r+0x12>
 8017ed6:	f000 f9b1 	bl	801823c <__sinit>
 8017eda:	4b21      	ldr	r3, [pc, #132]	; (8017f60 <__swbuf_r+0x98>)
 8017edc:	429c      	cmp	r4, r3
 8017ede:	d12a      	bne.n	8017f36 <__swbuf_r+0x6e>
 8017ee0:	686c      	ldr	r4, [r5, #4]
 8017ee2:	69a3      	ldr	r3, [r4, #24]
 8017ee4:	60a3      	str	r3, [r4, #8]
 8017ee6:	89a3      	ldrh	r3, [r4, #12]
 8017ee8:	071a      	lsls	r2, r3, #28
 8017eea:	d52e      	bpl.n	8017f4a <__swbuf_r+0x82>
 8017eec:	6923      	ldr	r3, [r4, #16]
 8017eee:	b363      	cbz	r3, 8017f4a <__swbuf_r+0x82>
 8017ef0:	6923      	ldr	r3, [r4, #16]
 8017ef2:	6820      	ldr	r0, [r4, #0]
 8017ef4:	1ac0      	subs	r0, r0, r3
 8017ef6:	6963      	ldr	r3, [r4, #20]
 8017ef8:	b2f6      	uxtb	r6, r6
 8017efa:	4298      	cmp	r0, r3
 8017efc:	4637      	mov	r7, r6
 8017efe:	db04      	blt.n	8017f0a <__swbuf_r+0x42>
 8017f00:	4621      	mov	r1, r4
 8017f02:	4628      	mov	r0, r5
 8017f04:	f000 f930 	bl	8018168 <_fflush_r>
 8017f08:	bb28      	cbnz	r0, 8017f56 <__swbuf_r+0x8e>
 8017f0a:	68a3      	ldr	r3, [r4, #8]
 8017f0c:	3b01      	subs	r3, #1
 8017f0e:	60a3      	str	r3, [r4, #8]
 8017f10:	6823      	ldr	r3, [r4, #0]
 8017f12:	1c5a      	adds	r2, r3, #1
 8017f14:	6022      	str	r2, [r4, #0]
 8017f16:	701e      	strb	r6, [r3, #0]
 8017f18:	6963      	ldr	r3, [r4, #20]
 8017f1a:	3001      	adds	r0, #1
 8017f1c:	4298      	cmp	r0, r3
 8017f1e:	d004      	beq.n	8017f2a <__swbuf_r+0x62>
 8017f20:	89a3      	ldrh	r3, [r4, #12]
 8017f22:	07db      	lsls	r3, r3, #31
 8017f24:	d519      	bpl.n	8017f5a <__swbuf_r+0x92>
 8017f26:	2e0a      	cmp	r6, #10
 8017f28:	d117      	bne.n	8017f5a <__swbuf_r+0x92>
 8017f2a:	4621      	mov	r1, r4
 8017f2c:	4628      	mov	r0, r5
 8017f2e:	f000 f91b 	bl	8018168 <_fflush_r>
 8017f32:	b190      	cbz	r0, 8017f5a <__swbuf_r+0x92>
 8017f34:	e00f      	b.n	8017f56 <__swbuf_r+0x8e>
 8017f36:	4b0b      	ldr	r3, [pc, #44]	; (8017f64 <__swbuf_r+0x9c>)
 8017f38:	429c      	cmp	r4, r3
 8017f3a:	d101      	bne.n	8017f40 <__swbuf_r+0x78>
 8017f3c:	68ac      	ldr	r4, [r5, #8]
 8017f3e:	e7d0      	b.n	8017ee2 <__swbuf_r+0x1a>
 8017f40:	4b09      	ldr	r3, [pc, #36]	; (8017f68 <__swbuf_r+0xa0>)
 8017f42:	429c      	cmp	r4, r3
 8017f44:	bf08      	it	eq
 8017f46:	68ec      	ldreq	r4, [r5, #12]
 8017f48:	e7cb      	b.n	8017ee2 <__swbuf_r+0x1a>
 8017f4a:	4621      	mov	r1, r4
 8017f4c:	4628      	mov	r0, r5
 8017f4e:	f000 f80d 	bl	8017f6c <__swsetup_r>
 8017f52:	2800      	cmp	r0, #0
 8017f54:	d0cc      	beq.n	8017ef0 <__swbuf_r+0x28>
 8017f56:	f04f 37ff 	mov.w	r7, #4294967295
 8017f5a:	4638      	mov	r0, r7
 8017f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f5e:	bf00      	nop
 8017f60:	0801ccac 	.word	0x0801ccac
 8017f64:	0801cccc 	.word	0x0801cccc
 8017f68:	0801cc8c 	.word	0x0801cc8c

08017f6c <__swsetup_r>:
 8017f6c:	4b32      	ldr	r3, [pc, #200]	; (8018038 <__swsetup_r+0xcc>)
 8017f6e:	b570      	push	{r4, r5, r6, lr}
 8017f70:	681d      	ldr	r5, [r3, #0]
 8017f72:	4606      	mov	r6, r0
 8017f74:	460c      	mov	r4, r1
 8017f76:	b125      	cbz	r5, 8017f82 <__swsetup_r+0x16>
 8017f78:	69ab      	ldr	r3, [r5, #24]
 8017f7a:	b913      	cbnz	r3, 8017f82 <__swsetup_r+0x16>
 8017f7c:	4628      	mov	r0, r5
 8017f7e:	f000 f95d 	bl	801823c <__sinit>
 8017f82:	4b2e      	ldr	r3, [pc, #184]	; (801803c <__swsetup_r+0xd0>)
 8017f84:	429c      	cmp	r4, r3
 8017f86:	d10f      	bne.n	8017fa8 <__swsetup_r+0x3c>
 8017f88:	686c      	ldr	r4, [r5, #4]
 8017f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f8e:	b29a      	uxth	r2, r3
 8017f90:	0715      	lsls	r5, r2, #28
 8017f92:	d42c      	bmi.n	8017fee <__swsetup_r+0x82>
 8017f94:	06d0      	lsls	r0, r2, #27
 8017f96:	d411      	bmi.n	8017fbc <__swsetup_r+0x50>
 8017f98:	2209      	movs	r2, #9
 8017f9a:	6032      	str	r2, [r6, #0]
 8017f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017fa0:	81a3      	strh	r3, [r4, #12]
 8017fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8017fa6:	bd70      	pop	{r4, r5, r6, pc}
 8017fa8:	4b25      	ldr	r3, [pc, #148]	; (8018040 <__swsetup_r+0xd4>)
 8017faa:	429c      	cmp	r4, r3
 8017fac:	d101      	bne.n	8017fb2 <__swsetup_r+0x46>
 8017fae:	68ac      	ldr	r4, [r5, #8]
 8017fb0:	e7eb      	b.n	8017f8a <__swsetup_r+0x1e>
 8017fb2:	4b24      	ldr	r3, [pc, #144]	; (8018044 <__swsetup_r+0xd8>)
 8017fb4:	429c      	cmp	r4, r3
 8017fb6:	bf08      	it	eq
 8017fb8:	68ec      	ldreq	r4, [r5, #12]
 8017fba:	e7e6      	b.n	8017f8a <__swsetup_r+0x1e>
 8017fbc:	0751      	lsls	r1, r2, #29
 8017fbe:	d512      	bpl.n	8017fe6 <__swsetup_r+0x7a>
 8017fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017fc2:	b141      	cbz	r1, 8017fd6 <__swsetup_r+0x6a>
 8017fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017fc8:	4299      	cmp	r1, r3
 8017fca:	d002      	beq.n	8017fd2 <__swsetup_r+0x66>
 8017fcc:	4630      	mov	r0, r6
 8017fce:	f7ff fbaf 	bl	8017730 <_free_r>
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8017fd6:	89a3      	ldrh	r3, [r4, #12]
 8017fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017fdc:	81a3      	strh	r3, [r4, #12]
 8017fde:	2300      	movs	r3, #0
 8017fe0:	6063      	str	r3, [r4, #4]
 8017fe2:	6923      	ldr	r3, [r4, #16]
 8017fe4:	6023      	str	r3, [r4, #0]
 8017fe6:	89a3      	ldrh	r3, [r4, #12]
 8017fe8:	f043 0308 	orr.w	r3, r3, #8
 8017fec:	81a3      	strh	r3, [r4, #12]
 8017fee:	6923      	ldr	r3, [r4, #16]
 8017ff0:	b94b      	cbnz	r3, 8018006 <__swsetup_r+0x9a>
 8017ff2:	89a3      	ldrh	r3, [r4, #12]
 8017ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017ffc:	d003      	beq.n	8018006 <__swsetup_r+0x9a>
 8017ffe:	4621      	mov	r1, r4
 8018000:	4630      	mov	r0, r6
 8018002:	f000 f9c9 	bl	8018398 <__smakebuf_r>
 8018006:	89a2      	ldrh	r2, [r4, #12]
 8018008:	f012 0301 	ands.w	r3, r2, #1
 801800c:	d00c      	beq.n	8018028 <__swsetup_r+0xbc>
 801800e:	2300      	movs	r3, #0
 8018010:	60a3      	str	r3, [r4, #8]
 8018012:	6963      	ldr	r3, [r4, #20]
 8018014:	425b      	negs	r3, r3
 8018016:	61a3      	str	r3, [r4, #24]
 8018018:	6923      	ldr	r3, [r4, #16]
 801801a:	b953      	cbnz	r3, 8018032 <__swsetup_r+0xc6>
 801801c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018020:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018024:	d1ba      	bne.n	8017f9c <__swsetup_r+0x30>
 8018026:	bd70      	pop	{r4, r5, r6, pc}
 8018028:	0792      	lsls	r2, r2, #30
 801802a:	bf58      	it	pl
 801802c:	6963      	ldrpl	r3, [r4, #20]
 801802e:	60a3      	str	r3, [r4, #8]
 8018030:	e7f2      	b.n	8018018 <__swsetup_r+0xac>
 8018032:	2000      	movs	r0, #0
 8018034:	e7f7      	b.n	8018026 <__swsetup_r+0xba>
 8018036:	bf00      	nop
 8018038:	20000054 	.word	0x20000054
 801803c:	0801ccac 	.word	0x0801ccac
 8018040:	0801cccc 	.word	0x0801cccc
 8018044:	0801cc8c 	.word	0x0801cc8c

08018048 <abort>:
 8018048:	b508      	push	{r3, lr}
 801804a:	2006      	movs	r0, #6
 801804c:	f000 fb9e 	bl	801878c <raise>
 8018050:	2001      	movs	r0, #1
 8018052:	f7e9 fa89 	bl	8001568 <_exit>
	...

08018058 <__sflush_r>:
 8018058:	898a      	ldrh	r2, [r1, #12]
 801805a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801805e:	4605      	mov	r5, r0
 8018060:	0710      	lsls	r0, r2, #28
 8018062:	460c      	mov	r4, r1
 8018064:	d45a      	bmi.n	801811c <__sflush_r+0xc4>
 8018066:	684b      	ldr	r3, [r1, #4]
 8018068:	2b00      	cmp	r3, #0
 801806a:	dc05      	bgt.n	8018078 <__sflush_r+0x20>
 801806c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801806e:	2b00      	cmp	r3, #0
 8018070:	dc02      	bgt.n	8018078 <__sflush_r+0x20>
 8018072:	2000      	movs	r0, #0
 8018074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801807a:	2e00      	cmp	r6, #0
 801807c:	d0f9      	beq.n	8018072 <__sflush_r+0x1a>
 801807e:	2300      	movs	r3, #0
 8018080:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018084:	682f      	ldr	r7, [r5, #0]
 8018086:	602b      	str	r3, [r5, #0]
 8018088:	d033      	beq.n	80180f2 <__sflush_r+0x9a>
 801808a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801808c:	89a3      	ldrh	r3, [r4, #12]
 801808e:	075a      	lsls	r2, r3, #29
 8018090:	d505      	bpl.n	801809e <__sflush_r+0x46>
 8018092:	6863      	ldr	r3, [r4, #4]
 8018094:	1ac0      	subs	r0, r0, r3
 8018096:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018098:	b10b      	cbz	r3, 801809e <__sflush_r+0x46>
 801809a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801809c:	1ac0      	subs	r0, r0, r3
 801809e:	2300      	movs	r3, #0
 80180a0:	4602      	mov	r2, r0
 80180a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80180a4:	6a21      	ldr	r1, [r4, #32]
 80180a6:	4628      	mov	r0, r5
 80180a8:	47b0      	blx	r6
 80180aa:	1c43      	adds	r3, r0, #1
 80180ac:	89a3      	ldrh	r3, [r4, #12]
 80180ae:	d106      	bne.n	80180be <__sflush_r+0x66>
 80180b0:	6829      	ldr	r1, [r5, #0]
 80180b2:	291d      	cmp	r1, #29
 80180b4:	d84b      	bhi.n	801814e <__sflush_r+0xf6>
 80180b6:	4a2b      	ldr	r2, [pc, #172]	; (8018164 <__sflush_r+0x10c>)
 80180b8:	40ca      	lsrs	r2, r1
 80180ba:	07d6      	lsls	r6, r2, #31
 80180bc:	d547      	bpl.n	801814e <__sflush_r+0xf6>
 80180be:	2200      	movs	r2, #0
 80180c0:	6062      	str	r2, [r4, #4]
 80180c2:	04d9      	lsls	r1, r3, #19
 80180c4:	6922      	ldr	r2, [r4, #16]
 80180c6:	6022      	str	r2, [r4, #0]
 80180c8:	d504      	bpl.n	80180d4 <__sflush_r+0x7c>
 80180ca:	1c42      	adds	r2, r0, #1
 80180cc:	d101      	bne.n	80180d2 <__sflush_r+0x7a>
 80180ce:	682b      	ldr	r3, [r5, #0]
 80180d0:	b903      	cbnz	r3, 80180d4 <__sflush_r+0x7c>
 80180d2:	6560      	str	r0, [r4, #84]	; 0x54
 80180d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80180d6:	602f      	str	r7, [r5, #0]
 80180d8:	2900      	cmp	r1, #0
 80180da:	d0ca      	beq.n	8018072 <__sflush_r+0x1a>
 80180dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80180e0:	4299      	cmp	r1, r3
 80180e2:	d002      	beq.n	80180ea <__sflush_r+0x92>
 80180e4:	4628      	mov	r0, r5
 80180e6:	f7ff fb23 	bl	8017730 <_free_r>
 80180ea:	2000      	movs	r0, #0
 80180ec:	6360      	str	r0, [r4, #52]	; 0x34
 80180ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180f2:	6a21      	ldr	r1, [r4, #32]
 80180f4:	2301      	movs	r3, #1
 80180f6:	4628      	mov	r0, r5
 80180f8:	47b0      	blx	r6
 80180fa:	1c41      	adds	r1, r0, #1
 80180fc:	d1c6      	bne.n	801808c <__sflush_r+0x34>
 80180fe:	682b      	ldr	r3, [r5, #0]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d0c3      	beq.n	801808c <__sflush_r+0x34>
 8018104:	2b1d      	cmp	r3, #29
 8018106:	d001      	beq.n	801810c <__sflush_r+0xb4>
 8018108:	2b16      	cmp	r3, #22
 801810a:	d101      	bne.n	8018110 <__sflush_r+0xb8>
 801810c:	602f      	str	r7, [r5, #0]
 801810e:	e7b0      	b.n	8018072 <__sflush_r+0x1a>
 8018110:	89a3      	ldrh	r3, [r4, #12]
 8018112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018116:	81a3      	strh	r3, [r4, #12]
 8018118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801811c:	690f      	ldr	r7, [r1, #16]
 801811e:	2f00      	cmp	r7, #0
 8018120:	d0a7      	beq.n	8018072 <__sflush_r+0x1a>
 8018122:	0793      	lsls	r3, r2, #30
 8018124:	680e      	ldr	r6, [r1, #0]
 8018126:	bf08      	it	eq
 8018128:	694b      	ldreq	r3, [r1, #20]
 801812a:	600f      	str	r7, [r1, #0]
 801812c:	bf18      	it	ne
 801812e:	2300      	movne	r3, #0
 8018130:	eba6 0807 	sub.w	r8, r6, r7
 8018134:	608b      	str	r3, [r1, #8]
 8018136:	f1b8 0f00 	cmp.w	r8, #0
 801813a:	dd9a      	ble.n	8018072 <__sflush_r+0x1a>
 801813c:	4643      	mov	r3, r8
 801813e:	463a      	mov	r2, r7
 8018140:	6a21      	ldr	r1, [r4, #32]
 8018142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018144:	4628      	mov	r0, r5
 8018146:	47b0      	blx	r6
 8018148:	2800      	cmp	r0, #0
 801814a:	dc07      	bgt.n	801815c <__sflush_r+0x104>
 801814c:	89a3      	ldrh	r3, [r4, #12]
 801814e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018152:	81a3      	strh	r3, [r4, #12]
 8018154:	f04f 30ff 	mov.w	r0, #4294967295
 8018158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801815c:	4407      	add	r7, r0
 801815e:	eba8 0800 	sub.w	r8, r8, r0
 8018162:	e7e8      	b.n	8018136 <__sflush_r+0xde>
 8018164:	20400001 	.word	0x20400001

08018168 <_fflush_r>:
 8018168:	b538      	push	{r3, r4, r5, lr}
 801816a:	690b      	ldr	r3, [r1, #16]
 801816c:	4605      	mov	r5, r0
 801816e:	460c      	mov	r4, r1
 8018170:	b1db      	cbz	r3, 80181aa <_fflush_r+0x42>
 8018172:	b118      	cbz	r0, 801817c <_fflush_r+0x14>
 8018174:	6983      	ldr	r3, [r0, #24]
 8018176:	b90b      	cbnz	r3, 801817c <_fflush_r+0x14>
 8018178:	f000 f860 	bl	801823c <__sinit>
 801817c:	4b0c      	ldr	r3, [pc, #48]	; (80181b0 <_fflush_r+0x48>)
 801817e:	429c      	cmp	r4, r3
 8018180:	d109      	bne.n	8018196 <_fflush_r+0x2e>
 8018182:	686c      	ldr	r4, [r5, #4]
 8018184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018188:	b17b      	cbz	r3, 80181aa <_fflush_r+0x42>
 801818a:	4621      	mov	r1, r4
 801818c:	4628      	mov	r0, r5
 801818e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018192:	f7ff bf61 	b.w	8018058 <__sflush_r>
 8018196:	4b07      	ldr	r3, [pc, #28]	; (80181b4 <_fflush_r+0x4c>)
 8018198:	429c      	cmp	r4, r3
 801819a:	d101      	bne.n	80181a0 <_fflush_r+0x38>
 801819c:	68ac      	ldr	r4, [r5, #8]
 801819e:	e7f1      	b.n	8018184 <_fflush_r+0x1c>
 80181a0:	4b05      	ldr	r3, [pc, #20]	; (80181b8 <_fflush_r+0x50>)
 80181a2:	429c      	cmp	r4, r3
 80181a4:	bf08      	it	eq
 80181a6:	68ec      	ldreq	r4, [r5, #12]
 80181a8:	e7ec      	b.n	8018184 <_fflush_r+0x1c>
 80181aa:	2000      	movs	r0, #0
 80181ac:	bd38      	pop	{r3, r4, r5, pc}
 80181ae:	bf00      	nop
 80181b0:	0801ccac 	.word	0x0801ccac
 80181b4:	0801cccc 	.word	0x0801cccc
 80181b8:	0801cc8c 	.word	0x0801cc8c

080181bc <_cleanup_r>:
 80181bc:	4901      	ldr	r1, [pc, #4]	; (80181c4 <_cleanup_r+0x8>)
 80181be:	f000 b8a9 	b.w	8018314 <_fwalk_reent>
 80181c2:	bf00      	nop
 80181c4:	08018169 	.word	0x08018169

080181c8 <std.isra.0>:
 80181c8:	2300      	movs	r3, #0
 80181ca:	b510      	push	{r4, lr}
 80181cc:	4604      	mov	r4, r0
 80181ce:	6003      	str	r3, [r0, #0]
 80181d0:	6043      	str	r3, [r0, #4]
 80181d2:	6083      	str	r3, [r0, #8]
 80181d4:	8181      	strh	r1, [r0, #12]
 80181d6:	6643      	str	r3, [r0, #100]	; 0x64
 80181d8:	81c2      	strh	r2, [r0, #14]
 80181da:	6103      	str	r3, [r0, #16]
 80181dc:	6143      	str	r3, [r0, #20]
 80181de:	6183      	str	r3, [r0, #24]
 80181e0:	4619      	mov	r1, r3
 80181e2:	2208      	movs	r2, #8
 80181e4:	305c      	adds	r0, #92	; 0x5c
 80181e6:	f7ff fa9b 	bl	8017720 <memset>
 80181ea:	4b05      	ldr	r3, [pc, #20]	; (8018200 <std.isra.0+0x38>)
 80181ec:	6263      	str	r3, [r4, #36]	; 0x24
 80181ee:	4b05      	ldr	r3, [pc, #20]	; (8018204 <std.isra.0+0x3c>)
 80181f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80181f2:	4b05      	ldr	r3, [pc, #20]	; (8018208 <std.isra.0+0x40>)
 80181f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80181f6:	4b05      	ldr	r3, [pc, #20]	; (801820c <std.isra.0+0x44>)
 80181f8:	6224      	str	r4, [r4, #32]
 80181fa:	6323      	str	r3, [r4, #48]	; 0x30
 80181fc:	bd10      	pop	{r4, pc}
 80181fe:	bf00      	nop
 8018200:	080187c5 	.word	0x080187c5
 8018204:	080187e7 	.word	0x080187e7
 8018208:	0801881f 	.word	0x0801881f
 801820c:	08018843 	.word	0x08018843

08018210 <__sfmoreglue>:
 8018210:	b570      	push	{r4, r5, r6, lr}
 8018212:	1e4a      	subs	r2, r1, #1
 8018214:	2568      	movs	r5, #104	; 0x68
 8018216:	4355      	muls	r5, r2
 8018218:	460e      	mov	r6, r1
 801821a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801821e:	f7ff fad5 	bl	80177cc <_malloc_r>
 8018222:	4604      	mov	r4, r0
 8018224:	b140      	cbz	r0, 8018238 <__sfmoreglue+0x28>
 8018226:	2100      	movs	r1, #0
 8018228:	e880 0042 	stmia.w	r0, {r1, r6}
 801822c:	300c      	adds	r0, #12
 801822e:	60a0      	str	r0, [r4, #8]
 8018230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018234:	f7ff fa74 	bl	8017720 <memset>
 8018238:	4620      	mov	r0, r4
 801823a:	bd70      	pop	{r4, r5, r6, pc}

0801823c <__sinit>:
 801823c:	6983      	ldr	r3, [r0, #24]
 801823e:	b510      	push	{r4, lr}
 8018240:	4604      	mov	r4, r0
 8018242:	bb33      	cbnz	r3, 8018292 <__sinit+0x56>
 8018244:	6483      	str	r3, [r0, #72]	; 0x48
 8018246:	64c3      	str	r3, [r0, #76]	; 0x4c
 8018248:	6503      	str	r3, [r0, #80]	; 0x50
 801824a:	4b12      	ldr	r3, [pc, #72]	; (8018294 <__sinit+0x58>)
 801824c:	4a12      	ldr	r2, [pc, #72]	; (8018298 <__sinit+0x5c>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	6282      	str	r2, [r0, #40]	; 0x28
 8018252:	4298      	cmp	r0, r3
 8018254:	bf04      	itt	eq
 8018256:	2301      	moveq	r3, #1
 8018258:	6183      	streq	r3, [r0, #24]
 801825a:	f000 f81f 	bl	801829c <__sfp>
 801825e:	6060      	str	r0, [r4, #4]
 8018260:	4620      	mov	r0, r4
 8018262:	f000 f81b 	bl	801829c <__sfp>
 8018266:	60a0      	str	r0, [r4, #8]
 8018268:	4620      	mov	r0, r4
 801826a:	f000 f817 	bl	801829c <__sfp>
 801826e:	2200      	movs	r2, #0
 8018270:	60e0      	str	r0, [r4, #12]
 8018272:	2104      	movs	r1, #4
 8018274:	6860      	ldr	r0, [r4, #4]
 8018276:	f7ff ffa7 	bl	80181c8 <std.isra.0>
 801827a:	2201      	movs	r2, #1
 801827c:	2109      	movs	r1, #9
 801827e:	68a0      	ldr	r0, [r4, #8]
 8018280:	f7ff ffa2 	bl	80181c8 <std.isra.0>
 8018284:	2202      	movs	r2, #2
 8018286:	2112      	movs	r1, #18
 8018288:	68e0      	ldr	r0, [r4, #12]
 801828a:	f7ff ff9d 	bl	80181c8 <std.isra.0>
 801828e:	2301      	movs	r3, #1
 8018290:	61a3      	str	r3, [r4, #24]
 8018292:	bd10      	pop	{r4, pc}
 8018294:	0801cc54 	.word	0x0801cc54
 8018298:	080181bd 	.word	0x080181bd

0801829c <__sfp>:
 801829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801829e:	4b1c      	ldr	r3, [pc, #112]	; (8018310 <__sfp+0x74>)
 80182a0:	681e      	ldr	r6, [r3, #0]
 80182a2:	69b3      	ldr	r3, [r6, #24]
 80182a4:	4607      	mov	r7, r0
 80182a6:	b913      	cbnz	r3, 80182ae <__sfp+0x12>
 80182a8:	4630      	mov	r0, r6
 80182aa:	f7ff ffc7 	bl	801823c <__sinit>
 80182ae:	3648      	adds	r6, #72	; 0x48
 80182b0:	68b4      	ldr	r4, [r6, #8]
 80182b2:	6873      	ldr	r3, [r6, #4]
 80182b4:	3b01      	subs	r3, #1
 80182b6:	d503      	bpl.n	80182c0 <__sfp+0x24>
 80182b8:	6833      	ldr	r3, [r6, #0]
 80182ba:	b133      	cbz	r3, 80182ca <__sfp+0x2e>
 80182bc:	6836      	ldr	r6, [r6, #0]
 80182be:	e7f7      	b.n	80182b0 <__sfp+0x14>
 80182c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80182c4:	b16d      	cbz	r5, 80182e2 <__sfp+0x46>
 80182c6:	3468      	adds	r4, #104	; 0x68
 80182c8:	e7f4      	b.n	80182b4 <__sfp+0x18>
 80182ca:	2104      	movs	r1, #4
 80182cc:	4638      	mov	r0, r7
 80182ce:	f7ff ff9f 	bl	8018210 <__sfmoreglue>
 80182d2:	6030      	str	r0, [r6, #0]
 80182d4:	2800      	cmp	r0, #0
 80182d6:	d1f1      	bne.n	80182bc <__sfp+0x20>
 80182d8:	230c      	movs	r3, #12
 80182da:	603b      	str	r3, [r7, #0]
 80182dc:	4604      	mov	r4, r0
 80182de:	4620      	mov	r0, r4
 80182e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182e6:	81e3      	strh	r3, [r4, #14]
 80182e8:	2301      	movs	r3, #1
 80182ea:	81a3      	strh	r3, [r4, #12]
 80182ec:	6665      	str	r5, [r4, #100]	; 0x64
 80182ee:	6025      	str	r5, [r4, #0]
 80182f0:	60a5      	str	r5, [r4, #8]
 80182f2:	6065      	str	r5, [r4, #4]
 80182f4:	6125      	str	r5, [r4, #16]
 80182f6:	6165      	str	r5, [r4, #20]
 80182f8:	61a5      	str	r5, [r4, #24]
 80182fa:	2208      	movs	r2, #8
 80182fc:	4629      	mov	r1, r5
 80182fe:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018302:	f7ff fa0d 	bl	8017720 <memset>
 8018306:	6365      	str	r5, [r4, #52]	; 0x34
 8018308:	63a5      	str	r5, [r4, #56]	; 0x38
 801830a:	64a5      	str	r5, [r4, #72]	; 0x48
 801830c:	64e5      	str	r5, [r4, #76]	; 0x4c
 801830e:	e7e6      	b.n	80182de <__sfp+0x42>
 8018310:	0801cc54 	.word	0x0801cc54

08018314 <_fwalk_reent>:
 8018314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018318:	4680      	mov	r8, r0
 801831a:	4689      	mov	r9, r1
 801831c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018320:	2600      	movs	r6, #0
 8018322:	b914      	cbnz	r4, 801832a <_fwalk_reent+0x16>
 8018324:	4630      	mov	r0, r6
 8018326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801832a:	68a5      	ldr	r5, [r4, #8]
 801832c:	6867      	ldr	r7, [r4, #4]
 801832e:	3f01      	subs	r7, #1
 8018330:	d501      	bpl.n	8018336 <_fwalk_reent+0x22>
 8018332:	6824      	ldr	r4, [r4, #0]
 8018334:	e7f5      	b.n	8018322 <_fwalk_reent+0xe>
 8018336:	89ab      	ldrh	r3, [r5, #12]
 8018338:	2b01      	cmp	r3, #1
 801833a:	d907      	bls.n	801834c <_fwalk_reent+0x38>
 801833c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018340:	3301      	adds	r3, #1
 8018342:	d003      	beq.n	801834c <_fwalk_reent+0x38>
 8018344:	4629      	mov	r1, r5
 8018346:	4640      	mov	r0, r8
 8018348:	47c8      	blx	r9
 801834a:	4306      	orrs	r6, r0
 801834c:	3568      	adds	r5, #104	; 0x68
 801834e:	e7ee      	b.n	801832e <_fwalk_reent+0x1a>

08018350 <__swhatbuf_r>:
 8018350:	b570      	push	{r4, r5, r6, lr}
 8018352:	460e      	mov	r6, r1
 8018354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018358:	2900      	cmp	r1, #0
 801835a:	b090      	sub	sp, #64	; 0x40
 801835c:	4614      	mov	r4, r2
 801835e:	461d      	mov	r5, r3
 8018360:	da07      	bge.n	8018372 <__swhatbuf_r+0x22>
 8018362:	2300      	movs	r3, #0
 8018364:	602b      	str	r3, [r5, #0]
 8018366:	89b3      	ldrh	r3, [r6, #12]
 8018368:	061a      	lsls	r2, r3, #24
 801836a:	d410      	bmi.n	801838e <__swhatbuf_r+0x3e>
 801836c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018370:	e00e      	b.n	8018390 <__swhatbuf_r+0x40>
 8018372:	aa01      	add	r2, sp, #4
 8018374:	f000 fa8c 	bl	8018890 <_fstat_r>
 8018378:	2800      	cmp	r0, #0
 801837a:	dbf2      	blt.n	8018362 <__swhatbuf_r+0x12>
 801837c:	9a02      	ldr	r2, [sp, #8]
 801837e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018382:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018386:	425a      	negs	r2, r3
 8018388:	415a      	adcs	r2, r3
 801838a:	602a      	str	r2, [r5, #0]
 801838c:	e7ee      	b.n	801836c <__swhatbuf_r+0x1c>
 801838e:	2340      	movs	r3, #64	; 0x40
 8018390:	2000      	movs	r0, #0
 8018392:	6023      	str	r3, [r4, #0]
 8018394:	b010      	add	sp, #64	; 0x40
 8018396:	bd70      	pop	{r4, r5, r6, pc}

08018398 <__smakebuf_r>:
 8018398:	898b      	ldrh	r3, [r1, #12]
 801839a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801839c:	079d      	lsls	r5, r3, #30
 801839e:	4606      	mov	r6, r0
 80183a0:	460c      	mov	r4, r1
 80183a2:	d507      	bpl.n	80183b4 <__smakebuf_r+0x1c>
 80183a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80183a8:	6023      	str	r3, [r4, #0]
 80183aa:	6123      	str	r3, [r4, #16]
 80183ac:	2301      	movs	r3, #1
 80183ae:	6163      	str	r3, [r4, #20]
 80183b0:	b002      	add	sp, #8
 80183b2:	bd70      	pop	{r4, r5, r6, pc}
 80183b4:	ab01      	add	r3, sp, #4
 80183b6:	466a      	mov	r2, sp
 80183b8:	f7ff ffca 	bl	8018350 <__swhatbuf_r>
 80183bc:	9900      	ldr	r1, [sp, #0]
 80183be:	4605      	mov	r5, r0
 80183c0:	4630      	mov	r0, r6
 80183c2:	f7ff fa03 	bl	80177cc <_malloc_r>
 80183c6:	b948      	cbnz	r0, 80183dc <__smakebuf_r+0x44>
 80183c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183cc:	059a      	lsls	r2, r3, #22
 80183ce:	d4ef      	bmi.n	80183b0 <__smakebuf_r+0x18>
 80183d0:	f023 0303 	bic.w	r3, r3, #3
 80183d4:	f043 0302 	orr.w	r3, r3, #2
 80183d8:	81a3      	strh	r3, [r4, #12]
 80183da:	e7e3      	b.n	80183a4 <__smakebuf_r+0xc>
 80183dc:	4b0d      	ldr	r3, [pc, #52]	; (8018414 <__smakebuf_r+0x7c>)
 80183de:	62b3      	str	r3, [r6, #40]	; 0x28
 80183e0:	89a3      	ldrh	r3, [r4, #12]
 80183e2:	6020      	str	r0, [r4, #0]
 80183e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183e8:	81a3      	strh	r3, [r4, #12]
 80183ea:	9b00      	ldr	r3, [sp, #0]
 80183ec:	6163      	str	r3, [r4, #20]
 80183ee:	9b01      	ldr	r3, [sp, #4]
 80183f0:	6120      	str	r0, [r4, #16]
 80183f2:	b15b      	cbz	r3, 801840c <__smakebuf_r+0x74>
 80183f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183f8:	4630      	mov	r0, r6
 80183fa:	f000 fa5b 	bl	80188b4 <_isatty_r>
 80183fe:	b128      	cbz	r0, 801840c <__smakebuf_r+0x74>
 8018400:	89a3      	ldrh	r3, [r4, #12]
 8018402:	f023 0303 	bic.w	r3, r3, #3
 8018406:	f043 0301 	orr.w	r3, r3, #1
 801840a:	81a3      	strh	r3, [r4, #12]
 801840c:	89a3      	ldrh	r3, [r4, #12]
 801840e:	431d      	orrs	r5, r3
 8018410:	81a5      	strh	r5, [r4, #12]
 8018412:	e7cd      	b.n	80183b0 <__smakebuf_r+0x18>
 8018414:	080181bd 	.word	0x080181bd

08018418 <memmove>:
 8018418:	4288      	cmp	r0, r1
 801841a:	b510      	push	{r4, lr}
 801841c:	eb01 0302 	add.w	r3, r1, r2
 8018420:	d803      	bhi.n	801842a <memmove+0x12>
 8018422:	1e42      	subs	r2, r0, #1
 8018424:	4299      	cmp	r1, r3
 8018426:	d10c      	bne.n	8018442 <memmove+0x2a>
 8018428:	bd10      	pop	{r4, pc}
 801842a:	4298      	cmp	r0, r3
 801842c:	d2f9      	bcs.n	8018422 <memmove+0xa>
 801842e:	1881      	adds	r1, r0, r2
 8018430:	1ad2      	subs	r2, r2, r3
 8018432:	42d3      	cmn	r3, r2
 8018434:	d100      	bne.n	8018438 <memmove+0x20>
 8018436:	bd10      	pop	{r4, pc}
 8018438:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801843c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018440:	e7f7      	b.n	8018432 <memmove+0x1a>
 8018442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018446:	f802 4f01 	strb.w	r4, [r2, #1]!
 801844a:	e7eb      	b.n	8018424 <memmove+0xc>

0801844c <__malloc_lock>:
 801844c:	4770      	bx	lr

0801844e <__malloc_unlock>:
 801844e:	4770      	bx	lr

08018450 <_realloc_r>:
 8018450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018452:	4607      	mov	r7, r0
 8018454:	4614      	mov	r4, r2
 8018456:	460e      	mov	r6, r1
 8018458:	b921      	cbnz	r1, 8018464 <_realloc_r+0x14>
 801845a:	4611      	mov	r1, r2
 801845c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018460:	f7ff b9b4 	b.w	80177cc <_malloc_r>
 8018464:	b922      	cbnz	r2, 8018470 <_realloc_r+0x20>
 8018466:	f7ff f963 	bl	8017730 <_free_r>
 801846a:	4625      	mov	r5, r4
 801846c:	4628      	mov	r0, r5
 801846e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018470:	f000 fa42 	bl	80188f8 <_malloc_usable_size_r>
 8018474:	4284      	cmp	r4, r0
 8018476:	d90f      	bls.n	8018498 <_realloc_r+0x48>
 8018478:	4621      	mov	r1, r4
 801847a:	4638      	mov	r0, r7
 801847c:	f7ff f9a6 	bl	80177cc <_malloc_r>
 8018480:	4605      	mov	r5, r0
 8018482:	2800      	cmp	r0, #0
 8018484:	d0f2      	beq.n	801846c <_realloc_r+0x1c>
 8018486:	4631      	mov	r1, r6
 8018488:	4622      	mov	r2, r4
 801848a:	f7ff f93e 	bl	801770a <memcpy>
 801848e:	4631      	mov	r1, r6
 8018490:	4638      	mov	r0, r7
 8018492:	f7ff f94d 	bl	8017730 <_free_r>
 8018496:	e7e9      	b.n	801846c <_realloc_r+0x1c>
 8018498:	4635      	mov	r5, r6
 801849a:	e7e7      	b.n	801846c <_realloc_r+0x1c>

0801849c <__ssputs_r>:
 801849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184a0:	688e      	ldr	r6, [r1, #8]
 80184a2:	429e      	cmp	r6, r3
 80184a4:	4682      	mov	sl, r0
 80184a6:	460c      	mov	r4, r1
 80184a8:	4691      	mov	r9, r2
 80184aa:	4698      	mov	r8, r3
 80184ac:	d835      	bhi.n	801851a <__ssputs_r+0x7e>
 80184ae:	898a      	ldrh	r2, [r1, #12]
 80184b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80184b4:	d031      	beq.n	801851a <__ssputs_r+0x7e>
 80184b6:	6825      	ldr	r5, [r4, #0]
 80184b8:	6909      	ldr	r1, [r1, #16]
 80184ba:	1a6f      	subs	r7, r5, r1
 80184bc:	6965      	ldr	r5, [r4, #20]
 80184be:	2302      	movs	r3, #2
 80184c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80184c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80184c8:	f108 0301 	add.w	r3, r8, #1
 80184cc:	443b      	add	r3, r7
 80184ce:	429d      	cmp	r5, r3
 80184d0:	bf38      	it	cc
 80184d2:	461d      	movcc	r5, r3
 80184d4:	0553      	lsls	r3, r2, #21
 80184d6:	d531      	bpl.n	801853c <__ssputs_r+0xa0>
 80184d8:	4629      	mov	r1, r5
 80184da:	f7ff f977 	bl	80177cc <_malloc_r>
 80184de:	4606      	mov	r6, r0
 80184e0:	b950      	cbnz	r0, 80184f8 <__ssputs_r+0x5c>
 80184e2:	230c      	movs	r3, #12
 80184e4:	f8ca 3000 	str.w	r3, [sl]
 80184e8:	89a3      	ldrh	r3, [r4, #12]
 80184ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184ee:	81a3      	strh	r3, [r4, #12]
 80184f0:	f04f 30ff 	mov.w	r0, #4294967295
 80184f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184f8:	463a      	mov	r2, r7
 80184fa:	6921      	ldr	r1, [r4, #16]
 80184fc:	f7ff f905 	bl	801770a <memcpy>
 8018500:	89a3      	ldrh	r3, [r4, #12]
 8018502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801850a:	81a3      	strh	r3, [r4, #12]
 801850c:	6126      	str	r6, [r4, #16]
 801850e:	6165      	str	r5, [r4, #20]
 8018510:	443e      	add	r6, r7
 8018512:	1bed      	subs	r5, r5, r7
 8018514:	6026      	str	r6, [r4, #0]
 8018516:	60a5      	str	r5, [r4, #8]
 8018518:	4646      	mov	r6, r8
 801851a:	4546      	cmp	r6, r8
 801851c:	bf28      	it	cs
 801851e:	4646      	movcs	r6, r8
 8018520:	4632      	mov	r2, r6
 8018522:	4649      	mov	r1, r9
 8018524:	6820      	ldr	r0, [r4, #0]
 8018526:	f7ff ff77 	bl	8018418 <memmove>
 801852a:	68a3      	ldr	r3, [r4, #8]
 801852c:	1b9b      	subs	r3, r3, r6
 801852e:	60a3      	str	r3, [r4, #8]
 8018530:	6823      	ldr	r3, [r4, #0]
 8018532:	441e      	add	r6, r3
 8018534:	6026      	str	r6, [r4, #0]
 8018536:	2000      	movs	r0, #0
 8018538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801853c:	462a      	mov	r2, r5
 801853e:	f7ff ff87 	bl	8018450 <_realloc_r>
 8018542:	4606      	mov	r6, r0
 8018544:	2800      	cmp	r0, #0
 8018546:	d1e1      	bne.n	801850c <__ssputs_r+0x70>
 8018548:	6921      	ldr	r1, [r4, #16]
 801854a:	4650      	mov	r0, sl
 801854c:	f7ff f8f0 	bl	8017730 <_free_r>
 8018550:	e7c7      	b.n	80184e2 <__ssputs_r+0x46>
	...

08018554 <_svfiprintf_r>:
 8018554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018558:	b09d      	sub	sp, #116	; 0x74
 801855a:	4680      	mov	r8, r0
 801855c:	9303      	str	r3, [sp, #12]
 801855e:	898b      	ldrh	r3, [r1, #12]
 8018560:	061c      	lsls	r4, r3, #24
 8018562:	460d      	mov	r5, r1
 8018564:	4616      	mov	r6, r2
 8018566:	d50f      	bpl.n	8018588 <_svfiprintf_r+0x34>
 8018568:	690b      	ldr	r3, [r1, #16]
 801856a:	b96b      	cbnz	r3, 8018588 <_svfiprintf_r+0x34>
 801856c:	2140      	movs	r1, #64	; 0x40
 801856e:	f7ff f92d 	bl	80177cc <_malloc_r>
 8018572:	6028      	str	r0, [r5, #0]
 8018574:	6128      	str	r0, [r5, #16]
 8018576:	b928      	cbnz	r0, 8018584 <_svfiprintf_r+0x30>
 8018578:	230c      	movs	r3, #12
 801857a:	f8c8 3000 	str.w	r3, [r8]
 801857e:	f04f 30ff 	mov.w	r0, #4294967295
 8018582:	e0c5      	b.n	8018710 <_svfiprintf_r+0x1bc>
 8018584:	2340      	movs	r3, #64	; 0x40
 8018586:	616b      	str	r3, [r5, #20]
 8018588:	2300      	movs	r3, #0
 801858a:	9309      	str	r3, [sp, #36]	; 0x24
 801858c:	2320      	movs	r3, #32
 801858e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018592:	2330      	movs	r3, #48	; 0x30
 8018594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018598:	f04f 0b01 	mov.w	fp, #1
 801859c:	4637      	mov	r7, r6
 801859e:	463c      	mov	r4, r7
 80185a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d13c      	bne.n	8018622 <_svfiprintf_r+0xce>
 80185a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80185ac:	d00b      	beq.n	80185c6 <_svfiprintf_r+0x72>
 80185ae:	4653      	mov	r3, sl
 80185b0:	4632      	mov	r2, r6
 80185b2:	4629      	mov	r1, r5
 80185b4:	4640      	mov	r0, r8
 80185b6:	f7ff ff71 	bl	801849c <__ssputs_r>
 80185ba:	3001      	adds	r0, #1
 80185bc:	f000 80a3 	beq.w	8018706 <_svfiprintf_r+0x1b2>
 80185c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185c2:	4453      	add	r3, sl
 80185c4:	9309      	str	r3, [sp, #36]	; 0x24
 80185c6:	783b      	ldrb	r3, [r7, #0]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	f000 809c 	beq.w	8018706 <_svfiprintf_r+0x1b2>
 80185ce:	2300      	movs	r3, #0
 80185d0:	f04f 32ff 	mov.w	r2, #4294967295
 80185d4:	9304      	str	r3, [sp, #16]
 80185d6:	9307      	str	r3, [sp, #28]
 80185d8:	9205      	str	r2, [sp, #20]
 80185da:	9306      	str	r3, [sp, #24]
 80185dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80185e0:	931a      	str	r3, [sp, #104]	; 0x68
 80185e2:	2205      	movs	r2, #5
 80185e4:	7821      	ldrb	r1, [r4, #0]
 80185e6:	4850      	ldr	r0, [pc, #320]	; (8018728 <_svfiprintf_r+0x1d4>)
 80185e8:	f7e7 fe12 	bl	8000210 <memchr>
 80185ec:	1c67      	adds	r7, r4, #1
 80185ee:	9b04      	ldr	r3, [sp, #16]
 80185f0:	b9d8      	cbnz	r0, 801862a <_svfiprintf_r+0xd6>
 80185f2:	06d9      	lsls	r1, r3, #27
 80185f4:	bf44      	itt	mi
 80185f6:	2220      	movmi	r2, #32
 80185f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80185fc:	071a      	lsls	r2, r3, #28
 80185fe:	bf44      	itt	mi
 8018600:	222b      	movmi	r2, #43	; 0x2b
 8018602:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018606:	7822      	ldrb	r2, [r4, #0]
 8018608:	2a2a      	cmp	r2, #42	; 0x2a
 801860a:	d016      	beq.n	801863a <_svfiprintf_r+0xe6>
 801860c:	9a07      	ldr	r2, [sp, #28]
 801860e:	2100      	movs	r1, #0
 8018610:	200a      	movs	r0, #10
 8018612:	4627      	mov	r7, r4
 8018614:	3401      	adds	r4, #1
 8018616:	783b      	ldrb	r3, [r7, #0]
 8018618:	3b30      	subs	r3, #48	; 0x30
 801861a:	2b09      	cmp	r3, #9
 801861c:	d951      	bls.n	80186c2 <_svfiprintf_r+0x16e>
 801861e:	b1c9      	cbz	r1, 8018654 <_svfiprintf_r+0x100>
 8018620:	e011      	b.n	8018646 <_svfiprintf_r+0xf2>
 8018622:	2b25      	cmp	r3, #37	; 0x25
 8018624:	d0c0      	beq.n	80185a8 <_svfiprintf_r+0x54>
 8018626:	4627      	mov	r7, r4
 8018628:	e7b9      	b.n	801859e <_svfiprintf_r+0x4a>
 801862a:	4a3f      	ldr	r2, [pc, #252]	; (8018728 <_svfiprintf_r+0x1d4>)
 801862c:	1a80      	subs	r0, r0, r2
 801862e:	fa0b f000 	lsl.w	r0, fp, r0
 8018632:	4318      	orrs	r0, r3
 8018634:	9004      	str	r0, [sp, #16]
 8018636:	463c      	mov	r4, r7
 8018638:	e7d3      	b.n	80185e2 <_svfiprintf_r+0x8e>
 801863a:	9a03      	ldr	r2, [sp, #12]
 801863c:	1d11      	adds	r1, r2, #4
 801863e:	6812      	ldr	r2, [r2, #0]
 8018640:	9103      	str	r1, [sp, #12]
 8018642:	2a00      	cmp	r2, #0
 8018644:	db01      	blt.n	801864a <_svfiprintf_r+0xf6>
 8018646:	9207      	str	r2, [sp, #28]
 8018648:	e004      	b.n	8018654 <_svfiprintf_r+0x100>
 801864a:	4252      	negs	r2, r2
 801864c:	f043 0302 	orr.w	r3, r3, #2
 8018650:	9207      	str	r2, [sp, #28]
 8018652:	9304      	str	r3, [sp, #16]
 8018654:	783b      	ldrb	r3, [r7, #0]
 8018656:	2b2e      	cmp	r3, #46	; 0x2e
 8018658:	d10e      	bne.n	8018678 <_svfiprintf_r+0x124>
 801865a:	787b      	ldrb	r3, [r7, #1]
 801865c:	2b2a      	cmp	r3, #42	; 0x2a
 801865e:	f107 0101 	add.w	r1, r7, #1
 8018662:	d132      	bne.n	80186ca <_svfiprintf_r+0x176>
 8018664:	9b03      	ldr	r3, [sp, #12]
 8018666:	1d1a      	adds	r2, r3, #4
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	9203      	str	r2, [sp, #12]
 801866c:	2b00      	cmp	r3, #0
 801866e:	bfb8      	it	lt
 8018670:	f04f 33ff 	movlt.w	r3, #4294967295
 8018674:	3702      	adds	r7, #2
 8018676:	9305      	str	r3, [sp, #20]
 8018678:	4c2c      	ldr	r4, [pc, #176]	; (801872c <_svfiprintf_r+0x1d8>)
 801867a:	7839      	ldrb	r1, [r7, #0]
 801867c:	2203      	movs	r2, #3
 801867e:	4620      	mov	r0, r4
 8018680:	f7e7 fdc6 	bl	8000210 <memchr>
 8018684:	b138      	cbz	r0, 8018696 <_svfiprintf_r+0x142>
 8018686:	2340      	movs	r3, #64	; 0x40
 8018688:	1b00      	subs	r0, r0, r4
 801868a:	fa03 f000 	lsl.w	r0, r3, r0
 801868e:	9b04      	ldr	r3, [sp, #16]
 8018690:	4303      	orrs	r3, r0
 8018692:	9304      	str	r3, [sp, #16]
 8018694:	3701      	adds	r7, #1
 8018696:	7839      	ldrb	r1, [r7, #0]
 8018698:	4825      	ldr	r0, [pc, #148]	; (8018730 <_svfiprintf_r+0x1dc>)
 801869a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801869e:	2206      	movs	r2, #6
 80186a0:	1c7e      	adds	r6, r7, #1
 80186a2:	f7e7 fdb5 	bl	8000210 <memchr>
 80186a6:	2800      	cmp	r0, #0
 80186a8:	d035      	beq.n	8018716 <_svfiprintf_r+0x1c2>
 80186aa:	4b22      	ldr	r3, [pc, #136]	; (8018734 <_svfiprintf_r+0x1e0>)
 80186ac:	b9fb      	cbnz	r3, 80186ee <_svfiprintf_r+0x19a>
 80186ae:	9b03      	ldr	r3, [sp, #12]
 80186b0:	3307      	adds	r3, #7
 80186b2:	f023 0307 	bic.w	r3, r3, #7
 80186b6:	3308      	adds	r3, #8
 80186b8:	9303      	str	r3, [sp, #12]
 80186ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186bc:	444b      	add	r3, r9
 80186be:	9309      	str	r3, [sp, #36]	; 0x24
 80186c0:	e76c      	b.n	801859c <_svfiprintf_r+0x48>
 80186c2:	fb00 3202 	mla	r2, r0, r2, r3
 80186c6:	2101      	movs	r1, #1
 80186c8:	e7a3      	b.n	8018612 <_svfiprintf_r+0xbe>
 80186ca:	2300      	movs	r3, #0
 80186cc:	9305      	str	r3, [sp, #20]
 80186ce:	4618      	mov	r0, r3
 80186d0:	240a      	movs	r4, #10
 80186d2:	460f      	mov	r7, r1
 80186d4:	3101      	adds	r1, #1
 80186d6:	783a      	ldrb	r2, [r7, #0]
 80186d8:	3a30      	subs	r2, #48	; 0x30
 80186da:	2a09      	cmp	r2, #9
 80186dc:	d903      	bls.n	80186e6 <_svfiprintf_r+0x192>
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d0ca      	beq.n	8018678 <_svfiprintf_r+0x124>
 80186e2:	9005      	str	r0, [sp, #20]
 80186e4:	e7c8      	b.n	8018678 <_svfiprintf_r+0x124>
 80186e6:	fb04 2000 	mla	r0, r4, r0, r2
 80186ea:	2301      	movs	r3, #1
 80186ec:	e7f1      	b.n	80186d2 <_svfiprintf_r+0x17e>
 80186ee:	ab03      	add	r3, sp, #12
 80186f0:	9300      	str	r3, [sp, #0]
 80186f2:	462a      	mov	r2, r5
 80186f4:	4b10      	ldr	r3, [pc, #64]	; (8018738 <_svfiprintf_r+0x1e4>)
 80186f6:	a904      	add	r1, sp, #16
 80186f8:	4640      	mov	r0, r8
 80186fa:	f3af 8000 	nop.w
 80186fe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018702:	4681      	mov	r9, r0
 8018704:	d1d9      	bne.n	80186ba <_svfiprintf_r+0x166>
 8018706:	89ab      	ldrh	r3, [r5, #12]
 8018708:	065b      	lsls	r3, r3, #25
 801870a:	f53f af38 	bmi.w	801857e <_svfiprintf_r+0x2a>
 801870e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018710:	b01d      	add	sp, #116	; 0x74
 8018712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018716:	ab03      	add	r3, sp, #12
 8018718:	9300      	str	r3, [sp, #0]
 801871a:	462a      	mov	r2, r5
 801871c:	4b06      	ldr	r3, [pc, #24]	; (8018738 <_svfiprintf_r+0x1e4>)
 801871e:	a904      	add	r1, sp, #16
 8018720:	4640      	mov	r0, r8
 8018722:	f7ff fa67 	bl	8017bf4 <_printf_i>
 8018726:	e7ea      	b.n	80186fe <_svfiprintf_r+0x1aa>
 8018728:	0801cc58 	.word	0x0801cc58
 801872c:	0801cc5e 	.word	0x0801cc5e
 8018730:	0801cc62 	.word	0x0801cc62
 8018734:	00000000 	.word	0x00000000
 8018738:	0801849d 	.word	0x0801849d

0801873c <_raise_r>:
 801873c:	291f      	cmp	r1, #31
 801873e:	b538      	push	{r3, r4, r5, lr}
 8018740:	4604      	mov	r4, r0
 8018742:	460d      	mov	r5, r1
 8018744:	d904      	bls.n	8018750 <_raise_r+0x14>
 8018746:	2316      	movs	r3, #22
 8018748:	6003      	str	r3, [r0, #0]
 801874a:	f04f 30ff 	mov.w	r0, #4294967295
 801874e:	bd38      	pop	{r3, r4, r5, pc}
 8018750:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018752:	b112      	cbz	r2, 801875a <_raise_r+0x1e>
 8018754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018758:	b94b      	cbnz	r3, 801876e <_raise_r+0x32>
 801875a:	4620      	mov	r0, r4
 801875c:	f000 f830 	bl	80187c0 <_getpid_r>
 8018760:	462a      	mov	r2, r5
 8018762:	4601      	mov	r1, r0
 8018764:	4620      	mov	r0, r4
 8018766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801876a:	f000 b817 	b.w	801879c <_kill_r>
 801876e:	2b01      	cmp	r3, #1
 8018770:	d00a      	beq.n	8018788 <_raise_r+0x4c>
 8018772:	1c59      	adds	r1, r3, #1
 8018774:	d103      	bne.n	801877e <_raise_r+0x42>
 8018776:	2316      	movs	r3, #22
 8018778:	6003      	str	r3, [r0, #0]
 801877a:	2001      	movs	r0, #1
 801877c:	bd38      	pop	{r3, r4, r5, pc}
 801877e:	2400      	movs	r4, #0
 8018780:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018784:	4628      	mov	r0, r5
 8018786:	4798      	blx	r3
 8018788:	2000      	movs	r0, #0
 801878a:	bd38      	pop	{r3, r4, r5, pc}

0801878c <raise>:
 801878c:	4b02      	ldr	r3, [pc, #8]	; (8018798 <raise+0xc>)
 801878e:	4601      	mov	r1, r0
 8018790:	6818      	ldr	r0, [r3, #0]
 8018792:	f7ff bfd3 	b.w	801873c <_raise_r>
 8018796:	bf00      	nop
 8018798:	20000054 	.word	0x20000054

0801879c <_kill_r>:
 801879c:	b538      	push	{r3, r4, r5, lr}
 801879e:	4c07      	ldr	r4, [pc, #28]	; (80187bc <_kill_r+0x20>)
 80187a0:	2300      	movs	r3, #0
 80187a2:	4605      	mov	r5, r0
 80187a4:	4608      	mov	r0, r1
 80187a6:	4611      	mov	r1, r2
 80187a8:	6023      	str	r3, [r4, #0]
 80187aa:	f7e8 fecd 	bl	8001548 <_kill>
 80187ae:	1c43      	adds	r3, r0, #1
 80187b0:	d102      	bne.n	80187b8 <_kill_r+0x1c>
 80187b2:	6823      	ldr	r3, [r4, #0]
 80187b4:	b103      	cbz	r3, 80187b8 <_kill_r+0x1c>
 80187b6:	602b      	str	r3, [r5, #0]
 80187b8:	bd38      	pop	{r3, r4, r5, pc}
 80187ba:	bf00      	nop
 80187bc:	200007dc 	.word	0x200007dc

080187c0 <_getpid_r>:
 80187c0:	f7e8 beba 	b.w	8001538 <_getpid>

080187c4 <__sread>:
 80187c4:	b510      	push	{r4, lr}
 80187c6:	460c      	mov	r4, r1
 80187c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187cc:	f000 f89e 	bl	801890c <_read_r>
 80187d0:	2800      	cmp	r0, #0
 80187d2:	bfab      	itete	ge
 80187d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80187d6:	89a3      	ldrhlt	r3, [r4, #12]
 80187d8:	181b      	addge	r3, r3, r0
 80187da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80187de:	bfac      	ite	ge
 80187e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80187e2:	81a3      	strhlt	r3, [r4, #12]
 80187e4:	bd10      	pop	{r4, pc}

080187e6 <__swrite>:
 80187e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187ea:	461f      	mov	r7, r3
 80187ec:	898b      	ldrh	r3, [r1, #12]
 80187ee:	05db      	lsls	r3, r3, #23
 80187f0:	4605      	mov	r5, r0
 80187f2:	460c      	mov	r4, r1
 80187f4:	4616      	mov	r6, r2
 80187f6:	d505      	bpl.n	8018804 <__swrite+0x1e>
 80187f8:	2302      	movs	r3, #2
 80187fa:	2200      	movs	r2, #0
 80187fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018800:	f000 f868 	bl	80188d4 <_lseek_r>
 8018804:	89a3      	ldrh	r3, [r4, #12]
 8018806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801880a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801880e:	81a3      	strh	r3, [r4, #12]
 8018810:	4632      	mov	r2, r6
 8018812:	463b      	mov	r3, r7
 8018814:	4628      	mov	r0, r5
 8018816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801881a:	f000 b817 	b.w	801884c <_write_r>

0801881e <__sseek>:
 801881e:	b510      	push	{r4, lr}
 8018820:	460c      	mov	r4, r1
 8018822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018826:	f000 f855 	bl	80188d4 <_lseek_r>
 801882a:	1c43      	adds	r3, r0, #1
 801882c:	89a3      	ldrh	r3, [r4, #12]
 801882e:	bf15      	itete	ne
 8018830:	6560      	strne	r0, [r4, #84]	; 0x54
 8018832:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018836:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801883a:	81a3      	strheq	r3, [r4, #12]
 801883c:	bf18      	it	ne
 801883e:	81a3      	strhne	r3, [r4, #12]
 8018840:	bd10      	pop	{r4, pc}

08018842 <__sclose>:
 8018842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018846:	f000 b813 	b.w	8018870 <_close_r>
	...

0801884c <_write_r>:
 801884c:	b538      	push	{r3, r4, r5, lr}
 801884e:	4c07      	ldr	r4, [pc, #28]	; (801886c <_write_r+0x20>)
 8018850:	4605      	mov	r5, r0
 8018852:	4608      	mov	r0, r1
 8018854:	4611      	mov	r1, r2
 8018856:	2200      	movs	r2, #0
 8018858:	6022      	str	r2, [r4, #0]
 801885a:	461a      	mov	r2, r3
 801885c:	f7e8 feab 	bl	80015b6 <_write>
 8018860:	1c43      	adds	r3, r0, #1
 8018862:	d102      	bne.n	801886a <_write_r+0x1e>
 8018864:	6823      	ldr	r3, [r4, #0]
 8018866:	b103      	cbz	r3, 801886a <_write_r+0x1e>
 8018868:	602b      	str	r3, [r5, #0]
 801886a:	bd38      	pop	{r3, r4, r5, pc}
 801886c:	200007dc 	.word	0x200007dc

08018870 <_close_r>:
 8018870:	b538      	push	{r3, r4, r5, lr}
 8018872:	4c06      	ldr	r4, [pc, #24]	; (801888c <_close_r+0x1c>)
 8018874:	2300      	movs	r3, #0
 8018876:	4605      	mov	r5, r0
 8018878:	4608      	mov	r0, r1
 801887a:	6023      	str	r3, [r4, #0]
 801887c:	f7e8 fee4 	bl	8001648 <_close>
 8018880:	1c43      	adds	r3, r0, #1
 8018882:	d102      	bne.n	801888a <_close_r+0x1a>
 8018884:	6823      	ldr	r3, [r4, #0]
 8018886:	b103      	cbz	r3, 801888a <_close_r+0x1a>
 8018888:	602b      	str	r3, [r5, #0]
 801888a:	bd38      	pop	{r3, r4, r5, pc}
 801888c:	200007dc 	.word	0x200007dc

08018890 <_fstat_r>:
 8018890:	b538      	push	{r3, r4, r5, lr}
 8018892:	4c07      	ldr	r4, [pc, #28]	; (80188b0 <_fstat_r+0x20>)
 8018894:	2300      	movs	r3, #0
 8018896:	4605      	mov	r5, r0
 8018898:	4608      	mov	r0, r1
 801889a:	4611      	mov	r1, r2
 801889c:	6023      	str	r3, [r4, #0]
 801889e:	f7e8 fedf 	bl	8001660 <_fstat>
 80188a2:	1c43      	adds	r3, r0, #1
 80188a4:	d102      	bne.n	80188ac <_fstat_r+0x1c>
 80188a6:	6823      	ldr	r3, [r4, #0]
 80188a8:	b103      	cbz	r3, 80188ac <_fstat_r+0x1c>
 80188aa:	602b      	str	r3, [r5, #0]
 80188ac:	bd38      	pop	{r3, r4, r5, pc}
 80188ae:	bf00      	nop
 80188b0:	200007dc 	.word	0x200007dc

080188b4 <_isatty_r>:
 80188b4:	b538      	push	{r3, r4, r5, lr}
 80188b6:	4c06      	ldr	r4, [pc, #24]	; (80188d0 <_isatty_r+0x1c>)
 80188b8:	2300      	movs	r3, #0
 80188ba:	4605      	mov	r5, r0
 80188bc:	4608      	mov	r0, r1
 80188be:	6023      	str	r3, [r4, #0]
 80188c0:	f7e8 fede 	bl	8001680 <_isatty>
 80188c4:	1c43      	adds	r3, r0, #1
 80188c6:	d102      	bne.n	80188ce <_isatty_r+0x1a>
 80188c8:	6823      	ldr	r3, [r4, #0]
 80188ca:	b103      	cbz	r3, 80188ce <_isatty_r+0x1a>
 80188cc:	602b      	str	r3, [r5, #0]
 80188ce:	bd38      	pop	{r3, r4, r5, pc}
 80188d0:	200007dc 	.word	0x200007dc

080188d4 <_lseek_r>:
 80188d4:	b538      	push	{r3, r4, r5, lr}
 80188d6:	4c07      	ldr	r4, [pc, #28]	; (80188f4 <_lseek_r+0x20>)
 80188d8:	4605      	mov	r5, r0
 80188da:	4608      	mov	r0, r1
 80188dc:	4611      	mov	r1, r2
 80188de:	2200      	movs	r2, #0
 80188e0:	6022      	str	r2, [r4, #0]
 80188e2:	461a      	mov	r2, r3
 80188e4:	f7e8 fed7 	bl	8001696 <_lseek>
 80188e8:	1c43      	adds	r3, r0, #1
 80188ea:	d102      	bne.n	80188f2 <_lseek_r+0x1e>
 80188ec:	6823      	ldr	r3, [r4, #0]
 80188ee:	b103      	cbz	r3, 80188f2 <_lseek_r+0x1e>
 80188f0:	602b      	str	r3, [r5, #0]
 80188f2:	bd38      	pop	{r3, r4, r5, pc}
 80188f4:	200007dc 	.word	0x200007dc

080188f8 <_malloc_usable_size_r>:
 80188f8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80188fc:	2800      	cmp	r0, #0
 80188fe:	f1a0 0004 	sub.w	r0, r0, #4
 8018902:	bfbc      	itt	lt
 8018904:	580b      	ldrlt	r3, [r1, r0]
 8018906:	18c0      	addlt	r0, r0, r3
 8018908:	4770      	bx	lr
	...

0801890c <_read_r>:
 801890c:	b538      	push	{r3, r4, r5, lr}
 801890e:	4c07      	ldr	r4, [pc, #28]	; (801892c <_read_r+0x20>)
 8018910:	4605      	mov	r5, r0
 8018912:	4608      	mov	r0, r1
 8018914:	4611      	mov	r1, r2
 8018916:	2200      	movs	r2, #0
 8018918:	6022      	str	r2, [r4, #0]
 801891a:	461a      	mov	r2, r3
 801891c:	f7e8 fe2e 	bl	800157c <_read>
 8018920:	1c43      	adds	r3, r0, #1
 8018922:	d102      	bne.n	801892a <_read_r+0x1e>
 8018924:	6823      	ldr	r3, [r4, #0]
 8018926:	b103      	cbz	r3, 801892a <_read_r+0x1e>
 8018928:	602b      	str	r3, [r5, #0]
 801892a:	bd38      	pop	{r3, r4, r5, pc}
 801892c:	200007dc 	.word	0x200007dc

08018930 <_init>:
 8018930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018932:	bf00      	nop
 8018934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018936:	bc08      	pop	{r3}
 8018938:	469e      	mov	lr, r3
 801893a:	4770      	bx	lr

0801893c <_fini>:
 801893c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801893e:	bf00      	nop
 8018940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018942:	bc08      	pop	{r3}
 8018944:	469e      	mov	lr, r3
 8018946:	4770      	bx	lr
